                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.3.0 #8604 (May 11 2013) (Linux)
                              4 ; This file was generated Sun Nov 24 17:43:13 2013
                              5 ;--------------------------------------------------------
                              6 	.module radio
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _Receiver_ISR
                             13 	.globl _crc16
                             14 	.globl _golay_decode
                             15 	.globl _golay_encode
                             16 	.globl _delay_msec
                             17 	.globl _delay_expired
                             18 	.globl _delay_set
                             19 	.globl _timer2_tick
                             20 	.globl _panic
                             21 	.globl _param_get
                             22 	.globl _memcpy
                             23 	.globl _NSS1
                             24 	.globl _IRQ
                             25 	.globl _PIN_ENABLE
                             26 	.globl _PIN_CONFIG
                             27 	.globl _LED_GREEN
                             28 	.globl _LED_RED
                             29 	.globl _SPI0EN
                             30 	.globl _TXBMT0
                             31 	.globl _NSS0MD0
                             32 	.globl _NSS0MD1
                             33 	.globl _RXOVRN0
                             34 	.globl _MODF0
                             35 	.globl _WCOL0
                             36 	.globl _SPIF0
                             37 	.globl _AD0CM0
                             38 	.globl _AD0CM1
                             39 	.globl _AD0CM2
                             40 	.globl _AD0WINT
                             41 	.globl _AD0BUSY
                             42 	.globl _AD0INT
                             43 	.globl _BURSTEN
                             44 	.globl _AD0EN
                             45 	.globl _CCF0
                             46 	.globl _CCF1
                             47 	.globl _CCF2
                             48 	.globl _CCF3
                             49 	.globl _CCF4
                             50 	.globl _CCF5
                             51 	.globl _CR
                             52 	.globl _CF
                             53 	.globl _P
                             54 	.globl _F1
                             55 	.globl _OV
                             56 	.globl _RS0
                             57 	.globl _RS1
                             58 	.globl _F0
                             59 	.globl _AC
                             60 	.globl _CY
                             61 	.globl _T2XCLK
                             62 	.globl _T2RCLK
                             63 	.globl _TR2
                             64 	.globl _T2SPLIT
                             65 	.globl _TF2CEN
                             66 	.globl _TF2LEN
                             67 	.globl _TF2L
                             68 	.globl _TF2H
                             69 	.globl _SI
                             70 	.globl _ACK
                             71 	.globl _ARBLOST
                             72 	.globl _ACKRQ
                             73 	.globl _STO
                             74 	.globl _STA
                             75 	.globl _TXMODE
                             76 	.globl _MASTER
                             77 	.globl _PX0
                             78 	.globl _PT0
                             79 	.globl _PX1
                             80 	.globl _PT1
                             81 	.globl _PS0
                             82 	.globl _PT2
                             83 	.globl _PSPI0
                             84 	.globl _SPI1EN
                             85 	.globl _TXBMT1
                             86 	.globl _NSS1MD0
                             87 	.globl _NSS1MD1
                             88 	.globl _RXOVRN1
                             89 	.globl _MODF1
                             90 	.globl _WCOL1
                             91 	.globl _SPIF1
                             92 	.globl _EX0
                             93 	.globl _ET0
                             94 	.globl _EX1
                             95 	.globl _ET1
                             96 	.globl _ES0
                             97 	.globl _ET2
                             98 	.globl _ESPI0
                             99 	.globl _EA
                            100 	.globl _RI0
                            101 	.globl _TI0
                            102 	.globl _RB80
                            103 	.globl _TB80
                            104 	.globl _REN0
                            105 	.globl _MCE0
                            106 	.globl _S0MODE
                            107 	.globl _CRC0VAL
                            108 	.globl _CRC0INIT
                            109 	.globl _CRC0SEL
                            110 	.globl _IT0
                            111 	.globl _IE0
                            112 	.globl _IT1
                            113 	.globl _IE1
                            114 	.globl _TR0
                            115 	.globl _TF0
                            116 	.globl _TR1
                            117 	.globl _TF1
                            118 	.globl _PCA0CP4
                            119 	.globl _PCA0CP0
                            120 	.globl _PCA0
                            121 	.globl _PCA0CP3
                            122 	.globl _PCA0CP2
                            123 	.globl _PCA0CP1
                            124 	.globl _PCA0CP5
                            125 	.globl _TMR2
                            126 	.globl _TMR2RL
                            127 	.globl _ADC0LT
                            128 	.globl _ADC0GT
                            129 	.globl _ADC0
                            130 	.globl _TMR3
                            131 	.globl _TMR3RL
                            132 	.globl _TOFF
                            133 	.globl _DP
                            134 	.globl _VDM0CN
                            135 	.globl _PCA0CPH4
                            136 	.globl _PCA0CPL4
                            137 	.globl _PCA0CPH0
                            138 	.globl _PCA0CPL0
                            139 	.globl _PCA0H
                            140 	.globl _PCA0L
                            141 	.globl _SPI0CN
                            142 	.globl _EIP2
                            143 	.globl _EIP1
                            144 	.globl _SMB0ADM
                            145 	.globl _SMB0ADR
                            146 	.globl _P2MDIN
                            147 	.globl _P1MDIN
                            148 	.globl _P0MDIN
                            149 	.globl _B
                            150 	.globl _RSTSRC
                            151 	.globl _PCA0CPH3
                            152 	.globl _PCA0CPL3
                            153 	.globl _PCA0CPH2
                            154 	.globl _PCA0CPL2
                            155 	.globl _PCA0CPH1
                            156 	.globl _PCA0CPL1
                            157 	.globl _ADC0CN
                            158 	.globl _EIE2
                            159 	.globl _EIE1
                            160 	.globl _FLWR
                            161 	.globl _IT01CF
                            162 	.globl _XBR2
                            163 	.globl _XBR1
                            164 	.globl _XBR0
                            165 	.globl _ACC
                            166 	.globl _PCA0PWM
                            167 	.globl _PCA0CPM4
                            168 	.globl _PCA0CPM3
                            169 	.globl _PCA0CPM2
                            170 	.globl _PCA0CPM1
                            171 	.globl _PCA0CPM0
                            172 	.globl _PCA0MD
                            173 	.globl _PCA0CN
                            174 	.globl _P0MAT
                            175 	.globl _P2SKIP
                            176 	.globl _P1SKIP
                            177 	.globl _P0SKIP
                            178 	.globl _PCA0CPH5
                            179 	.globl _PCA0CPL5
                            180 	.globl _REF0CN
                            181 	.globl _PSW
                            182 	.globl _P1MAT
                            183 	.globl _PCA0CPM5
                            184 	.globl _TMR2H
                            185 	.globl _TMR2L
                            186 	.globl _TMR2RLH
                            187 	.globl _TMR2RLL
                            188 	.globl _REG0CN
                            189 	.globl _TMR2CN
                            190 	.globl _P0MASK
                            191 	.globl _ADC0LTH
                            192 	.globl _ADC0LTL
                            193 	.globl _ADC0GTH
                            194 	.globl _ADC0GTL
                            195 	.globl _SMB0DAT
                            196 	.globl _SMB0CF
                            197 	.globl _SMB0CN
                            198 	.globl _P1MASK
                            199 	.globl _ADC0H
                            200 	.globl _ADC0L
                            201 	.globl _ADC0TK
                            202 	.globl _ADC0CF
                            203 	.globl _ADC0MX
                            204 	.globl _ADC0PWR
                            205 	.globl _ADC0AC
                            206 	.globl _IREF0CN
                            207 	.globl _IP
                            208 	.globl _FLKEY
                            209 	.globl _FLSCL
                            210 	.globl _PMU0CF
                            211 	.globl _OSCICL
                            212 	.globl _OSCICN
                            213 	.globl _OSCXCN
                            214 	.globl _SPI1CN
                            215 	.globl _ONESHOT
                            216 	.globl _EMI0TC
                            217 	.globl _RTC0KEY
                            218 	.globl _RTC0DAT
                            219 	.globl _RTC0ADR
                            220 	.globl _EMI0CF
                            221 	.globl _EMI0CN
                            222 	.globl _CLKSEL
                            223 	.globl _IE
                            224 	.globl _SFRPAGE
                            225 	.globl _P2DRV
                            226 	.globl _P2MDOUT
                            227 	.globl _P1DRV
                            228 	.globl _P1MDOUT
                            229 	.globl _P0DRV
                            230 	.globl _P0MDOUT
                            231 	.globl _SPI0DAT
                            232 	.globl _SPI0CKR
                            233 	.globl _SPI0CFG
                            234 	.globl _P2
                            235 	.globl _CPT0MX
                            236 	.globl _CPT1MX
                            237 	.globl _CPT0MD
                            238 	.globl _CPT1MD
                            239 	.globl _CPT0CN
                            240 	.globl _CPT1CN
                            241 	.globl _SBUF0
                            242 	.globl _SCON0
                            243 	.globl _CRC0CNT
                            244 	.globl _DC0CN
                            245 	.globl _CRC0AUTO
                            246 	.globl _DC0CF
                            247 	.globl _TMR3H
                            248 	.globl _CRC0FLIP
                            249 	.globl _TMR3L
                            250 	.globl _CRC0IN
                            251 	.globl _TMR3RLH
                            252 	.globl _CRC0CN
                            253 	.globl _TMR3RLL
                            254 	.globl _CRC0DAT
                            255 	.globl _TMR3CN
                            256 	.globl _P1
                            257 	.globl _PSCTL
                            258 	.globl _CKCON
                            259 	.globl _TH1
                            260 	.globl _TH0
                            261 	.globl _TL1
                            262 	.globl _TL0
                            263 	.globl _TMOD
                            264 	.globl _TCON
                            265 	.globl _PCON
                            266 	.globl _TOFFH
                            267 	.globl _SPI1DAT
                            268 	.globl _TOFFL
                            269 	.globl _SPI1CKR
                            270 	.globl _SPI1CFG
                            271 	.globl _DPH
                            272 	.globl _DPL
                            273 	.globl _SP
                            274 	.globl _P0
                            275 	.globl _radio_buffer
                            276 	.globl _radio_transmit_PARM_3
                            277 	.globl _radio_transmit_PARM_2
                            278 	.globl _radio_receive_packet_PARM_2
                            279 	.globl _settings
                            280 	.globl _netid
                            281 	.globl _last_rssi
                            282 	.globl _partial_packet_length
                            283 	.globl _receive_packet_length
                            284 	.globl _radio_set_diversity_PARM_1
                            285 	.globl _radio_receive_packet
                            286 	.globl _radio_receive_in_progress
                            287 	.globl _radio_preamble_detected
                            288 	.globl _radio_last_rssi
                            289 	.globl _radio_current_rssi
                            290 	.globl _radio_air_rate
                            291 	.globl _radio_transmit
                            292 	.globl _radio_receiver_on
                            293 	.globl _radio_initialise
                            294 	.globl _radio_set_frequency
                            295 	.globl _radio_set_channel_spacing
                            296 	.globl _radio_set_channel
                            297 	.globl _radio_get_channel
                            298 	.globl _radio_configure
                            299 	.globl _radio_set_transmit_power
                            300 	.globl _radio_get_transmit_power
                            301 	.globl _radio_set_network_id
                            302 	.globl _radio_temperature
                            303 	.globl _radio_set_diversity
                            304 ;--------------------------------------------------------
                            305 ; special function registers
                            306 ;--------------------------------------------------------
                            307 	.area RSEG    (ABS,DATA)
   0000                     308 	.org 0x0000
                     0080   309 _P0	=	0x0080
                     0081   310 _SP	=	0x0081
                     0082   311 _DPL	=	0x0082
                     0083   312 _DPH	=	0x0083
                     0084   313 _SPI1CFG	=	0x0084
                     0085   314 _SPI1CKR	=	0x0085
                     0085   315 _TOFFL	=	0x0085
                     0086   316 _SPI1DAT	=	0x0086
                     0086   317 _TOFFH	=	0x0086
                     0087   318 _PCON	=	0x0087
                     0088   319 _TCON	=	0x0088
                     0089   320 _TMOD	=	0x0089
                     008A   321 _TL0	=	0x008a
                     008B   322 _TL1	=	0x008b
                     008C   323 _TH0	=	0x008c
                     008D   324 _TH1	=	0x008d
                     008E   325 _CKCON	=	0x008e
                     008F   326 _PSCTL	=	0x008f
                     0090   327 _P1	=	0x0090
                     0091   328 _TMR3CN	=	0x0091
                     0091   329 _CRC0DAT	=	0x0091
                     0092   330 _TMR3RLL	=	0x0092
                     0092   331 _CRC0CN	=	0x0092
                     0093   332 _TMR3RLH	=	0x0093
                     0093   333 _CRC0IN	=	0x0093
                     0094   334 _TMR3L	=	0x0094
                     0095   335 _CRC0FLIP	=	0x0095
                     0095   336 _TMR3H	=	0x0095
                     0096   337 _DC0CF	=	0x0096
                     0096   338 _CRC0AUTO	=	0x0096
                     0097   339 _DC0CN	=	0x0097
                     0097   340 _CRC0CNT	=	0x0097
                     0098   341 _SCON0	=	0x0098
                     0099   342 _SBUF0	=	0x0099
                     009A   343 _CPT1CN	=	0x009a
                     009B   344 _CPT0CN	=	0x009b
                     009C   345 _CPT1MD	=	0x009c
                     009D   346 _CPT0MD	=	0x009d
                     009E   347 _CPT1MX	=	0x009e
                     009F   348 _CPT0MX	=	0x009f
                     00A0   349 _P2	=	0x00a0
                     00A1   350 _SPI0CFG	=	0x00a1
                     00A2   351 _SPI0CKR	=	0x00a2
                     00A3   352 _SPI0DAT	=	0x00a3
                     00A4   353 _P0MDOUT	=	0x00a4
                     00A4   354 _P0DRV	=	0x00a4
                     00A5   355 _P1MDOUT	=	0x00a5
                     00A5   356 _P1DRV	=	0x00a5
                     00A6   357 _P2MDOUT	=	0x00a6
                     00A6   358 _P2DRV	=	0x00a6
                     00A7   359 _SFRPAGE	=	0x00a7
                     00A8   360 _IE	=	0x00a8
                     00A9   361 _CLKSEL	=	0x00a9
                     00AA   362 _EMI0CN	=	0x00aa
                     00AB   363 _EMI0CF	=	0x00ab
                     00AC   364 _RTC0ADR	=	0x00ac
                     00AD   365 _RTC0DAT	=	0x00ad
                     00AE   366 _RTC0KEY	=	0x00ae
                     00AF   367 _EMI0TC	=	0x00af
                     00AF   368 _ONESHOT	=	0x00af
                     00B0   369 _SPI1CN	=	0x00b0
                     00B1   370 _OSCXCN	=	0x00b1
                     00B2   371 _OSCICN	=	0x00b2
                     00B3   372 _OSCICL	=	0x00b3
                     00B5   373 _PMU0CF	=	0x00b5
                     00B6   374 _FLSCL	=	0x00b6
                     00B7   375 _FLKEY	=	0x00b7
                     00B8   376 _IP	=	0x00b8
                     00B9   377 _IREF0CN	=	0x00b9
                     00BA   378 _ADC0AC	=	0x00ba
                     00BA   379 _ADC0PWR	=	0x00ba
                     00BB   380 _ADC0MX	=	0x00bb
                     00BC   381 _ADC0CF	=	0x00bc
                     00BD   382 _ADC0TK	=	0x00bd
                     00BD   383 _ADC0L	=	0x00bd
                     00BE   384 _ADC0H	=	0x00be
                     00BF   385 _P1MASK	=	0x00bf
                     00C0   386 _SMB0CN	=	0x00c0
                     00C1   387 _SMB0CF	=	0x00c1
                     00C2   388 _SMB0DAT	=	0x00c2
                     00C3   389 _ADC0GTL	=	0x00c3
                     00C4   390 _ADC0GTH	=	0x00c4
                     00C5   391 _ADC0LTL	=	0x00c5
                     00C6   392 _ADC0LTH	=	0x00c6
                     00C7   393 _P0MASK	=	0x00c7
                     00C8   394 _TMR2CN	=	0x00c8
                     00C9   395 _REG0CN	=	0x00c9
                     00CA   396 _TMR2RLL	=	0x00ca
                     00CB   397 _TMR2RLH	=	0x00cb
                     00CC   398 _TMR2L	=	0x00cc
                     00CD   399 _TMR2H	=	0x00cd
                     00CE   400 _PCA0CPM5	=	0x00ce
                     00CF   401 _P1MAT	=	0x00cf
                     00D0   402 _PSW	=	0x00d0
                     00D1   403 _REF0CN	=	0x00d1
                     00D2   404 _PCA0CPL5	=	0x00d2
                     00D3   405 _PCA0CPH5	=	0x00d3
                     00D4   406 _P0SKIP	=	0x00d4
                     00D5   407 _P1SKIP	=	0x00d5
                     00D6   408 _P2SKIP	=	0x00d6
                     00D7   409 _P0MAT	=	0x00d7
                     00D8   410 _PCA0CN	=	0x00d8
                     00D9   411 _PCA0MD	=	0x00d9
                     00DA   412 _PCA0CPM0	=	0x00da
                     00DB   413 _PCA0CPM1	=	0x00db
                     00DC   414 _PCA0CPM2	=	0x00dc
                     00DD   415 _PCA0CPM3	=	0x00dd
                     00DE   416 _PCA0CPM4	=	0x00de
                     00DF   417 _PCA0PWM	=	0x00df
                     00E0   418 _ACC	=	0x00e0
                     00E1   419 _XBR0	=	0x00e1
                     00E2   420 _XBR1	=	0x00e2
                     00E3   421 _XBR2	=	0x00e3
                     00E4   422 _IT01CF	=	0x00e4
                     00E5   423 _FLWR	=	0x00e5
                     00E6   424 _EIE1	=	0x00e6
                     00E7   425 _EIE2	=	0x00e7
                     00E8   426 _ADC0CN	=	0x00e8
                     00E9   427 _PCA0CPL1	=	0x00e9
                     00EA   428 _PCA0CPH1	=	0x00ea
                     00EB   429 _PCA0CPL2	=	0x00eb
                     00EC   430 _PCA0CPH2	=	0x00ec
                     00ED   431 _PCA0CPL3	=	0x00ed
                     00EE   432 _PCA0CPH3	=	0x00ee
                     00EF   433 _RSTSRC	=	0x00ef
                     00F0   434 _B	=	0x00f0
                     00F1   435 _P0MDIN	=	0x00f1
                     00F2   436 _P1MDIN	=	0x00f2
                     00F3   437 _P2MDIN	=	0x00f3
                     00F4   438 _SMB0ADR	=	0x00f4
                     00F5   439 _SMB0ADM	=	0x00f5
                     00F6   440 _EIP1	=	0x00f6
                     00F7   441 _EIP2	=	0x00f7
                     00F8   442 _SPI0CN	=	0x00f8
                     00F9   443 _PCA0L	=	0x00f9
                     00FA   444 _PCA0H	=	0x00fa
                     00FB   445 _PCA0CPL0	=	0x00fb
                     00FC   446 _PCA0CPH0	=	0x00fc
                     00FD   447 _PCA0CPL4	=	0x00fd
                     00FE   448 _PCA0CPH4	=	0x00fe
                     00FF   449 _VDM0CN	=	0x00ff
                     8382   450 _DP	=	0x8382
                     8685   451 _TOFF	=	0x8685
                     9392   452 _TMR3RL	=	0x9392
                     9594   453 _TMR3	=	0x9594
                     BEBD   454 _ADC0	=	0xbebd
                     C4C3   455 _ADC0GT	=	0xc4c3
                     C6C5   456 _ADC0LT	=	0xc6c5
                     CBCA   457 _TMR2RL	=	0xcbca
                     CDCC   458 _TMR2	=	0xcdcc
                     D3D2   459 _PCA0CP5	=	0xd3d2
                     EAE9   460 _PCA0CP1	=	0xeae9
                     ECEB   461 _PCA0CP2	=	0xeceb
                     EEED   462 _PCA0CP3	=	0xeeed
                     FAF9   463 _PCA0	=	0xfaf9
                     FCFB   464 _PCA0CP0	=	0xfcfb
                     FEFD   465 _PCA0CP4	=	0xfefd
                            466 ;--------------------------------------------------------
                            467 ; special function bits
                            468 ;--------------------------------------------------------
                            469 	.area RSEG    (ABS,DATA)
   0000                     470 	.org 0x0000
                     008F   471 _TF1	=	0x008f
                     008E   472 _TR1	=	0x008e
                     008D   473 _TF0	=	0x008d
                     008C   474 _TR0	=	0x008c
                     008B   475 _IE1	=	0x008b
                     008A   476 _IT1	=	0x008a
                     0089   477 _IE0	=	0x0089
                     0088   478 _IT0	=	0x0088
                     0096   479 _CRC0SEL	=	0x0096
                     0095   480 _CRC0INIT	=	0x0095
                     0094   481 _CRC0VAL	=	0x0094
                     009F   482 _S0MODE	=	0x009f
                     009D   483 _MCE0	=	0x009d
                     009C   484 _REN0	=	0x009c
                     009B   485 _TB80	=	0x009b
                     009A   486 _RB80	=	0x009a
                     0099   487 _TI0	=	0x0099
                     0098   488 _RI0	=	0x0098
                     00AF   489 _EA	=	0x00af
                     00AE   490 _ESPI0	=	0x00ae
                     00AD   491 _ET2	=	0x00ad
                     00AC   492 _ES0	=	0x00ac
                     00AB   493 _ET1	=	0x00ab
                     00AA   494 _EX1	=	0x00aa
                     00A9   495 _ET0	=	0x00a9
                     00A8   496 _EX0	=	0x00a8
                     00B7   497 _SPIF1	=	0x00b7
                     00B6   498 _WCOL1	=	0x00b6
                     00B5   499 _MODF1	=	0x00b5
                     00B4   500 _RXOVRN1	=	0x00b4
                     00B3   501 _NSS1MD1	=	0x00b3
                     00B2   502 _NSS1MD0	=	0x00b2
                     00B1   503 _TXBMT1	=	0x00b1
                     00B0   504 _SPI1EN	=	0x00b0
                     00BE   505 _PSPI0	=	0x00be
                     00BD   506 _PT2	=	0x00bd
                     00BC   507 _PS0	=	0x00bc
                     00BB   508 _PT1	=	0x00bb
                     00BA   509 _PX1	=	0x00ba
                     00B9   510 _PT0	=	0x00b9
                     00B8   511 _PX0	=	0x00b8
                     00C7   512 _MASTER	=	0x00c7
                     00C6   513 _TXMODE	=	0x00c6
                     00C5   514 _STA	=	0x00c5
                     00C4   515 _STO	=	0x00c4
                     00C3   516 _ACKRQ	=	0x00c3
                     00C2   517 _ARBLOST	=	0x00c2
                     00C1   518 _ACK	=	0x00c1
                     00C0   519 _SI	=	0x00c0
                     00CF   520 _TF2H	=	0x00cf
                     00CE   521 _TF2L	=	0x00ce
                     00CD   522 _TF2LEN	=	0x00cd
                     00CC   523 _TF2CEN	=	0x00cc
                     00CB   524 _T2SPLIT	=	0x00cb
                     00CA   525 _TR2	=	0x00ca
                     00C9   526 _T2RCLK	=	0x00c9
                     00C8   527 _T2XCLK	=	0x00c8
                     00D7   528 _CY	=	0x00d7
                     00D6   529 _AC	=	0x00d6
                     00D5   530 _F0	=	0x00d5
                     00D4   531 _RS1	=	0x00d4
                     00D3   532 _RS0	=	0x00d3
                     00D2   533 _OV	=	0x00d2
                     00D1   534 _F1	=	0x00d1
                     00D0   535 _P	=	0x00d0
                     00DF   536 _CF	=	0x00df
                     00DE   537 _CR	=	0x00de
                     00DD   538 _CCF5	=	0x00dd
                     00DC   539 _CCF4	=	0x00dc
                     00DB   540 _CCF3	=	0x00db
                     00DA   541 _CCF2	=	0x00da
                     00D9   542 _CCF1	=	0x00d9
                     00D8   543 _CCF0	=	0x00d8
                     00EF   544 _AD0EN	=	0x00ef
                     00EE   545 _BURSTEN	=	0x00ee
                     00ED   546 _AD0INT	=	0x00ed
                     00EC   547 _AD0BUSY	=	0x00ec
                     00EB   548 _AD0WINT	=	0x00eb
                     00EA   549 _AD0CM2	=	0x00ea
                     00E9   550 _AD0CM1	=	0x00e9
                     00E8   551 _AD0CM0	=	0x00e8
                     00FF   552 _SPIF0	=	0x00ff
                     00FE   553 _WCOL0	=	0x00fe
                     00FD   554 _MODF0	=	0x00fd
                     00FC   555 _RXOVRN0	=	0x00fc
                     00FB   556 _NSS0MD1	=	0x00fb
                     00FA   557 _NSS0MD0	=	0x00fa
                     00F9   558 _TXBMT0	=	0x00f9
                     00F8   559 _SPI0EN	=	0x00f8
                     0096   560 _LED_RED	=	0x0096
                     0095   561 _LED_GREEN	=	0x0095
                     0082   562 _PIN_CONFIG	=	0x0082
                     0083   563 _PIN_ENABLE	=	0x0083
                     0087   564 _IRQ	=	0x0087
                     0094   565 _NSS1	=	0x0094
                            566 ;--------------------------------------------------------
                            567 ; overlayable register banks
                            568 ;--------------------------------------------------------
                            569 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     570 	.ds 8
                            571 ;--------------------------------------------------------
                            572 ; overlayable bit register bank
                            573 ;--------------------------------------------------------
                            574 	.area BIT_BANK	(REL,OVR,DATA)
   0000                     575 bits:
   0000                     576 	.ds 1
                     8000   577 	b0 = bits[0]
                     8100   578 	b1 = bits[1]
                     8200   579 	b2 = bits[2]
                     8300   580 	b3 = bits[3]
                     8400   581 	b4 = bits[4]
                     8500   582 	b5 = bits[5]
                     8600   583 	b6 = bits[6]
                     8700   584 	b7 = bits[7]
                            585 ;--------------------------------------------------------
                            586 ; internal ram data
                            587 ;--------------------------------------------------------
                            588 	.area DSEG    (DATA)
   0000                     589 _radio_receive_packet_crc1_1_135:
   0000                     590 	.ds 2
   0002                     591 _radio_transmit_golay_elen_1_186:
   0002                     592 	.ds 1
                            593 ;--------------------------------------------------------
                            594 ; overlayable items in internal ram 
                            595 ;--------------------------------------------------------
                            596 	.area	OSEG    (OVR,DATA)
                            597 ;--------------------------------------------------------
                            598 ; indirectly addressable internal ram data
                            599 ;--------------------------------------------------------
                            600 	.area ISEG    (DATA)
                            601 ;--------------------------------------------------------
                            602 ; absolute internal ram data
                            603 ;--------------------------------------------------------
                            604 	.area IABS    (ABS,DATA)
                            605 	.area IABS    (ABS,DATA)
                            606 ;--------------------------------------------------------
                            607 ; bit data
                            608 ;--------------------------------------------------------
                            609 	.area BSEG    (BIT)
   0000                     610 _packet_received:
   0000                     611 	.ds 1
   0001                     612 _preamble_detected:
   0001                     613 	.ds 1
   0002                     614 _radio_preamble_detected_EX0_saved_1_157:
   0002                     615 	.ds 1
   0003                     616 _radio_transmit_simple_transmit_started_1_170:
   0003                     617 	.ds 1
   0004                     618 _radio_transmit_golay_sloc0_1_0:
   0004                     619 	.ds 1
   0005                     620 _radio_transmit_EX0_saved_1_189:
   0005                     621 	.ds 1
   0006                     622 _radio_transmit_sloc0_1_0:
   0006                     623 	.ds 1
   0007                     624 _radio_initialise_sloc0_1_0:
   0007                     625 	.ds 1
   0008                     626 _radio_set_diversity_PARM_1:
   0008                     627 	.ds 1
                            628 ;--------------------------------------------------------
                            629 ; paged external ram data
                            630 ;--------------------------------------------------------
                            631 	.area PSEG    (PAG,XDATA)
   0000                     632 _receive_packet_length::
   0000                     633 	.ds 1
   0001                     634 _partial_packet_length::
   0001                     635 	.ds 1
   0002                     636 _last_rssi::
   0002                     637 	.ds 1
   0003                     638 _netid::
   0003                     639 	.ds 2
   0005                     640 _settings::
   0005                     641 	.ds 12
   0011                     642 _radio_receive_packet_PARM_2:
   0011                     643 	.ds 2
   0013                     644 _radio_write_transmit_fifo_PARM_2:
   0013                     645 	.ds 2
   0015                     646 _radio_transmit_simple_PARM_2:
   0015                     647 	.ds 2
   0017                     648 _radio_transmit_simple_PARM_3:
   0017                     649 	.ds 2
   0019                     650 _radio_transmit_golay_PARM_2:
   0019                     651 	.ds 2
   001B                     652 _radio_transmit_golay_PARM_3:
   001B                     653 	.ds 2
   001D                     654 _radio_transmit_PARM_2:
   001D                     655 	.ds 2
   001F                     656 _radio_transmit_PARM_3:
   001F                     657 	.ds 2
   0021                     658 _scale_uint32_PARM_2:
   0021                     659 	.ds 4
   0025                     660 _scale_uint32_value_1_248:
   0025                     661 	.ds 4
   0029                     662 _set_frequency_registers_frequency_1_256:
   0029                     663 	.ds 4
                            664 ;--------------------------------------------------------
                            665 ; external ram data
                            666 ;--------------------------------------------------------
                            667 	.area XSEG    (XDATA)
   0000                     668 _radio_buffer::
   0000                     669 	.ds 252
   00FC                     670 _radio_receive_packet_length_1_134:
   00FC                     671 	.ds 3
   00FF                     672 _radio_receive_packet_gout_1_135:
   00FF                     673 	.ds 3
   0102                     674 _radio_transmit_golay_length_1_185:
   0102                     675 	.ds 1
   0103                     676 _radio_transmit_golay_gin_1_186:
   0103                     677 	.ds 3
   0106                     678 _radio_transmit_length_1_188:
   0106                     679 	.ds 1
   0107                     680 _radio_set_channel_channel_1_206:
   0107                     681 	.ds 1
   0108                     682 _radio_set_transmit_power_power_1_230:
   0108                     683 	.ds 1
   0109                     684 _radio_set_transmit_power_i_1_231:
   0109                     685 	.ds 1
   010A                     686 _radio_set_network_id_id_1_236:
   010A                     687 	.ds 2
   010C                     688 _set_frequency_registers_band_1_257:
   010C                     689 	.ds 1
                            690 ;--------------------------------------------------------
                            691 ; absolute external ram data
                            692 ;--------------------------------------------------------
                            693 	.area XABS    (ABS,XDATA)
                            694 ;--------------------------------------------------------
                            695 ; external initialized ram data
                            696 ;--------------------------------------------------------
                            697 	.area XISEG   (XDATA)
                            698 	.area HOME    (CODE)
                            699 	.area GSINIT0 (CODE)
                            700 	.area GSINIT1 (CODE)
                            701 	.area GSINIT2 (CODE)
                            702 	.area GSINIT3 (CODE)
                            703 	.area GSINIT4 (CODE)
                            704 	.area GSINIT5 (CODE)
                            705 	.area GSINIT  (CODE)
                            706 	.area GSFINAL (CODE)
                            707 	.area CSEG    (CODE)
                            708 ;--------------------------------------------------------
                            709 ; global & static initialisations
                            710 ;--------------------------------------------------------
                            711 	.area HOME    (CODE)
                            712 	.area GSINIT  (CODE)
                            713 	.area GSFINAL (CODE)
                            714 	.area GSINIT  (CODE)
                            715 ;--------------------------------------------------------
                            716 ; Home
                            717 ;--------------------------------------------------------
                            718 	.area HOME    (CODE)
                            719 	.area HOME    (CODE)
                            720 ;--------------------------------------------------------
                            721 ; code
                            722 ;--------------------------------------------------------
                            723 	.area CSEG    (CODE)
                            724 ;------------------------------------------------------------
                            725 ;Allocation info for local variables in function 'radio_receive_packet'
                            726 ;------------------------------------------------------------
                            727 ;crc1                      Allocated with name '_radio_receive_packet_crc1_1_135'
                            728 ;crc2                      Allocated to registers r5 r7 
                            729 ;errcount                  Allocated to registers r6 
                            730 ;elen                      Allocated to registers r7 
                            731 ;length                    Allocated with name '_radio_receive_packet_length_1_134'
                            732 ;gout                      Allocated with name '_radio_receive_packet_gout_1_135'
                            733 ;------------------------------------------------------------
                            734 ;	radio/radio.c:77: radio_receive_packet(uint8_t *length, __xdata uint8_t * __pdata buf)
                            735 ;	-----------------------------------------
                            736 ;	 function radio_receive_packet
                            737 ;	-----------------------------------------
   0000                     738 _radio_receive_packet:
                     0007   739 	ar7 = 0x07
                     0006   740 	ar6 = 0x06
                     0005   741 	ar5 = 0x05
                     0004   742 	ar4 = 0x04
                     0003   743 	ar3 = 0x03
                     0002   744 	ar2 = 0x02
                     0001   745 	ar1 = 0x01
                     0000   746 	ar0 = 0x00
   0000 AF F0         [24]  747 	mov	r7,b
   0002 AE 83         [24]  748 	mov	r6,dph
   0004 E5 82         [12]  749 	mov	a,dpl
   0006 90r00rFC      [24]  750 	mov	dptr,#_radio_receive_packet_length_1_134
   0009 F0            [24]  751 	movx	@dptr,a
   000A EE            [12]  752 	mov	a,r6
   000B A3            [24]  753 	inc	dptr
   000C F0            [24]  754 	movx	@dptr,a
   000D EF            [12]  755 	mov	a,r7
   000E A3            [24]  756 	inc	dptr
   000F F0            [24]  757 	movx	@dptr,a
                            758 ;	radio/radio.c:84: if (!packet_received) {
   0010 20*00 02      [24]  759 	jb	_packet_received,00102$
                            760 ;	radio/radio.c:85: return false;
   0013 C3            [12]  761 	clr	c
   0014 22            [24]  762 	ret
   0015                     763 00102$:
                            764 ;	radio/radio.c:88: if (receive_packet_length > MAX_PACKET_LENGTH) {
   0015 78r00         [12]  765 	mov	r0,#_receive_packet_length
   0017 C3            [12]  766 	clr	c
   0018 E2            [24]  767 	movx	a,@r0
   0019 F5 F0         [12]  768 	mov	b,a
   001B 74 FC         [12]  769 	mov	a,#0xFC
   001D 95 F0         [12]  770 	subb	a,b
   001F 50 06         [24]  771 	jnc	00104$
                            772 ;	radio/radio.c:89: radio_receiver_on();
   0021 12r06r70      [24]  773 	lcall	_radio_receiver_on
                            774 ;	radio/radio.c:90: goto failed;
   0024 02r02r40      [24]  775 	ljmp	00126$
   0027                     776 00104$:
                            777 ;	radio/radio.c:101: if (!feature_golay) {
   0027 20*00 45      [24]  778 	jb	_feature_golay,00106$
                            779 ;	radio/radio.c:103: *length = receive_packet_length;
   002A 90r00rFC      [24]  780 	mov	dptr,#_radio_receive_packet_length_1_134
   002D E0            [24]  781 	movx	a,@dptr
   002E FD            [12]  782 	mov	r5,a
   002F A3            [24]  783 	inc	dptr
   0030 E0            [24]  784 	movx	a,@dptr
   0031 FE            [12]  785 	mov	r6,a
   0032 A3            [24]  786 	inc	dptr
   0033 E0            [24]  787 	movx	a,@dptr
   0034 FF            [12]  788 	mov	r7,a
   0035 8D 82         [24]  789 	mov	dpl,r5
   0037 8E 83         [24]  790 	mov	dph,r6
   0039 8F F0         [24]  791 	mov	b,r7
   003B 78r00         [12]  792 	mov	r0,#_receive_packet_length
   003D E2            [24]  793 	movx	a,@r0
   003E 12r00r00      [24]  794 	lcall	__gptrput
                            795 ;	radio/radio.c:104: memcpy(buf, radio_buffer, receive_packet_length);
   0041 78r11         [12]  796 	mov	r0,#_radio_receive_packet_PARM_2
   0043 E2            [24]  797 	movx	a,@r0
   0044 FD            [12]  798 	mov	r5,a
   0045 08            [12]  799 	inc	r0
   0046 E2            [24]  800 	movx	a,@r0
   0047 FE            [12]  801 	mov	r6,a
   0048 7F 00         [12]  802 	mov	r7,#0x00
   004A 90r00r00      [24]  803 	mov	dptr,#_memcpy_PARM_2
   004D 74r00         [12]  804 	mov	a,#_radio_buffer
   004F F0            [24]  805 	movx	@dptr,a
   0050 74s00         [12]  806 	mov	a,#(_radio_buffer >> 8)
   0052 A3            [24]  807 	inc	dptr
   0053 F0            [24]  808 	movx	@dptr,a
   0054 E4            [12]  809 	clr	a
   0055 A3            [24]  810 	inc	dptr
   0056 F0            [24]  811 	movx	@dptr,a
   0057 78r00         [12]  812 	mov	r0,#_receive_packet_length
   0059 90r00r00      [24]  813 	mov	dptr,#_memcpy_PARM_3
   005C E2            [24]  814 	movx	a,@r0
   005D F0            [24]  815 	movx	@dptr,a
   005E E4            [12]  816 	clr	a
   005F A3            [24]  817 	inc	dptr
   0060 F0            [24]  818 	movx	@dptr,a
   0061 8D 82         [24]  819 	mov	dpl,r5
   0063 8E 83         [24]  820 	mov	dph,r6
   0065 8F F0         [24]  821 	mov	b,r7
   0067 12r00r00      [24]  822 	lcall	_memcpy
                            823 ;	radio/radio.c:105: radio_receiver_on();
   006A 12r06r70      [24]  824 	lcall	_radio_receiver_on
                            825 ;	radio/radio.c:106: return true;
   006D D3            [12]  826 	setb	c
   006E 22            [24]  827 	ret
   006F                     828 00106$:
                            829 ;	radio/radio.c:112: memcpy(buf, radio_buffer, receive_packet_length);
   006F 78r11         [12]  830 	mov	r0,#_radio_receive_packet_PARM_2
   0071 E2            [24]  831 	movx	a,@r0
   0072 FD            [12]  832 	mov	r5,a
   0073 08            [12]  833 	inc	r0
   0074 E2            [24]  834 	movx	a,@r0
   0075 FE            [12]  835 	mov	r6,a
   0076 7F 00         [12]  836 	mov	r7,#0x00
   0078 90r00r00      [24]  837 	mov	dptr,#_memcpy_PARM_2
   007B 74r00         [12]  838 	mov	a,#_radio_buffer
   007D F0            [24]  839 	movx	@dptr,a
   007E 74s00         [12]  840 	mov	a,#(_radio_buffer >> 8)
   0080 A3            [24]  841 	inc	dptr
   0081 F0            [24]  842 	movx	@dptr,a
   0082 E4            [12]  843 	clr	a
   0083 A3            [24]  844 	inc	dptr
   0084 F0            [24]  845 	movx	@dptr,a
   0085 78r00         [12]  846 	mov	r0,#_receive_packet_length
   0087 90r00r00      [24]  847 	mov	dptr,#_memcpy_PARM_3
   008A E2            [24]  848 	movx	a,@r0
   008B F0            [24]  849 	movx	@dptr,a
   008C E4            [12]  850 	clr	a
   008D A3            [24]  851 	inc	dptr
   008E F0            [24]  852 	movx	@dptr,a
   008F 8D 82         [24]  853 	mov	dpl,r5
   0091 8E 83         [24]  854 	mov	dph,r6
   0093 8F F0         [24]  855 	mov	b,r7
   0095 12r00r00      [24]  856 	lcall	_memcpy
                            857 ;	radio/radio.c:116: elen = receive_packet_length;
   0098 78r00         [12]  858 	mov	r0,#_receive_packet_length
   009A E2            [24]  859 	movx	a,@r0
   009B FF            [12]  860 	mov	r7,a
                            861 ;	radio/radio.c:117: radio_receiver_on();	
   009C C0 07         [24]  862 	push	ar7
   009E 12r06r70      [24]  863 	lcall	_radio_receiver_on
   00A1 D0 07         [24]  864 	pop	ar7
                            865 ;	radio/radio.c:119: if (elen < 12 || (elen%6) != 0) {
   00A3 BF 0C 00      [24]  866 	cjne	r7,#0x0C,00176$
   00A6                     867 00176$:
   00A6 50 03         [24]  868 	jnc	00177$
   00A8 02r02r40      [24]  869 	ljmp	00126$
   00AB                     870 00177$:
   00AB 75 F0 06      [24]  871 	mov	b,#0x06
   00AE EF            [12]  872 	mov	a,r7
   00AF 84            [48]  873 	div	ab
   00B0 E5 F0         [12]  874 	mov	a,b
   00B2 60 03         [24]  875 	jz	00178$
   00B4 02r02r40      [24]  876 	ljmp	00126$
   00B7                     877 00178$:
                            878 ;	radio/radio.c:126: errcount = golay_decode(6, buf, gout);
   00B7 78r11         [12]  879 	mov	r0,#_radio_receive_packet_PARM_2
   00B9 79r00         [12]  880 	mov	r1,#_golay_decode_PARM_2
   00BB E2            [24]  881 	movx	a,@r0
   00BC F3            [24]  882 	movx	@r1,a
   00BD 08            [12]  883 	inc	r0
   00BE E2            [24]  884 	movx	a,@r0
   00BF 09            [12]  885 	inc	r1
   00C0 F3            [24]  886 	movx	@r1,a
   00C1 78r00         [12]  887 	mov	r0,#_golay_decode_PARM_3
   00C3 74rFF         [12]  888 	mov	a,#_radio_receive_packet_gout_1_135
   00C5 F2            [24]  889 	movx	@r0,a
   00C6 08            [12]  890 	inc	r0
   00C7 74s00         [12]  891 	mov	a,#(_radio_receive_packet_gout_1_135 >> 8)
   00C9 F2            [24]  892 	movx	@r0,a
   00CA 75 82 06      [24]  893 	mov	dpl,#0x06
   00CD C0 07         [24]  894 	push	ar7
   00CF 12r00r00      [24]  895 	lcall	_golay_decode
   00D2 AE 82         [24]  896 	mov	r6,dpl
   00D4 D0 07         [24]  897 	pop	ar7
                            898 ;	radio/radio.c:127: if (gout[0] != netid[0] ||
   00D6 90r00rFF      [24]  899 	mov	dptr,#_radio_receive_packet_gout_1_135
   00D9 E0            [24]  900 	movx	a,@dptr
   00DA FD            [12]  901 	mov	r5,a
   00DB 78r03         [12]  902 	mov	r0,#_netid
   00DD E2            [24]  903 	movx	a,@r0
   00DE FC            [12]  904 	mov	r4,a
   00DF ED            [12]  905 	mov	a,r5
   00E0 B5 04 02      [24]  906 	cjne	a,ar4,00179$
   00E3 80 03         [24]  907 	sjmp	00180$
   00E5                     908 00179$:
   00E5 02r02r40      [24]  909 	ljmp	00126$
   00E8                     910 00180$:
                            911 ;	radio/radio.c:128: gout[1] != netid[1]) {
   00E8 90r01r00      [24]  912 	mov	dptr,#(_radio_receive_packet_gout_1_135 + 0x0001)
   00EB E0            [24]  913 	movx	a,@dptr
   00EC FD            [12]  914 	mov	r5,a
   00ED 78r04         [12]  915 	mov	r0,#(_netid + 0x0001)
   00EF E2            [24]  916 	movx	a,@r0
   00F0 FC            [12]  917 	mov	r4,a
   00F1 ED            [12]  918 	mov	a,r5
   00F2 B5 04 02      [24]  919 	cjne	a,ar4,00181$
   00F5 80 03         [24]  920 	sjmp	00182$
   00F7                     921 00181$:
   00F7 02r02r40      [24]  922 	ljmp	00126$
   00FA                     923 00182$:
                            924 ;	radio/radio.c:136: if (6*((gout[2]+2)/3+2) != elen) {
   00FA 90r01r01      [24]  925 	mov	dptr,#(_radio_receive_packet_gout_1_135 + 0x0002)
   00FD E0            [24]  926 	movx	a,@dptr
   00FE FD            [12]  927 	mov	r5,a
   00FF 7C 00         [12]  928 	mov	r4,#0x00
   0101 74 02         [12]  929 	mov	a,#0x02
   0103 2D            [12]  930 	add	a,r5
   0104 FD            [12]  931 	mov	r5,a
   0105 E4            [12]  932 	clr	a
   0106 3C            [12]  933 	addc	a,r4
   0107 FC            [12]  934 	mov	r4,a
   0108 90r00r00      [24]  935 	mov	dptr,#__divsint_PARM_2
   010B 74 03         [12]  936 	mov	a,#0x03
   010D F0            [24]  937 	movx	@dptr,a
   010E E4            [12]  938 	clr	a
   010F A3            [24]  939 	inc	dptr
   0110 F0            [24]  940 	movx	@dptr,a
   0111 8D 82         [24]  941 	mov	dpl,r5
   0113 8C 83         [24]  942 	mov	dph,r4
   0115 C0 07         [24]  943 	push	ar7
   0117 C0 06         [24]  944 	push	ar6
   0119 12r00r00      [24]  945 	lcall	__divsint
   011C E5 82         [12]  946 	mov	a,dpl
   011E 85 83 F0      [24]  947 	mov	b,dph
   0121 90r00r00      [24]  948 	mov	dptr,#__mulint_PARM_2
   0124 24 02         [12]  949 	add	a,#0x02
   0126 F0            [24]  950 	movx	@dptr,a
   0127 E4            [12]  951 	clr	a
   0128 35 F0         [12]  952 	addc	a,b
   012A A3            [24]  953 	inc	dptr
   012B F0            [24]  954 	movx	@dptr,a
   012C 90 00 06      [24]  955 	mov	dptr,#0x0006
   012F 12r00r00      [24]  956 	lcall	__mulint
   0132 AC 82         [24]  957 	mov	r4,dpl
   0134 AD 83         [24]  958 	mov	r5,dph
   0136 D0 06         [24]  959 	pop	ar6
   0138 D0 07         [24]  960 	pop	ar7
   013A 8F 02         [24]  961 	mov	ar2,r7
   013C 7B 00         [12]  962 	mov	r3,#0x00
   013E EC            [12]  963 	mov	a,r4
   013F B5 02 06      [24]  964 	cjne	a,ar2,00183$
   0142 ED            [12]  965 	mov	a,r5
   0143 B5 03 02      [24]  966 	cjne	a,ar3,00183$
   0146 80 03         [24]  967 	sjmp	00184$
   0148                     968 00183$:
   0148 02r02r40      [24]  969 	ljmp	00126$
   014B                     970 00184$:
                            971 ;	radio/radio.c:144: errcount += golay_decode(6, &buf[6], gout);
   014B 78r11         [12]  972 	mov	r0,#_radio_receive_packet_PARM_2
   014D 79r00         [12]  973 	mov	r1,#_golay_decode_PARM_2
   014F E2            [24]  974 	movx	a,@r0
   0150 24 06         [12]  975 	add	a,#0x06
   0152 F3            [24]  976 	movx	@r1,a
   0153 08            [12]  977 	inc	r0
   0154 E2            [24]  978 	movx	a,@r0
   0155 34 00         [12]  979 	addc	a,#0x00
   0157 09            [12]  980 	inc	r1
   0158 F3            [24]  981 	movx	@r1,a
   0159 78r00         [12]  982 	mov	r0,#_golay_decode_PARM_3
   015B 74rFF         [12]  983 	mov	a,#_radio_receive_packet_gout_1_135
   015D F2            [24]  984 	movx	@r0,a
   015E 08            [12]  985 	inc	r0
   015F 74s00         [12]  986 	mov	a,#(_radio_receive_packet_gout_1_135 >> 8)
   0161 F2            [24]  987 	movx	@r0,a
   0162 75 82 06      [24]  988 	mov	dpl,#0x06
   0165 C0 07         [24]  989 	push	ar7
   0167 C0 06         [24]  990 	push	ar6
   0169 12r00r00      [24]  991 	lcall	_golay_decode
   016C AD 82         [24]  992 	mov	r5,dpl
   016E D0 06         [24]  993 	pop	ar6
   0170 D0 07         [24]  994 	pop	ar7
   0172 ED            [12]  995 	mov	a,r5
   0173 2E            [12]  996 	add	a,r6
   0174 FE            [12]  997 	mov	r6,a
                            998 ;	radio/radio.c:145: crc1 = gout[0] | (((uint16_t)gout[1])<<8);
   0175 90r00rFF      [24]  999 	mov	dptr,#_radio_receive_packet_gout_1_135
   0178 E0            [24] 1000 	movx	a,@dptr
   0179 FD            [12] 1001 	mov	r5,a
   017A 90r01r00      [24] 1002 	mov	dptr,#(_radio_receive_packet_gout_1_135 + 0x0001)
   017D E0            [24] 1003 	movx	a,@dptr
   017E FB            [12] 1004 	mov	r3,a
   017F E4            [12] 1005 	clr	a
   0180 FC            [12] 1006 	mov	r4,a
   0181 FA            [12] 1007 	mov	r2,a
   0182 4D            [12] 1008 	orl	a,r5
   0183 F5*00         [12] 1009 	mov	_radio_receive_packet_crc1_1_135,a
   0185 EB            [12] 1010 	mov	a,r3
   0186 4A            [12] 1011 	orl	a,r2
   0187 F5*01         [12] 1012 	mov	(_radio_receive_packet_crc1_1_135 + 1),a
                           1013 ;	radio/radio.c:147: if (elen != 12) {
   0189 BF 0C 02      [24] 1014 	cjne	r7,#0x0C,00185$
   018C 80 2A         [24] 1015 	sjmp	00116$
   018E                    1016 00185$:
                           1017 ;	radio/radio.c:148: errcount += golay_decode(elen-12, &buf[12], buf);
   018E EF            [12] 1018 	mov	a,r7
   018F 24 F4         [12] 1019 	add	a,#0xF4
   0191 FF            [12] 1020 	mov	r7,a
   0192 78r11         [12] 1021 	mov	r0,#_radio_receive_packet_PARM_2
   0194 79r00         [12] 1022 	mov	r1,#_golay_decode_PARM_2
   0196 E2            [24] 1023 	movx	a,@r0
   0197 24 0C         [12] 1024 	add	a,#0x0C
   0199 F3            [24] 1025 	movx	@r1,a
   019A 08            [12] 1026 	inc	r0
   019B E2            [24] 1027 	movx	a,@r0
   019C 34 00         [12] 1028 	addc	a,#0x00
   019E 09            [12] 1029 	inc	r1
   019F F3            [24] 1030 	movx	@r1,a
   01A0 78r11         [12] 1031 	mov	r0,#_radio_receive_packet_PARM_2
   01A2 79r00         [12] 1032 	mov	r1,#_golay_decode_PARM_3
   01A4 E2            [24] 1033 	movx	a,@r0
   01A5 F3            [24] 1034 	movx	@r1,a
   01A6 08            [12] 1035 	inc	r0
   01A7 E2            [24] 1036 	movx	a,@r0
   01A8 09            [12] 1037 	inc	r1
   01A9 F3            [24] 1038 	movx	@r1,a
   01AA 8F 82         [24] 1039 	mov	dpl,r7
   01AC C0 06         [24] 1040 	push	ar6
   01AE 12r00r00      [24] 1041 	lcall	_golay_decode
   01B1 AF 82         [24] 1042 	mov	r7,dpl
   01B3 D0 06         [24] 1043 	pop	ar6
   01B5 EF            [12] 1044 	mov	a,r7
   01B6 2E            [12] 1045 	add	a,r6
   01B7 FE            [12] 1046 	mov	r6,a
   01B8                    1047 00116$:
                           1048 ;	radio/radio.c:151: *length = gout[2];
   01B8 90r00rFC      [24] 1049 	mov	dptr,#_radio_receive_packet_length_1_134
   01BB E0            [24] 1050 	movx	a,@dptr
   01BC FA            [12] 1051 	mov	r2,a
   01BD A3            [24] 1052 	inc	dptr
   01BE E0            [24] 1053 	movx	a,@dptr
   01BF FB            [12] 1054 	mov	r3,a
   01C0 A3            [24] 1055 	inc	dptr
   01C1 E0            [24] 1056 	movx	a,@dptr
   01C2 FF            [12] 1057 	mov	r7,a
   01C3 90r01r01      [24] 1058 	mov	dptr,#(_radio_receive_packet_gout_1_135 + 0x0002)
   01C6 E0            [24] 1059 	movx	a,@dptr
   01C7 FD            [12] 1060 	mov	r5,a
   01C8 8A 82         [24] 1061 	mov	dpl,r2
   01CA 8B 83         [24] 1062 	mov	dph,r3
   01CC 8F F0         [24] 1063 	mov	b,r7
   01CE 12r00r00      [24] 1064 	lcall	__gptrput
                           1065 ;	radio/radio.c:153: crc2 = crc16(*length, buf);
   01D1 78r11         [12] 1066 	mov	r0,#_radio_receive_packet_PARM_2
   01D3 E2            [24] 1067 	movx	a,@r0
   01D4 F5*00         [12] 1068 	mov	_crc16_PARM_2,a
   01D6 08            [12] 1069 	inc	r0
   01D7 E2            [24] 1070 	movx	a,@r0
   01D8 F5*01         [12] 1071 	mov	(_crc16_PARM_2 + 1),a
   01DA 8D 82         [24] 1072 	mov	dpl,r5
   01DC C0 06         [24] 1073 	push	ar6
   01DE 12r00r00      [24] 1074 	lcall	_crc16
   01E1 AD 82         [24] 1075 	mov	r5,dpl
   01E3 AF 83         [24] 1076 	mov	r7,dph
   01E5 D0 06         [24] 1077 	pop	ar6
                           1078 ;	radio/radio.c:155: if (crc1 != crc2) {
   01E7 ED            [12] 1079 	mov	a,r5
   01E8 B5*00 55      [24] 1080 	cjne	a,_radio_receive_packet_crc1_1_135,00126$
   01EB EF            [12] 1081 	mov	a,r7
   01EC B5*01 51      [24] 1082 	cjne	a,(_radio_receive_packet_crc1_1_135 + 1),00126$
                           1083 ;	radio/radio.c:165: if (errcount != 0) {
   01EF EE            [12] 1084 	mov	a,r6
   01F0 60 4C         [24] 1085 	jz	00125$
                           1086 ;	radio/radio.c:166: if ((uint16_t)(0xFFFF - errcount) > errors.corrected_errors) {
   01F2 7F 00         [12] 1087 	mov	r7,#0x00
   01F4 74 FF         [12] 1088 	mov	a,#0xFF
   01F6 C3            [12] 1089 	clr	c
   01F7 9E            [12] 1090 	subb	a,r6
   01F8 FC            [12] 1091 	mov	r4,a
   01F9 74 FF         [12] 1092 	mov	a,#0xFF
   01FB 9F            [12] 1093 	subb	a,r7
   01FC FD            [12] 1094 	mov	r5,a
   01FD 78r08         [12] 1095 	mov	r0,#(_errors + 0x0008)
   01FF E2            [24] 1096 	movx	a,@r0
   0200 FA            [12] 1097 	mov	r2,a
   0201 08            [12] 1098 	inc	r0
   0202 E2            [24] 1099 	movx	a,@r0
   0203 FB            [12] 1100 	mov	r3,a
   0204 C3            [12] 1101 	clr	c
   0205 EA            [12] 1102 	mov	a,r2
   0206 9C            [12] 1103 	subb	a,r4
   0207 EB            [12] 1104 	mov	a,r3
   0208 9D            [12] 1105 	subb	a,r5
   0209 50 0F         [24] 1106 	jnc	00120$
                           1107 ;	radio/radio.c:167: errors.corrected_errors += errcount;
   020B EE            [12] 1108 	mov	a,r6
   020C 2A            [12] 1109 	add	a,r2
   020D FE            [12] 1110 	mov	r6,a
   020E EF            [12] 1111 	mov	a,r7
   020F 3B            [12] 1112 	addc	a,r3
   0210 FF            [12] 1113 	mov	r7,a
   0211 78r08         [12] 1114 	mov	r0,#(_errors + 0x0008)
   0213 EE            [12] 1115 	mov	a,r6
   0214 F2            [24] 1116 	movx	@r0,a
   0215 08            [12] 1117 	inc	r0
   0216 EF            [12] 1118 	mov	a,r7
   0217 F2            [24] 1119 	movx	@r0,a
   0218 80 09         [24] 1120 	sjmp	00121$
   021A                    1121 00120$:
                           1122 ;	radio/radio.c:169: errors.corrected_errors = 0xFFFF;
   021A 78r08         [12] 1123 	mov	r0,#(_errors + 0x0008)
   021C 74 FF         [12] 1124 	mov	a,#0xFF
   021E F2            [24] 1125 	movx	@r0,a
   021F 08            [12] 1126 	inc	r0
   0220 74 FF         [12] 1127 	mov	a,#0xFF
   0222 F2            [24] 1128 	movx	@r0,a
   0223                    1129 00121$:
                           1130 ;	radio/radio.c:171: if (errors.corrected_packets != 0xFFFF) {
   0223 78r0A         [12] 1131 	mov	r0,#(_errors + 0x000a)
   0225 E2            [24] 1132 	movx	a,@r0
   0226 FE            [12] 1133 	mov	r6,a
   0227 08            [12] 1134 	inc	r0
   0228 E2            [24] 1135 	movx	a,@r0
   0229 FF            [12] 1136 	mov	r7,a
   022A BE FF 05      [24] 1137 	cjne	r6,#0xFF,00190$
   022D BF FF 02      [24] 1138 	cjne	r7,#0xFF,00190$
   0230 80 0C         [24] 1139 	sjmp	00125$
   0232                    1140 00190$:
                           1141 ;	radio/radio.c:172: errors.corrected_packets++;
   0232 0E            [12] 1142 	inc	r6
   0233 BE 00 01      [24] 1143 	cjne	r6,#0x00,00191$
   0236 0F            [12] 1144 	inc	r7
   0237                    1145 00191$:
   0237 78r0A         [12] 1146 	mov	r0,#(_errors + 0x000a)
   0239 EE            [12] 1147 	mov	a,r6
   023A F2            [24] 1148 	movx	@r0,a
   023B 08            [12] 1149 	inc	r0
   023C EF            [12] 1150 	mov	a,r7
   023D F2            [24] 1151 	movx	@r0,a
   023E                    1152 00125$:
                           1153 ;	radio/radio.c:176: return true;
   023E D3            [12] 1154 	setb	c
                           1155 ;	radio/radio.c:178: failed:
   023F 22            [24] 1156 	ret
   0240                    1157 00126$:
                           1158 ;	radio/radio.c:179: if (errors.rx_errors != 0xFFFF) {
   0240 78r00         [12] 1159 	mov	r0,#_errors
   0242 E2            [24] 1160 	movx	a,@r0
   0243 FE            [12] 1161 	mov	r6,a
   0244 08            [12] 1162 	inc	r0
   0245 E2            [24] 1163 	movx	a,@r0
   0246 FF            [12] 1164 	mov	r7,a
   0247 BE FF 05      [24] 1165 	cjne	r6,#0xFF,00192$
   024A BF FF 02      [24] 1166 	cjne	r7,#0xFF,00192$
   024D 80 0C         [24] 1167 	sjmp	00128$
   024F                    1168 00192$:
                           1169 ;	radio/radio.c:180: errors.rx_errors++;
   024F 0E            [12] 1170 	inc	r6
   0250 BE 00 01      [24] 1171 	cjne	r6,#0x00,00193$
   0253 0F            [12] 1172 	inc	r7
   0254                    1173 00193$:
   0254 78r00         [12] 1174 	mov	r0,#_errors
   0256 EE            [12] 1175 	mov	a,r6
   0257 F2            [24] 1176 	movx	@r0,a
   0258 08            [12] 1177 	inc	r0
   0259 EF            [12] 1178 	mov	a,r7
   025A F2            [24] 1179 	movx	@r0,a
   025B                    1180 00128$:
                           1181 ;	radio/radio.c:182: return false;
   025B C3            [12] 1182 	clr	c
   025C 22            [24] 1183 	ret
                           1184 ;------------------------------------------------------------
                           1185 ;Allocation info for local variables in function 'radio_write_transmit_fifo'
                           1186 ;------------------------------------------------------------
                           1187 ;n                         Allocated to registers r7 
                           1188 ;------------------------------------------------------------
                           1189 ;	radio/radio.c:189: radio_write_transmit_fifo(register uint8_t n, __xdata uint8_t * __pdata buffer)
                           1190 ;	-----------------------------------------
                           1191 ;	 function radio_write_transmit_fifo
                           1192 ;	-----------------------------------------
   025D                    1193 _radio_write_transmit_fifo:
   025D AF 82         [24] 1194 	mov	r7,dpl
                           1195 ;	radio/radio.c:191: NSS1 = 0;
   025F C2 94         [12] 1196 	clr	_NSS1
                           1197 ;	radio/radio.c:192: SPIF1 = 0;
   0261 C2 B7         [12] 1198 	clr	_SPIF1
                           1199 ;	radio/radio.c:193: SPI1DAT = (0x80 | EZRADIOPRO_FIFO_ACCESS);
   0263 75 86 FF      [24] 1200 	mov	_SPI1DAT,#0xFF
                           1201 ;	radio/radio.c:195: while (n--) {
   0266 78r13         [12] 1202 	mov	r0,#_radio_write_transmit_fifo_PARM_2
   0268 E2            [24] 1203 	movx	a,@r0
   0269 FD            [12] 1204 	mov	r5,a
   026A 08            [12] 1205 	inc	r0
   026B E2            [24] 1206 	movx	a,@r0
   026C FE            [12] 1207 	mov	r6,a
   026D                    1208 00104$:
   026D 8F 04         [24] 1209 	mov	ar4,r7
   026F 1F            [12] 1210 	dec	r7
   0270 EC            [12] 1211 	mov	a,r4
   0271 60 11         [24] 1212 	jz	00107$
                           1213 ;	radio/radio.c:196: while (!TXBMT1) /* noop */;
   0273                    1214 00101$:
   0273 30 B1 FD      [24] 1215 	jnb	_TXBMT1,00101$
                           1216 ;	radio/radio.c:197: SPI1DAT = *buffer++;
   0276 8D 82         [24] 1217 	mov	dpl,r5
   0278 8E 83         [24] 1218 	mov	dph,r6
   027A E0            [24] 1219 	movx	a,@dptr
   027B F5 86         [12] 1220 	mov	_SPI1DAT,a
   027D A3            [24] 1221 	inc	dptr
   027E AD 82         [24] 1222 	mov	r5,dpl
   0280 AE 83         [24] 1223 	mov	r6,dph
                           1224 ;	radio/radio.c:200: while (!TXBMT1) /* noop */;
   0282 80 E9         [24] 1225 	sjmp	00104$
   0284                    1226 00107$:
   0284 30 B1 FD      [24] 1227 	jnb	_TXBMT1,00107$
                           1228 ;	radio/radio.c:201: while ((SPI1CFG & 0x80) == 0x80);
   0287                    1229 00110$:
   0287 74 80         [12] 1230 	mov	a,#0x80
   0289 55 84         [12] 1231 	anl	a,_SPI1CFG
   028B FF            [12] 1232 	mov	r7,a
   028C BF 80 02      [24] 1233 	cjne	r7,#0x80,00137$
   028F 80 F6         [24] 1234 	sjmp	00110$
   0291                    1235 00137$:
                           1236 ;	radio/radio.c:203: SPIF1 = 0;
   0291 C2 B7         [12] 1237 	clr	_SPIF1
                           1238 ;	radio/radio.c:204: NSS1 = 1;
   0293 D2 94         [12] 1239 	setb	_NSS1
   0295 22            [24] 1240 	ret
                           1241 ;------------------------------------------------------------
                           1242 ;Allocation info for local variables in function 'radio_receive_in_progress'
                           1243 ;------------------------------------------------------------
                           1244 ;	radio/radio.c:210: radio_receive_in_progress(void)
                           1245 ;	-----------------------------------------
                           1246 ;	 function radio_receive_in_progress
                           1247 ;	-----------------------------------------
   0296                    1248 _radio_receive_in_progress:
                           1249 ;	radio/radio.c:212: if (packet_received ||
   0296 20*00 05      [24] 1250 	jb	_packet_received,00101$
                           1251 ;	radio/radio.c:213: partial_packet_length != 0) {
   0299 78r01         [12] 1252 	mov	r0,#_partial_packet_length
   029B E2            [24] 1253 	movx	a,@r0
   029C 60 02         [24] 1254 	jz	00102$
   029E                    1255 00101$:
                           1256 ;	radio/radio.c:214: return true;
   029E D3            [12] 1257 	setb	c
   029F 22            [24] 1258 	ret
   02A0                    1259 00102$:
                           1260 ;	radio/radio.c:218: if (register_read(EZRADIOPRO_EZMAC_STATUS) & EZRADIOPRO_PKRX) {
   02A0 75 82 31      [24] 1261 	mov	dpl,#0x31
   02A3 12r0Br74      [24] 1262 	lcall	_register_read
   02A6 E5 82         [12] 1263 	mov	a,dpl
   02A8 30 E4 02      [24] 1264 	jnb	acc.4,00105$
                           1265 ;	radio/radio.c:219: return true;
   02AB D3            [12] 1266 	setb	c
   02AC 22            [24] 1267 	ret
   02AD                    1268 00105$:
                           1269 ;	radio/radio.c:221: return false;
   02AD C3            [12] 1270 	clr	c
   02AE 22            [24] 1271 	ret
                           1272 ;------------------------------------------------------------
                           1273 ;Allocation info for local variables in function 'radio_preamble_detected'
                           1274 ;------------------------------------------------------------
                           1275 ;	radio/radio.c:228: radio_preamble_detected(void)
                           1276 ;	-----------------------------------------
                           1277 ;	 function radio_preamble_detected
                           1278 ;	-----------------------------------------
   02AF                    1279 _radio_preamble_detected:
                           1280 ;	radio/radio.c:230: EX0_SAVE_DISABLE;
   02AF A2 A8         [12] 1281 	mov	c,_EX0
   02B1 92*02         [24] 1282 	mov	_radio_preamble_detected_EX0_saved_1_157,c
   02B3 C2 A8         [12] 1283 	clr	_EX0
                           1284 ;	radio/radio.c:231: if (preamble_detected) {
                           1285 ;	radio/radio.c:232: preamble_detected = 0;
   02B5 10*01 02      [24] 1286 	jbc	_preamble_detected,00108$
   02B8 80 06         [24] 1287 	sjmp	00102$
   02BA                    1288 00108$:
                           1289 ;	radio/radio.c:233: EX0_RESTORE;
   02BA A2*02         [12] 1290 	mov	c,_radio_preamble_detected_EX0_saved_1_157
   02BC 92 A8         [24] 1291 	mov	_EX0,c
                           1292 ;	radio/radio.c:234: return true;
   02BE D3            [12] 1293 	setb	c
   02BF 22            [24] 1294 	ret
   02C0                    1295 00102$:
                           1296 ;	radio/radio.c:236: EX0_RESTORE;
   02C0 A2*02         [12] 1297 	mov	c,_radio_preamble_detected_EX0_saved_1_157
   02C2 92 A8         [24] 1298 	mov	_EX0,c
                           1299 ;	radio/radio.c:237: return false;
   02C4 C3            [12] 1300 	clr	c
   02C5 22            [24] 1301 	ret
                           1302 ;------------------------------------------------------------
                           1303 ;Allocation info for local variables in function 'radio_last_rssi'
                           1304 ;------------------------------------------------------------
                           1305 ;	radio/radio.c:245: radio_last_rssi(void)
                           1306 ;	-----------------------------------------
                           1307 ;	 function radio_last_rssi
                           1308 ;	-----------------------------------------
   02C6                    1309 _radio_last_rssi:
                           1310 ;	radio/radio.c:247: return last_rssi;
   02C6 78r02         [12] 1311 	mov	r0,#_last_rssi
   02C8 E2            [24] 1312 	movx	a,@r0
   02C9 F5 82         [12] 1313 	mov	dpl,a
   02CB 22            [24] 1314 	ret
                           1315 ;------------------------------------------------------------
                           1316 ;Allocation info for local variables in function 'radio_current_rssi'
                           1317 ;------------------------------------------------------------
                           1318 ;	radio/radio.c:253: radio_current_rssi(void)
                           1319 ;	-----------------------------------------
                           1320 ;	 function radio_current_rssi
                           1321 ;	-----------------------------------------
   02CC                    1322 _radio_current_rssi:
                           1323 ;	radio/radio.c:255: return register_read(EZRADIOPRO_RECEIVED_SIGNAL_STRENGTH_INDICATOR);
   02CC 75 82 26      [24] 1324 	mov	dpl,#0x26
   02CF 02r0Br74      [24] 1325 	ljmp	_register_read
                           1326 ;------------------------------------------------------------
                           1327 ;Allocation info for local variables in function 'radio_air_rate'
                           1328 ;------------------------------------------------------------
                           1329 ;	radio/radio.c:261: radio_air_rate(void)
                           1330 ;	-----------------------------------------
                           1331 ;	 function radio_air_rate
                           1332 ;	-----------------------------------------
   02D2                    1333 _radio_air_rate:
                           1334 ;	radio/radio.c:263: return settings.air_data_rate;
   02D2 78r0D         [12] 1335 	mov	r0,#(_settings + 0x0008)
   02D4 E2            [24] 1336 	movx	a,@r0
   02D5 F5 82         [12] 1337 	mov	dpl,a
   02D7 22            [24] 1338 	ret
                           1339 ;------------------------------------------------------------
                           1340 ;Allocation info for local variables in function 'radio_clear_transmit_fifo'
                           1341 ;------------------------------------------------------------
                           1342 ;control                   Allocated to registers r7 
                           1343 ;------------------------------------------------------------
                           1344 ;	radio/radio.c:269: radio_clear_transmit_fifo(void)
                           1345 ;	-----------------------------------------
                           1346 ;	 function radio_clear_transmit_fifo
                           1347 ;	-----------------------------------------
   02D8                    1348 _radio_clear_transmit_fifo:
                           1349 ;	radio/radio.c:272: control = register_read(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2);
   02D8 75 82 08      [24] 1350 	mov	dpl,#0x08
   02DB 12r0Br74      [24] 1351 	lcall	_register_read
   02DE AF 82         [24] 1352 	mov	r7,dpl
                           1353 ;	radio/radio.c:273: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, control | EZRADIOPRO_FFCLRTX);
   02E0 74 01         [12] 1354 	mov	a,#0x01
   02E2 4F            [12] 1355 	orl	a,r7
   02E3 FE            [12] 1356 	mov	r6,a
   02E4 C0 07         [24] 1357 	push	ar7
   02E6 C0 06         [24] 1358 	push	ar6
   02E8 75 82 08      [24] 1359 	mov	dpl,#0x08
   02EB 12r0Br44      [24] 1360 	lcall	_register_write
   02EE 15 81         [12] 1361 	dec	sp
   02F0 D0 07         [24] 1362 	pop	ar7
                           1363 ;	radio/radio.c:274: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, control & ~EZRADIOPRO_FFCLRTX);
   02F2 53 07 FE      [24] 1364 	anl	ar7,#0xFE
   02F5 C0 07         [24] 1365 	push	ar7
   02F7 75 82 08      [24] 1366 	mov	dpl,#0x08
   02FA 12r0Br44      [24] 1367 	lcall	_register_write
   02FD 15 81         [12] 1368 	dec	sp
   02FF 22            [24] 1369 	ret
                           1370 ;------------------------------------------------------------
                           1371 ;Allocation info for local variables in function 'radio_clear_receive_fifo'
                           1372 ;------------------------------------------------------------
                           1373 ;control                   Allocated to registers r7 
                           1374 ;------------------------------------------------------------
                           1375 ;	radio/radio.c:281: radio_clear_receive_fifo(void) __reentrant
                           1376 ;	-----------------------------------------
                           1377 ;	 function radio_clear_receive_fifo
                           1378 ;	-----------------------------------------
   0300                    1379 _radio_clear_receive_fifo:
                           1380 ;	radio/radio.c:284: control = register_read(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2);
   0300 75 82 08      [24] 1381 	mov	dpl,#0x08
   0303 12r0Br74      [24] 1382 	lcall	_register_read
   0306 AF 82         [24] 1383 	mov	r7,dpl
                           1384 ;	radio/radio.c:285: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, control | EZRADIOPRO_FFCLRRX);
   0308 74 02         [12] 1385 	mov	a,#0x02
   030A 4F            [12] 1386 	orl	a,r7
   030B FE            [12] 1387 	mov	r6,a
   030C C0 07         [24] 1388 	push	ar7
   030E C0 06         [24] 1389 	push	ar6
   0310 75 82 08      [24] 1390 	mov	dpl,#0x08
   0313 12r0Br44      [24] 1391 	lcall	_register_write
   0316 15 81         [12] 1392 	dec	sp
   0318 D0 07         [24] 1393 	pop	ar7
                           1394 ;	radio/radio.c:286: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, control & ~EZRADIOPRO_FFCLRRX);
   031A 53 07 FD      [24] 1395 	anl	ar7,#0xFD
   031D C0 07         [24] 1396 	push	ar7
   031F 75 82 08      [24] 1397 	mov	dpl,#0x08
   0322 12r0Br44      [24] 1398 	lcall	_register_write
   0325 15 81         [12] 1399 	dec	sp
   0327 22            [24] 1400 	ret
                           1401 ;------------------------------------------------------------
                           1402 ;Allocation info for local variables in function 'radio_transmit_simple'
                           1403 ;------------------------------------------------------------
                           1404 ;length                    Allocated to registers r7 
                           1405 ;n                         Allocated to registers r6 
                           1406 ;status                    Allocated to registers r3 
                           1407 ;------------------------------------------------------------
                           1408 ;	radio/radio.c:298: radio_transmit_simple(__data uint8_t length, __xdata uint8_t * __pdata buf, __pdata uint16_t timeout_ticks)
                           1409 ;	-----------------------------------------
                           1410 ;	 function radio_transmit_simple
                           1411 ;	-----------------------------------------
   0328                    1412 _radio_transmit_simple:
                           1413 ;	radio/radio.c:304: if (length > sizeof(radio_buffer)) {
   0328 E5 82         [12] 1414 	mov	a,dpl
   032A FF            [12] 1415 	mov	r7,a
   032B 24 03         [12] 1416 	add	a,#0xff - 0xFC
   032D 50 19         [24] 1417 	jnc	00102$
                           1418 ;	radio/radio.c:305: panic("oversized packet");
   032F C0 07         [24] 1419 	push	ar7
   0331 74r00         [12] 1420 	mov	a,#__str_0
   0333 C0 E0         [24] 1421 	push	acc
   0335 74s00         [12] 1422 	mov	a,#(__str_0 >> 8)
   0337 C0 E0         [24] 1423 	push	acc
   0339 74 80         [12] 1424 	mov	a,#0x80
   033B C0 E0         [24] 1425 	push	acc
   033D 12r00r00      [24] 1426 	lcall	_panic
   0340 15 81         [12] 1427 	dec	sp
   0342 15 81         [12] 1428 	dec	sp
   0344 15 81         [12] 1429 	dec	sp
   0346 D0 07         [24] 1430 	pop	ar7
   0348                    1431 00102$:
                           1432 ;	radio/radio.c:308: radio_clear_transmit_fifo();
   0348 C0 07         [24] 1433 	push	ar7
   034A 12r02rD8      [24] 1434 	lcall	_radio_clear_transmit_fifo
   034D D0 07         [24] 1435 	pop	ar7
                           1436 ;	radio/radio.c:310: register_write(EZRADIOPRO_TRANSMIT_PACKET_LENGTH, length);
   034F C0 07         [24] 1437 	push	ar7
   0351 C0 07         [24] 1438 	push	ar7
   0353 75 82 3E      [24] 1439 	mov	dpl,#0x3E
   0356 12r0Br44      [24] 1440 	lcall	_register_write
   0359 15 81         [12] 1441 	dec	sp
   035B D0 07         [24] 1442 	pop	ar7
                           1443 ;	radio/radio.c:313: n = length;
                           1444 ;	radio/radio.c:314: if (n > TX_FIFO_THRESHOLD_LOW) {
   035D EF            [12] 1445 	mov	a,r7
   035E FE            [12] 1446 	mov	r6,a
   035F 24 DF         [12] 1447 	add	a,#0xff - 0x20
   0361 50 02         [24] 1448 	jnc	00104$
                           1449 ;	radio/radio.c:315: n = TX_FIFO_THRESHOLD_LOW;
   0363 7E 20         [12] 1450 	mov	r6,#0x20
   0365                    1451 00104$:
                           1452 ;	radio/radio.c:317: radio_write_transmit_fifo(n, buf);
   0365 78r15         [12] 1453 	mov	r0,#_radio_transmit_simple_PARM_2
   0367 79r13         [12] 1454 	mov	r1,#_radio_write_transmit_fifo_PARM_2
   0369 E2            [24] 1455 	movx	a,@r0
   036A F3            [24] 1456 	movx	@r1,a
   036B 08            [12] 1457 	inc	r0
   036C E2            [24] 1458 	movx	a,@r0
   036D 09            [12] 1459 	inc	r1
   036E F3            [24] 1460 	movx	@r1,a
   036F 8E 82         [24] 1461 	mov	dpl,r6
   0371 C0 07         [24] 1462 	push	ar7
   0373 C0 06         [24] 1463 	push	ar6
   0375 12r02r5D      [24] 1464 	lcall	_radio_write_transmit_fifo
   0378 D0 06         [24] 1465 	pop	ar6
   037A D0 07         [24] 1466 	pop	ar7
                           1467 ;	radio/radio.c:318: length -= n;
   037C EF            [12] 1468 	mov	a,r7
   037D C3            [12] 1469 	clr	c
   037E 9E            [12] 1470 	subb	a,r6
   037F FF            [12] 1471 	mov	r7,a
                           1472 ;	radio/radio.c:319: buf += n;
   0380 78r15         [12] 1473 	mov	r0,#_radio_transmit_simple_PARM_2
   0382 E2            [24] 1474 	movx	a,@r0
   0383 2E            [12] 1475 	add	a,r6
   0384 F2            [24] 1476 	movx	@r0,a
   0385 08            [12] 1477 	inc	r0
   0386 E2            [24] 1478 	movx	a,@r0
   0387 34 00         [12] 1479 	addc	a,#0x00
   0389 F2            [24] 1480 	movx	@r0,a
                           1481 ;	radio/radio.c:322: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, 0);
   038A C0 07         [24] 1482 	push	ar7
   038C E4            [12] 1483 	clr	a
   038D C0 E0         [24] 1484 	push	acc
   038F 75 82 05      [24] 1485 	mov	dpl,#0x05
   0392 12r0Br44      [24] 1486 	lcall	_register_write
   0395 15 81         [12] 1487 	dec	sp
                           1488 ;	radio/radio.c:323: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, 0);
   0397 E4            [12] 1489 	clr	a
   0398 C0 E0         [24] 1490 	push	acc
   039A 75 82 06      [24] 1491 	mov	dpl,#0x06
   039D 12r0Br44      [24] 1492 	lcall	_register_write
   03A0 15 81         [12] 1493 	dec	sp
                           1494 ;	radio/radio.c:325: preamble_detected = 0;
   03A2 C2*01         [12] 1495 	clr	_preamble_detected
                           1496 ;	radio/radio.c:326: transmit_started = false;
   03A4 C2*03         [12] 1497 	clr	_radio_transmit_simple_transmit_started_1_170
                           1498 ;	radio/radio.c:329: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_1, EZRADIOPRO_TXON | EZRADIOPRO_XTON);
   03A6 74 09         [12] 1499 	mov	a,#0x09
   03A8 C0 E0         [24] 1500 	push	acc
   03AA 75 82 07      [24] 1501 	mov	dpl,#0x07
   03AD 12r0Br44      [24] 1502 	lcall	_register_write
   03B0 15 81         [12] 1503 	dec	sp
                           1504 ;	radio/radio.c:332: tstart = timer2_tick();
   03B2 12r00r00      [24] 1505 	lcall	_timer2_tick
   03B5 AC 82         [24] 1506 	mov	r4,dpl
   03B7 AD 83         [24] 1507 	mov	r5,dph
   03B9 D0 07         [24] 1508 	pop	ar7
                           1509 ;	radio/radio.c:333: while ((uint16_t)(timer2_tick() - tstart) < timeout_ticks) {
   03BB                    1510 00130$:
   03BB C0 07         [24] 1511 	push	ar7
   03BD C0 05         [24] 1512 	push	ar5
   03BF C0 04         [24] 1513 	push	ar4
   03C1 12r00r00      [24] 1514 	lcall	_timer2_tick
   03C4 AA 82         [24] 1515 	mov	r2,dpl
   03C6 AB 83         [24] 1516 	mov	r3,dph
   03C8 D0 04         [24] 1517 	pop	ar4
   03CA D0 05         [24] 1518 	pop	ar5
   03CC D0 07         [24] 1519 	pop	ar7
   03CE EA            [12] 1520 	mov	a,r2
   03CF C3            [12] 1521 	clr	c
   03D0 9C            [12] 1522 	subb	a,r4
   03D1 FA            [12] 1523 	mov	r2,a
   03D2 EB            [12] 1524 	mov	a,r3
   03D3 9D            [12] 1525 	subb	a,r5
   03D4 FB            [12] 1526 	mov	r3,a
   03D5 78r17         [12] 1527 	mov	r0,#_radio_transmit_simple_PARM_3
   03D7 C3            [12] 1528 	clr	c
   03D8 E2            [24] 1529 	movx	a,@r0
   03D9 F5 F0         [12] 1530 	mov	b,a
   03DB EA            [12] 1531 	mov	a,r2
   03DC 95 F0         [12] 1532 	subb	a,b
   03DE 08            [12] 1533 	inc	r0
   03DF E2            [24] 1534 	movx	a,@r0
   03E0 F5 F0         [12] 1535 	mov	b,a
   03E2 EB            [12] 1536 	mov	a,r3
   03E3 95 F0         [12] 1537 	subb	a,b
   03E5 40 03         [24] 1538 	jc	00199$
   03E7 02r04rF4      [24] 1539 	ljmp	00132$
   03EA                    1540 00199$:
                           1541 ;	radio/radio.c:337: status = register_read(EZRADIOPRO_INTERRUPT_STATUS_1);
   03EA 75 82 03      [24] 1542 	mov	dpl,#0x03
   03ED C0 07         [24] 1543 	push	ar7
   03EF C0 05         [24] 1544 	push	ar5
   03F1 C0 04         [24] 1545 	push	ar4
   03F3 12r0Br74      [24] 1546 	lcall	_register_read
   03F6 AB 82         [24] 1547 	mov	r3,dpl
   03F8 D0 04         [24] 1548 	pop	ar4
   03FA D0 05         [24] 1549 	pop	ar5
   03FC D0 07         [24] 1550 	pop	ar7
                           1551 ;	radio/radio.c:338: if (transmit_started && length != 0 && (status & EZRADIOPRO_ITXFFAEM)) {
   03FE 30*03 40      [24] 1552 	jnb	_radio_transmit_simple_transmit_started_1_170,00108$
   0401 EF            [12] 1553 	mov	a,r7
   0402 60 3D         [24] 1554 	jz	00108$
   0404 EB            [12] 1555 	mov	a,r3
   0405 30 E5 39      [24] 1556 	jnb	acc.5,00108$
                           1557 ;	radio/radio.c:345: n = 4;
   0408 7E 04         [12] 1558 	mov	r6,#0x04
                           1559 ;	radio/radio.c:346: if (n > length) {
   040A BF 04 00      [24] 1560 	cjne	r7,#0x04,00203$
   040D                    1561 00203$:
   040D 50 02         [24] 1562 	jnc	00106$
                           1563 ;	radio/radio.c:347: n = length;
   040F 8F 06         [24] 1564 	mov	ar6,r7
   0411                    1565 00106$:
                           1566 ;	radio/radio.c:349: radio_write_transmit_fifo(n, buf);
   0411 78r15         [12] 1567 	mov	r0,#_radio_transmit_simple_PARM_2
   0413 79r13         [12] 1568 	mov	r1,#_radio_write_transmit_fifo_PARM_2
   0415 E2            [24] 1569 	movx	a,@r0
   0416 F3            [24] 1570 	movx	@r1,a
   0417 08            [12] 1571 	inc	r0
   0418 E2            [24] 1572 	movx	a,@r0
   0419 09            [12] 1573 	inc	r1
   041A F3            [24] 1574 	movx	@r1,a
   041B 8E 82         [24] 1575 	mov	dpl,r6
   041D C0 07         [24] 1576 	push	ar7
   041F C0 06         [24] 1577 	push	ar6
   0421 C0 05         [24] 1578 	push	ar5
   0423 C0 04         [24] 1579 	push	ar4
   0425 12r02r5D      [24] 1580 	lcall	_radio_write_transmit_fifo
   0428 D0 04         [24] 1581 	pop	ar4
   042A D0 05         [24] 1582 	pop	ar5
   042C D0 06         [24] 1583 	pop	ar6
   042E D0 07         [24] 1584 	pop	ar7
                           1585 ;	radio/radio.c:350: length -= n;
   0430 EF            [12] 1586 	mov	a,r7
   0431 C3            [12] 1587 	clr	c
   0432 9E            [12] 1588 	subb	a,r6
   0433 FF            [12] 1589 	mov	r7,a
                           1590 ;	radio/radio.c:351: buf += n;
   0434 78r15         [12] 1591 	mov	r0,#_radio_transmit_simple_PARM_2
   0436 E2            [24] 1592 	movx	a,@r0
   0437 2E            [12] 1593 	add	a,r6
   0438 F2            [24] 1594 	movx	@r0,a
   0439 08            [12] 1595 	inc	r0
   043A E2            [24] 1596 	movx	a,@r0
   043B 34 00         [12] 1597 	addc	a,#0x00
   043D F2            [24] 1598 	movx	@r0,a
                           1599 ;	radio/radio.c:352: continue;
   043E 02r03rBB      [24] 1600 	ljmp	00130$
   0441                    1601 00108$:
                           1602 ;	radio/radio.c:354: if (transmit_started && length != 0 && (status & EZRADIOPRO_ITXFFAFULL) == 0) {
   0441 30*03 40      [24] 1603 	jnb	_radio_transmit_simple_transmit_started_1_170,00114$
   0444 EF            [12] 1604 	mov	a,r7
   0445 60 3D         [24] 1605 	jz	00114$
   0447 EB            [12] 1606 	mov	a,r3
   0448 20 E6 39      [24] 1607 	jb	acc.6,00114$
                           1608 ;	radio/radio.c:358: n = 4;
   044B 7E 04         [12] 1609 	mov	r6,#0x04
                           1610 ;	radio/radio.c:359: if (n > length) {
   044D BF 04 00      [24] 1611 	cjne	r7,#0x04,00208$
   0450                    1612 00208$:
   0450 50 02         [24] 1613 	jnc	00112$
                           1614 ;	radio/radio.c:360: n = length;
   0452 8F 06         [24] 1615 	mov	ar6,r7
   0454                    1616 00112$:
                           1617 ;	radio/radio.c:362: radio_write_transmit_fifo(n, buf);
   0454 78r15         [12] 1618 	mov	r0,#_radio_transmit_simple_PARM_2
   0456 79r13         [12] 1619 	mov	r1,#_radio_write_transmit_fifo_PARM_2
   0458 E2            [24] 1620 	movx	a,@r0
   0459 F3            [24] 1621 	movx	@r1,a
   045A 08            [12] 1622 	inc	r0
   045B E2            [24] 1623 	movx	a,@r0
   045C 09            [12] 1624 	inc	r1
   045D F3            [24] 1625 	movx	@r1,a
   045E 8E 82         [24] 1626 	mov	dpl,r6
   0460 C0 07         [24] 1627 	push	ar7
   0462 C0 06         [24] 1628 	push	ar6
   0464 C0 05         [24] 1629 	push	ar5
   0466 C0 04         [24] 1630 	push	ar4
   0468 12r02r5D      [24] 1631 	lcall	_radio_write_transmit_fifo
   046B D0 04         [24] 1632 	pop	ar4
   046D D0 05         [24] 1633 	pop	ar5
   046F D0 06         [24] 1634 	pop	ar6
   0471 D0 07         [24] 1635 	pop	ar7
                           1636 ;	radio/radio.c:363: length -= n;
   0473 EF            [12] 1637 	mov	a,r7
   0474 C3            [12] 1638 	clr	c
   0475 9E            [12] 1639 	subb	a,r6
   0476 FF            [12] 1640 	mov	r7,a
                           1641 ;	radio/radio.c:364: buf += n;
   0477 78r15         [12] 1642 	mov	r0,#_radio_transmit_simple_PARM_2
   0479 E2            [24] 1643 	movx	a,@r0
   047A 2E            [12] 1644 	add	a,r6
   047B F2            [24] 1645 	movx	@r0,a
   047C 08            [12] 1646 	inc	r0
   047D E2            [24] 1647 	movx	a,@r0
   047E 34 00         [12] 1648 	addc	a,#0x00
   0480 F2            [24] 1649 	movx	@r0,a
                           1650 ;	radio/radio.c:365: continue;
   0481 02r03rBB      [24] 1651 	ljmp	00130$
   0484                    1652 00114$:
                           1653 ;	radio/radio.c:368: if (status & EZRADIOPRO_IFFERR) {
   0484 EB            [12] 1654 	mov	a,r3
   0485 30 E7 20      [24] 1655 	jnb	acc.7,00120$
                           1656 ;	radio/radio.c:370: radio_clear_transmit_fifo();
   0488 12r02rD8      [24] 1657 	lcall	_radio_clear_transmit_fifo
                           1658 ;	radio/radio.c:372: if (errors.tx_errors != 0xFFFF) {
   048B 78r02         [12] 1659 	mov	r0,#(_errors + 0x0002)
   048D E2            [24] 1660 	movx	a,@r0
   048E FA            [12] 1661 	mov	r2,a
   048F 08            [12] 1662 	inc	r0
   0490 E2            [24] 1663 	movx	a,@r0
   0491 FE            [12] 1664 	mov	r6,a
   0492 BA FF 05      [24] 1665 	cjne	r2,#0xFF,00211$
   0495 BE FF 02      [24] 1666 	cjne	r6,#0xFF,00211$
   0498 80 0C         [24] 1667 	sjmp	00118$
   049A                    1668 00211$:
                           1669 ;	radio/radio.c:373: errors.tx_errors++;
   049A 0A            [12] 1670 	inc	r2
   049B BA 00 01      [24] 1671 	cjne	r2,#0x00,00212$
   049E 0E            [12] 1672 	inc	r6
   049F                    1673 00212$:
   049F 78r02         [12] 1674 	mov	r0,#(_errors + 0x0002)
   04A1 EA            [12] 1675 	mov	a,r2
   04A2 F2            [24] 1676 	movx	@r0,a
   04A3 08            [12] 1677 	inc	r0
   04A4 EE            [12] 1678 	mov	a,r6
   04A5 F2            [24] 1679 	movx	@r0,a
   04A6                    1680 00118$:
                           1681 ;	radio/radio.c:375: return false;
   04A6 C3            [12] 1682 	clr	c
   04A7 22            [24] 1683 	ret
   04A8                    1684 00120$:
                           1685 ;	radio/radio.c:380: status = register_read(EZRADIOPRO_DEVICE_STATUS);
   04A8 75 82 02      [24] 1686 	mov	dpl,#0x02
   04AB C0 07         [24] 1687 	push	ar7
   04AD C0 05         [24] 1688 	push	ar5
   04AF C0 04         [24] 1689 	push	ar4
   04B1 12r0Br74      [24] 1690 	lcall	_register_read
   04B4 AB 82         [24] 1691 	mov	r3,dpl
   04B6 D0 04         [24] 1692 	pop	ar4
   04B8 D0 05         [24] 1693 	pop	ar5
   04BA D0 07         [24] 1694 	pop	ar7
                           1695 ;	radio/radio.c:381: if (status & 0x02) {
   04BC EB            [12] 1696 	mov	a,r3
   04BD 30 E1 05      [24] 1697 	jnb	acc.1,00122$
                           1698 ;	radio/radio.c:383: transmit_started = true;
   04C0 D2*03         [12] 1699 	setb	_radio_transmit_simple_transmit_started_1_170
                           1700 ;	radio/radio.c:384: continue;
   04C2 02r03rBB      [24] 1701 	ljmp	00130$
   04C5                    1702 00122$:
                           1703 ;	radio/radio.c:386: if (transmit_started && (status & 0x02) == 0) {
   04C5 20*03 03      [24] 1704 	jb	_radio_transmit_simple_transmit_started_1_170,00214$
   04C8 02r03rBB      [24] 1705 	ljmp	00130$
   04CB                    1706 00214$:
   04CB EB            [12] 1707 	mov	a,r3
   04CC 30 E1 03      [24] 1708 	jnb	acc.1,00215$
   04CF 02r03rBB      [24] 1709 	ljmp	00130$
   04D2                    1710 00215$:
                           1711 ;	radio/radio.c:389: if (length != 0) {
   04D2 EF            [12] 1712 	mov	a,r7
   04D3 60 1D         [24] 1713 	jz	00126$
                           1714 ;	radio/radio.c:391: if (errors.tx_errors != 0xFFFF) {
   04D5 78r02         [12] 1715 	mov	r0,#(_errors + 0x0002)
   04D7 E2            [24] 1716 	movx	a,@r0
   04D8 FE            [12] 1717 	mov	r6,a
   04D9 08            [12] 1718 	inc	r0
   04DA E2            [24] 1719 	movx	a,@r0
   04DB FF            [12] 1720 	mov	r7,a
   04DC BE FF 05      [24] 1721 	cjne	r6,#0xFF,00217$
   04DF BF FF 02      [24] 1722 	cjne	r7,#0xFF,00217$
   04E2 80 0C         [24] 1723 	sjmp	00124$
   04E4                    1724 00217$:
                           1725 ;	radio/radio.c:392: errors.tx_errors++;
   04E4 0E            [12] 1726 	inc	r6
   04E5 BE 00 01      [24] 1727 	cjne	r6,#0x00,00218$
   04E8 0F            [12] 1728 	inc	r7
   04E9                    1729 00218$:
   04E9 78r02         [12] 1730 	mov	r0,#(_errors + 0x0002)
   04EB EE            [12] 1731 	mov	a,r6
   04EC F2            [24] 1732 	movx	@r0,a
   04ED 08            [12] 1733 	inc	r0
   04EE EF            [12] 1734 	mov	a,r7
   04EF F2            [24] 1735 	movx	@r0,a
   04F0                    1736 00124$:
                           1737 ;	radio/radio.c:394: return false;
   04F0 C3            [12] 1738 	clr	c
   04F1 22            [24] 1739 	ret
   04F2                    1740 00126$:
                           1741 ;	radio/radio.c:396: return true;			
   04F2 D3            [12] 1742 	setb	c
   04F3 22            [24] 1743 	ret
   04F4                    1744 00132$:
                           1745 ;	radio/radio.c:407: if (errors.tx_errors != 0xFFFF) {
   04F4 78r02         [12] 1746 	mov	r0,#(_errors + 0x0002)
   04F6 E2            [24] 1747 	movx	a,@r0
   04F7 FE            [12] 1748 	mov	r6,a
   04F8 08            [12] 1749 	inc	r0
   04F9 E2            [24] 1750 	movx	a,@r0
   04FA FF            [12] 1751 	mov	r7,a
   04FB BE FF 05      [24] 1752 	cjne	r6,#0xFF,00219$
   04FE BF FF 02      [24] 1753 	cjne	r7,#0xFF,00219$
   0501 80 0C         [24] 1754 	sjmp	00134$
   0503                    1755 00219$:
                           1756 ;	radio/radio.c:408: errors.tx_errors++;
   0503 0E            [12] 1757 	inc	r6
   0504 BE 00 01      [24] 1758 	cjne	r6,#0x00,00220$
   0507 0F            [12] 1759 	inc	r7
   0508                    1760 00220$:
   0508 78r02         [12] 1761 	mov	r0,#(_errors + 0x0002)
   050A EE            [12] 1762 	mov	a,r6
   050B F2            [24] 1763 	movx	@r0,a
   050C 08            [12] 1764 	inc	r0
   050D EF            [12] 1765 	mov	a,r7
   050E F2            [24] 1766 	movx	@r0,a
   050F                    1767 00134$:
                           1768 ;	radio/radio.c:411: return false;
   050F C3            [12] 1769 	clr	c
   0510 22            [24] 1770 	ret
                           1771 ;------------------------------------------------------------
                           1772 ;Allocation info for local variables in function 'radio_transmit_golay'
                           1773 ;------------------------------------------------------------
                           1774 ;elen                      Allocated with name '_radio_transmit_golay_elen_1_186'
                           1775 ;rlen                      Allocated to registers r5 
                           1776 ;length                    Allocated with name '_radio_transmit_golay_length_1_185'
                           1777 ;gin                       Allocated with name '_radio_transmit_golay_gin_1_186'
                           1778 ;------------------------------------------------------------
                           1779 ;	radio/radio.c:424: radio_transmit_golay(uint8_t length, __xdata uint8_t * __pdata buf, __pdata uint16_t timeout_ticks)
                           1780 ;	-----------------------------------------
                           1781 ;	 function radio_transmit_golay
                           1782 ;	-----------------------------------------
   0511                    1783 _radio_transmit_golay:
   0511 E5 82         [12] 1784 	mov	a,dpl
                           1785 ;	radio/radio.c:430: if (length > (sizeof(radio_buffer)/2)-6) {
   0513 90r01r02      [24] 1786 	mov	dptr,#_radio_transmit_golay_length_1_185
   0516 F0            [24] 1787 	movx	@dptr,a
   0517 FF            [12] 1788 	mov  r7,a
   0518 24 87         [12] 1789 	add	a,#0xff - 0x78
   051A 50 19         [24] 1790 	jnc	00102$
                           1791 ;	radio/radio.c:432: panic("oversized golay packet");		
   051C C0 07         [24] 1792 	push	ar7
   051E 74r11         [12] 1793 	mov	a,#__str_1
   0520 C0 E0         [24] 1794 	push	acc
   0522 74s00         [12] 1795 	mov	a,#(__str_1 >> 8)
   0524 C0 E0         [24] 1796 	push	acc
   0526 74 80         [12] 1797 	mov	a,#0x80
   0528 C0 E0         [24] 1798 	push	acc
   052A 12r00r00      [24] 1799 	lcall	_panic
   052D 15 81         [12] 1800 	dec	sp
   052F 15 81         [12] 1801 	dec	sp
   0531 15 81         [12] 1802 	dec	sp
   0533 D0 07         [24] 1803 	pop	ar7
   0535                    1804 00102$:
                           1805 ;	radio/radio.c:436: rlen = ((length+2)/3)*3;
   0535 8F 05         [24] 1806 	mov	ar5,r7
   0537 7E 00         [12] 1807 	mov	r6,#0x00
   0539 74 02         [12] 1808 	mov	a,#0x02
   053B 2D            [12] 1809 	add	a,r5
   053C FD            [12] 1810 	mov	r5,a
   053D E4            [12] 1811 	clr	a
   053E 3E            [12] 1812 	addc	a,r6
   053F FE            [12] 1813 	mov	r6,a
   0540 90r00r00      [24] 1814 	mov	dptr,#__divsint_PARM_2
   0543 74 03         [12] 1815 	mov	a,#0x03
   0545 F0            [24] 1816 	movx	@dptr,a
   0546 E4            [12] 1817 	clr	a
   0547 A3            [24] 1818 	inc	dptr
   0548 F0            [24] 1819 	movx	@dptr,a
   0549 8D 82         [24] 1820 	mov	dpl,r5
   054B 8E 83         [24] 1821 	mov	dph,r6
   054D C0 07         [24] 1822 	push	ar7
   054F 12r00r00      [24] 1823 	lcall	__divsint
   0552 AD 82         [24] 1824 	mov	r5,dpl
   0554 D0 07         [24] 1825 	pop	ar7
   0556 ED            [12] 1826 	mov	a,r5
   0557 75 F0 03      [24] 1827 	mov	b,#0x03
   055A A4            [48] 1828 	mul	ab
                           1829 ;	radio/radio.c:439: elen = (rlen+6)*2;
   055B FD            [12] 1830 	mov	r5,a
   055C 24 06         [12] 1831 	add	a,#0x06
   055E 25 E0         [12] 1832 	add	a,acc
   0560 F5*02         [12] 1833 	mov	_radio_transmit_golay_elen_1_186,a
                           1834 ;	radio/radio.c:442: gin[0] = netid[0];
   0562 78r03         [12] 1835 	mov	r0,#_netid
   0564 E2            [24] 1836 	movx	a,@r0
   0565 90r01r03      [24] 1837 	mov	dptr,#_radio_transmit_golay_gin_1_186
   0568 F0            [24] 1838 	movx	@dptr,a
                           1839 ;	radio/radio.c:443: gin[1] = netid[1];
   0569 78r04         [12] 1840 	mov	r0,#(_netid + 0x0001)
   056B E2            [24] 1841 	movx	a,@r0
   056C 90r01r04      [24] 1842 	mov	dptr,#(_radio_transmit_golay_gin_1_186 + 0x0001)
   056F F0            [24] 1843 	movx	@dptr,a
                           1844 ;	radio/radio.c:444: gin[2] = length;
   0570 90r01r05      [24] 1845 	mov	dptr,#(_radio_transmit_golay_gin_1_186 + 0x0002)
   0573 EF            [12] 1846 	mov	a,r7
   0574 F0            [24] 1847 	movx	@dptr,a
                           1848 ;	radio/radio.c:447: golay_encode(3, gin, radio_buffer);
   0575 78r00         [12] 1849 	mov	r0,#_golay_encode_PARM_2
   0577 74r03         [12] 1850 	mov	a,#_radio_transmit_golay_gin_1_186
   0579 F2            [24] 1851 	movx	@r0,a
   057A 08            [12] 1852 	inc	r0
   057B 74s01         [12] 1853 	mov	a,#(_radio_transmit_golay_gin_1_186 >> 8)
   057D F2            [24] 1854 	movx	@r0,a
   057E 78r00         [12] 1855 	mov	r0,#_golay_encode_PARM_3
   0580 74r00         [12] 1856 	mov	a,#_radio_buffer
   0582 F2            [24] 1857 	movx	@r0,a
   0583 08            [12] 1858 	inc	r0
   0584 74s00         [12] 1859 	mov	a,#(_radio_buffer >> 8)
   0586 F2            [24] 1860 	movx	@r0,a
   0587 75 82 03      [24] 1861 	mov	dpl,#0x03
   058A C0 07         [24] 1862 	push	ar7
   058C C0 05         [24] 1863 	push	ar5
   058E 12r00r00      [24] 1864 	lcall	_golay_encode
   0591 D0 05         [24] 1865 	pop	ar5
   0593 D0 07         [24] 1866 	pop	ar7
                           1867 ;	radio/radio.c:451: crc = crc16(length, buf);
   0595 78r19         [12] 1868 	mov	r0,#_radio_transmit_golay_PARM_2
   0597 E2            [24] 1869 	movx	a,@r0
   0598 F5*00         [12] 1870 	mov	_crc16_PARM_2,a
   059A 08            [12] 1871 	inc	r0
   059B E2            [24] 1872 	movx	a,@r0
   059C F5*01         [12] 1873 	mov	(_crc16_PARM_2 + 1),a
   059E 8F 82         [24] 1874 	mov	dpl,r7
   05A0 C0 07         [24] 1875 	push	ar7
   05A2 C0 05         [24] 1876 	push	ar5
   05A4 12r00r00      [24] 1877 	lcall	_crc16
   05A7 AB 82         [24] 1878 	mov	r3,dpl
   05A9 AC 83         [24] 1879 	mov	r4,dph
   05AB D0 05         [24] 1880 	pop	ar5
   05AD D0 07         [24] 1881 	pop	ar7
                           1882 ;	radio/radio.c:452: gin[0] = crc&0xFF;
   05AF 8B 02         [24] 1883 	mov	ar2,r3
   05B1 90r01r03      [24] 1884 	mov	dptr,#_radio_transmit_golay_gin_1_186
   05B4 EA            [12] 1885 	mov	a,r2
   05B5 F0            [24] 1886 	movx	@dptr,a
                           1887 ;	radio/radio.c:453: gin[1] = crc>>8;
   05B6 8C 03         [24] 1888 	mov	ar3,r4
   05B8 90r01r04      [24] 1889 	mov	dptr,#(_radio_transmit_golay_gin_1_186 + 0x0001)
   05BB EB            [12] 1890 	mov	a,r3
   05BC F0            [24] 1891 	movx	@dptr,a
                           1892 ;	radio/radio.c:454: gin[2] = length;
   05BD 90r01r05      [24] 1893 	mov	dptr,#(_radio_transmit_golay_gin_1_186 + 0x0002)
   05C0 EF            [12] 1894 	mov	a,r7
   05C1 F0            [24] 1895 	movx	@dptr,a
                           1896 ;	radio/radio.c:457: golay_encode(3, gin, &radio_buffer[6]);
   05C2 78r00         [12] 1897 	mov	r0,#_golay_encode_PARM_3
   05C4 74 06         [12] 1898 	mov	a,#0x06
   05C6 24r00         [12] 1899 	add	a,#_radio_buffer
   05C8 F2            [24] 1900 	movx	@r0,a
   05C9 E4            [12] 1901 	clr	a
   05CA 34s00         [12] 1902 	addc	a,#(_radio_buffer >> 8)
   05CC 08            [12] 1903 	inc	r0
   05CD F2            [24] 1904 	movx	@r0,a
   05CE 78r00         [12] 1905 	mov	r0,#_golay_encode_PARM_2
   05D0 74r03         [12] 1906 	mov	a,#_radio_transmit_golay_gin_1_186
   05D2 F2            [24] 1907 	movx	@r0,a
   05D3 08            [12] 1908 	inc	r0
   05D4 74s01         [12] 1909 	mov	a,#(_radio_transmit_golay_gin_1_186 >> 8)
   05D6 F2            [24] 1910 	movx	@r0,a
   05D7 75 82 03      [24] 1911 	mov	dpl,#0x03
   05DA C0 05         [24] 1912 	push	ar5
   05DC 12r00r00      [24] 1913 	lcall	_golay_encode
   05DF D0 05         [24] 1914 	pop	ar5
                           1915 ;	radio/radio.c:460: golay_encode(rlen, buf, &radio_buffer[12]);
   05E1 78r00         [12] 1916 	mov	r0,#_golay_encode_PARM_3
   05E3 74 0C         [12] 1917 	mov	a,#0x0C
   05E5 24r00         [12] 1918 	add	a,#_radio_buffer
   05E7 F2            [24] 1919 	movx	@r0,a
   05E8 E4            [12] 1920 	clr	a
   05E9 34s00         [12] 1921 	addc	a,#(_radio_buffer >> 8)
   05EB 08            [12] 1922 	inc	r0
   05EC F2            [24] 1923 	movx	@r0,a
   05ED 78r19         [12] 1924 	mov	r0,#_radio_transmit_golay_PARM_2
   05EF 79r00         [12] 1925 	mov	r1,#_golay_encode_PARM_2
   05F1 E2            [24] 1926 	movx	a,@r0
   05F2 F3            [24] 1927 	movx	@r1,a
   05F3 08            [12] 1928 	inc	r0
   05F4 E2            [24] 1929 	movx	a,@r0
   05F5 09            [12] 1930 	inc	r1
   05F6 F3            [24] 1931 	movx	@r1,a
   05F7 8D 82         [24] 1932 	mov	dpl,r5
   05F9 12r00r00      [24] 1933 	lcall	_golay_encode
                           1934 ;	radio/radio.c:462: return radio_transmit_simple(elen, radio_buffer, timeout_ticks);
   05FC 78r15         [12] 1935 	mov	r0,#_radio_transmit_simple_PARM_2
   05FE 74r00         [12] 1936 	mov	a,#_radio_buffer
   0600 F2            [24] 1937 	movx	@r0,a
   0601 08            [12] 1938 	inc	r0
   0602 74s00         [12] 1939 	mov	a,#(_radio_buffer >> 8)
   0604 F2            [24] 1940 	movx	@r0,a
   0605 78r1B         [12] 1941 	mov	r0,#_radio_transmit_golay_PARM_3
   0607 79r17         [12] 1942 	mov	r1,#_radio_transmit_simple_PARM_3
   0609 E2            [24] 1943 	movx	a,@r0
   060A F3            [24] 1944 	movx	@r1,a
   060B 08            [12] 1945 	inc	r0
   060C E2            [24] 1946 	movx	a,@r0
   060D 09            [12] 1947 	inc	r1
   060E F3            [24] 1948 	movx	@r1,a
   060F 85*02 82      [24] 1949 	mov	dpl,_radio_transmit_golay_elen_1_186
   0612 12r03r28      [24] 1950 	lcall	_radio_transmit_simple
   0615 92*04         [24] 1951 	mov  _radio_transmit_golay_sloc0_1_0,c
   0617 22            [24] 1952 	ret
                           1953 ;------------------------------------------------------------
                           1954 ;Allocation info for local variables in function 'radio_transmit'
                           1955 ;------------------------------------------------------------
                           1956 ;length                    Allocated with name '_radio_transmit_length_1_188'
                           1957 ;------------------------------------------------------------
                           1958 ;	radio/radio.c:474: radio_transmit(uint8_t length, __xdata uint8_t * __pdata buf, __pdata uint16_t timeout_ticks)
                           1959 ;	-----------------------------------------
                           1960 ;	 function radio_transmit
                           1961 ;	-----------------------------------------
   0618                    1962 _radio_transmit:
   0618 E5 82         [12] 1963 	mov	a,dpl
   061A 90r01r06      [24] 1964 	mov	dptr,#_radio_transmit_length_1_188
   061D F0            [24] 1965 	movx	@dptr,a
                           1966 ;	radio/radio.c:477: EX0_SAVE_DISABLE;
   061E A2 A8         [12] 1967 	mov	c,_EX0
   0620 92*05         [24] 1968 	mov	_radio_transmit_EX0_saved_1_189,c
   0622 C2 A8         [12] 1969 	clr	_EX0
                           1970 ;	radio/radio.c:483: if (!feature_golay) {
   0624 20*00 22      [24] 1971 	jb	_feature_golay,00102$
                           1972 ;	radio/radio.c:484: ret = radio_transmit_simple(length, buf, timeout_ticks);
   0627 90r01r06      [24] 1973 	mov	dptr,#_radio_transmit_length_1_188
   062A E0            [24] 1974 	movx	a,@dptr
   062B FF            [12] 1975 	mov	r7,a
   062C 78r1D         [12] 1976 	mov	r0,#_radio_transmit_PARM_2
   062E 79r15         [12] 1977 	mov	r1,#_radio_transmit_simple_PARM_2
   0630 E2            [24] 1978 	movx	a,@r0
   0631 F3            [24] 1979 	movx	@r1,a
   0632 08            [12] 1980 	inc	r0
   0633 E2            [24] 1981 	movx	a,@r0
   0634 09            [12] 1982 	inc	r1
   0635 F3            [24] 1983 	movx	@r1,a
   0636 78r1F         [12] 1984 	mov	r0,#_radio_transmit_PARM_3
   0638 79r17         [12] 1985 	mov	r1,#_radio_transmit_simple_PARM_3
   063A E2            [24] 1986 	movx	a,@r0
   063B F3            [24] 1987 	movx	@r1,a
   063C 08            [12] 1988 	inc	r0
   063D E2            [24] 1989 	movx	a,@r0
   063E 09            [12] 1990 	inc	r1
   063F F3            [24] 1991 	movx	@r1,a
   0640 8F 82         [24] 1992 	mov	dpl,r7
   0642 12r03r28      [24] 1993 	lcall	_radio_transmit_simple
   0645 92*06         [24] 1994 	mov	_radio_transmit_sloc0_1_0,c
   0647 80 20         [24] 1995 	sjmp	00103$
   0649                    1996 00102$:
                           1997 ;	radio/radio.c:486: ret = radio_transmit_golay(length, buf, timeout_ticks);
   0649 90r01r06      [24] 1998 	mov	dptr,#_radio_transmit_length_1_188
   064C E0            [24] 1999 	movx	a,@dptr
   064D FF            [12] 2000 	mov	r7,a
   064E 78r1D         [12] 2001 	mov	r0,#_radio_transmit_PARM_2
   0650 79r19         [12] 2002 	mov	r1,#_radio_transmit_golay_PARM_2
   0652 E2            [24] 2003 	movx	a,@r0
   0653 F3            [24] 2004 	movx	@r1,a
   0654 08            [12] 2005 	inc	r0
   0655 E2            [24] 2006 	movx	a,@r0
   0656 09            [12] 2007 	inc	r1
   0657 F3            [24] 2008 	movx	@r1,a
   0658 78r1F         [12] 2009 	mov	r0,#_radio_transmit_PARM_3
   065A 79r1B         [12] 2010 	mov	r1,#_radio_transmit_golay_PARM_3
   065C E2            [24] 2011 	movx	a,@r0
   065D F3            [24] 2012 	movx	@r1,a
   065E 08            [12] 2013 	inc	r0
   065F E2            [24] 2014 	movx	a,@r0
   0660 09            [12] 2015 	inc	r1
   0661 F3            [24] 2016 	movx	@r1,a
   0662 8F 82         [24] 2017 	mov	dpl,r7
   0664 12r05r11      [24] 2018 	lcall	_radio_transmit_golay
   0667 92*06         [24] 2019 	mov	_radio_transmit_sloc0_1_0,c
   0669                    2020 00103$:
                           2021 ;	radio/radio.c:491: EX0_RESTORE;
   0669 A2*05         [12] 2022 	mov	c,_radio_transmit_EX0_saved_1_189
   066B 92 A8         [24] 2023 	mov	_EX0,c
                           2024 ;	radio/radio.c:492: return ret;
   066D A2*06         [12] 2025 	mov	c,_radio_transmit_sloc0_1_0
   066F 22            [24] 2026 	ret
                           2027 ;------------------------------------------------------------
                           2028 ;Allocation info for local variables in function 'radio_receiver_on'
                           2029 ;------------------------------------------------------------
                           2030 ;	radio/radio.c:499: radio_receiver_on(void)
                           2031 ;	-----------------------------------------
                           2032 ;	 function radio_receiver_on
                           2033 ;	-----------------------------------------
   0670                    2034 _radio_receiver_on:
                           2035 ;	radio/radio.c:501: EX0 = 0;
   0670 C2 A8         [12] 2036 	clr	_EX0
                           2037 ;	radio/radio.c:503: packet_received = 0;
   0672 C2*00         [12] 2038 	clr	_packet_received
                           2039 ;	radio/radio.c:504: receive_packet_length = 0;
   0674 78r00         [12] 2040 	mov	r0,#_receive_packet_length
   0676 E4            [12] 2041 	clr	a
   0677 F2            [24] 2042 	movx	@r0,a
                           2043 ;	radio/radio.c:505: preamble_detected = 0;
   0678 C2*01         [12] 2044 	clr	_preamble_detected
                           2045 ;	radio/radio.c:506: partial_packet_length = 0;
   067A 78r01         [12] 2046 	mov	r0,#_partial_packet_length
   067C E4            [12] 2047 	clr	a
   067D F2            [24] 2048 	movx	@r0,a
                           2049 ;	radio/radio.c:509: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, RADIO_RX_INTERRUPTS);
   067E 74 13         [12] 2050 	mov	a,#0x13
   0680 C0 E0         [24] 2051 	push	acc
   0682 75 82 05      [24] 2052 	mov	dpl,#0x05
   0685 12r0Br44      [24] 2053 	lcall	_register_write
   0688 15 81         [12] 2054 	dec	sp
                           2055 ;	radio/radio.c:510: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, EZRADIOPRO_ENPREAVAL);
   068A 74 40         [12] 2056 	mov	a,#0x40
   068C C0 E0         [24] 2057 	push	acc
   068E 75 82 06      [24] 2058 	mov	dpl,#0x06
   0691 12r0Br44      [24] 2059 	lcall	_register_write
   0694 15 81         [12] 2060 	dec	sp
                           2061 ;	radio/radio.c:512: clear_status_registers();
   0696 12r0BrDC      [24] 2062 	lcall	_clear_status_registers
                           2063 ;	radio/radio.c:513: radio_clear_transmit_fifo();
   0699 12r02rD8      [24] 2064 	lcall	_radio_clear_transmit_fifo
                           2065 ;	radio/radio.c:514: radio_clear_receive_fifo();
   069C 12r03r00      [24] 2066 	lcall	_radio_clear_receive_fifo
                           2067 ;	radio/radio.c:517: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_1, EZRADIOPRO_RXON | EZRADIOPRO_XTON);
   069F 74 05         [12] 2068 	mov	a,#0x05
   06A1 C0 E0         [24] 2069 	push	acc
   06A3 75 82 07      [24] 2070 	mov	dpl,#0x07
   06A6 12r0Br44      [24] 2071 	lcall	_register_write
   06A9 15 81         [12] 2072 	dec	sp
                           2073 ;	radio/radio.c:520: EX0 = 1;
   06AB D2 A8         [12] 2074 	setb	_EX0
                           2075 ;	radio/radio.c:522: return true;
   06AD D3            [12] 2076 	setb	c
   06AE 22            [24] 2077 	ret
                           2078 ;------------------------------------------------------------
                           2079 ;Allocation info for local variables in function 'radio_initialise'
                           2080 ;------------------------------------------------------------
                           2081 ;status                    Allocated with name '_radio_initialise_status_1_195'
                           2082 ;------------------------------------------------------------
                           2083 ;	radio/radio.c:529: radio_initialise(void)
                           2084 ;	-----------------------------------------
                           2085 ;	 function radio_initialise
                           2086 ;	-----------------------------------------
   06AF                    2087 _radio_initialise:
                           2088 ;	radio/radio.c:533: delay_msec(50);
   06AF 90 00 32      [24] 2089 	mov	dptr,#0x0032
   06B2 12r00r00      [24] 2090 	lcall	_delay_msec
                           2091 ;	radio/radio.c:536: status = register_read(EZRADIOPRO_DEVICE_VERSION);
   06B5 75 82 01      [24] 2092 	mov	dpl,#0x01
   06B8 12r0Br74      [24] 2093 	lcall	_register_read
   06BB AF 82         [24] 2094 	mov	r7,dpl
                           2095 ;	radio/radio.c:537: if (status == 0xFF || status < 5) {
   06BD BF FF 02      [24] 2096 	cjne	r7,#0xFF,00133$
   06C0 80 05         [24] 2097 	sjmp	00101$
   06C2                    2098 00133$:
   06C2 BF 05 00      [24] 2099 	cjne	r7,#0x05,00134$
   06C5                    2100 00134$:
   06C5 50 02         [24] 2101 	jnc	00102$
   06C7                    2102 00101$:
                           2103 ;	radio/radio.c:539: return false;
   06C7 C3            [12] 2104 	clr	c
   06C8 22            [24] 2105 	ret
   06C9                    2106 00102$:
                           2107 ;	radio/radio.c:542: status = register_read(EZRADIOPRO_INTERRUPT_STATUS_2);
   06C9 75 82 04      [24] 2108 	mov	dpl,#0x04
   06CC 12r0Br74      [24] 2109 	lcall	_register_read
                           2110 ;	radio/radio.c:544: if ((status & EZRADIOPRO_IPOR) == 0) {
   06CF E5 82         [12] 2111 	mov	a,dpl
   06D1 FF            [12] 2112 	mov	r7,a
   06D2 20 E0 06      [24] 2113 	jb	acc.0,00105$
                           2114 ;	radio/radio.c:546: return software_reset();
   06D5 12r0Cr3C      [24] 2115 	lcall	_software_reset
   06D8 92*07         [24] 2116 	mov  _radio_initialise_sloc0_1_0,c
   06DA 22            [24] 2117 	ret
   06DB                    2118 00105$:
                           2119 ;	radio/radio.c:549: if (status & EZRADIOPRO_ICHIPRDY) {
   06DB EF            [12] 2120 	mov	a,r7
   06DC 30 E1 02      [24] 2121 	jnb	acc.1,00107$
                           2122 ;	radio/radio.c:551: return true;
   06DF D3            [12] 2123 	setb	c
   06E0 22            [24] 2124 	ret
   06E1                    2125 00107$:
                           2126 ;	radio/radio.c:555: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, 0);
   06E1 E4            [12] 2127 	clr	a
   06E2 C0 E0         [24] 2128 	push	acc
   06E4 75 82 05      [24] 2129 	mov	dpl,#0x05
   06E7 12r0Br44      [24] 2130 	lcall	_register_write
   06EA 15 81         [12] 2131 	dec	sp
                           2132 ;	radio/radio.c:556: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, EZRADIOPRO_ENCHIPRDY);
   06EC 74 02         [12] 2133 	mov	a,#0x02
   06EE C0 E0         [24] 2134 	push	acc
   06F0 75 82 06      [24] 2135 	mov	dpl,#0x06
   06F3 12r0Br44      [24] 2136 	lcall	_register_write
   06F6 15 81         [12] 2137 	dec	sp
                           2138 ;	radio/radio.c:559: delay_set(50);
   06F8 90 00 32      [24] 2139 	mov	dptr,#0x0032
   06FB 12r00r00      [24] 2140 	lcall	_delay_set
                           2141 ;	radio/radio.c:560: while (!delay_expired()) {
   06FE                    2142 00110$:
   06FE 12r00r00      [24] 2143 	lcall	_delay_expired
   0701 40 13         [24] 2144 	jc	00112$
                           2145 ;	radio/radio.c:561: status = register_read(EZRADIOPRO_INTERRUPT_STATUS_1);
   0703 75 82 03      [24] 2146 	mov	dpl,#0x03
   0706 12r0Br74      [24] 2147 	lcall	_register_read
                           2148 ;	radio/radio.c:562: status = register_read(EZRADIOPRO_INTERRUPT_STATUS_2);
   0709 75 82 04      [24] 2149 	mov	dpl,#0x04
   070C 12r0Br74      [24] 2150 	lcall	_register_read
   070F E5 82         [12] 2151 	mov	a,dpl
                           2152 ;	radio/radio.c:563: if (status & EZRADIOPRO_ICHIPRDY) {
   0711 30 E1 EA      [24] 2153 	jnb	acc.1,00110$
                           2154 ;	radio/radio.c:564: return true;
   0714 D3            [12] 2155 	setb	c
   0715 22            [24] 2156 	ret
   0716                    2157 00112$:
                           2158 ;	radio/radio.c:568: return false;
   0716 C3            [12] 2159 	clr	c
   0717 22            [24] 2160 	ret
                           2161 ;------------------------------------------------------------
                           2162 ;Allocation info for local variables in function 'radio_set_frequency'
                           2163 ;------------------------------------------------------------
                           2164 ;	radio/radio.c:575: radio_set_frequency(__pdata uint32_t value)
                           2165 ;	-----------------------------------------
                           2166 ;	 function radio_set_frequency
                           2167 ;	-----------------------------------------
   0718                    2168 _radio_set_frequency:
   0718 AC 82         [24] 2169 	mov	r4,dpl
   071A AD 83         [24] 2170 	mov	r5,dph
   071C AE F0         [24] 2171 	mov	r6,b
   071E FF            [12] 2172 	mov	r7,a
                           2173 ;	radio/radio.c:577: if (value < 240000000UL || value > 935000000UL) {
   071F C3            [12] 2174 	clr	c
   0720 ED            [12] 2175 	mov	a,r5
   0721 94 1C         [12] 2176 	subb	a,#0x1C
   0723 EE            [12] 2177 	mov	a,r6
   0724 94 4E         [12] 2178 	subb	a,#0x4E
   0726 EF            [12] 2179 	mov	a,r7
   0727 94 0E         [12] 2180 	subb	a,#0x0E
   0729 40 0E         [24] 2181 	jc	00101$
   072B 74 C0         [12] 2182 	mov	a,#0xC0
   072D 9C            [12] 2183 	subb	a,r4
   072E 74 F7         [12] 2184 	mov	a,#0xF7
   0730 9D            [12] 2185 	subb	a,r5
   0731 74 BA         [12] 2186 	mov	a,#0xBA
   0733 9E            [12] 2187 	subb	a,r6
   0734 74 37         [12] 2188 	mov	a,#0x37
   0736 9F            [12] 2189 	subb	a,r7
   0737 50 02         [24] 2190 	jnc	00102$
   0739                    2191 00101$:
                           2192 ;	radio/radio.c:578: return false;
   0739 C3            [12] 2193 	clr	c
   073A 22            [24] 2194 	ret
   073B                    2195 00102$:
                           2196 ;	radio/radio.c:580: settings.frequency = value;
   073B 78r05         [12] 2197 	mov	r0,#_settings
   073D EC            [12] 2198 	mov	a,r4
   073E F2            [24] 2199 	movx	@r0,a
   073F 08            [12] 2200 	inc	r0
   0740 ED            [12] 2201 	mov	a,r5
   0741 F2            [24] 2202 	movx	@r0,a
   0742 08            [12] 2203 	inc	r0
   0743 EE            [12] 2204 	mov	a,r6
   0744 F2            [24] 2205 	movx	@r0,a
   0745 08            [12] 2206 	inc	r0
   0746 EF            [12] 2207 	mov	a,r7
   0747 F2            [24] 2208 	movx	@r0,a
                           2209 ;	radio/radio.c:581: set_frequency_registers(value);
   0748 8C 82         [24] 2210 	mov	dpl,r4
   074A 8D 83         [24] 2211 	mov	dph,r5
   074C 8E F0         [24] 2212 	mov	b,r6
   074E EF            [12] 2213 	mov	a,r7
   074F 12r0CrA8      [24] 2214 	lcall	_set_frequency_registers
                           2215 ;	radio/radio.c:582: return true;
   0752 D3            [12] 2216 	setb	c
   0753 22            [24] 2217 	ret
                           2218 ;------------------------------------------------------------
                           2219 ;Allocation info for local variables in function 'radio_set_channel_spacing'
                           2220 ;------------------------------------------------------------
                           2221 ;	radio/radio.c:589: radio_set_channel_spacing(__pdata uint32_t value)
                           2222 ;	-----------------------------------------
                           2223 ;	 function radio_set_channel_spacing
                           2224 ;	-----------------------------------------
   0754                    2225 _radio_set_channel_spacing:
   0754 AC 82         [24] 2226 	mov	r4,dpl
   0756 AD 83         [24] 2227 	mov	r5,dph
   0758 AE F0         [24] 2228 	mov	r6,b
   075A FF            [12] 2229 	mov	r7,a
                           2230 ;	radio/radio.c:591: if (value > 2550000L)
   075B C3            [12] 2231 	clr	c
   075C 74 F0         [12] 2232 	mov	a,#0xF0
   075E 9C            [12] 2233 	subb	a,r4
   075F 74 E8         [12] 2234 	mov	a,#0xE8
   0761 9D            [12] 2235 	subb	a,r5
   0762 74 26         [12] 2236 	mov	a,#0x26
   0764 9E            [12] 2237 	subb	a,r6
   0765 E4            [12] 2238 	clr	a
   0766 9F            [12] 2239 	subb	a,r7
   0767 50 02         [24] 2240 	jnc	00102$
                           2241 ;	radio/radio.c:592: return false;
   0769 C3            [12] 2242 	clr	c
   076A 22            [24] 2243 	ret
   076B                    2244 00102$:
                           2245 ;	radio/radio.c:593: value = scale_uint32(value, 10000);
   076B 90r00r21      [24] 2246 	mov	dptr,#_scale_uint32_PARM_2
   076E 74 10         [12] 2247 	mov	a,#0x10
   0770 F0            [24] 2248 	movx	@dptr,a
   0771 74 27         [12] 2249 	mov	a,#0x27
   0773 A3            [24] 2250 	inc	dptr
   0774 F0            [24] 2251 	movx	@dptr,a
   0775 E4            [12] 2252 	clr	a
   0776 A3            [24] 2253 	inc	dptr
   0777 F0            [24] 2254 	movx	@dptr,a
   0778 E4            [12] 2255 	clr	a
   0779 A3            [24] 2256 	inc	dptr
   077A F0            [24] 2257 	movx	@dptr,a
   077B 8C 82         [24] 2258 	mov	dpl,r4
   077D 8D 83         [24] 2259 	mov	dph,r5
   077F 8E F0         [24] 2260 	mov	b,r6
   0781 EF            [12] 2261 	mov	a,r7
   0782 12r0BrE8      [24] 2262 	lcall	_scale_uint32
   0785 AC 82         [24] 2263 	mov	r4,dpl
   0787 AD 83         [24] 2264 	mov	r5,dph
   0789 AE F0         [24] 2265 	mov	r6,b
   078B FF            [12] 2266 	mov	r7,a
                           2267 ;	radio/radio.c:594: settings.channel_spacing = value;
   078C 78r09         [12] 2268 	mov	r0,#(_settings + 0x0004)
   078E EC            [12] 2269 	mov	a,r4
   078F F2            [24] 2270 	movx	@r0,a
   0790 08            [12] 2271 	inc	r0
   0791 ED            [12] 2272 	mov	a,r5
   0792 F2            [24] 2273 	movx	@r0,a
   0793 08            [12] 2274 	inc	r0
   0794 EE            [12] 2275 	mov	a,r6
   0795 F2            [24] 2276 	movx	@r0,a
   0796 08            [12] 2277 	inc	r0
   0797 EF            [12] 2278 	mov	a,r7
   0798 F2            [24] 2279 	movx	@r0,a
                           2280 ;	radio/radio.c:595: register_write(EZRADIOPRO_FREQUENCY_HOPPING_STEP_SIZE, value);
   0799 C0 04         [24] 2281 	push	ar4
   079B 75 82 7A      [24] 2282 	mov	dpl,#0x7A
   079E 12r0Br44      [24] 2283 	lcall	_register_write
   07A1 15 81         [12] 2284 	dec	sp
                           2285 ;	radio/radio.c:596: return true;
   07A3 D3            [12] 2286 	setb	c
   07A4 22            [24] 2287 	ret
                           2288 ;------------------------------------------------------------
                           2289 ;Allocation info for local variables in function 'radio_set_channel'
                           2290 ;------------------------------------------------------------
                           2291 ;channel                   Allocated with name '_radio_set_channel_channel_1_206'
                           2292 ;------------------------------------------------------------
                           2293 ;	radio/radio.c:602: radio_set_channel(uint8_t channel)
                           2294 ;	-----------------------------------------
                           2295 ;	 function radio_set_channel
                           2296 ;	-----------------------------------------
   07A5                    2297 _radio_set_channel:
   07A5 E5 82         [12] 2298 	mov	a,dpl
   07A7 90r01r07      [24] 2299 	mov	dptr,#_radio_set_channel_channel_1_206
   07AA F0            [24] 2300 	movx	@dptr,a
                           2301 ;	radio/radio.c:604: if (channel != settings.current_channel) {
   07AB 78r0E         [12] 2302 	mov	r0,#(_settings + 0x0009)
   07AD E2            [24] 2303 	movx	a,@r0
   07AE FF            [12] 2304 	mov	r7,a
   07AF 90r01r07      [24] 2305 	mov	dptr,#_radio_set_channel_channel_1_206
   07B2 E0            [24] 2306 	movx	a,@dptr
   07B3 FE            [12] 2307 	mov	r6,a
   07B4 B5 07 01      [24] 2308 	cjne	a,ar7,00108$
   07B7 22            [24] 2309 	ret
   07B8                    2310 00108$:
                           2311 ;	radio/radio.c:605: settings.current_channel = channel;
   07B8 78r0E         [12] 2312 	mov	r0,#(_settings + 0x0009)
   07BA EE            [12] 2313 	mov	a,r6
   07BB F2            [24] 2314 	movx	@r0,a
                           2315 ;	radio/radio.c:606: register_write(EZRADIOPRO_FREQUENCY_HOPPING_CHANNEL_SELECT, channel);
   07BC C0 06         [24] 2316 	push	ar6
   07BE 75 82 79      [24] 2317 	mov	dpl,#0x79
   07C1 12r0Br44      [24] 2318 	lcall	_register_write
   07C4 15 81         [12] 2319 	dec	sp
                           2320 ;	radio/radio.c:607: preamble_detected = 0;
   07C6 C2*01         [12] 2321 	clr	_preamble_detected
   07C8 22            [24] 2322 	ret
                           2323 ;------------------------------------------------------------
                           2324 ;Allocation info for local variables in function 'radio_get_channel'
                           2325 ;------------------------------------------------------------
                           2326 ;	radio/radio.c:614: radio_get_channel(void)
                           2327 ;	-----------------------------------------
                           2328 ;	 function radio_get_channel
                           2329 ;	-----------------------------------------
   07C9                    2330 _radio_get_channel:
                           2331 ;	radio/radio.c:616: return settings.current_channel;
   07C9 78r0E         [12] 2332 	mov	r0,#(_settings + 0x0009)
   07CB E2            [24] 2333 	movx	a,@r0
   07CC F5 82         [12] 2334 	mov	dpl,a
   07CE 22            [24] 2335 	ret
                           2336 ;------------------------------------------------------------
                           2337 ;Allocation info for local variables in function 'radio_configure'
                           2338 ;------------------------------------------------------------
                           2339 ;	radio/radio.c:713: radio_configure(__pdata uint8_t air_rate)
                           2340 ;	-----------------------------------------
                           2341 ;	 function radio_configure
                           2342 ;	-----------------------------------------
   07CF                    2343 _radio_configure:
   07CF AF 82         [24] 2344 	mov	r7,dpl
                           2345 ;	radio/radio.c:718: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, 0x00);
   07D1 C0 07         [24] 2346 	push	ar7
   07D3 E4            [12] 2347 	clr	a
   07D4 C0 E0         [24] 2348 	push	acc
   07D6 75 82 05      [24] 2349 	mov	dpl,#0x05
   07D9 12r0Br44      [24] 2350 	lcall	_register_write
   07DC 15 81         [12] 2351 	dec	sp
                           2352 ;	radio/radio.c:719: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, 0x00);
   07DE E4            [12] 2353 	clr	a
   07DF C0 E0         [24] 2354 	push	acc
   07E1 75 82 06      [24] 2355 	mov	dpl,#0x06
   07E4 12r0Br44      [24] 2356 	lcall	_register_write
   07E7 15 81         [12] 2357 	dec	sp
                           2358 ;	radio/radio.c:721: clear_status_registers();
   07E9 12r0BrDC      [24] 2359 	lcall	_clear_status_registers
                           2360 ;	radio/radio.c:735: register_write(EZRADIOPRO_GPIO0_CONFIGURATION, 0x15);	// RX data (output)
   07EC 74 15         [12] 2361 	mov	a,#0x15
   07EE C0 E0         [24] 2362 	push	acc
   07F0 75 82 0B      [24] 2363 	mov	dpl,#0x0B
   07F3 12r0Br44      [24] 2364 	lcall	_register_write
   07F6 15 81         [12] 2365 	dec	sp
                           2366 ;	radio/radio.c:736: register_write(EZRADIOPRO_GPIO1_CONFIGURATION, 0x12);	// RX data (output)
   07F8 74 12         [12] 2367 	mov	a,#0x12
   07FA C0 E0         [24] 2368 	push	acc
   07FC 75 82 0C      [24] 2369 	mov	dpl,#0x0C
   07FF 12r0Br44      [24] 2370 	lcall	_register_write
   0802 15 81         [12] 2371 	dec	sp
                           2372 ;	radio/radio.c:738: radio_set_diversity(true);
   0804 D2*08         [12] 2373 	setb	_radio_set_diversity_PARM_1
   0806 12r0Fr5E      [24] 2374 	lcall	_radio_set_diversity
                           2375 ;	radio/radio.c:750: register_write(EZRADIOPRO_CRYSTAL_OSCILLATOR_LOAD_CAPACITANCE, EZRADIOPRO_OSC_CAP_VALUE);
   0809 74 B6         [12] 2376 	mov	a,#0xB6
   080B C0 E0         [24] 2377 	push	acc
   080D 75 82 09      [24] 2378 	mov	dpl,#0x09
   0810 12r0Br44      [24] 2379 	lcall	_register_write
   0813 15 81         [12] 2380 	dec	sp
   0815 D0 07         [24] 2381 	pop	ar7
                           2382 ;	radio/radio.c:753: if (air_rate > 100) {
   0817 EF            [12] 2383 	mov	a,r7
   0818 24 9B         [12] 2384 	add	a,#0xff - 0x64
   081A 50 10         [24] 2385 	jnc	00102$
                           2386 ;	radio/radio.c:754: register_write(EZRADIOPRO_CHARGEPUMP_CURRENT_TRIMMING_OVERRIDE, 0xC0);
   081C C0 07         [24] 2387 	push	ar7
   081E 74 C0         [12] 2388 	mov	a,#0xC0
   0820 C0 E0         [24] 2389 	push	acc
   0822 75 82 58      [24] 2390 	mov	dpl,#0x58
   0825 12r0Br44      [24] 2391 	lcall	_register_write
   0828 15 81         [12] 2392 	dec	sp
   082A D0 07         [24] 2393 	pop	ar7
   082C                    2394 00102$:
                           2395 ;	radio/radio.c:758: set_frequency_registers(settings.frequency);
   082C 78r05         [12] 2396 	mov	r0,#_settings
   082E E2            [24] 2397 	movx	a,@r0
   082F FB            [12] 2398 	mov	r3,a
   0830 08            [12] 2399 	inc	r0
   0831 E2            [24] 2400 	movx	a,@r0
   0832 FC            [12] 2401 	mov	r4,a
   0833 08            [12] 2402 	inc	r0
   0834 E2            [24] 2403 	movx	a,@r0
   0835 FD            [12] 2404 	mov	r5,a
   0836 08            [12] 2405 	inc	r0
   0837 E2            [24] 2406 	movx	a,@r0
   0838 8B 82         [24] 2407 	mov	dpl,r3
   083A 8C 83         [24] 2408 	mov	dph,r4
   083C 8D F0         [24] 2409 	mov	b,r5
   083E C0 07         [24] 2410 	push	ar7
   0840 12r0CrA8      [24] 2411 	lcall	_set_frequency_registers
                           2412 ;	radio/radio.c:759: register_write(EZRADIOPRO_FREQUENCY_HOPPING_STEP_SIZE, settings.channel_spacing);
   0843 78r09         [12] 2413 	mov	r0,#(_settings + 0x0004)
   0845 E2            [24] 2414 	movx	a,@r0
   0846 FB            [12] 2415 	mov	r3,a
   0847 08            [12] 2416 	inc	r0
   0848 E2            [24] 2417 	movx	a,@r0
   0849 08            [12] 2418 	inc	r0
   084A E2            [24] 2419 	movx	a,@r0
   084B 08            [12] 2420 	inc	r0
   084C E2            [24] 2421 	movx	a,@r0
   084D C0 03         [24] 2422 	push	ar3
   084F 75 82 7A      [24] 2423 	mov	dpl,#0x7A
   0852 12r0Br44      [24] 2424 	lcall	_register_write
   0855 15 81         [12] 2425 	dec	sp
   0857 D0 07         [24] 2426 	pop	ar7
                           2427 ;	radio/radio.c:761: if (feature_golay) {
   0859 30*00 29      [24] 2428 	jnb	_feature_golay,00104$
                           2429 ;	radio/radio.c:765: register_write(EZRADIOPRO_DATA_ACCESS_CONTROL,
   085C C0 07         [24] 2430 	push	ar7
   085E 74 88         [12] 2431 	mov	a,#0x88
   0860 C0 E0         [24] 2432 	push	acc
   0862 75 82 30      [24] 2433 	mov	dpl,#0x30
   0865 12r0Br44      [24] 2434 	lcall	_register_write
   0868 15 81         [12] 2435 	dec	sp
                           2436 ;	radio/radio.c:769: register_write(EZRADIOPRO_HEADER_CONTROL_2, EZRADIOPRO_HDLEN_0BYTE | EZRADIOPRO_SYNCLEN_2BYTE);
   086A 74 02         [12] 2437 	mov	a,#0x02
   086C C0 E0         [24] 2438 	push	acc
   086E 75 82 33      [24] 2439 	mov	dpl,#0x33
   0871 12r0Br44      [24] 2440 	lcall	_register_write
   0874 15 81         [12] 2441 	dec	sp
                           2442 ;	radio/radio.c:772: register_write(EZRADIOPRO_HEADER_CONTROL_1, 0x00);
   0876 E4            [12] 2443 	clr	a
   0877 C0 E0         [24] 2444 	push	acc
   0879 75 82 32      [24] 2445 	mov	dpl,#0x32
   087C 12r0Br44      [24] 2446 	lcall	_register_write
   087F 15 81         [12] 2447 	dec	sp
   0881 D0 07         [24] 2448 	pop	ar7
   0883 80 40         [24] 2449 	sjmp	00105$
   0885                    2450 00104$:
                           2451 ;	radio/radio.c:774: register_write(EZRADIOPRO_DATA_ACCESS_CONTROL,
   0885 C0 07         [24] 2452 	push	ar7
   0887 74 8D         [12] 2453 	mov	a,#0x8D
   0889 C0 E0         [24] 2454 	push	acc
   088B 75 82 30      [24] 2455 	mov	dpl,#0x30
   088E 12r0Br44      [24] 2456 	lcall	_register_write
   0891 15 81         [12] 2457 	dec	sp
                           2458 ;	radio/radio.c:780: register_write(EZRADIOPRO_HEADER_CONTROL_2, EZRADIOPRO_HDLEN_2BYTE | EZRADIOPRO_SYNCLEN_2BYTE);
   0893 74 22         [12] 2459 	mov	a,#0x22
   0895 C0 E0         [24] 2460 	push	acc
   0897 75 82 33      [24] 2461 	mov	dpl,#0x33
   089A 12r0Br44      [24] 2462 	lcall	_register_write
   089D 15 81         [12] 2463 	dec	sp
                           2464 ;	radio/radio.c:782: register_write(EZRADIOPRO_HEADER_CONTROL_1, 0x0C);
   089F 74 0C         [12] 2465 	mov	a,#0x0C
   08A1 C0 E0         [24] 2466 	push	acc
   08A3 75 82 32      [24] 2467 	mov	dpl,#0x32
   08A6 12r0Br44      [24] 2468 	lcall	_register_write
   08A9 15 81         [12] 2469 	dec	sp
                           2470 ;	radio/radio.c:783: register_write(EZRADIOPRO_HEADER_ENABLE_3, 0xFF);
   08AB 74 FF         [12] 2471 	mov	a,#0xFF
   08AD C0 E0         [24] 2472 	push	acc
   08AF 75 82 43      [24] 2473 	mov	dpl,#0x43
   08B2 12r0Br44      [24] 2474 	lcall	_register_write
   08B5 15 81         [12] 2475 	dec	sp
                           2476 ;	radio/radio.c:784: register_write(EZRADIOPRO_HEADER_ENABLE_2, 0xFF);
   08B7 74 FF         [12] 2477 	mov	a,#0xFF
   08B9 C0 E0         [24] 2478 	push	acc
   08BB 75 82 44      [24] 2479 	mov	dpl,#0x44
   08BE 12r0Br44      [24] 2480 	lcall	_register_write
   08C1 15 81         [12] 2481 	dec	sp
   08C3 D0 07         [24] 2482 	pop	ar7
   08C5                    2483 00105$:
                           2484 ;	radio/radio.c:789: register_write(EZRADIOPRO_TX_FIFO_CONTROL_1, TX_FIFO_THRESHOLD_HIGH);
   08C5 C0 07         [24] 2485 	push	ar7
   08C7 74 3C         [12] 2486 	mov	a,#0x3C
   08C9 C0 E0         [24] 2487 	push	acc
   08CB 75 82 7C      [24] 2488 	mov	dpl,#0x7C
   08CE 12r0Br44      [24] 2489 	lcall	_register_write
   08D1 15 81         [12] 2490 	dec	sp
                           2491 ;	radio/radio.c:790: register_write(EZRADIOPRO_TX_FIFO_CONTROL_2, TX_FIFO_THRESHOLD_LOW);
   08D3 74 20         [12] 2492 	mov	a,#0x20
   08D5 C0 E0         [24] 2493 	push	acc
   08D7 75 82 7D      [24] 2494 	mov	dpl,#0x7D
   08DA 12r0Br44      [24] 2495 	lcall	_register_write
   08DD 15 81         [12] 2496 	dec	sp
                           2497 ;	radio/radio.c:791: register_write(EZRADIOPRO_RX_FIFO_CONTROL, RX_FIFO_THRESHOLD_HIGH);
   08DF 74 32         [12] 2498 	mov	a,#0x32
   08E1 C0 E0         [24] 2499 	push	acc
   08E3 75 82 7E      [24] 2500 	mov	dpl,#0x7E
   08E6 12r0Br44      [24] 2501 	lcall	_register_write
   08E9 15 81         [12] 2502 	dec	sp
                           2503 ;	radio/radio.c:793: settings.preamble_length = 16;
   08EB 78r10         [12] 2504 	mov	r0,#(_settings + 0x000b)
   08ED 74 10         [12] 2505 	mov	a,#0x10
   08EF F2            [24] 2506 	movx	@r0,a
                           2507 ;	radio/radio.c:795: register_write(EZRADIOPRO_PREAMBLE_LENGTH, settings.preamble_length); // nibbles 
   08F0 78r10         [12] 2508 	mov	r0,#(_settings + 0x000b)
   08F2 E2            [24] 2509 	movx	a,@r0
   08F3 FE            [12] 2510 	mov	r6,a
   08F4 C0 06         [24] 2511 	push	ar6
   08F6 75 82 34      [24] 2512 	mov	dpl,#0x34
   08F9 12r0Br44      [24] 2513 	lcall	_register_write
   08FC 15 81         [12] 2514 	dec	sp
                           2515 ;	radio/radio.c:796: register_write(EZRADIOPRO_PREAMBLE_DETECTION_CONTROL, 5<<3); // 5 nibbles
   08FE 74 28         [12] 2516 	mov	a,#0x28
   0900 C0 E0         [24] 2517 	push	acc
   0902 75 82 35      [24] 2518 	mov	dpl,#0x35
   0905 12r0Br44      [24] 2519 	lcall	_register_write
   0908 15 81         [12] 2520 	dec	sp
                           2521 ;	radio/radio.c:799: radio_set_transmit_power(0);
   090A 75 82 00      [24] 2522 	mov	dpl,#0x00
   090D 12r0ArA7      [24] 2523 	lcall	_radio_set_transmit_power
   0910 D0 07         [24] 2524 	pop	ar7
                           2525 ;	radio/radio.c:802: for (i = 0; i < NUM_DATA_RATES - 1; i++) {
   0912 7E 00         [12] 2526 	mov	r6,#0x00
   0914                    2527 00131$:
                           2528 ;	radio/radio.c:803: if (air_data_rates[i] >= air_rate) break;
   0914 EE            [12] 2529 	mov	a,r6
   0915 90r00r34      [24] 2530 	mov	dptr,#_air_data_rates
   0918 93            [24] 2531 	movc	a,@a+dptr
   0919 FD            [12] 2532 	mov	r5,a
   091A C3            [12] 2533 	clr	c
   091B 9F            [12] 2534 	subb	a,r7
   091C 50 06         [24] 2535 	jnc	00108$
                           2536 ;	radio/radio.c:802: for (i = 0; i < NUM_DATA_RATES - 1; i++) {
   091E 0E            [12] 2537 	inc	r6
   091F BE 0C 00      [24] 2538 	cjne	r6,#0x0C,00205$
   0922                    2539 00205$:
   0922 40 F0         [24] 2540 	jc	00131$
   0924                    2541 00108$:
                           2542 ;	radio/radio.c:805: rate_selection = i;
                           2543 ;	radio/radio.c:807: settings.air_data_rate = air_data_rates[rate_selection];
   0924 EE            [12] 2544 	mov	a,r6
   0925 FF            [12] 2545 	mov	r7,a
   0926 90r00r34      [24] 2546 	mov	dptr,#_air_data_rates
   0929 93            [24] 2547 	movc	a,@a+dptr
   092A FE            [12] 2548 	mov	r6,a
   092B 78r0D         [12] 2549 	mov	r0,#(_settings + 0x0008)
   092D F2            [24] 2550 	movx	@r0,a
                           2551 ;	radio/radio.c:809: if (settings.air_data_rate >= 32) {
   092E BE 20 00      [24] 2552 	cjne	r6,#0x20,00207$
   0931                    2553 00207$:
   0931 40 04         [24] 2554 	jc	00110$
                           2555 ;	radio/radio.c:810: control = 0x0D;
   0933 7E 0D         [12] 2556 	mov	r6,#0x0D
   0935 80 02         [24] 2557 	sjmp	00111$
   0937                    2558 00110$:
                           2559 ;	radio/radio.c:812: control = 0x2D;
   0937 7E 2D         [12] 2560 	mov	r6,#0x2D
   0939                    2561 00111$:
                           2562 ;	radio/radio.c:814: if (param_get(PARAM_MANCHESTER) && settings.air_data_rate <= 128) {
   0939 75 82 0D      [24] 2563 	mov	dpl,#0x0D
   093C C0 07         [24] 2564 	push	ar7
   093E C0 06         [24] 2565 	push	ar6
   0940 12r00r00      [24] 2566 	lcall	_param_get
   0943 AA 82         [24] 2567 	mov	r2,dpl
   0945 AB 83         [24] 2568 	mov	r3,dph
   0947 AC F0         [24] 2569 	mov	r4,b
   0949 FD            [12] 2570 	mov	r5,a
   094A D0 06         [24] 2571 	pop	ar6
   094C D0 07         [24] 2572 	pop	ar7
   094E EA            [12] 2573 	mov	a,r2
   094F 4B            [12] 2574 	orl	a,r3
   0950 4C            [12] 2575 	orl	a,r4
   0951 4D            [12] 2576 	orl	a,r5
   0952 60 0B         [24] 2577 	jz	00113$
   0954 78r0D         [12] 2578 	mov	r0,#(_settings + 0x0008)
   0956 E2            [24] 2579 	movx	a,@r0
   0957 FD            [12] 2580 	mov  r5,a
   0958 24 7F         [12] 2581 	add	a,#0xff - 0x80
   095A 40 03         [24] 2582 	jc	00113$
                           2583 ;	radio/radio.c:816: control |= EZRADIOPRO_ENMANCH;
   095C 43 06 02      [24] 2584 	orl	ar6,#0x02
   095F                    2585 00113$:
                           2586 ;	radio/radio.c:818: register_write(EZRADIOPRO_MODULATION_MODE_CONTROL_1, control);
   095F C0 07         [24] 2587 	push	ar7
   0961 C0 06         [24] 2588 	push	ar6
   0963 75 82 70      [24] 2589 	mov	dpl,#0x70
   0966 12r0Br44      [24] 2590 	lcall	_register_write
   0969 15 81         [12] 2591 	dec	sp
                           2592 ;	radio/radio.c:820: register_write(EZRADIOPRO_MODULATION_MODE_CONTROL_2, 0x23);
   096B 74 23         [12] 2593 	mov	a,#0x23
   096D C0 E0         [24] 2594 	push	acc
   096F 75 82 71      [24] 2595 	mov	dpl,#0x71
   0972 12r0Br44      [24] 2596 	lcall	_register_write
   0975 15 81         [12] 2597 	dec	sp
                           2598 ;	radio/radio.c:824: register_write(EZRADIOPRO_AFC_LOOP_GEARSHIFT_OVERRIDE, 0x44);
   0977 74 44         [12] 2599 	mov	a,#0x44
   0979 C0 E0         [24] 2600 	push	acc
   097B 75 82 1D      [24] 2601 	mov	dpl,#0x1D
   097E 12r0Br44      [24] 2602 	lcall	_register_write
   0981 15 81         [12] 2603 	dec	sp
   0983 D0 07         [24] 2604 	pop	ar7
                           2605 ;	radio/radio.c:828: if (settings.air_data_rate < 200) {
   0985 78r0D         [12] 2606 	mov	r0,#(_settings + 0x0008)
   0987 E2            [24] 2607 	movx	a,@r0
   0988 FE            [12] 2608 	mov	r6,a
   0989 BE C8 00      [24] 2609 	cjne	r6,#0xC8,00211$
   098C                    2610 00211$:
   098C 50 12         [24] 2611 	jnc	00116$
                           2612 ;	radio/radio.c:829: register_write(EZRADIOPRO_AFC_TIMING_CONTROL, 0x0A);
   098E C0 07         [24] 2613 	push	ar7
   0990 74 0A         [12] 2614 	mov	a,#0x0A
   0992 C0 E0         [24] 2615 	push	acc
   0994 75 82 1E      [24] 2616 	mov	dpl,#0x1E
   0997 12r0Br44      [24] 2617 	lcall	_register_write
   099A 15 81         [12] 2618 	dec	sp
   099C D0 07         [24] 2619 	pop	ar7
   099E 80 10         [24] 2620 	sjmp	00117$
   09A0                    2621 00116$:
                           2622 ;	radio/radio.c:831: register_write(EZRADIOPRO_AFC_TIMING_CONTROL, 0x02);
   09A0 C0 07         [24] 2623 	push	ar7
   09A2 74 02         [12] 2624 	mov	a,#0x02
   09A4 C0 E0         [24] 2625 	push	acc
   09A6 75 82 1E      [24] 2626 	mov	dpl,#0x1E
   09A9 12r0Br44      [24] 2627 	lcall	_register_write
   09AC 15 81         [12] 2628 	dec	sp
   09AE D0 07         [24] 2629 	pop	ar7
   09B0                    2630 00117$:
                           2631 ;	radio/radio.c:835: if (g_board_frequency == FREQ_433) {
   09B0 78r00         [12] 2632 	mov	r0,#_g_board_frequency
   09B2 E2            [24] 2633 	movx	a,@r0
   09B3 B4 43 3A      [24] 2634 	cjne	a,#0x43,00129$
                           2635 ;	radio/radio.c:836: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
   09B6 7E 00         [12] 2636 	mov	r6,#0x00
   09B8                    2637 00133$:
                           2638 ;	radio/radio.c:838: reg_table_433[i][rate_selection]);
   09B8 EE            [12] 2639 	mov	a,r6
   09B9 75 F0 0D      [24] 2640 	mov	b,#0x0D
   09BC A4            [48] 2641 	mul	ab
   09BD 24r41         [12] 2642 	add	a,#_reg_table_433
   09BF FC            [12] 2643 	mov	r4,a
   09C0 74s00         [12] 2644 	mov	a,#(_reg_table_433 >> 8)
   09C2 35 F0         [12] 2645 	addc	a,b
   09C4 FD            [12] 2646 	mov	r5,a
   09C5 EF            [12] 2647 	mov	a,r7
   09C6 2C            [12] 2648 	add	a,r4
   09C7 F5 82         [12] 2649 	mov	dpl,a
   09C9 E4            [12] 2650 	clr	a
   09CA 3D            [12] 2651 	addc	a,r5
   09CB F5 83         [12] 2652 	mov	dph,a
   09CD E4            [12] 2653 	clr	a
   09CE 93            [24] 2654 	movc	a,@a+dptr
   09CF FD            [12] 2655 	mov	r5,a
                           2656 ;	radio/radio.c:837: register_write(reg_index[i],
   09D0 EE            [12] 2657 	mov	a,r6
   09D1 90r00r28      [24] 2658 	mov	dptr,#_reg_index
   09D4 93            [24] 2659 	movc	a,@a+dptr
   09D5 FC            [12] 2660 	mov	r4,a
   09D6 C0 07         [24] 2661 	push	ar7
   09D8 C0 06         [24] 2662 	push	ar6
   09DA C0 05         [24] 2663 	push	ar5
   09DC 8C 82         [24] 2664 	mov	dpl,r4
   09DE 12r0Br44      [24] 2665 	lcall	_register_write
   09E1 15 81         [12] 2666 	dec	sp
   09E3 D0 06         [24] 2667 	pop	ar6
   09E5 D0 07         [24] 2668 	pop	ar7
                           2669 ;	radio/radio.c:836: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
   09E7 0E            [12] 2670 	inc	r6
   09E8 BE 0C 00      [24] 2671 	cjne	r6,#0x0C,00215$
   09EB                    2672 00215$:
   09EB 40 CB         [24] 2673 	jc	00133$
   09ED 02r0ArA5      [24] 2674 	ljmp	00130$
   09F0                    2675 00129$:
                           2676 ;	radio/radio.c:840: } else if (g_board_frequency == FREQ_470) {
   09F0 78r00         [12] 2677 	mov	r0,#_g_board_frequency
   09F2 E2            [24] 2678 	movx	a,@r0
   09F3 B4 47 39      [24] 2679 	cjne	a,#0x47,00126$
                           2680 ;	radio/radio.c:841: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
   09F6 7E 00         [12] 2681 	mov	r6,#0x00
   09F8                    2682 00135$:
                           2683 ;	radio/radio.c:843: reg_table_470[i][rate_selection]);
   09F8 EE            [12] 2684 	mov	a,r6
   09F9 75 F0 0D      [24] 2685 	mov	b,#0x0D
   09FC A4            [48] 2686 	mul	ab
   09FD 24rDD         [12] 2687 	add	a,#_reg_table_470
   09FF FC            [12] 2688 	mov	r4,a
   0A00 74s00         [12] 2689 	mov	a,#(_reg_table_470 >> 8)
   0A02 35 F0         [12] 2690 	addc	a,b
   0A04 FD            [12] 2691 	mov	r5,a
   0A05 EF            [12] 2692 	mov	a,r7
   0A06 2C            [12] 2693 	add	a,r4
   0A07 F5 82         [12] 2694 	mov	dpl,a
   0A09 E4            [12] 2695 	clr	a
   0A0A 3D            [12] 2696 	addc	a,r5
   0A0B F5 83         [12] 2697 	mov	dph,a
   0A0D E4            [12] 2698 	clr	a
   0A0E 93            [24] 2699 	movc	a,@a+dptr
   0A0F FD            [12] 2700 	mov	r5,a
                           2701 ;	radio/radio.c:842: register_write(reg_index[i],
   0A10 EE            [12] 2702 	mov	a,r6
   0A11 90r00r28      [24] 2703 	mov	dptr,#_reg_index
   0A14 93            [24] 2704 	movc	a,@a+dptr
   0A15 FC            [12] 2705 	mov	r4,a
   0A16 C0 07         [24] 2706 	push	ar7
   0A18 C0 06         [24] 2707 	push	ar6
   0A1A C0 05         [24] 2708 	push	ar5
   0A1C 8C 82         [24] 2709 	mov	dpl,r4
   0A1E 12r0Br44      [24] 2710 	lcall	_register_write
   0A21 15 81         [12] 2711 	dec	sp
   0A23 D0 06         [24] 2712 	pop	ar6
   0A25 D0 07         [24] 2713 	pop	ar7
                           2714 ;	radio/radio.c:841: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
   0A27 0E            [12] 2715 	inc	r6
   0A28 BE 0C 00      [24] 2716 	cjne	r6,#0x0C,00219$
   0A2B                    2717 00219$:
   0A2B 40 CB         [24] 2718 	jc	00135$
   0A2D 80 76         [24] 2719 	sjmp	00130$
   0A2F                    2720 00126$:
                           2721 ;	radio/radio.c:845: } else if (g_board_frequency == FREQ_868) {
   0A2F 78r00         [12] 2722 	mov	r0,#_g_board_frequency
   0A31 E2            [24] 2723 	movx	a,@r0
   0A32 B4 86 39      [24] 2724 	cjne	a,#0x86,00160$
                           2725 ;	radio/radio.c:846: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
   0A35 7E 00         [12] 2726 	mov	r6,#0x00
   0A37                    2727 00137$:
                           2728 ;	radio/radio.c:848: reg_table_868[i][rate_selection]);
   0A37 EE            [12] 2729 	mov	a,r6
   0A38 75 F0 0D      [24] 2730 	mov	b,#0x0D
   0A3B A4            [48] 2731 	mul	ab
   0A3C 24r79         [12] 2732 	add	a,#_reg_table_868
   0A3E FC            [12] 2733 	mov	r4,a
   0A3F 74s01         [12] 2734 	mov	a,#(_reg_table_868 >> 8)
   0A41 35 F0         [12] 2735 	addc	a,b
   0A43 FD            [12] 2736 	mov	r5,a
   0A44 EF            [12] 2737 	mov	a,r7
   0A45 2C            [12] 2738 	add	a,r4
   0A46 F5 82         [12] 2739 	mov	dpl,a
   0A48 E4            [12] 2740 	clr	a
   0A49 3D            [12] 2741 	addc	a,r5
   0A4A F5 83         [12] 2742 	mov	dph,a
   0A4C E4            [12] 2743 	clr	a
   0A4D 93            [24] 2744 	movc	a,@a+dptr
   0A4E FD            [12] 2745 	mov	r5,a
                           2746 ;	radio/radio.c:847: register_write(reg_index[i],
   0A4F EE            [12] 2747 	mov	a,r6
   0A50 90r00r28      [24] 2748 	mov	dptr,#_reg_index
   0A53 93            [24] 2749 	movc	a,@a+dptr
   0A54 FC            [12] 2750 	mov	r4,a
   0A55 C0 07         [24] 2751 	push	ar7
   0A57 C0 06         [24] 2752 	push	ar6
   0A59 C0 05         [24] 2753 	push	ar5
   0A5B 8C 82         [24] 2754 	mov	dpl,r4
   0A5D 12r0Br44      [24] 2755 	lcall	_register_write
   0A60 15 81         [12] 2756 	dec	sp
   0A62 D0 06         [24] 2757 	pop	ar6
   0A64 D0 07         [24] 2758 	pop	ar7
                           2759 ;	radio/radio.c:846: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
   0A66 0E            [12] 2760 	inc	r6
   0A67 BE 0C 00      [24] 2761 	cjne	r6,#0x0C,00223$
   0A6A                    2762 00223$:
   0A6A 40 CB         [24] 2763 	jc	00137$
                           2764 ;	radio/radio.c:851: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
   0A6C 80 37         [24] 2765 	sjmp	00130$
   0A6E                    2766 00160$:
   0A6E 7E 00         [12] 2767 	mov	r6,#0x00
   0A70                    2768 00139$:
                           2769 ;	radio/radio.c:853: reg_table_915[i][rate_selection]);
   0A70 EE            [12] 2770 	mov	a,r6
   0A71 75 F0 0D      [24] 2771 	mov	b,#0x0D
   0A74 A4            [48] 2772 	mul	ab
   0A75 24r15         [12] 2773 	add	a,#_reg_table_915
   0A77 FC            [12] 2774 	mov	r4,a
   0A78 74s02         [12] 2775 	mov	a,#(_reg_table_915 >> 8)
   0A7A 35 F0         [12] 2776 	addc	a,b
   0A7C FD            [12] 2777 	mov	r5,a
   0A7D EF            [12] 2778 	mov	a,r7
   0A7E 2C            [12] 2779 	add	a,r4
   0A7F F5 82         [12] 2780 	mov	dpl,a
   0A81 E4            [12] 2781 	clr	a
   0A82 3D            [12] 2782 	addc	a,r5
   0A83 F5 83         [12] 2783 	mov	dph,a
   0A85 E4            [12] 2784 	clr	a
   0A86 93            [24] 2785 	movc	a,@a+dptr
   0A87 FD            [12] 2786 	mov	r5,a
                           2787 ;	radio/radio.c:852: register_write(reg_index[i],
   0A88 EE            [12] 2788 	mov	a,r6
   0A89 90r00r28      [24] 2789 	mov	dptr,#_reg_index
   0A8C 93            [24] 2790 	movc	a,@a+dptr
   0A8D FC            [12] 2791 	mov	r4,a
   0A8E C0 07         [24] 2792 	push	ar7
   0A90 C0 06         [24] 2793 	push	ar6
   0A92 C0 05         [24] 2794 	push	ar5
   0A94 8C 82         [24] 2795 	mov	dpl,r4
   0A96 12r0Br44      [24] 2796 	lcall	_register_write
   0A99 15 81         [12] 2797 	dec	sp
   0A9B D0 06         [24] 2798 	pop	ar6
   0A9D D0 07         [24] 2799 	pop	ar7
                           2800 ;	radio/radio.c:851: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
   0A9F 0E            [12] 2801 	inc	r6
   0AA0 BE 0C 00      [24] 2802 	cjne	r6,#0x0C,00225$
   0AA3                    2803 00225$:
   0AA3 40 CB         [24] 2804 	jc	00139$
   0AA5                    2805 00130$:
                           2806 ;	radio/radio.c:857: return true;
   0AA5 D3            [12] 2807 	setb	c
   0AA6 22            [24] 2808 	ret
                           2809 ;------------------------------------------------------------
                           2810 ;Allocation info for local variables in function 'radio_set_transmit_power'
                           2811 ;------------------------------------------------------------
                           2812 ;power                     Allocated with name '_radio_set_transmit_power_power_1_230'
                           2813 ;i                         Allocated with name '_radio_set_transmit_power_i_1_231'
                           2814 ;------------------------------------------------------------
                           2815 ;	radio/radio.c:884: radio_set_transmit_power(uint8_t power)
                           2816 ;	-----------------------------------------
                           2817 ;	 function radio_set_transmit_power
                           2818 ;	-----------------------------------------
   0AA7                    2819 _radio_set_transmit_power:
   0AA7 E5 82         [12] 2820 	mov	a,dpl
                           2821 ;	radio/radio.c:903: for (i=0; i<NUM_POWER_LEVELS; i++) {
   0AA9 90r01r08      [24] 2822 	mov	dptr,#_radio_set_transmit_power_power_1_230
   0AAC F0            [24] 2823 	movx	@dptr,a
   0AAD FF            [12] 2824 	mov	r7,a
   0AAE 7E 00         [12] 2825 	mov	r6,#0x00
   0AB0                    2826 00106$:
                           2827 ;	radio/radio.c:904: if (power <= power_levels[i]) break;
   0AB0 EE            [12] 2828 	mov	a,r6
   0AB1 90r02rB1      [24] 2829 	mov	dptr,#_power_levels
   0AB4 93            [24] 2830 	movc	a,@a+dptr
   0AB5 FD            [12] 2831 	mov	r5,a
   0AB6 C3            [12] 2832 	clr	c
   0AB7 9F            [12] 2833 	subb	a,r7
   0AB8 50 06         [24] 2834 	jnc	00113$
                           2835 ;	radio/radio.c:903: for (i=0; i<NUM_POWER_LEVELS; i++) {
   0ABA 0E            [12] 2836 	inc	r6
   0ABB BE 05 00      [24] 2837 	cjne	r6,#0x05,00121$
   0ABE                    2838 00121$:
   0ABE 40 F0         [24] 2839 	jc	00106$
   0AC0                    2840 00113$:
   0AC0 90r01r09      [24] 2841 	mov	dptr,#_radio_set_transmit_power_i_1_231
   0AC3 EE            [12] 2842 	mov	a,r6
   0AC4 F0            [24] 2843 	movx	@dptr,a
                           2844 ;	radio/radio.c:906: if (i == NUM_POWER_LEVELS) {
   0AC5 BE 05 06      [24] 2845 	cjne	r6,#0x05,00105$
                           2846 ;	radio/radio.c:907: i = NUM_POWER_LEVELS-1;
   0AC8 90r01r09      [24] 2847 	mov	dptr,#_radio_set_transmit_power_i_1_231
   0ACB 74 04         [12] 2848 	mov	a,#0x04
   0ACD F0            [24] 2849 	movx	@dptr,a
   0ACE                    2850 00105$:
                           2851 ;	radio/radio.c:909: settings.transmit_power = power_levels[i];
   0ACE 90r01r09      [24] 2852 	mov	dptr,#_radio_set_transmit_power_i_1_231
   0AD1 E0            [24] 2853 	movx	a,@dptr
   0AD2 FF            [12] 2854 	mov	r7,a
   0AD3 90r02rB1      [24] 2855 	mov	dptr,#_power_levels
   0AD6 93            [24] 2856 	movc	a,@a+dptr
   0AD7 FE            [12] 2857 	mov	r6,a
   0AD8 78r0F         [12] 2858 	mov	r0,#(_settings + 0x000a)
   0ADA EE            [12] 2859 	mov	a,r6
   0ADB F2            [24] 2860 	movx	@r0,a
                           2861 ;	radio/radio.c:910: register_write(EZRADIOPRO_TX_POWER, i);
   0ADC C0 07         [24] 2862 	push	ar7
   0ADE 75 82 6D      [24] 2863 	mov	dpl,#0x6D
   0AE1 12r0Br44      [24] 2864 	lcall	_register_write
   0AE4 15 81         [12] 2865 	dec	sp
   0AE6 22            [24] 2866 	ret
                           2867 ;------------------------------------------------------------
                           2868 ;Allocation info for local variables in function 'radio_get_transmit_power'
                           2869 ;------------------------------------------------------------
                           2870 ;	radio/radio.c:917: radio_get_transmit_power(void)
                           2871 ;	-----------------------------------------
                           2872 ;	 function radio_get_transmit_power
                           2873 ;	-----------------------------------------
   0AE7                    2874 _radio_get_transmit_power:
                           2875 ;	radio/radio.c:919: return settings.transmit_power;
   0AE7 78r0F         [12] 2876 	mov	r0,#(_settings + 0x000a)
   0AE9 E2            [24] 2877 	movx	a,@r0
   0AEA F5 82         [12] 2878 	mov	dpl,a
   0AEC 22            [24] 2879 	ret
                           2880 ;------------------------------------------------------------
                           2881 ;Allocation info for local variables in function 'radio_set_network_id'
                           2882 ;------------------------------------------------------------
                           2883 ;id                        Allocated with name '_radio_set_network_id_id_1_236'
                           2884 ;------------------------------------------------------------
                           2885 ;	radio/radio.c:925: radio_set_network_id(uint16_t id)
                           2886 ;	-----------------------------------------
                           2887 ;	 function radio_set_network_id
                           2888 ;	-----------------------------------------
   0AED                    2889 _radio_set_network_id:
   0AED AF 83         [24] 2890 	mov	r7,dph
   0AEF E5 82         [12] 2891 	mov	a,dpl
   0AF1 90r01r0A      [24] 2892 	mov	dptr,#_radio_set_network_id_id_1_236
   0AF4 F0            [24] 2893 	movx	@dptr,a
   0AF5 EF            [12] 2894 	mov	a,r7
   0AF6 A3            [24] 2895 	inc	dptr
   0AF7 F0            [24] 2896 	movx	@dptr,a
                           2897 ;	radio/radio.c:927: netid[0] = id&0xFF;
   0AF8 90r01r0A      [24] 2898 	mov	dptr,#_radio_set_network_id_id_1_236
   0AFB E0            [24] 2899 	movx	a,@dptr
   0AFC FE            [12] 2900 	mov	r6,a
   0AFD A3            [24] 2901 	inc	dptr
   0AFE E0            [24] 2902 	movx	a,@dptr
   0AFF FF            [12] 2903 	mov	r7,a
   0B00 8E 04         [24] 2904 	mov	ar4,r6
   0B02 78r03         [12] 2905 	mov	r0,#_netid
   0B04 EC            [12] 2906 	mov	a,r4
   0B05 F2            [24] 2907 	movx	@r0,a
                           2908 ;	radio/radio.c:928: netid[1] = id>>8;
   0B06 8F 05         [24] 2909 	mov	ar5,r7
   0B08 78r04         [12] 2910 	mov	r0,#(_netid + 0x0001)
   0B0A ED            [12] 2911 	mov	a,r5
   0B0B F2            [24] 2912 	movx	@r0,a
                           2913 ;	radio/radio.c:929: if (!feature_golay) {
   0B0C 20*00 34      [24] 2914 	jb	_feature_golay,00103$
                           2915 ;	radio/radio.c:932: register_write(EZRADIOPRO_TRANSMIT_HEADER_3, id >> 8);
   0B0F C0 07         [24] 2916 	push	ar7
   0B11 C0 06         [24] 2917 	push	ar6
   0B13 C0 05         [24] 2918 	push	ar5
   0B15 C0 05         [24] 2919 	push	ar5
   0B17 75 82 3A      [24] 2920 	mov	dpl,#0x3A
   0B1A 12r0Br44      [24] 2921 	lcall	_register_write
   0B1D 15 81         [12] 2922 	dec	sp
   0B1F D0 05         [24] 2923 	pop	ar5
   0B21 D0 06         [24] 2924 	pop	ar6
   0B23 D0 07         [24] 2925 	pop	ar7
                           2926 ;	radio/radio.c:933: register_write(EZRADIOPRO_TRANSMIT_HEADER_2, id & 0xFF);
   0B25 C0 06         [24] 2927 	push	ar6
   0B27 C0 05         [24] 2928 	push	ar5
   0B29 C0 06         [24] 2929 	push	ar6
   0B2B 75 82 3B      [24] 2930 	mov	dpl,#0x3B
   0B2E 12r0Br44      [24] 2931 	lcall	_register_write
   0B31 15 81         [12] 2932 	dec	sp
                           2933 ;	radio/radio.c:934: register_write(EZRADIOPRO_CHECK_HEADER_3, id >> 8);
   0B33 75 82 3F      [24] 2934 	mov	dpl,#0x3F
   0B36 12r0Br44      [24] 2935 	lcall	_register_write
   0B39 15 81         [12] 2936 	dec	sp
                           2937 ;	radio/radio.c:935: register_write(EZRADIOPRO_CHECK_HEADER_2, id & 0xFF);
   0B3B 75 82 40      [24] 2938 	mov	dpl,#0x40
   0B3E 12r0Br44      [24] 2939 	lcall	_register_write
   0B41 15 81         [12] 2940 	dec	sp
   0B43                    2941 00103$:
   0B43 22            [24] 2942 	ret
                           2943 ;------------------------------------------------------------
                           2944 ;Allocation info for local variables in function 'register_write'
                           2945 ;------------------------------------------------------------
                           2946 ;value                     Allocated to stack - sp -2
                           2947 ;reg                       Allocated to registers r7 
                           2948 ;EX0_saved                 Allocated to registers b0 
                           2949 ;------------------------------------------------------------
                           2950 ;	radio/radio.c:946: register_write(uint8_t reg, uint8_t value) __reentrant
                           2951 ;	-----------------------------------------
                           2952 ;	 function register_write
                           2953 ;	-----------------------------------------
   0B44                    2954 _register_write:
   0B44 AF 82         [24] 2955 	mov	r7,dpl
                           2956 ;	radio/radio.c:948: EX0_SAVE_DISABLE;
   0B46 A2 A8         [12] 2957 	mov	c,_EX0
   0B48 92*00         [24] 2958 	mov	b0,c
   0B4A C2 A8         [12] 2959 	clr	_EX0
                           2960 ;	radio/radio.c:950: NSS1 = 0;                           // drive NSS low
   0B4C C2 94         [12] 2961 	clr	_NSS1
                           2962 ;	radio/radio.c:951: SPIF1 = 0;                          // clear SPIF
   0B4E C2 B7         [12] 2963 	clr	_SPIF1
                           2964 ;	radio/radio.c:952: SPI1DAT = (reg | 0x80);             // write reg address
   0B50 74 80         [12] 2965 	mov	a,#0x80
   0B52 4F            [12] 2966 	orl	a,r7
   0B53 F5 86         [12] 2967 	mov	_SPI1DAT,a
                           2968 ;	radio/radio.c:953: while (!TXBMT1);                    // wait on TXBMT
   0B55                    2969 00101$:
   0B55 30 B1 FD      [24] 2970 	jnb	_TXBMT1,00101$
                           2971 ;	radio/radio.c:954: SPI1DAT = value;                    // write value
   0B58 A8 81         [24] 2972 	mov	r0,sp
   0B5A 18            [12] 2973 	dec	r0
   0B5B 18            [12] 2974 	dec	r0
   0B5C 86 86         [24] 2975 	mov	_SPI1DAT,@r0
                           2976 ;	radio/radio.c:955: while (!TXBMT1);                    // wait on TXBMT
   0B5E                    2977 00104$:
   0B5E 30 B1 FD      [24] 2978 	jnb	_TXBMT1,00104$
                           2979 ;	radio/radio.c:956: while ((SPI1CFG & 0x80) == 0x80);   // wait on SPIBSY
   0B61                    2980 00107$:
   0B61 74 80         [12] 2981 	mov	a,#0x80
   0B63 55 84         [12] 2982 	anl	a,_SPI1CFG
   0B65 FF            [12] 2983 	mov	r7,a
   0B66 BF 80 02      [24] 2984 	cjne	r7,#0x80,00129$
   0B69 80 F6         [24] 2985 	sjmp	00107$
   0B6B                    2986 00129$:
                           2987 ;	radio/radio.c:958: SPIF1 = 0;                          // leave SPIF cleared
   0B6B C2 B7         [12] 2988 	clr	_SPIF1
                           2989 ;	radio/radio.c:959: NSS1 = 1;                           // drive NSS high
   0B6D D2 94         [12] 2990 	setb	_NSS1
                           2991 ;	radio/radio.c:961: EX0_RESTORE;
   0B6F A2*00         [12] 2992 	mov	c,b0
   0B71 92 A8         [24] 2993 	mov	_EX0,c
   0B73 22            [24] 2994 	ret
                           2995 ;------------------------------------------------------------
                           2996 ;Allocation info for local variables in function 'register_read'
                           2997 ;------------------------------------------------------------
                           2998 ;reg                       Allocated to registers r7 
                           2999 ;value                     Allocated to registers r7 
                           3000 ;EX0_saved                 Allocated to registers b0 
                           3001 ;------------------------------------------------------------
                           3002 ;	radio/radio.c:971: register_read(uint8_t reg) __reentrant
                           3003 ;	-----------------------------------------
                           3004 ;	 function register_read
                           3005 ;	-----------------------------------------
   0B74                    3006 _register_read:
   0B74 AF 82         [24] 3007 	mov	r7,dpl
                           3008 ;	radio/radio.c:974: EX0_SAVE_DISABLE;
   0B76 A2 A8         [12] 3009 	mov	c,_EX0
   0B78 92*00         [24] 3010 	mov	b0,c
   0B7A C2 A8         [12] 3011 	clr	_EX0
                           3012 ;	radio/radio.c:976: NSS1 = 0;				// dsrive NSS low
   0B7C C2 94         [12] 3013 	clr	_NSS1
                           3014 ;	radio/radio.c:977: SPIF1 = 0;				// clear SPIF
   0B7E C2 B7         [12] 3015 	clr	_SPIF1
                           3016 ;	radio/radio.c:978: SPI1DAT = (reg);			// write reg address
   0B80 8F 86         [24] 3017 	mov	_SPI1DAT,r7
                           3018 ;	radio/radio.c:979: while (!TXBMT1);			// wait on TXBMT
   0B82                    3019 00101$:
   0B82 30 B1 FD      [24] 3020 	jnb	_TXBMT1,00101$
                           3021 ;	radio/radio.c:980: SPI1DAT = 0x00;				// write anything
   0B85 75 86 00      [24] 3022 	mov	_SPI1DAT,#0x00
                           3023 ;	radio/radio.c:981: while (!TXBMT1);			// wait on TXBMT
   0B88                    3024 00104$:
   0B88 30 B1 FD      [24] 3025 	jnb	_TXBMT1,00104$
                           3026 ;	radio/radio.c:982: while ((SPI1CFG & 0x80) == 0x80);	// wait on SPIBSY
   0B8B                    3027 00107$:
   0B8B 74 80         [12] 3028 	mov	a,#0x80
   0B8D 55 84         [12] 3029 	anl	a,_SPI1CFG
   0B8F FF            [12] 3030 	mov	r7,a
   0B90 BF 80 02      [24] 3031 	cjne	r7,#0x80,00129$
   0B93 80 F6         [24] 3032 	sjmp	00107$
   0B95                    3033 00129$:
                           3034 ;	radio/radio.c:983: value = SPI1DAT;			// read value
   0B95 AF 86         [24] 3035 	mov	r7,_SPI1DAT
                           3036 ;	radio/radio.c:984: SPIF1 = 0;				// leave SPIF cleared
   0B97 C2 B7         [12] 3037 	clr	_SPIF1
                           3038 ;	radio/radio.c:985: NSS1 = 1;				// drive NSS high
   0B99 D2 94         [12] 3039 	setb	_NSS1
                           3040 ;	radio/radio.c:987: EX0_RESTORE;
   0B9B A2*00         [12] 3041 	mov	c,b0
   0B9D 92 A8         [24] 3042 	mov	_EX0,c
                           3043 ;	radio/radio.c:989: return value;
   0B9F 8F 82         [24] 3044 	mov	dpl,r7
   0BA1 22            [24] 3045 	ret
                           3046 ;------------------------------------------------------------
                           3047 ;Allocation info for local variables in function 'read_receive_fifo'
                           3048 ;------------------------------------------------------------
                           3049 ;buf                       Allocated to stack - sp -3
                           3050 ;n                         Allocated to registers r7 
                           3051 ;------------------------------------------------------------
                           3052 ;	radio/radio.c:996: read_receive_fifo(register uint8_t n, __xdata uint8_t * buf) __reentrant
                           3053 ;	-----------------------------------------
                           3054 ;	 function read_receive_fifo
                           3055 ;	-----------------------------------------
   0BA2                    3056 _read_receive_fifo:
   0BA2 AF 82         [24] 3057 	mov	r7,dpl
                           3058 ;	radio/radio.c:998: NSS1 = 0;				// drive NSS low
   0BA4 C2 94         [12] 3059 	clr	_NSS1
                           3060 ;	radio/radio.c:999: SPIF1 = 0;				// clear SPIF
   0BA6 C2 B7         [12] 3061 	clr	_SPIF1
                           3062 ;	radio/radio.c:1000: SPI1DAT = EZRADIOPRO_FIFO_ACCESS;
   0BA8 75 86 7F      [24] 3063 	mov	_SPI1DAT,#0x7F
                           3064 ;	radio/radio.c:1001: while (!SPIF1);				// wait on SPIF
   0BAB                    3065 00101$:
   0BAB 30 B7 FD      [24] 3066 	jnb	_SPIF1,00101$
                           3067 ;	radio/radio.c:1002: ACC = SPI1DAT;				// discard first byte
   0BAE 85 86 E0      [24] 3068 	mov	_ACC,_SPI1DAT
                           3069 ;	radio/radio.c:1004: while (n--) {
   0BB1 E5 81         [12] 3070 	mov	a,sp
   0BB3 24 FD         [12] 3071 	add	a,#0xfd
   0BB5 F8            [12] 3072 	mov	r0,a
   0BB6 86 05         [24] 3073 	mov	ar5,@r0
   0BB8 08            [12] 3074 	inc	r0
   0BB9 86 06         [24] 3075 	mov	ar6,@r0
   0BBB                    3076 00107$:
   0BBB 8F 04         [24] 3077 	mov	ar4,r7
   0BBD 1F            [12] 3078 	dec	r7
   0BBE EC            [12] 3079 	mov	a,r4
   0BBF 60 16         [24] 3080 	jz	00109$
                           3081 ;	radio/radio.c:1005: SPIF1 = 0;			// clear SPIF
   0BC1 C2 B7         [12] 3082 	clr	_SPIF1
                           3083 ;	radio/radio.c:1006: SPI1DAT = 0x00;			// write anything
   0BC3 75 86 00      [24] 3084 	mov	_SPI1DAT,#0x00
                           3085 ;	radio/radio.c:1007: while (!SPIF1);			// wait on SPIF
   0BC6                    3086 00104$:
   0BC6 30 B7 FD      [24] 3087 	jnb	_SPIF1,00104$
                           3088 ;	radio/radio.c:1008: *buf++ = SPI1DAT;		// copy to buffer
   0BC9 8D 82         [24] 3089 	mov	dpl,r5
   0BCB 8E 83         [24] 3090 	mov	dph,r6
   0BCD E5 86         [12] 3091 	mov	a,_SPI1DAT
   0BCF F0            [24] 3092 	movx	@dptr,a
   0BD0 A3            [24] 3093 	inc	dptr
   0BD1 AD 82         [24] 3094 	mov	r5,dpl
   0BD3 AE 83         [24] 3095 	mov	r6,dph
   0BD5 80 E4         [24] 3096 	sjmp	00107$
   0BD7                    3097 00109$:
                           3098 ;	radio/radio.c:1011: SPIF1 = 0;				// leave SPIF cleared
   0BD7 C2 B7         [12] 3099 	clr	_SPIF1
                           3100 ;	radio/radio.c:1012: NSS1 = 1;				// drive NSS high
   0BD9 D2 94         [12] 3101 	setb	_NSS1
   0BDB 22            [24] 3102 	ret
                           3103 ;------------------------------------------------------------
                           3104 ;Allocation info for local variables in function 'clear_status_registers'
                           3105 ;------------------------------------------------------------
                           3106 ;	radio/radio.c:1018: clear_status_registers(void)
                           3107 ;	-----------------------------------------
                           3108 ;	 function clear_status_registers
                           3109 ;	-----------------------------------------
   0BDC                    3110 _clear_status_registers:
                           3111 ;	radio/radio.c:1020: register_read(EZRADIOPRO_INTERRUPT_STATUS_1);
   0BDC 75 82 03      [24] 3112 	mov	dpl,#0x03
   0BDF 12r0Br74      [24] 3113 	lcall	_register_read
                           3114 ;	radio/radio.c:1021: register_read(EZRADIOPRO_INTERRUPT_STATUS_2);
   0BE2 75 82 04      [24] 3115 	mov	dpl,#0x04
   0BE5 02r0Br74      [24] 3116 	ljmp	_register_read
                           3117 ;------------------------------------------------------------
                           3118 ;Allocation info for local variables in function 'scale_uint32'
                           3119 ;------------------------------------------------------------
                           3120 ;	radio/radio.c:1031: scale_uint32(__pdata uint32_t value, __pdata uint32_t scale)
                           3121 ;	-----------------------------------------
                           3122 ;	 function scale_uint32
                           3123 ;	-----------------------------------------
   0BE8                    3124 _scale_uint32:
   0BE8 AF 82         [24] 3125 	mov	r7,dpl
   0BEA AE 83         [24] 3126 	mov	r6,dph
   0BEC AD F0         [24] 3127 	mov	r5,b
   0BEE FC            [12] 3128 	mov	r4,a
   0BEF 78r25         [12] 3129 	mov	r0,#_scale_uint32_value_1_248
   0BF1 EF            [12] 3130 	mov	a,r7
   0BF2 F2            [24] 3131 	movx	@r0,a
   0BF3 08            [12] 3132 	inc	r0
   0BF4 EE            [12] 3133 	mov	a,r6
   0BF5 F2            [24] 3134 	movx	@r0,a
   0BF6 08            [12] 3135 	inc	r0
   0BF7 ED            [12] 3136 	mov	a,r5
   0BF8 F2            [24] 3137 	movx	@r0,a
   0BF9 08            [12] 3138 	inc	r0
   0BFA EC            [12] 3139 	mov	a,r4
   0BFB F2            [24] 3140 	movx	@r0,a
                           3141 ;	radio/radio.c:1033: return (value + (scale >> 1)) / scale;
   0BFC 78r24         [12] 3142 	mov	r0,#(_scale_uint32_PARM_2 + 3)
   0BFE E2            [24] 3143 	movx	a,@r0
   0BFF C3            [12] 3144 	clr	c
   0C00 13            [12] 3145 	rrc	a
   0C01 FF            [12] 3146 	mov	r7,a
   0C02 18            [12] 3147 	dec	r0
   0C03 E2            [24] 3148 	movx	a,@r0
   0C04 13            [12] 3149 	rrc	a
   0C05 FE            [12] 3150 	mov	r6,a
   0C06 18            [12] 3151 	dec	r0
   0C07 E2            [24] 3152 	movx	a,@r0
   0C08 13            [12] 3153 	rrc	a
   0C09 FB            [12] 3154 	mov	r3,a
   0C0A 18            [12] 3155 	dec	r0
   0C0B E2            [24] 3156 	movx	a,@r0
   0C0C 13            [12] 3157 	rrc	a
   0C0D FA            [12] 3158 	mov	r2,a
   0C0E 78r25         [12] 3159 	mov	r0,#_scale_uint32_value_1_248
   0C10 E2            [24] 3160 	movx	a,@r0
   0C11 2A            [12] 3161 	add	a,r2
   0C12 FA            [12] 3162 	mov	r2,a
   0C13 08            [12] 3163 	inc	r0
   0C14 E2            [24] 3164 	movx	a,@r0
   0C15 3B            [12] 3165 	addc	a,r3
   0C16 FB            [12] 3166 	mov	r3,a
   0C17 08            [12] 3167 	inc	r0
   0C18 E2            [24] 3168 	movx	a,@r0
   0C19 3E            [12] 3169 	addc	a,r6
   0C1A FE            [12] 3170 	mov	r6,a
   0C1B 08            [12] 3171 	inc	r0
   0C1C E2            [24] 3172 	movx	a,@r0
   0C1D 3F            [12] 3173 	addc	a,r7
   0C1E FF            [12] 3174 	mov	r7,a
   0C1F 78r21         [12] 3175 	mov	r0,#_scale_uint32_PARM_2
   0C21 90r00r00      [24] 3176 	mov	dptr,#__divulong_PARM_2
   0C24 E2            [24] 3177 	movx	a,@r0
   0C25 F0            [24] 3178 	movx	@dptr,a
   0C26 08            [12] 3179 	inc	r0
   0C27 E2            [24] 3180 	movx	a,@r0
   0C28 A3            [24] 3181 	inc	dptr
   0C29 F0            [24] 3182 	movx	@dptr,a
   0C2A 08            [12] 3183 	inc	r0
   0C2B E2            [24] 3184 	movx	a,@r0
   0C2C A3            [24] 3185 	inc	dptr
   0C2D F0            [24] 3186 	movx	@dptr,a
   0C2E 08            [12] 3187 	inc	r0
   0C2F E2            [24] 3188 	movx	a,@r0
   0C30 A3            [24] 3189 	inc	dptr
   0C31 F0            [24] 3190 	movx	@dptr,a
   0C32 8A 82         [24] 3191 	mov	dpl,r2
   0C34 8B 83         [24] 3192 	mov	dph,r3
   0C36 8E F0         [24] 3193 	mov	b,r6
   0C38 EF            [12] 3194 	mov	a,r7
   0C39 02r00r00      [24] 3195 	ljmp	__divulong
                           3196 ;------------------------------------------------------------
                           3197 ;Allocation info for local variables in function 'software_reset'
                           3198 ;------------------------------------------------------------
                           3199 ;status                    Allocated with name '_software_reset_status_1_251'
                           3200 ;------------------------------------------------------------
                           3201 ;	radio/radio.c:1041: software_reset(void)
                           3202 ;	-----------------------------------------
                           3203 ;	 function software_reset
                           3204 ;	-----------------------------------------
   0C3C                    3205 _software_reset:
                           3206 ;	radio/radio.c:1046: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, 0);
   0C3C E4            [12] 3207 	clr	a
   0C3D C0 E0         [24] 3208 	push	acc
   0C3F 75 82 05      [24] 3209 	mov	dpl,#0x05
   0C42 12r0Br44      [24] 3210 	lcall	_register_write
   0C45 15 81         [12] 3211 	dec	sp
                           3212 ;	radio/radio.c:1047: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, 0);
   0C47 E4            [12] 3213 	clr	a
   0C48 C0 E0         [24] 3214 	push	acc
   0C4A 75 82 06      [24] 3215 	mov	dpl,#0x06
   0C4D 12r0Br44      [24] 3216 	lcall	_register_write
   0C50 15 81         [12] 3217 	dec	sp
                           3218 ;	radio/radio.c:1049: clear_status_registers();
   0C52 12r0BrDC      [24] 3219 	lcall	_clear_status_registers
                           3220 ;	radio/radio.c:1052: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_1, (EZRADIOPRO_SWRES | EZRADIOPRO_XTON));
   0C55 74 81         [12] 3221 	mov	a,#0x81
   0C57 C0 E0         [24] 3222 	push	acc
   0C59 75 82 07      [24] 3223 	mov	dpl,#0x07
   0C5C 12r0Br44      [24] 3224 	lcall	_register_write
   0C5F 15 81         [12] 3225 	dec	sp
                           3226 ;	radio/radio.c:1055: delay_set(2);
   0C61 90 00 02      [24] 3227 	mov	dptr,#0x0002
   0C64 12r00r00      [24] 3228 	lcall	_delay_set
                           3229 ;	radio/radio.c:1056: while (IRQ) {
   0C67                    3230 00103$:
   0C67 30 87 07      [24] 3231 	jnb	_IRQ,00105$
                           3232 ;	radio/radio.c:1057: if (delay_expired()) {
   0C6A 12r00r00      [24] 3233 	lcall	_delay_expired
   0C6D 50 F8         [24] 3234 	jnc	00103$
                           3235 ;	radio/radio.c:1058: return false;
   0C6F C3            [12] 3236 	clr	c
   0C70 22            [24] 3237 	ret
   0C71                    3238 00105$:
                           3239 ;	radio/radio.c:1063: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, 0);
   0C71 E4            [12] 3240 	clr	a
   0C72 C0 E0         [24] 3241 	push	acc
   0C74 75 82 05      [24] 3242 	mov	dpl,#0x05
   0C77 12r0Br44      [24] 3243 	lcall	_register_write
   0C7A 15 81         [12] 3244 	dec	sp
                           3245 ;	radio/radio.c:1064: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, EZRADIOPRO_ENCHIPRDY);
   0C7C 74 02         [12] 3246 	mov	a,#0x02
   0C7E C0 E0         [24] 3247 	push	acc
   0C80 75 82 06      [24] 3248 	mov	dpl,#0x06
   0C83 12r0Br44      [24] 3249 	lcall	_register_write
   0C86 15 81         [12] 3250 	dec	sp
                           3251 ;	radio/radio.c:1066: delay_set(20);
   0C88 90 00 14      [24] 3252 	mov	dptr,#0x0014
   0C8B 12r00r00      [24] 3253 	lcall	_delay_set
                           3254 ;	radio/radio.c:1067: while (!delay_expired()) {
   0C8E                    3255 00108$:
   0C8E 12r00r00      [24] 3256 	lcall	_delay_expired
   0C91 40 13         [24] 3257 	jc	00110$
                           3258 ;	radio/radio.c:1068: status = register_read(EZRADIOPRO_INTERRUPT_STATUS_1);
   0C93 75 82 03      [24] 3259 	mov	dpl,#0x03
   0C96 12r0Br74      [24] 3260 	lcall	_register_read
                           3261 ;	radio/radio.c:1069: status = register_read(EZRADIOPRO_INTERRUPT_STATUS_2);
   0C99 75 82 04      [24] 3262 	mov	dpl,#0x04
   0C9C 12r0Br74      [24] 3263 	lcall	_register_read
   0C9F E5 82         [12] 3264 	mov	a,dpl
                           3265 ;	radio/radio.c:1070: if (status & EZRADIOPRO_ICHIPRDY) {
   0CA1 30 E1 EA      [24] 3266 	jnb	acc.1,00108$
                           3267 ;	radio/radio.c:1071: return true;
   0CA4 D3            [12] 3268 	setb	c
   0CA5 22            [24] 3269 	ret
   0CA6                    3270 00110$:
                           3271 ;	radio/radio.c:1074: return false;
   0CA6 C3            [12] 3272 	clr	c
   0CA7 22            [24] 3273 	ret
                           3274 ;------------------------------------------------------------
                           3275 ;Allocation info for local variables in function 'set_frequency_registers'
                           3276 ;------------------------------------------------------------
                           3277 ;band                      Allocated with name '_set_frequency_registers_band_1_257'
                           3278 ;------------------------------------------------------------
                           3279 ;	radio/radio.c:1081: set_frequency_registers(__pdata uint32_t frequency)
                           3280 ;	-----------------------------------------
                           3281 ;	 function set_frequency_registers
                           3282 ;	-----------------------------------------
   0CA8                    3283 _set_frequency_registers:
   0CA8 AF 82         [24] 3284 	mov	r7,dpl
   0CAA AE 83         [24] 3285 	mov	r6,dph
   0CAC AD F0         [24] 3286 	mov	r5,b
   0CAE FC            [12] 3287 	mov	r4,a
   0CAF 78r29         [12] 3288 	mov	r0,#_set_frequency_registers_frequency_1_256
   0CB1 EF            [12] 3289 	mov	a,r7
   0CB2 F2            [24] 3290 	movx	@r0,a
   0CB3 08            [12] 3291 	inc	r0
   0CB4 EE            [12] 3292 	mov	a,r6
   0CB5 F2            [24] 3293 	movx	@r0,a
   0CB6 08            [12] 3294 	inc	r0
   0CB7 ED            [12] 3295 	mov	a,r5
   0CB8 F2            [24] 3296 	movx	@r0,a
   0CB9 08            [12] 3297 	inc	r0
   0CBA EC            [12] 3298 	mov	a,r4
   0CBB F2            [24] 3299 	movx	@r0,a
                           3300 ;	radio/radio.c:1086: if (frequency > 480000000UL) {
   0CBC 78r29         [12] 3301 	mov	r0,#_set_frequency_registers_frequency_1_256
   0CBE C3            [12] 3302 	clr	c
   0CBF E2            [24] 3303 	movx	a,@r0
   0CC0 F5 F0         [12] 3304 	mov	b,a
   0CC2 E4            [12] 3305 	clr	a
   0CC3 95 F0         [12] 3306 	subb	a,b
   0CC5 08            [12] 3307 	inc	r0
   0CC6 E2            [24] 3308 	movx	a,@r0
   0CC7 F5 F0         [12] 3309 	mov	b,a
   0CC9 74 38         [12] 3310 	mov	a,#0x38
   0CCB 95 F0         [12] 3311 	subb	a,b
   0CCD 08            [12] 3312 	inc	r0
   0CCE E2            [24] 3313 	movx	a,@r0
   0CCF F5 F0         [12] 3314 	mov	b,a
   0CD1 74 9C         [12] 3315 	mov	a,#0x9C
   0CD3 95 F0         [12] 3316 	subb	a,b
   0CD5 08            [12] 3317 	inc	r0
   0CD6 E2            [24] 3318 	movx	a,@r0
   0CD7 F5 F0         [12] 3319 	mov	b,a
   0CD9 74 1C         [12] 3320 	mov	a,#0x1C
   0CDB 95 F0         [12] 3321 	subb	a,b
   0CDD 40 03         [24] 3322 	jc	00109$
   0CDF 02r0Dr9E      [24] 3323 	ljmp	00102$
   0CE2                    3324 00109$:
                           3325 ;	radio/radio.c:1087: frequency -= 480000000UL;
   0CE2 78r2A         [12] 3326 	mov	r0,#(_set_frequency_registers_frequency_1_256 + 1)
   0CE4 E2            [24] 3327 	movx	a,@r0
   0CE5 24 C8         [12] 3328 	add	a,#0xC8
   0CE7 F2            [24] 3329 	movx	@r0,a
   0CE8 08            [12] 3330 	inc	r0
   0CE9 E2            [24] 3331 	movx	a,@r0
   0CEA 34 63         [12] 3332 	addc	a,#0x63
   0CEC F2            [24] 3333 	movx	@r0,a
   0CED 08            [12] 3334 	inc	r0
   0CEE E2            [24] 3335 	movx	a,@r0
   0CEF 34 E3         [12] 3336 	addc	a,#0xE3
   0CF1 F2            [24] 3337 	movx	@r0,a
                           3338 ;	radio/radio.c:1088: band  = frequency / 20000000UL;
   0CF2 90r00r00      [24] 3339 	mov	dptr,#__divulong_PARM_2
   0CF5 E4            [12] 3340 	clr	a
   0CF6 F0            [24] 3341 	movx	@dptr,a
   0CF7 74 2D         [12] 3342 	mov	a,#0x2D
   0CF9 A3            [24] 3343 	inc	dptr
   0CFA F0            [24] 3344 	movx	@dptr,a
   0CFB 74 31         [12] 3345 	mov	a,#0x31
   0CFD A3            [24] 3346 	inc	dptr
   0CFE F0            [24] 3347 	movx	@dptr,a
   0CFF 74 01         [12] 3348 	mov	a,#0x01
   0D01 A3            [24] 3349 	inc	dptr
   0D02 F0            [24] 3350 	movx	@dptr,a
   0D03 78r29         [12] 3351 	mov	r0,#_set_frequency_registers_frequency_1_256
   0D05 E2            [24] 3352 	movx	a,@r0
   0D06 F5 82         [12] 3353 	mov	dpl,a
   0D08 08            [12] 3354 	inc	r0
   0D09 E2            [24] 3355 	movx	a,@r0
   0D0A F5 83         [12] 3356 	mov	dph,a
   0D0C 08            [12] 3357 	inc	r0
   0D0D E2            [24] 3358 	movx	a,@r0
   0D0E F5 F0         [12] 3359 	mov	b,a
   0D10 08            [12] 3360 	inc	r0
   0D11 E2            [24] 3361 	movx	a,@r0
   0D12 12r00r00      [24] 3362 	lcall	__divulong
   0D15 AA 82         [24] 3363 	mov	r2,dpl
   0D17 90r01r0C      [24] 3364 	mov	dptr,#_set_frequency_registers_band_1_257
   0D1A EA            [12] 3365 	mov	a,r2
   0D1B F0            [24] 3366 	movx	@dptr,a
                           3367 ;	radio/radio.c:1089: frequency -= (uint32_t)band * 20000000UL;
   0D1C 90r00r00      [24] 3368 	mov	dptr,#__mullong_PARM_2
   0D1F EA            [12] 3369 	mov	a,r2
   0D20 F0            [24] 3370 	movx	@dptr,a
   0D21 E4            [12] 3371 	clr	a
   0D22 A3            [24] 3372 	inc	dptr
   0D23 F0            [24] 3373 	movx	@dptr,a
   0D24 E4            [12] 3374 	clr	a
   0D25 A3            [24] 3375 	inc	dptr
   0D26 F0            [24] 3376 	movx	@dptr,a
   0D27 E4            [12] 3377 	clr	a
   0D28 A3            [24] 3378 	inc	dptr
   0D29 F0            [24] 3379 	movx	@dptr,a
   0D2A 90 2D 00      [24] 3380 	mov	dptr,#0x2D00
   0D2D 75 F0 31      [24] 3381 	mov	b,#0x31
   0D30 74 01         [12] 3382 	mov	a,#0x01
   0D32 12r00r00      [24] 3383 	lcall	__mullong
   0D35 AC 82         [24] 3384 	mov	r4,dpl
   0D37 AD 83         [24] 3385 	mov	r5,dph
   0D39 AE F0         [24] 3386 	mov	r6,b
   0D3B FF            [12] 3387 	mov	r7,a
   0D3C 78r29         [12] 3388 	mov	r0,#_set_frequency_registers_frequency_1_256
   0D3E E2            [24] 3389 	movx	a,@r0
   0D3F C3            [12] 3390 	clr	c
   0D40 9C            [12] 3391 	subb	a,r4
   0D41 F2            [24] 3392 	movx	@r0,a
   0D42 08            [12] 3393 	inc	r0
   0D43 E2            [24] 3394 	movx	a,@r0
   0D44 9D            [12] 3395 	subb	a,r5
   0D45 F2            [24] 3396 	movx	@r0,a
   0D46 08            [12] 3397 	inc	r0
   0D47 E2            [24] 3398 	movx	a,@r0
   0D48 9E            [12] 3399 	subb	a,r6
   0D49 F2            [24] 3400 	movx	@r0,a
   0D4A 08            [12] 3401 	inc	r0
   0D4B E2            [24] 3402 	movx	a,@r0
   0D4C 9F            [12] 3403 	subb	a,r7
   0D4D F2            [24] 3404 	movx	@r0,a
                           3405 ;	radio/radio.c:1090: frequency  = scale_uint32(frequency, 625);
   0D4E 78r21         [12] 3406 	mov	r0,#_scale_uint32_PARM_2
   0D50 74 71         [12] 3407 	mov	a,#0x71
   0D52 F2            [24] 3408 	movx	@r0,a
   0D53 08            [12] 3409 	inc	r0
   0D54 74 02         [12] 3410 	mov	a,#0x02
   0D56 F2            [24] 3411 	movx	@r0,a
   0D57 08            [12] 3412 	inc	r0
   0D58 E4            [12] 3413 	clr	a
   0D59 F2            [24] 3414 	movx	@r0,a
   0D5A 08            [12] 3415 	inc	r0
   0D5B F2            [24] 3416 	movx	@r0,a
   0D5C 78r29         [12] 3417 	mov	r0,#_set_frequency_registers_frequency_1_256
   0D5E E2            [24] 3418 	movx	a,@r0
   0D5F F5 82         [12] 3419 	mov	dpl,a
   0D61 08            [12] 3420 	inc	r0
   0D62 E2            [24] 3421 	movx	a,@r0
   0D63 F5 83         [12] 3422 	mov	dph,a
   0D65 08            [12] 3423 	inc	r0
   0D66 E2            [24] 3424 	movx	a,@r0
   0D67 F5 F0         [12] 3425 	mov	b,a
   0D69 08            [12] 3426 	inc	r0
   0D6A E2            [24] 3427 	movx	a,@r0
   0D6B 12r0BrE8      [24] 3428 	lcall	_scale_uint32
   0D6E 78r29         [12] 3429 	mov	r0,#_set_frequency_registers_frequency_1_256
   0D70 C0 E0         [24] 3430 	push	acc
   0D72 E5 82         [12] 3431 	mov	a,dpl
   0D74 F2            [24] 3432 	movx	@r0,a
   0D75 08            [12] 3433 	inc	r0
   0D76 E5 83         [12] 3434 	mov	a,dph
   0D78 F2            [24] 3435 	movx	@r0,a
   0D79 08            [12] 3436 	inc	r0
   0D7A E5 F0         [12] 3437 	mov	a,b
   0D7C F2            [24] 3438 	movx	@r0,a
   0D7D D0 E0         [24] 3439 	pop	acc
   0D7F 08            [12] 3440 	inc	r0
   0D80 F2            [24] 3441 	movx	@r0,a
                           3442 ;	radio/radio.c:1091: frequency <<= 1;
   0D81 78r29         [12] 3443 	mov	r0,#_set_frequency_registers_frequency_1_256
   0D83 E2            [24] 3444 	movx	a,@r0
   0D84 25 E0         [12] 3445 	add	a,acc
   0D86 F2            [24] 3446 	movx	@r0,a
   0D87 08            [12] 3447 	inc	r0
   0D88 E2            [24] 3448 	movx	a,@r0
   0D89 33            [12] 3449 	rlc	a
   0D8A F2            [24] 3450 	movx	@r0,a
   0D8B 08            [12] 3451 	inc	r0
   0D8C E2            [24] 3452 	movx	a,@r0
   0D8D 33            [12] 3453 	rlc	a
   0D8E F2            [24] 3454 	movx	@r0,a
   0D8F 08            [12] 3455 	inc	r0
   0D90 E2            [24] 3456 	movx	a,@r0
   0D91 33            [12] 3457 	rlc	a
   0D92 F2            [24] 3458 	movx	@r0,a
                           3459 ;	radio/radio.c:1092: band |= EZRADIOPRO_HBSEL;
   0D93 90r01r0C      [24] 3460 	mov	dptr,#_set_frequency_registers_band_1_257
   0D96 E0            [24] 3461 	movx	a,@dptr
   0D97 FF            [12] 3462 	mov	r7,a
   0D98 44 20         [12] 3463 	orl	a,#0x20
   0D9A F0            [24] 3464 	movx	@dptr,a
   0D9B 02r0Er61      [24] 3465 	ljmp	00103$
   0D9E                    3466 00102$:
                           3467 ;	radio/radio.c:1094: frequency -= 240000000UL;
   0D9E 78r2A         [12] 3468 	mov	r0,#(_set_frequency_registers_frequency_1_256 + 1)
   0DA0 E2            [24] 3469 	movx	a,@r0
   0DA1 24 E4         [12] 3470 	add	a,#0xE4
   0DA3 F2            [24] 3471 	movx	@r0,a
   0DA4 08            [12] 3472 	inc	r0
   0DA5 E2            [24] 3473 	movx	a,@r0
   0DA6 34 B1         [12] 3474 	addc	a,#0xB1
   0DA8 F2            [24] 3475 	movx	@r0,a
   0DA9 08            [12] 3476 	inc	r0
   0DAA E2            [24] 3477 	movx	a,@r0
   0DAB 34 F1         [12] 3478 	addc	a,#0xF1
   0DAD F2            [24] 3479 	movx	@r0,a
                           3480 ;	radio/radio.c:1095: band  = frequency / 10000000UL;
   0DAE 90r00r00      [24] 3481 	mov	dptr,#__divulong_PARM_2
   0DB1 74 80         [12] 3482 	mov	a,#0x80
   0DB3 F0            [24] 3483 	movx	@dptr,a
   0DB4 74 96         [12] 3484 	mov	a,#0x96
   0DB6 A3            [24] 3485 	inc	dptr
   0DB7 F0            [24] 3486 	movx	@dptr,a
   0DB8 74 98         [12] 3487 	mov	a,#0x98
   0DBA A3            [24] 3488 	inc	dptr
   0DBB F0            [24] 3489 	movx	@dptr,a
   0DBC E4            [12] 3490 	clr	a
   0DBD A3            [24] 3491 	inc	dptr
   0DBE F0            [24] 3492 	movx	@dptr,a
   0DBF 78r29         [12] 3493 	mov	r0,#_set_frequency_registers_frequency_1_256
   0DC1 E2            [24] 3494 	movx	a,@r0
   0DC2 F5 82         [12] 3495 	mov	dpl,a
   0DC4 08            [12] 3496 	inc	r0
   0DC5 E2            [24] 3497 	movx	a,@r0
   0DC6 F5 83         [12] 3498 	mov	dph,a
   0DC8 08            [12] 3499 	inc	r0
   0DC9 E2            [24] 3500 	movx	a,@r0
   0DCA F5 F0         [12] 3501 	mov	b,a
   0DCC 08            [12] 3502 	inc	r0
   0DCD E2            [24] 3503 	movx	a,@r0
   0DCE 12r00r00      [24] 3504 	lcall	__divulong
   0DD1 AC 82         [24] 3505 	mov	r4,dpl
   0DD3 90r01r0C      [24] 3506 	mov	dptr,#_set_frequency_registers_band_1_257
   0DD6 EC            [12] 3507 	mov	a,r4
   0DD7 F0            [24] 3508 	movx	@dptr,a
                           3509 ;	radio/radio.c:1096: frequency -= (uint32_t)band * 10000000UL;
   0DD8 90r00r00      [24] 3510 	mov	dptr,#__mullong_PARM_2
   0DDB EC            [12] 3511 	mov	a,r4
   0DDC F0            [24] 3512 	movx	@dptr,a
   0DDD E4            [12] 3513 	clr	a
   0DDE A3            [24] 3514 	inc	dptr
   0DDF F0            [24] 3515 	movx	@dptr,a
   0DE0 E4            [12] 3516 	clr	a
   0DE1 A3            [24] 3517 	inc	dptr
   0DE2 F0            [24] 3518 	movx	@dptr,a
   0DE3 E4            [12] 3519 	clr	a
   0DE4 A3            [24] 3520 	inc	dptr
   0DE5 F0            [24] 3521 	movx	@dptr,a
   0DE6 90 96 80      [24] 3522 	mov	dptr,#0x9680
   0DE9 75 F0 98      [24] 3523 	mov	b,#0x98
   0DEC E4            [12] 3524 	clr	a
   0DED 12r00r00      [24] 3525 	lcall	__mullong
   0DF0 AC 82         [24] 3526 	mov	r4,dpl
   0DF2 AD 83         [24] 3527 	mov	r5,dph
   0DF4 AE F0         [24] 3528 	mov	r6,b
   0DF6 FF            [12] 3529 	mov	r7,a
   0DF7 78r29         [12] 3530 	mov	r0,#_set_frequency_registers_frequency_1_256
   0DF9 E2            [24] 3531 	movx	a,@r0
   0DFA C3            [12] 3532 	clr	c
   0DFB 9C            [12] 3533 	subb	a,r4
   0DFC F2            [24] 3534 	movx	@r0,a
   0DFD 08            [12] 3535 	inc	r0
   0DFE E2            [24] 3536 	movx	a,@r0
   0DFF 9D            [12] 3537 	subb	a,r5
   0E00 F2            [24] 3538 	movx	@r0,a
   0E01 08            [12] 3539 	inc	r0
   0E02 E2            [24] 3540 	movx	a,@r0
   0E03 9E            [12] 3541 	subb	a,r6
   0E04 F2            [24] 3542 	movx	@r0,a
   0E05 08            [12] 3543 	inc	r0
   0E06 E2            [24] 3544 	movx	a,@r0
   0E07 9F            [12] 3545 	subb	a,r7
   0E08 F2            [24] 3546 	movx	@r0,a
                           3547 ;	radio/radio.c:1097: frequency  = scale_uint32(frequency, 625);
   0E09 78r21         [12] 3548 	mov	r0,#_scale_uint32_PARM_2
   0E0B 74 71         [12] 3549 	mov	a,#0x71
   0E0D F2            [24] 3550 	movx	@r0,a
   0E0E 08            [12] 3551 	inc	r0
   0E0F 74 02         [12] 3552 	mov	a,#0x02
   0E11 F2            [24] 3553 	movx	@r0,a
   0E12 08            [12] 3554 	inc	r0
   0E13 E4            [12] 3555 	clr	a
   0E14 F2            [24] 3556 	movx	@r0,a
   0E15 08            [12] 3557 	inc	r0
   0E16 F2            [24] 3558 	movx	@r0,a
   0E17 78r29         [12] 3559 	mov	r0,#_set_frequency_registers_frequency_1_256
   0E19 E2            [24] 3560 	movx	a,@r0
   0E1A F5 82         [12] 3561 	mov	dpl,a
   0E1C 08            [12] 3562 	inc	r0
   0E1D E2            [24] 3563 	movx	a,@r0
   0E1E F5 83         [12] 3564 	mov	dph,a
   0E20 08            [12] 3565 	inc	r0
   0E21 E2            [24] 3566 	movx	a,@r0
   0E22 F5 F0         [12] 3567 	mov	b,a
   0E24 08            [12] 3568 	inc	r0
   0E25 E2            [24] 3569 	movx	a,@r0
   0E26 12r0BrE8      [24] 3570 	lcall	_scale_uint32
   0E29 78r29         [12] 3571 	mov	r0,#_set_frequency_registers_frequency_1_256
   0E2B C0 E0         [24] 3572 	push	acc
   0E2D E5 82         [12] 3573 	mov	a,dpl
   0E2F F2            [24] 3574 	movx	@r0,a
   0E30 08            [12] 3575 	inc	r0
   0E31 E5 83         [12] 3576 	mov	a,dph
   0E33 F2            [24] 3577 	movx	@r0,a
   0E34 08            [12] 3578 	inc	r0
   0E35 E5 F0         [12] 3579 	mov	a,b
   0E37 F2            [24] 3580 	movx	@r0,a
   0E38 D0 E0         [24] 3581 	pop	acc
   0E3A 08            [12] 3582 	inc	r0
   0E3B F2            [24] 3583 	movx	@r0,a
                           3584 ;	radio/radio.c:1098: frequency <<= 2;
   0E3C 78r29         [12] 3585 	mov	r0,#_set_frequency_registers_frequency_1_256
   0E3E E2            [24] 3586 	movx	a,@r0
   0E3F 25 E0         [12] 3587 	add	a,acc
   0E41 F2            [24] 3588 	movx	@r0,a
   0E42 08            [12] 3589 	inc	r0
   0E43 E2            [24] 3590 	movx	a,@r0
   0E44 33            [12] 3591 	rlc	a
   0E45 F2            [24] 3592 	movx	@r0,a
   0E46 08            [12] 3593 	inc	r0
   0E47 E2            [24] 3594 	movx	a,@r0
   0E48 33            [12] 3595 	rlc	a
   0E49 F2            [24] 3596 	movx	@r0,a
   0E4A 08            [12] 3597 	inc	r0
   0E4B E2            [24] 3598 	movx	a,@r0
   0E4C 33            [12] 3599 	rlc	a
   0E4D F2            [24] 3600 	movx	@r0,a
   0E4E 18            [12] 3601 	dec	r0
   0E4F 18            [12] 3602 	dec	r0
   0E50 18            [12] 3603 	dec	r0
   0E51 E2            [24] 3604 	movx	a,@r0
   0E52 25 E0         [12] 3605 	add	a,acc
   0E54 F2            [24] 3606 	movx	@r0,a
   0E55 08            [12] 3607 	inc	r0
   0E56 E2            [24] 3608 	movx	a,@r0
   0E57 33            [12] 3609 	rlc	a
   0E58 F2            [24] 3610 	movx	@r0,a
   0E59 08            [12] 3611 	inc	r0
   0E5A E2            [24] 3612 	movx	a,@r0
   0E5B 33            [12] 3613 	rlc	a
   0E5C F2            [24] 3614 	movx	@r0,a
   0E5D 08            [12] 3615 	inc	r0
   0E5E E2            [24] 3616 	movx	a,@r0
   0E5F 33            [12] 3617 	rlc	a
   0E60 F2            [24] 3618 	movx	@r0,a
   0E61                    3619 00103$:
                           3620 ;	radio/radio.c:1101: band |= EZRADIOPRO_SBSEL;
   0E61 90r01r0C      [24] 3621 	mov	dptr,#_set_frequency_registers_band_1_257
   0E64 E0            [24] 3622 	movx	a,@dptr
   0E65 44 40         [12] 3623 	orl	a,#0x40
   0E67 F0            [24] 3624 	movx	@dptr,a
                           3625 ;	radio/radio.c:1102: carrier = (uint16_t)frequency;
   0E68 78r29         [12] 3626 	mov	r0,#_set_frequency_registers_frequency_1_256
   0E6A E2            [24] 3627 	movx	a,@r0
   0E6B FC            [12] 3628 	mov	r4,a
   0E6C 08            [12] 3629 	inc	r0
   0E6D E2            [24] 3630 	movx	a,@r0
   0E6E FD            [12] 3631 	mov	r5,a
                           3632 ;	radio/radio.c:1104: register_write(EZRADIOPRO_FREQUENCY_BAND_SELECT, band);
   0E6F C0 05         [24] 3633 	push	ar5
   0E71 C0 04         [24] 3634 	push	ar4
   0E73 90r01r0C      [24] 3635 	mov	dptr,#_set_frequency_registers_band_1_257
   0E76 E0            [24] 3636 	movx	a,@dptr
   0E77 C0 E0         [24] 3637 	push	acc
   0E79 75 82 75      [24] 3638 	mov	dpl,#0x75
   0E7C 12r0Br44      [24] 3639 	lcall	_register_write
   0E7F 15 81         [12] 3640 	dec	sp
   0E81 D0 04         [24] 3641 	pop	ar4
   0E83 D0 05         [24] 3642 	pop	ar5
                           3643 ;	radio/radio.c:1105: register_write(EZRADIOPRO_NOMINAL_CARRIER_FREQUENCY_1, carrier >> 8);
   0E85 8D 07         [24] 3644 	mov	ar7,r5
   0E87 C0 05         [24] 3645 	push	ar5
   0E89 C0 04         [24] 3646 	push	ar4
   0E8B C0 07         [24] 3647 	push	ar7
   0E8D 75 82 76      [24] 3648 	mov	dpl,#0x76
   0E90 12r0Br44      [24] 3649 	lcall	_register_write
   0E93 15 81         [12] 3650 	dec	sp
   0E95 D0 04         [24] 3651 	pop	ar4
   0E97 D0 05         [24] 3652 	pop	ar5
                           3653 ;	radio/radio.c:1106: register_write(EZRADIOPRO_NOMINAL_CARRIER_FREQUENCY_0, carrier & 0xFF);
   0E99 C0 04         [24] 3654 	push	ar4
   0E9B 75 82 77      [24] 3655 	mov	dpl,#0x77
   0E9E 12r0Br44      [24] 3656 	lcall	_register_write
   0EA1 15 81         [12] 3657 	dec	sp
   0EA3 22            [24] 3658 	ret
                           3659 ;------------------------------------------------------------
                           3660 ;Allocation info for local variables in function 'radio_temperature'
                           3661 ;------------------------------------------------------------
                           3662 ;temp_local                Allocated to registers r6 r7 
                           3663 ;------------------------------------------------------------
                           3664 ;	radio/radio.c:1115: radio_temperature(void)
                           3665 ;	-----------------------------------------
                           3666 ;	 function radio_temperature
                           3667 ;	-----------------------------------------
   0EA4                    3668 _radio_temperature:
                           3669 ;	radio/radio.c:1119: AD0BUSY = 1;		// Start ADC conversion
   0EA4 D2 EC         [12] 3670 	setb	_AD0BUSY
                           3671 ;	radio/radio.c:1120: while (AD0BUSY) ;  	// Wait for completion of conversion
   0EA6                    3672 00101$:
   0EA6 20 EC FD      [24] 3673 	jb	_AD0BUSY,00101$
                           3674 ;	radio/radio.c:1122: temp_local = (ADC0H << 8) | ADC0L;
   0EA9 AF BE         [24] 3675 	mov	r7,_ADC0H
   0EAB 7E 00         [12] 3676 	mov	r6,#0x00
   0EAD AC BD         [24] 3677 	mov	r4,_ADC0L
   0EAF 7D 00         [12] 3678 	mov	r5,#0x00
   0EB1 EC            [12] 3679 	mov	a,r4
   0EB2 42 06         [12] 3680 	orl	ar6,a
   0EB4 ED            [12] 3681 	mov	a,r5
   0EB5 42 07         [12] 3682 	orl	ar7,a
                           3683 ;	radio/radio.c:1123: temp_local *= 1.64060;  // convert reading into mV ( (val/1024) * 1680 )  vref=1680mV
   0EB7 8E 82         [24] 3684 	mov	dpl,r6
   0EB9 8F 83         [24] 3685 	mov	dph,r7
   0EBB 12r00r00      [24] 3686 	lcall	___sint2fs
   0EBE AA 82         [24] 3687 	mov	r2,dpl
   0EC0 AB 83         [24] 3688 	mov	r3,dph
   0EC2 AC F0         [24] 3689 	mov	r4,b
   0EC4 FD            [12] 3690 	mov	r5,a
   0EC5 C0 02         [24] 3691 	push	ar2
   0EC7 C0 03         [24] 3692 	push	ar3
   0EC9 C0 04         [24] 3693 	push	ar4
   0ECB C0 05         [24] 3694 	push	ar5
   0ECD 90 FF 2E      [24] 3695 	mov	dptr,#0xFF2E
   0ED0 75 F0 D1      [24] 3696 	mov	b,#0xD1
   0ED3 74 3F         [12] 3697 	mov	a,#0x3F
   0ED5 12r00r00      [24] 3698 	lcall	___fsmul
   0ED8 AA 82         [24] 3699 	mov	r2,dpl
   0EDA AB 83         [24] 3700 	mov	r3,dph
   0EDC AC F0         [24] 3701 	mov	r4,b
   0EDE FD            [12] 3702 	mov	r5,a
   0EDF E5 81         [12] 3703 	mov	a,sp
   0EE1 24 FC         [12] 3704 	add	a,#0xfc
   0EE3 F5 81         [12] 3705 	mov	sp,a
   0EE5 8A 82         [24] 3706 	mov	dpl,r2
   0EE7 8B 83         [24] 3707 	mov	dph,r3
   0EE9 8C F0         [24] 3708 	mov	b,r4
   0EEB ED            [12] 3709 	mov	a,r5
   0EEC 12r00r00      [24] 3710 	lcall	___fs2sint
   0EEF AE 82         [24] 3711 	mov	r6,dpl
   0EF1 AF 83         [24] 3712 	mov	r7,dph
                           3713 ;	radio/radio.c:1124: temp_local = 25.0 + (temp_local - 1025) / 3.4; // convert mV reading into degC.
   0EF3 EE            [12] 3714 	mov	a,r6
   0EF4 24 FF         [12] 3715 	add	a,#0xFF
   0EF6 FC            [12] 3716 	mov	r4,a
   0EF7 EF            [12] 3717 	mov	a,r7
   0EF8 34 FB         [12] 3718 	addc	a,#0xFB
   0EFA FD            [12] 3719 	mov	r5,a
   0EFB 8C 82         [24] 3720 	mov	dpl,r4
   0EFD 8D 83         [24] 3721 	mov	dph,r5
   0EFF 12r00r00      [24] 3722 	lcall	___sint2fs
   0F02 AA 82         [24] 3723 	mov	r2,dpl
   0F04 AB 83         [24] 3724 	mov	r3,dph
   0F06 AC F0         [24] 3725 	mov	r4,b
   0F08 FD            [12] 3726 	mov	r5,a
   0F09 74 9A         [12] 3727 	mov	a,#0x9A
   0F0B C0 E0         [24] 3728 	push	acc
   0F0D 74 99         [12] 3729 	mov	a,#0x99
   0F0F C0 E0         [24] 3730 	push	acc
   0F11 74 59         [12] 3731 	mov	a,#0x59
   0F13 C0 E0         [24] 3732 	push	acc
   0F15 74 40         [12] 3733 	mov	a,#0x40
   0F17 C0 E0         [24] 3734 	push	acc
   0F19 8A 82         [24] 3735 	mov	dpl,r2
   0F1B 8B 83         [24] 3736 	mov	dph,r3
   0F1D 8C F0         [24] 3737 	mov	b,r4
   0F1F ED            [12] 3738 	mov	a,r5
   0F20 12r00r00      [24] 3739 	lcall	___fsdiv
   0F23 AA 82         [24] 3740 	mov	r2,dpl
   0F25 AB 83         [24] 3741 	mov	r3,dph
   0F27 AC F0         [24] 3742 	mov	r4,b
   0F29 FD            [12] 3743 	mov	r5,a
   0F2A E5 81         [12] 3744 	mov	a,sp
   0F2C 24 FC         [12] 3745 	add	a,#0xfc
   0F2E F5 81         [12] 3746 	mov	sp,a
   0F30 E4            [12] 3747 	clr	a
   0F31 C0 E0         [24] 3748 	push	acc
   0F33 C0 E0         [24] 3749 	push	acc
   0F35 74 C8         [12] 3750 	mov	a,#0xC8
   0F37 C0 E0         [24] 3751 	push	acc
   0F39 74 41         [12] 3752 	mov	a,#0x41
   0F3B C0 E0         [24] 3753 	push	acc
   0F3D 8A 82         [24] 3754 	mov	dpl,r2
   0F3F 8B 83         [24] 3755 	mov	dph,r3
   0F41 8C F0         [24] 3756 	mov	b,r4
   0F43 ED            [12] 3757 	mov	a,r5
   0F44 12r00r00      [24] 3758 	lcall	___fsadd
   0F47 AA 82         [24] 3759 	mov	r2,dpl
   0F49 AB 83         [24] 3760 	mov	r3,dph
   0F4B AC F0         [24] 3761 	mov	r4,b
   0F4D FD            [12] 3762 	mov	r5,a
   0F4E E5 81         [12] 3763 	mov	a,sp
   0F50 24 FC         [12] 3764 	add	a,#0xfc
   0F52 F5 81         [12] 3765 	mov	sp,a
   0F54 8A 82         [24] 3766 	mov	dpl,r2
   0F56 8B 83         [24] 3767 	mov	dph,r3
   0F58 8C F0         [24] 3768 	mov	b,r4
   0F5A ED            [12] 3769 	mov	a,r5
                           3770 ;	radio/radio.c:1126: return temp_local;
   0F5B 02r00r00      [24] 3771 	ljmp	___fs2sint
                           3772 ;------------------------------------------------------------
                           3773 ;Allocation info for local variables in function 'radio_set_diversity'
                           3774 ;------------------------------------------------------------
                           3775 ;	radio/radio.c:1132: radio_set_diversity(bool enable)
                           3776 ;	-----------------------------------------
                           3777 ;	 function radio_set_diversity
                           3778 ;	-----------------------------------------
   0F5E                    3779 _radio_set_diversity:
                           3780 ;	radio/radio.c:1134: if (enable)
   0F5E 30*08 25      [24] 3781 	jnb	_radio_set_diversity_PARM_1,00102$
                           3782 ;	radio/radio.c:1136: register_write(EZRADIOPRO_GPIO2_CONFIGURATION, 0x18);
   0F61 74 18         [12] 3783 	mov	a,#0x18
   0F63 C0 E0         [24] 3784 	push	acc
   0F65 75 82 0D      [24] 3785 	mov	dpl,#0x0D
   0F68 12r0Br44      [24] 3786 	lcall	_register_write
   0F6B 15 81         [12] 3787 	dec	sp
                           3788 ;	radio/radio.c:1138: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, (register_read(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2) & ~EZRADIOPRO_ANTDIV_MASK) | 0x80);
   0F6D 75 82 08      [24] 3789 	mov	dpl,#0x08
   0F70 12r0Br74      [24] 3790 	lcall	_register_read
   0F73 AF 82         [24] 3791 	mov	r7,dpl
   0F75 74 1F         [12] 3792 	mov	a,#0x1F
   0F77 5F            [12] 3793 	anl	a,r7
   0F78 44 80         [12] 3794 	orl	a,#0x80
   0F7A FF            [12] 3795 	mov	r7,a
   0F7B C0 07         [24] 3796 	push	ar7
   0F7D 75 82 08      [24] 3797 	mov	dpl,#0x08
   0F80 12r0Br44      [24] 3798 	lcall	_register_write
   0F83 15 81         [12] 3799 	dec	sp
   0F85 22            [24] 3800 	ret
   0F86                    3801 00102$:
                           3802 ;	radio/radio.c:1143: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, (register_read(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2) & ~EZRADIOPRO_ANTDIV_MASK));
   0F86 75 82 08      [24] 3803 	mov	dpl,#0x08
   0F89 12r0Br74      [24] 3804 	lcall	_register_read
   0F8C AF 82         [24] 3805 	mov	r7,dpl
   0F8E 53 07 1F      [24] 3806 	anl	ar7,#0x1F
   0F91 C0 07         [24] 3807 	push	ar7
   0F93 75 82 08      [24] 3808 	mov	dpl,#0x08
   0F96 12r0Br44      [24] 3809 	lcall	_register_write
   0F99 15 81         [12] 3810 	dec	sp
                           3811 ;	radio/radio.c:1145: register_write(EZRADIOPRO_GPIO2_CONFIGURATION, 0x0A);	// GPIO2 (ANT1) output set high fixed
   0F9B 74 0A         [12] 3812 	mov	a,#0x0A
   0F9D C0 E0         [24] 3813 	push	acc
   0F9F 75 82 0D      [24] 3814 	mov	dpl,#0x0D
   0FA2 12r0Br44      [24] 3815 	lcall	_register_write
   0FA5 15 81         [12] 3816 	dec	sp
                           3817 ;	radio/radio.c:1146: register_write(EZRADIOPRO_IO_PORT_CONFIGURATION, 0x04);	// GPIO2 output set high (fixed on ant 1)
   0FA7 74 04         [12] 3818 	mov	a,#0x04
   0FA9 C0 E0         [24] 3819 	push	acc
   0FAB 75 82 0E      [24] 3820 	mov	dpl,#0x0E
   0FAE 12r0Br44      [24] 3821 	lcall	_register_write
   0FB1 15 81         [12] 3822 	dec	sp
   0FB3 22            [24] 3823 	ret
                           3824 ;------------------------------------------------------------
                           3825 ;Allocation info for local variables in function 'Receiver_ISR'
                           3826 ;------------------------------------------------------------
                           3827 ;status                    Allocated to registers r6 
                           3828 ;status2                   Allocated to registers r7 
                           3829 ;len                       Allocated to registers r7 
                           3830 ;------------------------------------------------------------
                           3831 ;	radio/radio.c:1158: INTERRUPT(Receiver_ISR, INTERRUPT_INT0)
                           3832 ;	-----------------------------------------
                           3833 ;	 function Receiver_ISR
                           3834 ;	-----------------------------------------
   0FB4                    3835 _Receiver_ISR:
   0FB4 C0*00         [24] 3836 	push	bits
   0FB6 C0 E0         [24] 3837 	push	acc
   0FB8 C0 F0         [24] 3838 	push	b
   0FBA C0 82         [24] 3839 	push	dpl
   0FBC C0 83         [24] 3840 	push	dph
   0FBE C0 07         [24] 3841 	push	(0+7)
   0FC0 C0 06         [24] 3842 	push	(0+6)
   0FC2 C0 05         [24] 3843 	push	(0+5)
   0FC4 C0 04         [24] 3844 	push	(0+4)
   0FC6 C0 03         [24] 3845 	push	(0+3)
   0FC8 C0 02         [24] 3846 	push	(0+2)
   0FCA C0 01         [24] 3847 	push	(0+1)
   0FCC C0 00         [24] 3848 	push	(0+0)
   0FCE C0 D0         [24] 3849 	push	psw
   0FD0 75 D0 00      [24] 3850 	mov	psw,#0x00
                           3851 ;	radio/radio.c:1162: status2 = register_read(EZRADIOPRO_INTERRUPT_STATUS_2);
   0FD3 75 82 04      [24] 3852 	mov	dpl,#0x04
   0FD6 12r0Br74      [24] 3853 	lcall	_register_read
   0FD9 AF 82         [24] 3854 	mov	r7,dpl
                           3855 ;	radio/radio.c:1163: status  = register_read(EZRADIOPRO_INTERRUPT_STATUS_1);
   0FDB 75 82 03      [24] 3856 	mov	dpl,#0x03
   0FDE C0 07         [24] 3857 	push	ar7
   0FE0 12r0Br74      [24] 3858 	lcall	_register_read
   0FE3 AE 82         [24] 3859 	mov	r6,dpl
   0FE5 D0 07         [24] 3860 	pop	ar7
                           3861 ;	radio/radio.c:1165: if (status & EZRADIOPRO_IRXFFAFULL) {
   0FE7 EE            [12] 3862 	mov	a,r6
   0FE8 30 E4 49      [24] 3863 	jnb	acc.4,00104$
                           3864 ;	radio/radio.c:1166: if (RX_FIFO_THRESHOLD_HIGH + (uint16_t)partial_packet_length > MAX_PACKET_LENGTH) {
   0FEB 78r01         [12] 3865 	mov	r0,#_partial_packet_length
   0FED E2            [24] 3866 	movx	a,@r0
   0FEE FC            [12] 3867 	mov	r4,a
   0FEF 7D 00         [12] 3868 	mov	r5,#0x00
   0FF1 74 32         [12] 3869 	mov	a,#0x32
   0FF3 2C            [12] 3870 	add	a,r4
   0FF4 FC            [12] 3871 	mov	r4,a
   0FF5 E4            [12] 3872 	clr	a
   0FF6 3D            [12] 3873 	addc	a,r5
   0FF7 FD            [12] 3874 	mov	r5,a
   0FF8 C3            [12] 3875 	clr	c
   0FF9 74 FC         [12] 3876 	mov	a,#0xFC
   0FFB 9C            [12] 3877 	subb	a,r4
   0FFC E4            [12] 3878 	clr	a
   0FFD 9D            [12] 3879 	subb	a,r5
   0FFE 50 03         [24] 3880 	jnc	00150$
   1000 02r10rBF      [24] 3881 	ljmp	00117$
   1003                    3882 00150$:
                           3883 ;	radio/radio.c:1170: read_receive_fifo(RX_FIFO_THRESHOLD_HIGH, &radio_buffer[partial_packet_length]);
   1003 78r01         [12] 3884 	mov	r0,#_partial_packet_length
   1005 E2            [24] 3885 	movx	a,@r0
   1006 24r00         [12] 3886 	add	a,#_radio_buffer
   1008 FC            [12] 3887 	mov	r4,a
   1009 E4            [12] 3888 	clr	a
   100A 34s00         [12] 3889 	addc	a,#(_radio_buffer >> 8)
   100C FD            [12] 3890 	mov	r5,a
   100D C0 07         [24] 3891 	push	ar7
   100F C0 06         [24] 3892 	push	ar6
   1011 C0 04         [24] 3893 	push	ar4
   1013 C0 05         [24] 3894 	push	ar5
   1015 75 82 32      [24] 3895 	mov	dpl,#0x32
   1018 12r0BrA2      [24] 3896 	lcall	_read_receive_fifo
   101B 15 81         [12] 3897 	dec	sp
   101D 15 81         [12] 3898 	dec	sp
                           3899 ;	radio/radio.c:1171: partial_packet_length += RX_FIFO_THRESHOLD_HIGH;
   101F 78r01         [12] 3900 	mov	r0,#_partial_packet_length
   1021 E2            [24] 3901 	movx	a,@r0
   1022 24 32         [12] 3902 	add	a,#0x32
   1024 F2            [24] 3903 	movx	@r0,a
                           3904 ;	radio/radio.c:1172: last_rssi = register_read(EZRADIOPRO_RECEIVED_SIGNAL_STRENGTH_INDICATOR);
   1025 75 82 26      [24] 3905 	mov	dpl,#0x26
   1028 12r0Br74      [24] 3906 	lcall	_register_read
   102B E5 82         [12] 3907 	mov	a,dpl
   102D D0 06         [24] 3908 	pop	ar6
   102F D0 07         [24] 3909 	pop	ar7
   1031 78r02         [12] 3910 	mov	r0,#_last_rssi
   1033 F2            [24] 3911 	movx	@r0,a
   1034                    3912 00104$:
                           3913 ;	radio/radio.c:1175: if (status2 & EZRADIOPRO_IPREAVAL) {
   1034 EF            [12] 3914 	mov	a,r7
   1035 30 E6 11      [24] 3915 	jnb	acc.6,00106$
                           3916 ;	radio/radio.c:1177: preamble_detected = true;
   1038 D2*01         [12] 3917 	setb	_preamble_detected
                           3918 ;	radio/radio.c:1180: last_rssi = register_read(EZRADIOPRO_RECEIVED_SIGNAL_STRENGTH_INDICATOR);
   103A 75 82 26      [24] 3919 	mov	dpl,#0x26
   103D C0 06         [24] 3920 	push	ar6
   103F 12r0Br74      [24] 3921 	lcall	_register_read
   1042 E5 82         [12] 3922 	mov	a,dpl
   1044 D0 06         [24] 3923 	pop	ar6
   1046 78r02         [12] 3924 	mov	r0,#_last_rssi
   1048 F2            [24] 3925 	movx	@r0,a
   1049                    3926 00106$:
                           3927 ;	radio/radio.c:1183: if (feature_golay == false && (status & EZRADIOPRO_ICRCERROR)) {
   1049 20*00 04      [24] 3928 	jb	_feature_golay,00108$
   104C EE            [12] 3929 	mov	a,r6
   104D 20 E0 6F      [24] 3930 	jb	acc.0,00117$
                           3931 ;	radio/radio.c:1184: goto rxfail;
   1050                    3932 00108$:
                           3933 ;	radio/radio.c:1187: if (status & EZRADIOPRO_IPKVALID) {
   1050 EE            [12] 3934 	mov	a,r6
   1051 30 E1 69      [24] 3935 	jnb	acc.1,00116$
                           3936 ;	radio/radio.c:1188: __data uint8_t len = register_read(EZRADIOPRO_RECEIVED_PACKET_LENGTH);
   1054 75 82 4B      [24] 3937 	mov	dpl,#0x4B
   1057 12r0Br74      [24] 3938 	lcall	_register_read
                           3939 ;	radio/radio.c:1189: if (len > MAX_PACKET_LENGTH || partial_packet_length > len) {
   105A E5 82         [12] 3940 	mov	a,dpl
   105C FF            [12] 3941 	mov	r7,a
   105D 24 03         [12] 3942 	add	a,#0xff - 0xFC
   105F 40 5E         [24] 3943 	jc	00117$
   1061 78r01         [12] 3944 	mov	r0,#_partial_packet_length
   1063 C3            [12] 3945 	clr	c
   1064 E2            [24] 3946 	movx	a,@r0
   1065 F5 F0         [12] 3947 	mov	b,a
   1067 EF            [12] 3948 	mov	a,r7
   1068 95 F0         [12] 3949 	subb	a,b
   106A 40 53         [24] 3950 	jc	00117$
                           3951 ;	radio/radio.c:1193: if (partial_packet_length < len) {
   106C 78r01         [12] 3952 	mov	r0,#_partial_packet_length
   106E C3            [12] 3953 	clr	c
   106F E2            [24] 3954 	movx	a,@r0
   1070 9F            [12] 3955 	subb	a,r7
   1071 50 22         [24] 3956 	jnc	00114$
                           3957 ;	radio/radio.c:1194: read_receive_fifo(len-partial_packet_length, &radio_buffer[partial_packet_length]);
   1073 78r01         [12] 3958 	mov	r0,#_partial_packet_length
   1075 E2            [24] 3959 	movx	a,@r0
   1076 24r00         [12] 3960 	add	a,#_radio_buffer
   1078 FD            [12] 3961 	mov	r5,a
   1079 E4            [12] 3962 	clr	a
   107A 34s00         [12] 3963 	addc	a,#(_radio_buffer >> 8)
   107C FE            [12] 3964 	mov	r6,a
   107D 78r01         [12] 3965 	mov	r0,#_partial_packet_length
   107F D3            [12] 3966 	setb	c
   1080 E2            [24] 3967 	movx	a,@r0
   1081 9F            [12] 3968 	subb	a,r7
   1082 F4            [12] 3969 	cpl	a
   1083 FC            [12] 3970 	mov	r4,a
   1084 C0 07         [24] 3971 	push	ar7
   1086 C0 05         [24] 3972 	push	ar5
   1088 C0 06         [24] 3973 	push	ar6
   108A 8C 82         [24] 3974 	mov	dpl,r4
   108C 12r0BrA2      [24] 3975 	lcall	_read_receive_fifo
   108F 15 81         [12] 3976 	dec	sp
   1091 15 81         [12] 3977 	dec	sp
   1093 D0 07         [24] 3978 	pop	ar7
   1095                    3979 00114$:
                           3980 ;	radio/radio.c:1196: receive_packet_length = len;
   1095 78r00         [12] 3981 	mov	r0,#_receive_packet_length
   1097 EF            [12] 3982 	mov	a,r7
   1098 F2            [24] 3983 	movx	@r0,a
                           3984 ;	radio/radio.c:1199: packet_received = true;
   1099 D2*00         [12] 3985 	setb	_packet_received
                           3986 ;	radio/radio.c:1202: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, 0);
   109B E4            [12] 3987 	clr	a
   109C C0 E0         [24] 3988 	push	acc
   109E 75 82 05      [24] 3989 	mov	dpl,#0x05
   10A1 12r0Br44      [24] 3990 	lcall	_register_write
   10A4 15 81         [12] 3991 	dec	sp
                           3992 ;	radio/radio.c:1203: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, 0);
   10A6 E4            [12] 3993 	clr	a
   10A7 C0 E0         [24] 3994 	push	acc
   10A9 75 82 06      [24] 3995 	mov	dpl,#0x06
   10AC 12r0Br44      [24] 3996 	lcall	_register_write
   10AF 15 81         [12] 3997 	dec	sp
                           3998 ;	radio/radio.c:1206: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_1, EZRADIOPRO_PLLON);
   10B1 74 02         [12] 3999 	mov	a,#0x02
   10B3 C0 E0         [24] 4000 	push	acc
   10B5 75 82 07      [24] 4001 	mov	dpl,#0x07
   10B8 12r0Br44      [24] 4002 	lcall	_register_write
   10BB 15 81         [12] 4003 	dec	sp
   10BD                    4004 00116$:
                           4005 ;	radio/radio.c:1208: return;
                           4006 ;	radio/radio.c:1210: rxfail:
   10BD 80 1E         [24] 4007 	sjmp	00120$
   10BF                    4008 00117$:
                           4009 ;	radio/radio.c:1211: if (errors.rx_errors != 0xFFFF) {
   10BF 78r00         [12] 4010 	mov	r0,#_errors
   10C1 E2            [24] 4011 	movx	a,@r0
   10C2 FE            [12] 4012 	mov	r6,a
   10C3 08            [12] 4013 	inc	r0
   10C4 E2            [24] 4014 	movx	a,@r0
   10C5 FF            [12] 4015 	mov	r7,a
   10C6 BE FF 05      [24] 4016 	cjne	r6,#0xFF,00158$
   10C9 BF FF 02      [24] 4017 	cjne	r7,#0xFF,00158$
   10CC 80 0C         [24] 4018 	sjmp	00119$
   10CE                    4019 00158$:
                           4020 ;	radio/radio.c:1212: errors.rx_errors++;
   10CE 0E            [12] 4021 	inc	r6
   10CF BE 00 01      [24] 4022 	cjne	r6,#0x00,00159$
   10D2 0F            [12] 4023 	inc	r7
   10D3                    4024 00159$:
   10D3 78r00         [12] 4025 	mov	r0,#_errors
   10D5 EE            [12] 4026 	mov	a,r6
   10D6 F2            [24] 4027 	movx	@r0,a
   10D7 08            [12] 4028 	inc	r0
   10D8 EF            [12] 4029 	mov	a,r7
   10D9 F2            [24] 4030 	movx	@r0,a
   10DA                    4031 00119$:
                           4032 ;	radio/radio.c:1214: radio_receiver_on();
   10DA 12r06r70      [24] 4033 	lcall	_radio_receiver_on
   10DD                    4034 00120$:
   10DD D0 D0         [24] 4035 	pop	psw
   10DF D0 00         [24] 4036 	pop	(0+0)
   10E1 D0 01         [24] 4037 	pop	(0+1)
   10E3 D0 02         [24] 4038 	pop	(0+2)
   10E5 D0 03         [24] 4039 	pop	(0+3)
   10E7 D0 04         [24] 4040 	pop	(0+4)
   10E9 D0 05         [24] 4041 	pop	(0+5)
   10EB D0 06         [24] 4042 	pop	(0+6)
   10ED D0 07         [24] 4043 	pop	(0+7)
   10EF D0 83         [24] 4044 	pop	dph
   10F1 D0 82         [24] 4045 	pop	dpl
   10F3 D0 F0         [24] 4046 	pop	b
   10F5 D0 E0         [24] 4047 	pop	acc
   10F7 D0*00         [24] 4048 	pop	bits
   10F9 32            [24] 4049 	reti
                           4050 	.area CSEG    (CODE)
                           4051 	.area CONST   (CODE)
   0000                    4052 __str_0:
   0000 6F 76 65 72 73 69  4053 	.ascii "oversized packet"
        7A 65 64 20 70 61
        63 6B 65 74
   0010 00                 4054 	.db 0x00
   0011                    4055 __str_1:
   0011 6F 76 65 72 73 69  4056 	.ascii "oversized golay packet"
        7A 65 64 20 67 6F
        6C 61 79 20 70 61
        63 6B 65 74
   0027 00                 4057 	.db 0x00
   0028                    4058 _reg_index:
   0028 1C                 4059 	.db #0x1C	; 28
   0029 1F                 4060 	.db #0x1F	; 31
   002A 20                 4061 	.db #0x20	; 32
   002B 21                 4062 	.db #0x21	; 33
   002C 22                 4063 	.db #0x22	; 34
   002D 23                 4064 	.db #0x23	; 35
   002E 24                 4065 	.db #0x24	; 36
   002F 25                 4066 	.db #0x25	; 37
   0030 2A                 4067 	.db #0x2A	; 42
   0031 6E                 4068 	.db #0x6E	; 110	'n'
   0032 6F                 4069 	.db #0x6F	; 111	'o'
   0033 72                 4070 	.db #0x72	; 114	'r'
   0034                    4071 _air_data_rates:
   0034 02                 4072 	.db #0x02	; 2
   0035 04                 4073 	.db #0x04	; 4
   0036 08                 4074 	.db #0x08	; 8
   0037 10                 4075 	.db #0x10	; 16
   0038 13                 4076 	.db #0x13	; 19
   0039 18                 4077 	.db #0x18	; 24
   003A 20                 4078 	.db #0x20	; 32
   003B 30                 4079 	.db #0x30	; 48	'0'
   003C 40                 4080 	.db #0x40	; 64
   003D 60                 4081 	.db #0x60	; 96
   003E 80                 4082 	.db #0x80	; 128
   003F C0                 4083 	.db #0xC0	; 192
   0040 FA                 4084 	.db #0xFA	; 250
   0041                    4085 _reg_table_433:
   0041 27                 4086 	.db #0x27	; 39
   0042 27                 4087 	.db #0x27	; 39
   0043 27                 4088 	.db #0x27	; 39
   0044 2E                 4089 	.db #0x2E	; 46
   0045 16                 4090 	.db #0x16	; 22
   0046 01                 4091 	.db #0x01	; 1
   0047 05                 4092 	.db #0x05	; 5
   0048 0B                 4093 	.db #0x0B	; 11
   0049 9A                 4094 	.db #0x9A	; 154
   004A 88                 4095 	.db #0x88	; 136
   004B 8A                 4096 	.db #0x8A	; 138
   004C 8C                 4097 	.db #0x8C	; 140
   004D 8D                 4098 	.db #0x8D	; 141
   004E 03                 4099 	.db #0x03	; 3
   004F 03                 4100 	.db #0x03	; 3
   0050 03                 4101 	.db #0x03	; 3
   0051 03                 4102 	.db #0x03	; 3
   0052 03                 4103 	.db #0x03	; 3
   0053 03                 4104 	.db #0x03	; 3
   0054 03                 4105 	.db #0x03	; 3
   0055 03                 4106 	.db #0x03	; 3
   0056 03                 4107 	.db #0x03	; 3
   0057 03                 4108 	.db #0x03	; 3
   0058 03                 4109 	.db #0x03	; 3
   0059 03                 4110 	.db #0x03	; 3
   005A 03                 4111 	.db #0x03	; 3
   005B F4                 4112 	.db #0xF4	; 244
   005C FA                 4113 	.db #0xFA	; 250
   005D 7D                 4114 	.db #0x7D	; 125
   005E 3F                 4115 	.db #0x3F	; 63
   005F 69                 4116 	.db #0x69	; 105	'i'
   0060 A7                 4117 	.db #0xA7	; 167
   0061 7D                 4118 	.db #0x7D	; 125
   0062 53                 4119 	.db #0x53	; 83	'S'
   0063 5E                 4120 	.db #0x5E	; 94
   0064 7D                 4121 	.db #0x7D	; 125
   0065 5E                 4122 	.db #0x5E	; 94
   0066 3F                 4123 	.db #0x3F	; 63
   0067 30                 4124 	.db #0x30	; 48	'0'
   0068 20                 4125 	.db #0x20	; 32
   0069 00                 4126 	.db #0x00	; 0
   006A 01                 4127 	.db #0x01	; 1
   006B 02                 4128 	.db #0x02	; 2
   006C 01                 4129 	.db #0x01	; 1
   006D 00                 4130 	.db #0x00	; 0
   006E 01                 4131 	.db #0x01	; 1
   006F 01                 4132 	.db #0x01	; 1
   0070 01                 4133 	.db #0x01	; 1
   0071 01                 4134 	.db #0x01	; 1
   0072 01                 4135 	.db #0x01	; 1
   0073 02                 4136 	.db #0x02	; 2
   0074 02                 4137 	.db #0x02	; 2
   0075 41                 4138 	.db #0x41	; 65	'A'
   0076 83                 4139 	.db #0x83	; 131
   0077 06                 4140 	.db #0x06	; 6
   0078 0C                 4141 	.db #0x0C	; 12
   0079 37                 4142 	.db #0x37	; 55	'7'
   007A C4                 4143 	.db #0xC4	; 196
   007B 06                 4144 	.db #0x06	; 6
   007C 89                 4145 	.db #0x89	; 137
   007D 5D                 4146 	.db #0x5D	; 93
   007E 06                 4147 	.db #0x06	; 6
   007F 5D                 4148 	.db #0x5D	; 93
   0080 0C                 4149 	.db #0x0C	; 12
   0081 AA                 4150 	.db #0xAA	; 170
   0082 89                 4151 	.db #0x89	; 137
   0083 12                 4152 	.db #0x12	; 18
   0084 25                 4153 	.db #0x25	; 37
   0085 4A                 4154 	.db #0x4A	; 74	'J'
   0086 4C                 4155 	.db #0x4C	; 76	'L'
   0087 9C                 4156 	.db #0x9C	; 156
   0088 25                 4157 	.db #0x25	; 37
   0089 37                 4158 	.db #0x37	; 55	'7'
   008A 86                 4159 	.db #0x86	; 134
   008B 25                 4160 	.db #0x25	; 37
   008C 86                 4161 	.db #0x86	; 134
   008D 4A                 4162 	.db #0x4A	; 74	'J'
   008E AB                 4163 	.db #0xAB	; 171
   008F 00                 4164 	.db #0x00	; 0
   0090 01                 4165 	.db #0x01	; 1
   0091 02                 4166 	.db #0x02	; 2
   0092 04                 4167 	.db #0x04	; 4
   0093 02                 4168 	.db #0x02	; 2
   0094 01                 4169 	.db #0x01	; 1
   0095 02                 4170 	.db #0x02	; 2
   0096 03                 4171 	.db #0x03	; 3
   0097 02                 4172 	.db #0x02	; 2
   0098 02                 4173 	.db #0x02	; 2
   0099 02                 4174 	.db #0x02	; 2
   009A 04                 4175 	.db #0x04	; 4
   009B 07                 4176 	.db #0x07	; 7
   009C 85                 4177 	.db #0x85	; 133
   009D 08                 4178 	.db #0x08	; 8
   009E 0E                 4179 	.db #0x0E	; 14
   009F 12                 4180 	.db #0x12	; 18
   00A0 72                 4181 	.db #0x72	; 114	'r'
   00A1 8A                 4182 	.db #0x8A	; 138
   00A2 0E                 4183 	.db #0x0E	; 14
   00A3 18                 4184 	.db #0x18	; 24
   00A4 BB                 4185 	.db #0xBB	; 187
   00A5 0E                 4186 	.db #0x0E	; 14
   00A6 BB                 4187 	.db #0xBB	; 187
   00A7 EA                 4188 	.db #0xEA	; 234
   00A8 FF                 4189 	.db #0xFF	; 255
   00A9 1D                 4190 	.db #0x1D	; 29
   00AA 1D                 4191 	.db #0x1D	; 29
   00AB 1D                 4192 	.db #0x1D	; 29
   00AC 1E                 4193 	.db #0x1E	; 30
   00AD 1E                 4194 	.db #0x1E	; 30
   00AE 1E                 4195 	.db #0x1E	; 30
   00AF 20                 4196 	.db #0x20	; 32
   00B0 30                 4197 	.db #0x30	; 48	'0'
   00B1 41                 4198 	.db #0x41	; 65	'A'
   00B2 50                 4199 	.db #0x50	; 80	'P'
   00B3 50                 4200 	.db #0x50	; 80	'P'
   00B4 50                 4201 	.db #0x50	; 80	'P'
   00B5 50                 4202 	.db #0x50	; 80	'P'
   00B6 10                 4203 	.db #0x10	; 16
   00B7 20                 4204 	.db #0x20	; 32
   00B8 41                 4205 	.db #0x41	; 65	'A'
   00B9 83                 4206 	.db #0x83	; 131
   00BA 9B                 4207 	.db #0x9B	; 155
   00BB C4                 4208 	.db #0xC4	; 196
   00BC 08                 4209 	.db #0x08	; 8
   00BD 0C                 4210 	.db #0x0C	; 12
   00BE 10                 4211 	.db #0x10	; 16
   00BF 18                 4212 	.db #0x18	; 24
   00C0 20                 4213 	.db #0x20	; 32
   00C1 31                 4214 	.db #0x31	; 49	'1'
   00C2 40                 4215 	.db #0x40	; 64
   00C3 62                 4216 	.db #0x62	; 98	'b'
   00C4 C5                 4217 	.db #0xC5	; 197
   00C5 89                 4218 	.db #0x89	; 137
   00C6 12                 4219 	.db #0x12	; 18
   00C7 A6                 4220 	.db #0xA6	; 166
   00C8 9C                 4221 	.db #0x9C	; 156
   00C9 31                 4222 	.db #0x31	; 49	'1'
   00CA 4A                 4223 	.db #0x4A	; 74	'J'
   00CB 62                 4224 	.db #0x62	; 98	'b'
   00CC 93                 4225 	.db #0x93	; 147
   00CD C5                 4226 	.db #0xC5	; 197
   00CE 27                 4227 	.db #0x27	; 39
   00CF 00                 4228 	.db #0x00	; 0
   00D0 03                 4229 	.db #0x03	; 3
   00D1 06                 4230 	.db #0x06	; 6
   00D2 0D                 4231 	.db #0x0D	; 13
   00D3 1A                 4232 	.db #0x1A	; 26
   00D4 1E                 4233 	.db #0x1E	; 30
   00D5 26                 4234 	.db #0x26	; 38
   00D6 33                 4235 	.db #0x33	; 51	'3'
   00D7 4D                 4236 	.db #0x4D	; 77	'M'
   00D8 66                 4237 	.db #0x66	; 102	'f'
   00D9 9A                 4238 	.db #0x9A	; 154
   00DA CD                 4239 	.db #0xCD	; 205
   00DB FE                 4240 	.db #0xFE	; 254
   00DC FE                 4241 	.db #0xFE	; 254
   00DD                    4242 _reg_table_470:
   00DD 2B                 4243 	.db #0x2B	; 43
   00DE 2B                 4244 	.db #0x2B	; 43
   00DF 2B                 4245 	.db #0x2B	; 43
   00E0 2E                 4246 	.db #0x2E	; 46
   00E1 16                 4247 	.db #0x16	; 22
   00E2 01                 4248 	.db #0x01	; 1
   00E3 05                 4249 	.db #0x05	; 5
   00E4 0B                 4250 	.db #0x0B	; 11
   00E5 9A                 4251 	.db #0x9A	; 154
   00E6 88                 4252 	.db #0x88	; 136
   00E7 8A                 4253 	.db #0x8A	; 138
   00E8 8C                 4254 	.db #0x8C	; 140
   00E9 8D                 4255 	.db #0x8D	; 141
   00EA 03                 4256 	.db #0x03	; 3
   00EB 03                 4257 	.db #0x03	; 3
   00EC 03                 4258 	.db #0x03	; 3
   00ED 03                 4259 	.db #0x03	; 3
   00EE 03                 4260 	.db #0x03	; 3
   00EF 03                 4261 	.db #0x03	; 3
   00F0 03                 4262 	.db #0x03	; 3
   00F1 03                 4263 	.db #0x03	; 3
   00F2 03                 4264 	.db #0x03	; 3
   00F3 03                 4265 	.db #0x03	; 3
   00F4 03                 4266 	.db #0x03	; 3
   00F5 03                 4267 	.db #0x03	; 3
   00F6 03                 4268 	.db #0x03	; 3
   00F7 F4                 4269 	.db #0xF4	; 244
   00F8 FA                 4270 	.db #0xFA	; 250
   00F9 7D                 4271 	.db #0x7D	; 125
   00FA 3F                 4272 	.db #0x3F	; 63
   00FB 69                 4273 	.db #0x69	; 105	'i'
   00FC A7                 4274 	.db #0xA7	; 167
   00FD 7D                 4275 	.db #0x7D	; 125
   00FE 53                 4276 	.db #0x53	; 83	'S'
   00FF 5E                 4277 	.db #0x5E	; 94
   0100 7D                 4278 	.db #0x7D	; 125
   0101 5E                 4279 	.db #0x5E	; 94
   0102 3F                 4280 	.db #0x3F	; 63
   0103 30                 4281 	.db #0x30	; 48	'0'
   0104 20                 4282 	.db #0x20	; 32
   0105 00                 4283 	.db #0x00	; 0
   0106 01                 4284 	.db #0x01	; 1
   0107 02                 4285 	.db #0x02	; 2
   0108 01                 4286 	.db #0x01	; 1
   0109 00                 4287 	.db #0x00	; 0
   010A 01                 4288 	.db #0x01	; 1
   010B 01                 4289 	.db #0x01	; 1
   010C 01                 4290 	.db #0x01	; 1
   010D 01                 4291 	.db #0x01	; 1
   010E 01                 4292 	.db #0x01	; 1
   010F 02                 4293 	.db #0x02	; 2
   0110 02                 4294 	.db #0x02	; 2
   0111 41                 4295 	.db #0x41	; 65	'A'
   0112 83                 4296 	.db #0x83	; 131
   0113 06                 4297 	.db #0x06	; 6
   0114 0C                 4298 	.db #0x0C	; 12
   0115 37                 4299 	.db #0x37	; 55	'7'
   0116 C4                 4300 	.db #0xC4	; 196
   0117 06                 4301 	.db #0x06	; 6
   0118 89                 4302 	.db #0x89	; 137
   0119 5D                 4303 	.db #0x5D	; 93
   011A 06                 4304 	.db #0x06	; 6
   011B 5D                 4305 	.db #0x5D	; 93
   011C 0C                 4306 	.db #0x0C	; 12
   011D AA                 4307 	.db #0xAA	; 170
   011E 89                 4308 	.db #0x89	; 137
   011F 12                 4309 	.db #0x12	; 18
   0120 25                 4310 	.db #0x25	; 37
   0121 4A                 4311 	.db #0x4A	; 74	'J'
   0122 4C                 4312 	.db #0x4C	; 76	'L'
   0123 9C                 4313 	.db #0x9C	; 156
   0124 25                 4314 	.db #0x25	; 37
   0125 37                 4315 	.db #0x37	; 55	'7'
   0126 86                 4316 	.db #0x86	; 134
   0127 25                 4317 	.db #0x25	; 37
   0128 86                 4318 	.db #0x86	; 134
   0129 4A                 4319 	.db #0x4A	; 74	'J'
   012A AB                 4320 	.db #0xAB	; 171
   012B 00                 4321 	.db #0x00	; 0
   012C 01                 4322 	.db #0x01	; 1
   012D 02                 4323 	.db #0x02	; 2
   012E 04                 4324 	.db #0x04	; 4
   012F 02                 4325 	.db #0x02	; 2
   0130 01                 4326 	.db #0x01	; 1
   0131 02                 4327 	.db #0x02	; 2
   0132 03                 4328 	.db #0x03	; 3
   0133 02                 4329 	.db #0x02	; 2
   0134 02                 4330 	.db #0x02	; 2
   0135 02                 4331 	.db #0x02	; 2
   0136 04                 4332 	.db #0x04	; 4
   0137 07                 4333 	.db #0x07	; 7
   0138 85                 4334 	.db #0x85	; 133
   0139 08                 4335 	.db #0x08	; 8
   013A 0E                 4336 	.db #0x0E	; 14
   013B 12                 4337 	.db #0x12	; 18
   013C 72                 4338 	.db #0x72	; 114	'r'
   013D 8A                 4339 	.db #0x8A	; 138
   013E 0E                 4340 	.db #0x0E	; 14
   013F 18                 4341 	.db #0x18	; 24
   0140 BB                 4342 	.db #0xBB	; 187
   0141 0E                 4343 	.db #0x0E	; 14
   0142 BB                 4344 	.db #0xBB	; 187
   0143 EA                 4345 	.db #0xEA	; 234
   0144 FF                 4346 	.db #0xFF	; 255
   0145 1E                 4347 	.db #0x1E	; 30
   0146 1E                 4348 	.db #0x1E	; 30
   0147 1E                 4349 	.db #0x1E	; 30
   0148 21                 4350 	.db #0x21	; 33
   0149 21                 4351 	.db #0x21	; 33
   014A 21                 4352 	.db #0x21	; 33
   014B 21                 4353 	.db #0x21	; 33
   014C 30                 4354 	.db #0x30	; 48	'0'
   014D 41                 4355 	.db #0x41	; 65	'A'
   014E 50                 4356 	.db #0x50	; 80	'P'
   014F 50                 4357 	.db #0x50	; 80	'P'
   0150 50                 4358 	.db #0x50	; 80	'P'
   0151 50                 4359 	.db #0x50	; 80	'P'
   0152 10                 4360 	.db #0x10	; 16
   0153 20                 4361 	.db #0x20	; 32
   0154 41                 4362 	.db #0x41	; 65	'A'
   0155 83                 4363 	.db #0x83	; 131
   0156 9B                 4364 	.db #0x9B	; 155
   0157 C4                 4365 	.db #0xC4	; 196
   0158 08                 4366 	.db #0x08	; 8
   0159 0C                 4367 	.db #0x0C	; 12
   015A 10                 4368 	.db #0x10	; 16
   015B 18                 4369 	.db #0x18	; 24
   015C 20                 4370 	.db #0x20	; 32
   015D 31                 4371 	.db #0x31	; 49	'1'
   015E 40                 4372 	.db #0x40	; 64
   015F 62                 4373 	.db #0x62	; 98	'b'
   0160 C5                 4374 	.db #0xC5	; 197
   0161 89                 4375 	.db #0x89	; 137
   0162 12                 4376 	.db #0x12	; 18
   0163 A6                 4377 	.db #0xA6	; 166
   0164 9C                 4378 	.db #0x9C	; 156
   0165 31                 4379 	.db #0x31	; 49	'1'
   0166 4A                 4380 	.db #0x4A	; 74	'J'
   0167 62                 4381 	.db #0x62	; 98	'b'
   0168 93                 4382 	.db #0x93	; 147
   0169 C5                 4383 	.db #0xC5	; 197
   016A 27                 4384 	.db #0x27	; 39
   016B 00                 4385 	.db #0x00	; 0
   016C 03                 4386 	.db #0x03	; 3
   016D 06                 4387 	.db #0x06	; 6
   016E 0D                 4388 	.db #0x0D	; 13
   016F 1A                 4389 	.db #0x1A	; 26
   0170 1E                 4390 	.db #0x1E	; 30
   0171 26                 4391 	.db #0x26	; 38
   0172 33                 4392 	.db #0x33	; 51	'3'
   0173 4D                 4393 	.db #0x4D	; 77	'M'
   0174 66                 4394 	.db #0x66	; 102	'f'
   0175 9A                 4395 	.db #0x9A	; 154
   0176 CD                 4396 	.db #0xCD	; 205
   0177 FE                 4397 	.db #0xFE	; 254
   0178 FE                 4398 	.db #0xFE	; 254
   0179                    4399 _reg_table_868:
   0179 01                 4400 	.db #0x01	; 1
   017A 01                 4401 	.db #0x01	; 1
   017B 01                 4402 	.db #0x01	; 1
   017C 01                 4403 	.db #0x01	; 1
   017D 01                 4404 	.db #0x01	; 1
   017E 01                 4405 	.db #0x01	; 1
   017F 05                 4406 	.db #0x05	; 5
   0180 0B                 4407 	.db #0x0B	; 11
   0181 9A                 4408 	.db #0x9A	; 154
   0182 88                 4409 	.db #0x88	; 136
   0183 8A                 4410 	.db #0x8A	; 138
   0184 8C                 4411 	.db #0x8C	; 140
   0185 8D                 4412 	.db #0x8D	; 141
   0186 03                 4413 	.db #0x03	; 3
   0187 03                 4414 	.db #0x03	; 3
   0188 03                 4415 	.db #0x03	; 3
   0189 03                 4416 	.db #0x03	; 3
   018A 03                 4417 	.db #0x03	; 3
   018B 03                 4418 	.db #0x03	; 3
   018C 03                 4419 	.db #0x03	; 3
   018D 03                 4420 	.db #0x03	; 3
   018E 03                 4421 	.db #0x03	; 3
   018F 03                 4422 	.db #0x03	; 3
   0190 03                 4423 	.db #0x03	; 3
   0191 03                 4424 	.db #0x03	; 3
   0192 03                 4425 	.db #0x03	; 3
   0193 D0                 4426 	.db #0xD0	; 208
   0194 E8                 4427 	.db #0xE8	; 232
   0195 F4                 4428 	.db #0xF4	; 244
   0196 FA                 4429 	.db #0xFA	; 250
   0197 D3                 4430 	.db #0xD3	; 211
   0198 A7                 4431 	.db #0xA7	; 167
   0199 7D                 4432 	.db #0x7D	; 125
   019A 53                 4433 	.db #0x53	; 83	'S'
   019B 5E                 4434 	.db #0x5E	; 94
   019C 7D                 4435 	.db #0x7D	; 125
   019D 5E                 4436 	.db #0x5E	; 94
   019E 3F                 4437 	.db #0x3F	; 63
   019F 30                 4438 	.db #0x30	; 48	'0'
   01A0 E0                 4439 	.db #0xE0	; 224
   01A1 60                 4440 	.db #0x60	; 96
   01A2 20                 4441 	.db #0x20	; 32
   01A3 00                 4442 	.db #0x00	; 0
   01A4 00                 4443 	.db #0x00	; 0
   01A5 00                 4444 	.db #0x00	; 0
   01A6 01                 4445 	.db #0x01	; 1
   01A7 01                 4446 	.db #0x01	; 1
   01A8 01                 4447 	.db #0x01	; 1
   01A9 01                 4448 	.db #0x01	; 1
   01AA 01                 4449 	.db #0x01	; 1
   01AB 02                 4450 	.db #0x02	; 2
   01AC 02                 4451 	.db #0x02	; 2
   01AD 10                 4452 	.db #0x10	; 16
   01AE 20                 4453 	.db #0x20	; 32
   01AF 41                 4454 	.db #0x41	; 65	'A'
   01B0 83                 4455 	.db #0x83	; 131
   01B1 9B                 4456 	.db #0x9B	; 155
   01B2 C4                 4457 	.db #0xC4	; 196
   01B3 06                 4458 	.db #0x06	; 6
   01B4 89                 4459 	.db #0x89	; 137
   01B5 5D                 4460 	.db #0x5D	; 93
   01B6 06                 4461 	.db #0x06	; 6
   01B7 5D                 4462 	.db #0x5D	; 93
   01B8 0C                 4463 	.db #0x0C	; 12
   01B9 AA                 4464 	.db #0xAA	; 170
   01BA 62                 4465 	.db #0x62	; 98	'b'
   01BB C5                 4466 	.db #0xC5	; 197
   01BC 89                 4467 	.db #0x89	; 137
   01BD 12                 4468 	.db #0x12	; 18
   01BE A6                 4469 	.db #0xA6	; 166
   01BF 9C                 4470 	.db #0x9C	; 156
   01C0 25                 4471 	.db #0x25	; 37
   01C1 37                 4472 	.db #0x37	; 55	'7'
   01C2 86                 4473 	.db #0x86	; 134
   01C3 25                 4474 	.db #0x25	; 37
   01C4 86                 4475 	.db #0x86	; 134
   01C5 4A                 4476 	.db #0x4A	; 74	'J'
   01C6 AB                 4477 	.db #0xAB	; 171
   01C7 00                 4478 	.db #0x00	; 0
   01C8 00                 4479 	.db #0x00	; 0
   01C9 00                 4480 	.db #0x00	; 0
   01CA 01                 4481 	.db #0x01	; 1
   01CB 01                 4482 	.db #0x01	; 1
   01CC 01                 4483 	.db #0x01	; 1
   01CD 02                 4484 	.db #0x02	; 2
   01CE 03                 4485 	.db #0x03	; 3
   01CF 02                 4486 	.db #0x02	; 2
   01D0 02                 4487 	.db #0x02	; 2
   01D1 02                 4488 	.db #0x02	; 2
   01D2 04                 4489 	.db #0x04	; 4
   01D3 07                 4490 	.db #0x07	; 7
   01D4 23                 4491 	.db #0x23	; 35
   01D5 44                 4492 	.db #0x44	; 68	'D'
   01D6 85                 4493 	.db #0x85	; 133
   01D7 08                 4494 	.db #0x08	; 8
   01D8 39                 4495 	.db #0x39	; 57	'9'
   01D9 8A                 4496 	.db #0x8A	; 138
   01DA 0E                 4497 	.db #0x0E	; 14
   01DB 18                 4498 	.db #0x18	; 24
   01DC BB                 4499 	.db #0xBB	; 187
   01DD 0E                 4500 	.db #0x0E	; 14
   01DE BB                 4501 	.db #0xBB	; 187
   01DF EA                 4502 	.db #0xEA	; 234
   01E0 FF                 4503 	.db #0xFF	; 255
   01E1 1C                 4504 	.db #0x1C	; 28
   01E2 1C                 4505 	.db #0x1C	; 28
   01E3 1C                 4506 	.db #0x1C	; 28
   01E4 1C                 4507 	.db #0x1C	; 28
   01E5 1C                 4508 	.db #0x1C	; 28
   01E6 1E                 4509 	.db #0x1E	; 30
   01E7 20                 4510 	.db #0x20	; 32
   01E8 30                 4511 	.db #0x30	; 48	'0'
   01E9 41                 4512 	.db #0x41	; 65	'A'
   01EA 50                 4513 	.db #0x50	; 80	'P'
   01EB 50                 4514 	.db #0x50	; 80	'P'
   01EC 50                 4515 	.db #0x50	; 80	'P'
   01ED 50                 4516 	.db #0x50	; 80	'P'
   01EE 10                 4517 	.db #0x10	; 16
   01EF 20                 4518 	.db #0x20	; 32
   01F0 41                 4519 	.db #0x41	; 65	'A'
   01F1 83                 4520 	.db #0x83	; 131
   01F2 9B                 4521 	.db #0x9B	; 155
   01F3 C4                 4522 	.db #0xC4	; 196
   01F4 08                 4523 	.db #0x08	; 8
   01F5 0C                 4524 	.db #0x0C	; 12
   01F6 10                 4525 	.db #0x10	; 16
   01F7 18                 4526 	.db #0x18	; 24
   01F8 20                 4527 	.db #0x20	; 32
   01F9 31                 4528 	.db #0x31	; 49	'1'
   01FA 40                 4529 	.db #0x40	; 64
   01FB 62                 4530 	.db #0x62	; 98	'b'
   01FC C5                 4531 	.db #0xC5	; 197
   01FD 89                 4532 	.db #0x89	; 137
   01FE 12                 4533 	.db #0x12	; 18
   01FF A6                 4534 	.db #0xA6	; 166
   0200 9C                 4535 	.db #0x9C	; 156
   0201 31                 4536 	.db #0x31	; 49	'1'
   0202 4A                 4537 	.db #0x4A	; 74	'J'
   0203 62                 4538 	.db #0x62	; 98	'b'
   0204 93                 4539 	.db #0x93	; 147
   0205 C5                 4540 	.db #0xC5	; 197
   0206 27                 4541 	.db #0x27	; 39
   0207 00                 4542 	.db #0x00	; 0
   0208 03                 4543 	.db #0x03	; 3
   0209 06                 4544 	.db #0x06	; 6
   020A 0D                 4545 	.db #0x0D	; 13
   020B 1A                 4546 	.db #0x1A	; 26
   020C 1E                 4547 	.db #0x1E	; 30
   020D 26                 4548 	.db #0x26	; 38
   020E 33                 4549 	.db #0x33	; 51	'3'
   020F 4D                 4550 	.db #0x4D	; 77	'M'
   0210 66                 4551 	.db #0x66	; 102	'f'
   0211 9A                 4552 	.db #0x9A	; 154
   0212 CD                 4553 	.db #0xCD	; 205
   0213 FE                 4554 	.db #0xFE	; 254
   0214 FE                 4555 	.db #0xFE	; 254
   0215                    4556 _reg_table_915:
   0215 01                 4557 	.db #0x01	; 1
   0216 01                 4558 	.db #0x01	; 1
   0217 01                 4559 	.db #0x01	; 1
   0218 01                 4560 	.db #0x01	; 1
   0219 01                 4561 	.db #0x01	; 1
   021A 01                 4562 	.db #0x01	; 1
   021B 05                 4563 	.db #0x05	; 5
   021C 0B                 4564 	.db #0x0B	; 11
   021D 9A                 4565 	.db #0x9A	; 154
   021E 88                 4566 	.db #0x88	; 136
   021F 8A                 4567 	.db #0x8A	; 138
   0220 8C                 4568 	.db #0x8C	; 140
   0221 8D                 4569 	.db #0x8D	; 141
   0222 03                 4570 	.db #0x03	; 3
   0223 03                 4571 	.db #0x03	; 3
   0224 03                 4572 	.db #0x03	; 3
   0225 03                 4573 	.db #0x03	; 3
   0226 03                 4574 	.db #0x03	; 3
   0227 03                 4575 	.db #0x03	; 3
   0228 03                 4576 	.db #0x03	; 3
   0229 03                 4577 	.db #0x03	; 3
   022A 03                 4578 	.db #0x03	; 3
   022B 03                 4579 	.db #0x03	; 3
   022C 03                 4580 	.db #0x03	; 3
   022D 03                 4581 	.db #0x03	; 3
   022E 03                 4582 	.db #0x03	; 3
   022F D0                 4583 	.db #0xD0	; 208
   0230 E8                 4584 	.db #0xE8	; 232
   0231 F4                 4585 	.db #0xF4	; 244
   0232 FA                 4586 	.db #0xFA	; 250
   0233 D3                 4587 	.db #0xD3	; 211
   0234 A7                 4588 	.db #0xA7	; 167
   0235 7D                 4589 	.db #0x7D	; 125
   0236 53                 4590 	.db #0x53	; 83	'S'
   0237 5E                 4591 	.db #0x5E	; 94
   0238 7D                 4592 	.db #0x7D	; 125
   0239 5E                 4593 	.db #0x5E	; 94
   023A 3F                 4594 	.db #0x3F	; 63
   023B 30                 4595 	.db #0x30	; 48	'0'
   023C E0                 4596 	.db #0xE0	; 224
   023D 60                 4597 	.db #0x60	; 96
   023E 20                 4598 	.db #0x20	; 32
   023F 00                 4599 	.db #0x00	; 0
   0240 00                 4600 	.db #0x00	; 0
   0241 00                 4601 	.db #0x00	; 0
   0242 01                 4602 	.db #0x01	; 1
   0243 01                 4603 	.db #0x01	; 1
   0244 01                 4604 	.db #0x01	; 1
   0245 01                 4605 	.db #0x01	; 1
   0246 01                 4606 	.db #0x01	; 1
   0247 02                 4607 	.db #0x02	; 2
   0248 02                 4608 	.db #0x02	; 2
   0249 10                 4609 	.db #0x10	; 16
   024A 20                 4610 	.db #0x20	; 32
   024B 41                 4611 	.db #0x41	; 65	'A'
   024C 83                 4612 	.db #0x83	; 131
   024D 9B                 4613 	.db #0x9B	; 155
   024E C4                 4614 	.db #0xC4	; 196
   024F 06                 4615 	.db #0x06	; 6
   0250 89                 4616 	.db #0x89	; 137
   0251 5D                 4617 	.db #0x5D	; 93
   0252 06                 4618 	.db #0x06	; 6
   0253 5D                 4619 	.db #0x5D	; 93
   0254 0C                 4620 	.db #0x0C	; 12
   0255 AA                 4621 	.db #0xAA	; 170
   0256 62                 4622 	.db #0x62	; 98	'b'
   0257 C5                 4623 	.db #0xC5	; 197
   0258 89                 4624 	.db #0x89	; 137
   0259 12                 4625 	.db #0x12	; 18
   025A A6                 4626 	.db #0xA6	; 166
   025B 9C                 4627 	.db #0x9C	; 156
   025C 25                 4628 	.db #0x25	; 37
   025D 37                 4629 	.db #0x37	; 55	'7'
   025E 86                 4630 	.db #0x86	; 134
   025F 25                 4631 	.db #0x25	; 37
   0260 86                 4632 	.db #0x86	; 134
   0261 4A                 4633 	.db #0x4A	; 74	'J'
   0262 AB                 4634 	.db #0xAB	; 171
   0263 00                 4635 	.db #0x00	; 0
   0264 00                 4636 	.db #0x00	; 0
   0265 00                 4637 	.db #0x00	; 0
   0266 01                 4638 	.db #0x01	; 1
   0267 01                 4639 	.db #0x01	; 1
   0268 01                 4640 	.db #0x01	; 1
   0269 02                 4641 	.db #0x02	; 2
   026A 03                 4642 	.db #0x03	; 3
   026B 02                 4643 	.db #0x02	; 2
   026C 02                 4644 	.db #0x02	; 2
   026D 02                 4645 	.db #0x02	; 2
   026E 04                 4646 	.db #0x04	; 4
   026F 07                 4647 	.db #0x07	; 7
   0270 23                 4648 	.db #0x23	; 35
   0271 44                 4649 	.db #0x44	; 68	'D'
   0272 85                 4650 	.db #0x85	; 133
   0273 08                 4651 	.db #0x08	; 8
   0274 39                 4652 	.db #0x39	; 57	'9'
   0275 8A                 4653 	.db #0x8A	; 138
   0276 0E                 4654 	.db #0x0E	; 14
   0277 18                 4655 	.db #0x18	; 24
   0278 BB                 4656 	.db #0xBB	; 187
   0279 0E                 4657 	.db #0x0E	; 14
   027A BB                 4658 	.db #0xBB	; 187
   027B EA                 4659 	.db #0xEA	; 234
   027C FF                 4660 	.db #0xFF	; 255
   027D 1E                 4661 	.db #0x1E	; 30
   027E 1E                 4662 	.db #0x1E	; 30
   027F 1E                 4663 	.db #0x1E	; 30
   0280 1E                 4664 	.db #0x1E	; 30
   0281 1E                 4665 	.db #0x1E	; 30
   0282 1E                 4666 	.db #0x1E	; 30
   0283 20                 4667 	.db #0x20	; 32
   0284 30                 4668 	.db #0x30	; 48	'0'
   0285 41                 4669 	.db #0x41	; 65	'A'
   0286 50                 4670 	.db #0x50	; 80	'P'
   0287 50                 4671 	.db #0x50	; 80	'P'
   0288 50                 4672 	.db #0x50	; 80	'P'
   0289 50                 4673 	.db #0x50	; 80	'P'
   028A 10                 4674 	.db #0x10	; 16
   028B 20                 4675 	.db #0x20	; 32
   028C 41                 4676 	.db #0x41	; 65	'A'
   028D 83                 4677 	.db #0x83	; 131
   028E 9B                 4678 	.db #0x9B	; 155
   028F C4                 4679 	.db #0xC4	; 196
   0290 08                 4680 	.db #0x08	; 8
   0291 0C                 4681 	.db #0x0C	; 12
   0292 10                 4682 	.db #0x10	; 16
   0293 18                 4683 	.db #0x18	; 24
   0294 20                 4684 	.db #0x20	; 32
   0295 31                 4685 	.db #0x31	; 49	'1'
   0296 40                 4686 	.db #0x40	; 64
   0297 62                 4687 	.db #0x62	; 98	'b'
   0298 C5                 4688 	.db #0xC5	; 197
   0299 89                 4689 	.db #0x89	; 137
   029A 12                 4690 	.db #0x12	; 18
   029B A6                 4691 	.db #0xA6	; 166
   029C 9C                 4692 	.db #0x9C	; 156
   029D 31                 4693 	.db #0x31	; 49	'1'
   029E 4A                 4694 	.db #0x4A	; 74	'J'
   029F 62                 4695 	.db #0x62	; 98	'b'
   02A0 93                 4696 	.db #0x93	; 147
   02A1 C5                 4697 	.db #0xC5	; 197
   02A2 27                 4698 	.db #0x27	; 39
   02A3 00                 4699 	.db #0x00	; 0
   02A4 03                 4700 	.db #0x03	; 3
   02A5 06                 4701 	.db #0x06	; 6
   02A6 0D                 4702 	.db #0x0D	; 13
   02A7 1A                 4703 	.db #0x1A	; 26
   02A8 1E                 4704 	.db #0x1E	; 30
   02A9 26                 4705 	.db #0x26	; 38
   02AA 33                 4706 	.db #0x33	; 51	'3'
   02AB 4D                 4707 	.db #0x4D	; 77	'M'
   02AC 66                 4708 	.db #0x66	; 102	'f'
   02AD 9A                 4709 	.db #0x9A	; 154
   02AE CD                 4710 	.db #0xCD	; 205
   02AF FE                 4711 	.db #0xFE	; 254
   02B0 FE                 4712 	.db #0xFE	; 254
   02B1                    4713 _power_levels:
   02B1 11                 4714 	.db #0x11	; 17
   02B2 14                 4715 	.db #0x14	; 20
   02B3 1B                 4716 	.db #0x1B	; 27
   02B4 1D                 4717 	.db #0x1D	; 29
   02B5 1E                 4718 	.db #0x1E	; 30
                           4719 	.area XINIT   (CODE)
                           4720 	.area CABS    (ABS,CODE)
