                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.3.0 #8604 (May 11 2013) (Linux)
                              4 ; This file was generated Sun Nov 24 17:43:14 2013
                              5 ;--------------------------------------------------------
                              6 	.module tdm
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _fhop_set_locked
                             13 	.globl _fhop_window_change
                             14 	.globl _fhop_receive_channel
                             15 	.globl _fhop_transmit_channel
                             16 	.globl _packet_inject
                             17 	.globl _packet_set_max_xmit
                             18 	.globl _packet_force_resend
                             19 	.globl _packet_is_duplicate
                             20 	.globl _packet_is_injected
                             21 	.globl _packet_is_resend
                             22 	.globl _packet_get_next
                             23 	.globl _timer_entropy
                             24 	.globl _delay_msec
                             25 	.globl _timer2_tick
                             26 	.globl _radio_temperature
                             27 	.globl _MAVLink_report
                             28 	.globl _radio_receive_in_progress
                             29 	.globl _radio_get_transmit_power
                             30 	.globl _radio_air_rate
                             31 	.globl _radio_current_rssi
                             32 	.globl _radio_last_rssi
                             33 	.globl _radio_set_channel
                             34 	.globl _radio_receiver_on
                             35 	.globl _radio_transmit
                             36 	.globl _radio_preamble_detected
                             37 	.globl _radio_receive_packet
                             38 	.globl _printf_end_capture
                             39 	.globl _printf_start_capture
                             40 	.globl _printfl
                             41 	.globl _panic
                             42 	.globl _at_command
                             43 	.globl _constrain
                             44 	.globl _serial_write_buf
                             45 	.globl _strlen
                             46 	.globl _memset
                             47 	.globl _memcpy
                             48 	.globl _rand
                             49 	.globl _putchar
                             50 	.globl _TDM_SYNC_PIN
                             51 	.globl _NSS1
                             52 	.globl _IRQ
                             53 	.globl _PIN_ENABLE
                             54 	.globl _PIN_CONFIG
                             55 	.globl _LED_GREEN
                             56 	.globl _LED_RED
                             57 	.globl _SPI0EN
                             58 	.globl _TXBMT0
                             59 	.globl _NSS0MD0
                             60 	.globl _NSS0MD1
                             61 	.globl _RXOVRN0
                             62 	.globl _MODF0
                             63 	.globl _WCOL0
                             64 	.globl _SPIF0
                             65 	.globl _AD0CM0
                             66 	.globl _AD0CM1
                             67 	.globl _AD0CM2
                             68 	.globl _AD0WINT
                             69 	.globl _AD0BUSY
                             70 	.globl _AD0INT
                             71 	.globl _BURSTEN
                             72 	.globl _AD0EN
                             73 	.globl _CCF0
                             74 	.globl _CCF1
                             75 	.globl _CCF2
                             76 	.globl _CCF3
                             77 	.globl _CCF4
                             78 	.globl _CCF5
                             79 	.globl _CR
                             80 	.globl _CF
                             81 	.globl _P
                             82 	.globl _F1
                             83 	.globl _OV
                             84 	.globl _RS0
                             85 	.globl _RS1
                             86 	.globl _F0
                             87 	.globl _AC
                             88 	.globl _CY
                             89 	.globl _T2XCLK
                             90 	.globl _T2RCLK
                             91 	.globl _TR2
                             92 	.globl _T2SPLIT
                             93 	.globl _TF2CEN
                             94 	.globl _TF2LEN
                             95 	.globl _TF2L
                             96 	.globl _TF2H
                             97 	.globl _SI
                             98 	.globl _ACK
                             99 	.globl _ARBLOST
                            100 	.globl _ACKRQ
                            101 	.globl _STO
                            102 	.globl _STA
                            103 	.globl _TXMODE
                            104 	.globl _MASTER
                            105 	.globl _PX0
                            106 	.globl _PT0
                            107 	.globl _PX1
                            108 	.globl _PT1
                            109 	.globl _PS0
                            110 	.globl _PT2
                            111 	.globl _PSPI0
                            112 	.globl _SPI1EN
                            113 	.globl _TXBMT1
                            114 	.globl _NSS1MD0
                            115 	.globl _NSS1MD1
                            116 	.globl _RXOVRN1
                            117 	.globl _MODF1
                            118 	.globl _WCOL1
                            119 	.globl _SPIF1
                            120 	.globl _EX0
                            121 	.globl _ET0
                            122 	.globl _EX1
                            123 	.globl _ET1
                            124 	.globl _ES0
                            125 	.globl _ET2
                            126 	.globl _ESPI0
                            127 	.globl _EA
                            128 	.globl _RI0
                            129 	.globl _TI0
                            130 	.globl _RB80
                            131 	.globl _TB80
                            132 	.globl _REN0
                            133 	.globl _MCE0
                            134 	.globl _S0MODE
                            135 	.globl _CRC0VAL
                            136 	.globl _CRC0INIT
                            137 	.globl _CRC0SEL
                            138 	.globl _IT0
                            139 	.globl _IE0
                            140 	.globl _IT1
                            141 	.globl _IE1
                            142 	.globl _TR0
                            143 	.globl _TF0
                            144 	.globl _TR1
                            145 	.globl _TF1
                            146 	.globl _PCA0CP4
                            147 	.globl _PCA0CP0
                            148 	.globl _PCA0
                            149 	.globl _PCA0CP3
                            150 	.globl _PCA0CP2
                            151 	.globl _PCA0CP1
                            152 	.globl _PCA0CP5
                            153 	.globl _TMR2
                            154 	.globl _TMR2RL
                            155 	.globl _ADC0LT
                            156 	.globl _ADC0GT
                            157 	.globl _ADC0
                            158 	.globl _TMR3
                            159 	.globl _TMR3RL
                            160 	.globl _TOFF
                            161 	.globl _DP
                            162 	.globl _VDM0CN
                            163 	.globl _PCA0CPH4
                            164 	.globl _PCA0CPL4
                            165 	.globl _PCA0CPH0
                            166 	.globl _PCA0CPL0
                            167 	.globl _PCA0H
                            168 	.globl _PCA0L
                            169 	.globl _SPI0CN
                            170 	.globl _EIP2
                            171 	.globl _EIP1
                            172 	.globl _SMB0ADM
                            173 	.globl _SMB0ADR
                            174 	.globl _P2MDIN
                            175 	.globl _P1MDIN
                            176 	.globl _P0MDIN
                            177 	.globl _B
                            178 	.globl _RSTSRC
                            179 	.globl _PCA0CPH3
                            180 	.globl _PCA0CPL3
                            181 	.globl _PCA0CPH2
                            182 	.globl _PCA0CPL2
                            183 	.globl _PCA0CPH1
                            184 	.globl _PCA0CPL1
                            185 	.globl _ADC0CN
                            186 	.globl _EIE2
                            187 	.globl _EIE1
                            188 	.globl _FLWR
                            189 	.globl _IT01CF
                            190 	.globl _XBR2
                            191 	.globl _XBR1
                            192 	.globl _XBR0
                            193 	.globl _ACC
                            194 	.globl _PCA0PWM
                            195 	.globl _PCA0CPM4
                            196 	.globl _PCA0CPM3
                            197 	.globl _PCA0CPM2
                            198 	.globl _PCA0CPM1
                            199 	.globl _PCA0CPM0
                            200 	.globl _PCA0MD
                            201 	.globl _PCA0CN
                            202 	.globl _P0MAT
                            203 	.globl _P2SKIP
                            204 	.globl _P1SKIP
                            205 	.globl _P0SKIP
                            206 	.globl _PCA0CPH5
                            207 	.globl _PCA0CPL5
                            208 	.globl _REF0CN
                            209 	.globl _PSW
                            210 	.globl _P1MAT
                            211 	.globl _PCA0CPM5
                            212 	.globl _TMR2H
                            213 	.globl _TMR2L
                            214 	.globl _TMR2RLH
                            215 	.globl _TMR2RLL
                            216 	.globl _REG0CN
                            217 	.globl _TMR2CN
                            218 	.globl _P0MASK
                            219 	.globl _ADC0LTH
                            220 	.globl _ADC0LTL
                            221 	.globl _ADC0GTH
                            222 	.globl _ADC0GTL
                            223 	.globl _SMB0DAT
                            224 	.globl _SMB0CF
                            225 	.globl _SMB0CN
                            226 	.globl _P1MASK
                            227 	.globl _ADC0H
                            228 	.globl _ADC0L
                            229 	.globl _ADC0TK
                            230 	.globl _ADC0CF
                            231 	.globl _ADC0MX
                            232 	.globl _ADC0PWR
                            233 	.globl _ADC0AC
                            234 	.globl _IREF0CN
                            235 	.globl _IP
                            236 	.globl _FLKEY
                            237 	.globl _FLSCL
                            238 	.globl _PMU0CF
                            239 	.globl _OSCICL
                            240 	.globl _OSCICN
                            241 	.globl _OSCXCN
                            242 	.globl _SPI1CN
                            243 	.globl _ONESHOT
                            244 	.globl _EMI0TC
                            245 	.globl _RTC0KEY
                            246 	.globl _RTC0DAT
                            247 	.globl _RTC0ADR
                            248 	.globl _EMI0CF
                            249 	.globl _EMI0CN
                            250 	.globl _CLKSEL
                            251 	.globl _IE
                            252 	.globl _SFRPAGE
                            253 	.globl _P2DRV
                            254 	.globl _P2MDOUT
                            255 	.globl _P1DRV
                            256 	.globl _P1MDOUT
                            257 	.globl _P0DRV
                            258 	.globl _P0MDOUT
                            259 	.globl _SPI0DAT
                            260 	.globl _SPI0CKR
                            261 	.globl _SPI0CFG
                            262 	.globl _P2
                            263 	.globl _CPT0MX
                            264 	.globl _CPT1MX
                            265 	.globl _CPT0MD
                            266 	.globl _CPT1MD
                            267 	.globl _CPT0CN
                            268 	.globl _CPT1CN
                            269 	.globl _SBUF0
                            270 	.globl _SCON0
                            271 	.globl _CRC0CNT
                            272 	.globl _DC0CN
                            273 	.globl _CRC0AUTO
                            274 	.globl _DC0CF
                            275 	.globl _TMR3H
                            276 	.globl _CRC0FLIP
                            277 	.globl _TMR3L
                            278 	.globl _CRC0IN
                            279 	.globl _TMR3RLH
                            280 	.globl _CRC0CN
                            281 	.globl _TMR3RLL
                            282 	.globl _CRC0DAT
                            283 	.globl _TMR3CN
                            284 	.globl _P1
                            285 	.globl _PSCTL
                            286 	.globl _CKCON
                            287 	.globl _TH1
                            288 	.globl _TH0
                            289 	.globl _TL1
                            290 	.globl _TL0
                            291 	.globl _TMOD
                            292 	.globl _TCON
                            293 	.globl _PCON
                            294 	.globl _TOFFH
                            295 	.globl _SPI1DAT
                            296 	.globl _TOFFL
                            297 	.globl _SPI1CKR
                            298 	.globl _SPI1CFG
                            299 	.globl _DPH
                            300 	.globl _DPL
                            301 	.globl _SP
                            302 	.globl _P0
                            303 	.globl _pbuf
                            304 	.globl _trailer
                            305 	.globl _test_display
                            306 	.globl _lbt_rssi
                            307 	.globl _duty_cycle_offset
                            308 	.globl _duty_cycle
                            309 	.globl _transmit_wait
                            310 	.globl __canary
                            311 	.globl _tdm_show_rssi
                            312 	.globl _tdm_change_phase
                            313 	.globl _tdm_remote_at
                            314 	.globl _tdm_serial_loop
                            315 	.globl _tdm_init
                            316 	.globl _tdm_report_timing
                            317 ;--------------------------------------------------------
                            318 ; special function registers
                            319 ;--------------------------------------------------------
                            320 	.area RSEG    (ABS,DATA)
   0000                     321 	.org 0x0000
                     0080   322 _P0	=	0x0080
                     0081   323 _SP	=	0x0081
                     0082   324 _DPL	=	0x0082
                     0083   325 _DPH	=	0x0083
                     0084   326 _SPI1CFG	=	0x0084
                     0085   327 _SPI1CKR	=	0x0085
                     0085   328 _TOFFL	=	0x0085
                     0086   329 _SPI1DAT	=	0x0086
                     0086   330 _TOFFH	=	0x0086
                     0087   331 _PCON	=	0x0087
                     0088   332 _TCON	=	0x0088
                     0089   333 _TMOD	=	0x0089
                     008A   334 _TL0	=	0x008a
                     008B   335 _TL1	=	0x008b
                     008C   336 _TH0	=	0x008c
                     008D   337 _TH1	=	0x008d
                     008E   338 _CKCON	=	0x008e
                     008F   339 _PSCTL	=	0x008f
                     0090   340 _P1	=	0x0090
                     0091   341 _TMR3CN	=	0x0091
                     0091   342 _CRC0DAT	=	0x0091
                     0092   343 _TMR3RLL	=	0x0092
                     0092   344 _CRC0CN	=	0x0092
                     0093   345 _TMR3RLH	=	0x0093
                     0093   346 _CRC0IN	=	0x0093
                     0094   347 _TMR3L	=	0x0094
                     0095   348 _CRC0FLIP	=	0x0095
                     0095   349 _TMR3H	=	0x0095
                     0096   350 _DC0CF	=	0x0096
                     0096   351 _CRC0AUTO	=	0x0096
                     0097   352 _DC0CN	=	0x0097
                     0097   353 _CRC0CNT	=	0x0097
                     0098   354 _SCON0	=	0x0098
                     0099   355 _SBUF0	=	0x0099
                     009A   356 _CPT1CN	=	0x009a
                     009B   357 _CPT0CN	=	0x009b
                     009C   358 _CPT1MD	=	0x009c
                     009D   359 _CPT0MD	=	0x009d
                     009E   360 _CPT1MX	=	0x009e
                     009F   361 _CPT0MX	=	0x009f
                     00A0   362 _P2	=	0x00a0
                     00A1   363 _SPI0CFG	=	0x00a1
                     00A2   364 _SPI0CKR	=	0x00a2
                     00A3   365 _SPI0DAT	=	0x00a3
                     00A4   366 _P0MDOUT	=	0x00a4
                     00A4   367 _P0DRV	=	0x00a4
                     00A5   368 _P1MDOUT	=	0x00a5
                     00A5   369 _P1DRV	=	0x00a5
                     00A6   370 _P2MDOUT	=	0x00a6
                     00A6   371 _P2DRV	=	0x00a6
                     00A7   372 _SFRPAGE	=	0x00a7
                     00A8   373 _IE	=	0x00a8
                     00A9   374 _CLKSEL	=	0x00a9
                     00AA   375 _EMI0CN	=	0x00aa
                     00AB   376 _EMI0CF	=	0x00ab
                     00AC   377 _RTC0ADR	=	0x00ac
                     00AD   378 _RTC0DAT	=	0x00ad
                     00AE   379 _RTC0KEY	=	0x00ae
                     00AF   380 _EMI0TC	=	0x00af
                     00AF   381 _ONESHOT	=	0x00af
                     00B0   382 _SPI1CN	=	0x00b0
                     00B1   383 _OSCXCN	=	0x00b1
                     00B2   384 _OSCICN	=	0x00b2
                     00B3   385 _OSCICL	=	0x00b3
                     00B5   386 _PMU0CF	=	0x00b5
                     00B6   387 _FLSCL	=	0x00b6
                     00B7   388 _FLKEY	=	0x00b7
                     00B8   389 _IP	=	0x00b8
                     00B9   390 _IREF0CN	=	0x00b9
                     00BA   391 _ADC0AC	=	0x00ba
                     00BA   392 _ADC0PWR	=	0x00ba
                     00BB   393 _ADC0MX	=	0x00bb
                     00BC   394 _ADC0CF	=	0x00bc
                     00BD   395 _ADC0TK	=	0x00bd
                     00BD   396 _ADC0L	=	0x00bd
                     00BE   397 _ADC0H	=	0x00be
                     00BF   398 _P1MASK	=	0x00bf
                     00C0   399 _SMB0CN	=	0x00c0
                     00C1   400 _SMB0CF	=	0x00c1
                     00C2   401 _SMB0DAT	=	0x00c2
                     00C3   402 _ADC0GTL	=	0x00c3
                     00C4   403 _ADC0GTH	=	0x00c4
                     00C5   404 _ADC0LTL	=	0x00c5
                     00C6   405 _ADC0LTH	=	0x00c6
                     00C7   406 _P0MASK	=	0x00c7
                     00C8   407 _TMR2CN	=	0x00c8
                     00C9   408 _REG0CN	=	0x00c9
                     00CA   409 _TMR2RLL	=	0x00ca
                     00CB   410 _TMR2RLH	=	0x00cb
                     00CC   411 _TMR2L	=	0x00cc
                     00CD   412 _TMR2H	=	0x00cd
                     00CE   413 _PCA0CPM5	=	0x00ce
                     00CF   414 _P1MAT	=	0x00cf
                     00D0   415 _PSW	=	0x00d0
                     00D1   416 _REF0CN	=	0x00d1
                     00D2   417 _PCA0CPL5	=	0x00d2
                     00D3   418 _PCA0CPH5	=	0x00d3
                     00D4   419 _P0SKIP	=	0x00d4
                     00D5   420 _P1SKIP	=	0x00d5
                     00D6   421 _P2SKIP	=	0x00d6
                     00D7   422 _P0MAT	=	0x00d7
                     00D8   423 _PCA0CN	=	0x00d8
                     00D9   424 _PCA0MD	=	0x00d9
                     00DA   425 _PCA0CPM0	=	0x00da
                     00DB   426 _PCA0CPM1	=	0x00db
                     00DC   427 _PCA0CPM2	=	0x00dc
                     00DD   428 _PCA0CPM3	=	0x00dd
                     00DE   429 _PCA0CPM4	=	0x00de
                     00DF   430 _PCA0PWM	=	0x00df
                     00E0   431 _ACC	=	0x00e0
                     00E1   432 _XBR0	=	0x00e1
                     00E2   433 _XBR1	=	0x00e2
                     00E3   434 _XBR2	=	0x00e3
                     00E4   435 _IT01CF	=	0x00e4
                     00E5   436 _FLWR	=	0x00e5
                     00E6   437 _EIE1	=	0x00e6
                     00E7   438 _EIE2	=	0x00e7
                     00E8   439 _ADC0CN	=	0x00e8
                     00E9   440 _PCA0CPL1	=	0x00e9
                     00EA   441 _PCA0CPH1	=	0x00ea
                     00EB   442 _PCA0CPL2	=	0x00eb
                     00EC   443 _PCA0CPH2	=	0x00ec
                     00ED   444 _PCA0CPL3	=	0x00ed
                     00EE   445 _PCA0CPH3	=	0x00ee
                     00EF   446 _RSTSRC	=	0x00ef
                     00F0   447 _B	=	0x00f0
                     00F1   448 _P0MDIN	=	0x00f1
                     00F2   449 _P1MDIN	=	0x00f2
                     00F3   450 _P2MDIN	=	0x00f3
                     00F4   451 _SMB0ADR	=	0x00f4
                     00F5   452 _SMB0ADM	=	0x00f5
                     00F6   453 _EIP1	=	0x00f6
                     00F7   454 _EIP2	=	0x00f7
                     00F8   455 _SPI0CN	=	0x00f8
                     00F9   456 _PCA0L	=	0x00f9
                     00FA   457 _PCA0H	=	0x00fa
                     00FB   458 _PCA0CPL0	=	0x00fb
                     00FC   459 _PCA0CPH0	=	0x00fc
                     00FD   460 _PCA0CPL4	=	0x00fd
                     00FE   461 _PCA0CPH4	=	0x00fe
                     00FF   462 _VDM0CN	=	0x00ff
                     8382   463 _DP	=	0x8382
                     8685   464 _TOFF	=	0x8685
                     9392   465 _TMR3RL	=	0x9392
                     9594   466 _TMR3	=	0x9594
                     BEBD   467 _ADC0	=	0xbebd
                     C4C3   468 _ADC0GT	=	0xc4c3
                     C6C5   469 _ADC0LT	=	0xc6c5
                     CBCA   470 _TMR2RL	=	0xcbca
                     CDCC   471 _TMR2	=	0xcdcc
                     D3D2   472 _PCA0CP5	=	0xd3d2
                     EAE9   473 _PCA0CP1	=	0xeae9
                     ECEB   474 _PCA0CP2	=	0xeceb
                     EEED   475 _PCA0CP3	=	0xeeed
                     FAF9   476 _PCA0	=	0xfaf9
                     FCFB   477 _PCA0CP0	=	0xfcfb
                     FEFD   478 _PCA0CP4	=	0xfefd
                            479 ;--------------------------------------------------------
                            480 ; special function bits
                            481 ;--------------------------------------------------------
                            482 	.area RSEG    (ABS,DATA)
   0000                     483 	.org 0x0000
                     008F   484 _TF1	=	0x008f
                     008E   485 _TR1	=	0x008e
                     008D   486 _TF0	=	0x008d
                     008C   487 _TR0	=	0x008c
                     008B   488 _IE1	=	0x008b
                     008A   489 _IT1	=	0x008a
                     0089   490 _IE0	=	0x0089
                     0088   491 _IT0	=	0x0088
                     0096   492 _CRC0SEL	=	0x0096
                     0095   493 _CRC0INIT	=	0x0095
                     0094   494 _CRC0VAL	=	0x0094
                     009F   495 _S0MODE	=	0x009f
                     009D   496 _MCE0	=	0x009d
                     009C   497 _REN0	=	0x009c
                     009B   498 _TB80	=	0x009b
                     009A   499 _RB80	=	0x009a
                     0099   500 _TI0	=	0x0099
                     0098   501 _RI0	=	0x0098
                     00AF   502 _EA	=	0x00af
                     00AE   503 _ESPI0	=	0x00ae
                     00AD   504 _ET2	=	0x00ad
                     00AC   505 _ES0	=	0x00ac
                     00AB   506 _ET1	=	0x00ab
                     00AA   507 _EX1	=	0x00aa
                     00A9   508 _ET0	=	0x00a9
                     00A8   509 _EX0	=	0x00a8
                     00B7   510 _SPIF1	=	0x00b7
                     00B6   511 _WCOL1	=	0x00b6
                     00B5   512 _MODF1	=	0x00b5
                     00B4   513 _RXOVRN1	=	0x00b4
                     00B3   514 _NSS1MD1	=	0x00b3
                     00B2   515 _NSS1MD0	=	0x00b2
                     00B1   516 _TXBMT1	=	0x00b1
                     00B0   517 _SPI1EN	=	0x00b0
                     00BE   518 _PSPI0	=	0x00be
                     00BD   519 _PT2	=	0x00bd
                     00BC   520 _PS0	=	0x00bc
                     00BB   521 _PT1	=	0x00bb
                     00BA   522 _PX1	=	0x00ba
                     00B9   523 _PT0	=	0x00b9
                     00B8   524 _PX0	=	0x00b8
                     00C7   525 _MASTER	=	0x00c7
                     00C6   526 _TXMODE	=	0x00c6
                     00C5   527 _STA	=	0x00c5
                     00C4   528 _STO	=	0x00c4
                     00C3   529 _ACKRQ	=	0x00c3
                     00C2   530 _ARBLOST	=	0x00c2
                     00C1   531 _ACK	=	0x00c1
                     00C0   532 _SI	=	0x00c0
                     00CF   533 _TF2H	=	0x00cf
                     00CE   534 _TF2L	=	0x00ce
                     00CD   535 _TF2LEN	=	0x00cd
                     00CC   536 _TF2CEN	=	0x00cc
                     00CB   537 _T2SPLIT	=	0x00cb
                     00CA   538 _TR2	=	0x00ca
                     00C9   539 _T2RCLK	=	0x00c9
                     00C8   540 _T2XCLK	=	0x00c8
                     00D7   541 _CY	=	0x00d7
                     00D6   542 _AC	=	0x00d6
                     00D5   543 _F0	=	0x00d5
                     00D4   544 _RS1	=	0x00d4
                     00D3   545 _RS0	=	0x00d3
                     00D2   546 _OV	=	0x00d2
                     00D1   547 _F1	=	0x00d1
                     00D0   548 _P	=	0x00d0
                     00DF   549 _CF	=	0x00df
                     00DE   550 _CR	=	0x00de
                     00DD   551 _CCF5	=	0x00dd
                     00DC   552 _CCF4	=	0x00dc
                     00DB   553 _CCF3	=	0x00db
                     00DA   554 _CCF2	=	0x00da
                     00D9   555 _CCF1	=	0x00d9
                     00D8   556 _CCF0	=	0x00d8
                     00EF   557 _AD0EN	=	0x00ef
                     00EE   558 _BURSTEN	=	0x00ee
                     00ED   559 _AD0INT	=	0x00ed
                     00EC   560 _AD0BUSY	=	0x00ec
                     00EB   561 _AD0WINT	=	0x00eb
                     00EA   562 _AD0CM2	=	0x00ea
                     00E9   563 _AD0CM1	=	0x00e9
                     00E8   564 _AD0CM0	=	0x00e8
                     00FF   565 _SPIF0	=	0x00ff
                     00FE   566 _WCOL0	=	0x00fe
                     00FD   567 _MODF0	=	0x00fd
                     00FC   568 _RXOVRN0	=	0x00fc
                     00FB   569 _NSS0MD1	=	0x00fb
                     00FA   570 _NSS0MD0	=	0x00fa
                     00F9   571 _TXBMT0	=	0x00f9
                     00F8   572 _SPI0EN	=	0x00f8
                     0096   573 _LED_RED	=	0x0096
                     0095   574 _LED_GREEN	=	0x0095
                     0082   575 _PIN_CONFIG	=	0x0082
                     0083   576 _PIN_ENABLE	=	0x0083
                     0087   577 _IRQ	=	0x0087
                     0094   578 _NSS1	=	0x0094
                     00A6   579 _TDM_SYNC_PIN	=	0x00a6
                            580 ;--------------------------------------------------------
                            581 ; overlayable register banks
                            582 ;--------------------------------------------------------
                            583 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     584 	.ds 8
                            585 ;--------------------------------------------------------
                            586 ; internal ram data
                            587 ;--------------------------------------------------------
                            588 	.area DSEG    (DATA)
   0000                     589 _average_duty_cycle:
   0000                     590 	.ds 4
   0004                     591 _tdm_show_rssi_sloc0_1_0:
   0004                     592 	.ds 2
   0006                     593 _tdm_show_rssi_sloc1_1_0:
   0006                     594 	.ds 2
   0008                     595 _tdm_show_rssi_sloc2_1_0:
   0008                     596 	.ds 2
   000A                     597 _tdm_show_rssi_sloc3_1_0:
   000A                     598 	.ds 2
   000C                     599 _tdm_show_rssi_sloc4_1_0:
   000C                     600 	.ds 2
   000E                     601 _sync_tx_windows_old_state_1_155:
   000E                     602 	.ds 1
   000F                     603 _tdm_state_update_sloc0_1_0:
   000F                     604 	.ds 2
   0011                     605 _tdm_state_update_sloc1_1_0:
   0011                     606 	.ds 4
   0015                     607 _tdm_state_update_sloc2_1_0:
   0015                     608 	.ds 4
   0019                     609 _tdm_init_sloc0_1_0:
   0019                     610 	.ds 4
                            611 ;--------------------------------------------------------
                            612 ; overlayable items in internal ram 
                            613 ;--------------------------------------------------------
                            614 ;--------------------------------------------------------
                            615 ; indirectly addressable internal ram data
                            616 ;--------------------------------------------------------
                            617 	.area ISEG    (DATA)
                     00FF   618 __canary	=	0x00ff
                            619 ;--------------------------------------------------------
                            620 ; absolute internal ram data
                            621 ;--------------------------------------------------------
                            622 	.area IABS    (ABS,DATA)
                            623 	.area IABS    (ABS,DATA)
                            624 ;--------------------------------------------------------
                            625 ; bit data
                            626 ;--------------------------------------------------------
                            627 	.area BSEG    (BIT)
   0000                     628 _bonus_transmit:
   0000                     629 	.ds 1
   0001                     630 _transmit_yield:
   0001                     631 	.ds 1
   0002                     632 _blink_state:
   0002                     633 	.ds 1
   0003                     634 _received_packet:
   0003                     635 	.ds 1
   0004                     636 _duty_cycle_wait:
   0004                     637 	.ds 1
   0005                     638 _send_statistics:
   0005                     639 	.ds 1
   0006                     640 _send_at_command:
   0006                     641 	.ds 1
   0007                     642 _sync_tx_windows_sloc0_1_0:
   0007                     643 	.ds 1
   0008                     644 _tdm_state_update_sloc3_1_0:
   0008                     645 	.ds 1
   0009                     646 _tdm_serial_loop_sloc0_1_0:
   0009                     647 	.ds 1
                            648 ;--------------------------------------------------------
                            649 ; paged external ram data
                            650 ;--------------------------------------------------------
                            651 	.area PSEG    (PAG,XDATA)
   0000                     652 _tdm_state:
   0000                     653 	.ds 1
   0001                     654 _tdm_state_remaining:
   0001                     655 	.ds 2
   0003                     656 _tx_window_width:
   0003                     657 	.ds 2
   0005                     658 _max_data_packet_length:
   0005                     659 	.ds 1
   0006                     660 _silence_period:
   0006                     661 	.ds 2
   0008                     662 _packet_latency:
   0008                     663 	.ds 2
   000A                     664 _ticks_per_byte:
   000A                     665 	.ds 2
   000C                     666 _transmit_wait::
   000C                     667 	.ds 2
   000E                     668 _duty_cycle::
   000E                     669 	.ds 1
   000F                     670 _duty_cycle_offset::
   000F                     671 	.ds 1
   0010                     672 _transmitted_ticks:
   0010                     673 	.ds 2
   0012                     674 _lbt_rssi::
   0012                     675 	.ds 1
   0013                     676 _lbt_listen_time:
   0013                     677 	.ds 2
   0015                     678 _lbt_min_time:
   0015                     679 	.ds 2
   0017                     680 _lbt_rand:
   0017                     681 	.ds 2
   0019                     682 _test_display::
   0019                     683 	.ds 1
   001A                     684 _trailer::
   001A                     685 	.ds 2
   001C                     686 _remote_at_cmd:
   001C                     687 	.ds 17
   002D                     688 _sync_tx_windows_delta_2_162:
   002D                     689 	.ds 2
   002F                     690 _tdm_serial_loop_last_t_1_207:
   002F                     691 	.ds 2
   0031                     692 _tdm_serial_loop_last_link_update_1_207:
   0031                     693 	.ds 2
   0033                     694 _tdm_serial_loop_len_2_208:
   0033                     695 	.ds 1
   0034                     696 _tdm_serial_loop_tdelta_2_208:
   0034                     697 	.ds 2
                            698 ;--------------------------------------------------------
                            699 ; external ram data
                            700 ;--------------------------------------------------------
                            701 	.area XSEG    (XDATA)
   0000                     702 _pbuf::
   0000                     703 	.ds 252
   00FC                     704 _link_update_unlock_count_1_185:
   00FC                     705 	.ds 1
   00FD                     706 _link_update_temperature_count_1_185:
   00FD                     707 	.ds 1
                            708 ;--------------------------------------------------------
                            709 ; absolute external ram data
                            710 ;--------------------------------------------------------
                            711 	.area XABS    (ABS,XDATA)
                            712 ;--------------------------------------------------------
                            713 ; external initialized ram data
                            714 ;--------------------------------------------------------
                            715 	.area XISEG   (XDATA)
                            716 	.area HOME    (CODE)
                            717 	.area GSINIT0 (CODE)
                            718 	.area GSINIT1 (CODE)
                            719 	.area GSINIT2 (CODE)
                            720 	.area GSINIT3 (CODE)
                            721 	.area GSINIT4 (CODE)
                            722 	.area GSINIT5 (CODE)
                            723 	.area GSINIT  (CODE)
                            724 	.area GSFINAL (CODE)
                            725 	.area CSEG    (CODE)
                            726 ;--------------------------------------------------------
                            727 ; global & static initialisations
                            728 ;--------------------------------------------------------
                            729 	.area HOME    (CODE)
                            730 	.area GSINIT  (CODE)
                            731 	.area GSFINAL (CODE)
                            732 	.area GSINIT  (CODE)
                            733 ;--------------------------------------------------------
                            734 ; Home
                            735 ;--------------------------------------------------------
                            736 	.area HOME    (CODE)
                            737 	.area HOME    (CODE)
                            738 ;--------------------------------------------------------
                            739 ; code
                            740 ;--------------------------------------------------------
                            741 	.area CSEG    (CODE)
                            742 ;------------------------------------------------------------
                            743 ;Allocation info for local variables in function 'tdm_show_rssi'
                            744 ;------------------------------------------------------------
                            745 ;sloc0                     Allocated with name '_tdm_show_rssi_sloc0_1_0'
                            746 ;sloc1                     Allocated with name '_tdm_show_rssi_sloc1_1_0'
                            747 ;sloc2                     Allocated with name '_tdm_show_rssi_sloc2_1_0'
                            748 ;sloc3                     Allocated with name '_tdm_show_rssi_sloc3_1_0'
                            749 ;sloc4                     Allocated with name '_tdm_show_rssi_sloc4_1_0'
                            750 ;------------------------------------------------------------
                            751 ;	radio/tdm.c:152: tdm_show_rssi(void)
                            752 ;	-----------------------------------------
                            753 ;	 function tdm_show_rssi
                            754 ;	-----------------------------------------
   0000                     755 _tdm_show_rssi:
                     0007   756 	ar7 = 0x07
                     0006   757 	ar6 = 0x06
                     0005   758 	ar5 = 0x05
                     0004   759 	ar4 = 0x04
                     0003   760 	ar3 = 0x03
                     0002   761 	ar2 = 0x02
                     0001   762 	ar1 = 0x01
                     0000   763 	ar0 = 0x00
                            764 ;	radio/tdm.c:154: printf("L/R RSSI: %u/%u  L/R noise: %u/%u pkts: %u ",
   0000 78r02         [12]  765 	mov	r0,#(_statistics + 0x0002)
   0002 E2            [24]  766 	movx	a,@r0
   0003 FE            [12]  767 	mov	r6,a
   0004 08            [12]  768 	inc	r0
   0005 E2            [24]  769 	movx	a,@r0
   0006 FF            [12]  770 	mov	r7,a
   0007 78r01         [12]  771 	mov	r0,#(_remote_statistics + 0x0001)
   0009 E2            [24]  772 	movx	a,@r0
   000A FD            [12]  773 	mov	r5,a
   000B 7C 00         [12]  774 	mov	r4,#0x00
   000D 78r01         [12]  775 	mov	r0,#(_statistics + 0x0001)
   000F E2            [24]  776 	movx	a,@r0
   0010 FB            [12]  777 	mov	r3,a
   0011 8B*04         [24]  778 	mov	_tdm_show_rssi_sloc0_1_0,r3
   0013 75*05 00      [24]  779 	mov	(_tdm_show_rssi_sloc0_1_0 + 1),#0x00
   0016 78r00         [12]  780 	mov	r0,#_remote_statistics
   0018 E2            [24]  781 	movx	a,@r0
   0019 FB            [12]  782 	mov	r3,a
   001A 8B*06         [24]  783 	mov	_tdm_show_rssi_sloc1_1_0,r3
   001C 75*07 00      [24]  784 	mov	(_tdm_show_rssi_sloc1_1_0 + 1),#0x00
   001F 78r00         [12]  785 	mov	r0,#_statistics
   0021 E2            [24]  786 	movx	a,@r0
   0022 FB            [12]  787 	mov	r3,a
   0023 7A 00         [12]  788 	mov	r2,#0x00
   0025 C0 06         [24]  789 	push	ar6
   0027 C0 07         [24]  790 	push	ar7
   0029 C0 05         [24]  791 	push	ar5
   002B C0 04         [24]  792 	push	ar4
   002D C0*04         [24]  793 	push	_tdm_show_rssi_sloc0_1_0
   002F C0*05         [24]  794 	push	(_tdm_show_rssi_sloc0_1_0 + 1)
   0031 C0*06         [24]  795 	push	_tdm_show_rssi_sloc1_1_0
   0033 C0*07         [24]  796 	push	(_tdm_show_rssi_sloc1_1_0 + 1)
   0035 C0 03         [24]  797 	push	ar3
   0037 C0 02         [24]  798 	push	ar2
   0039 74r00         [12]  799 	mov	a,#__str_0
   003B C0 E0         [24]  800 	push	acc
   003D 74s00         [12]  801 	mov	a,#(__str_0 >> 8)
   003F C0 E0         [24]  802 	push	acc
   0041 74 80         [12]  803 	mov	a,#0x80
   0043 C0 E0         [24]  804 	push	acc
   0045 12r00r00      [24]  805 	lcall	_printfl
   0048 E5 81         [12]  806 	mov	a,sp
   004A 24 F3         [12]  807 	add	a,#0xf3
   004C F5 81         [12]  808 	mov	sp,a
                            809 ;	radio/tdm.c:160: printf(" txe=%u rxe=%u stx=%u srx=%u ecc=%u/%u temp=%d dco=%u\n",
   004E 78r0F         [12]  810 	mov	r0,#_duty_cycle_offset
   0050 E2            [24]  811 	movx	a,@r0
   0051 FE            [12]  812 	mov	r6,a
   0052 7F 00         [12]  813 	mov	r7,#0x00
   0054 C0 07         [24]  814 	push	ar7
   0056 C0 06         [24]  815 	push	ar6
   0058 12r00r00      [24]  816 	lcall	_radio_temperature
   005B AC 82         [24]  817 	mov	r4,dpl
   005D AD 83         [24]  818 	mov	r5,dph
   005F D0 06         [24]  819 	pop	ar6
   0061 D0 07         [24]  820 	pop	ar7
   0063 78r0A         [12]  821 	mov	r0,#(_errors + 0x000a)
   0065 E2            [24]  822 	movx	a,@r0
   0066 F5*06         [12]  823 	mov	_tdm_show_rssi_sloc1_1_0,a
   0068 08            [12]  824 	inc	r0
   0069 E2            [24]  825 	movx	a,@r0
   006A F5*07         [12]  826 	mov	(_tdm_show_rssi_sloc1_1_0 + 1),a
   006C 78r08         [12]  827 	mov	r0,#(_errors + 0x0008)
   006E E2            [24]  828 	movx	a,@r0
   006F F5*04         [12]  829 	mov	_tdm_show_rssi_sloc0_1_0,a
   0071 08            [12]  830 	inc	r0
   0072 E2            [24]  831 	movx	a,@r0
   0073 F5*05         [12]  832 	mov	(_tdm_show_rssi_sloc0_1_0 + 1),a
   0075 78r06         [12]  833 	mov	r0,#(_errors + 0x0006)
   0077 E2            [24]  834 	movx	a,@r0
   0078 F5*08         [12]  835 	mov	_tdm_show_rssi_sloc2_1_0,a
   007A 08            [12]  836 	inc	r0
   007B E2            [24]  837 	movx	a,@r0
   007C F5*09         [12]  838 	mov	(_tdm_show_rssi_sloc2_1_0 + 1),a
   007E 78r04         [12]  839 	mov	r0,#(_errors + 0x0004)
   0080 E2            [24]  840 	movx	a,@r0
   0081 F5*0A         [12]  841 	mov	_tdm_show_rssi_sloc3_1_0,a
   0083 08            [12]  842 	inc	r0
   0084 E2            [24]  843 	movx	a,@r0
   0085 F5*0B         [12]  844 	mov	(_tdm_show_rssi_sloc3_1_0 + 1),a
   0087 78r00         [12]  845 	mov	r0,#_errors
   0089 E2            [24]  846 	movx	a,@r0
   008A F5*0C         [12]  847 	mov	_tdm_show_rssi_sloc4_1_0,a
   008C 08            [12]  848 	inc	r0
   008D E2            [24]  849 	movx	a,@r0
   008E F5*0D         [12]  850 	mov	(_tdm_show_rssi_sloc4_1_0 + 1),a
   0090 78r02         [12]  851 	mov	r0,#(_errors + 0x0002)
   0092 E2            [24]  852 	movx	a,@r0
   0093 FA            [12]  853 	mov	r2,a
   0094 08            [12]  854 	inc	r0
   0095 E2            [24]  855 	movx	a,@r0
   0096 FB            [12]  856 	mov	r3,a
   0097 C0 06         [24]  857 	push	ar6
   0099 C0 07         [24]  858 	push	ar7
   009B C0 04         [24]  859 	push	ar4
   009D C0 05         [24]  860 	push	ar5
   009F C0*06         [24]  861 	push	_tdm_show_rssi_sloc1_1_0
   00A1 C0*07         [24]  862 	push	(_tdm_show_rssi_sloc1_1_0 + 1)
   00A3 C0*04         [24]  863 	push	_tdm_show_rssi_sloc0_1_0
   00A5 C0*05         [24]  864 	push	(_tdm_show_rssi_sloc0_1_0 + 1)
   00A7 C0*08         [24]  865 	push	_tdm_show_rssi_sloc2_1_0
   00A9 C0*09         [24]  866 	push	(_tdm_show_rssi_sloc2_1_0 + 1)
   00AB C0*0A         [24]  867 	push	_tdm_show_rssi_sloc3_1_0
   00AD C0*0B         [24]  868 	push	(_tdm_show_rssi_sloc3_1_0 + 1)
   00AF C0*0C         [24]  869 	push	_tdm_show_rssi_sloc4_1_0
   00B1 C0*0D         [24]  870 	push	(_tdm_show_rssi_sloc4_1_0 + 1)
   00B3 C0 02         [24]  871 	push	ar2
   00B5 C0 03         [24]  872 	push	ar3
   00B7 74r2C         [12]  873 	mov	a,#__str_1
   00B9 C0 E0         [24]  874 	push	acc
   00BB 74s00         [12]  875 	mov	a,#(__str_1 >> 8)
   00BD C0 E0         [24]  876 	push	acc
   00BF 74 80         [12]  877 	mov	a,#0x80
   00C1 C0 E0         [24]  878 	push	acc
   00C3 12r00r00      [24]  879 	lcall	_printfl
   00C6 E5 81         [12]  880 	mov	a,sp
   00C8 24 ED         [12]  881 	add	a,#0xed
   00CA F5 81         [12]  882 	mov	sp,a
                            883 ;	radio/tdm.c:169: statistics.receive_count = 0;
   00CC 78r02         [12]  884 	mov	r0,#(_statistics + 0x0002)
   00CE E4            [12]  885 	clr	a
   00CF F2            [24]  886 	movx	@r0,a
   00D0 08            [12]  887 	inc	r0
   00D1 F2            [24]  888 	movx	@r0,a
   00D2 22            [24]  889 	ret
                            890 ;------------------------------------------------------------
                            891 ;Allocation info for local variables in function 'display_test_output'
                            892 ;------------------------------------------------------------
                            893 ;	radio/tdm.c:175: display_test_output(void)
                            894 ;	-----------------------------------------
                            895 ;	 function display_test_output
                            896 ;	-----------------------------------------
   00D3                     897 _display_test_output:
                            898 ;	radio/tdm.c:177: if (test_display & AT_TEST_RSSI) {
   00D3 78r19         [12]  899 	mov	r0,#_test_display
   00D5 E2            [24]  900 	movx	a,@r0
   00D6 54 01         [12]  901 	anl	a,#0x01
   00D8 60 03         [24]  902 	jz	00103$
                            903 ;	radio/tdm.c:178: tdm_show_rssi();
   00DA 02r00r00      [24]  904 	ljmp	_tdm_show_rssi
   00DD                     905 00103$:
   00DD 22            [24]  906 	ret
                            907 ;------------------------------------------------------------
                            908 ;Allocation info for local variables in function 'flight_time_estimate'
                            909 ;------------------------------------------------------------
                            910 ;	radio/tdm.c:188: static uint16_t flight_time_estimate(__pdata uint8_t packet_len)
                            911 ;	-----------------------------------------
                            912 ;	 function flight_time_estimate
                            913 ;	-----------------------------------------
   00DE                     914 _flight_time_estimate:
   00DE AF 82         [24]  915 	mov	r7,dpl
                            916 ;	radio/tdm.c:190: return packet_latency + (packet_len * ticks_per_byte);
   00E0 7E 00         [12]  917 	mov	r6,#0x00
   00E2 78r0A         [12]  918 	mov	r0,#_ticks_per_byte
   00E4 90r00r00      [24]  919 	mov	dptr,#__mulint_PARM_2
   00E7 E2            [24]  920 	movx	a,@r0
   00E8 F0            [24]  921 	movx	@dptr,a
   00E9 08            [12]  922 	inc	r0
   00EA E2            [24]  923 	movx	a,@r0
   00EB A3            [24]  924 	inc	dptr
   00EC F0            [24]  925 	movx	@dptr,a
   00ED 8F 82         [24]  926 	mov	dpl,r7
   00EF 8E 83         [24]  927 	mov	dph,r6
   00F1 12r00r00      [24]  928 	lcall	__mulint
   00F4 AE 82         [24]  929 	mov	r6,dpl
   00F6 AF 83         [24]  930 	mov	r7,dph
   00F8 78r08         [12]  931 	mov	r0,#_packet_latency
   00FA E2            [24]  932 	movx	a,@r0
   00FB 2E            [12]  933 	add	a,r6
   00FC FE            [12]  934 	mov	r6,a
   00FD 08            [12]  935 	inc	r0
   00FE E2            [24]  936 	movx	a,@r0
   00FF 3F            [12]  937 	addc	a,r7
   0100 8E 82         [24]  938 	mov	dpl,r6
   0102 F5 83         [12]  939 	mov	dph,a
   0104 22            [24]  940 	ret
                            941 ;------------------------------------------------------------
                            942 ;Allocation info for local variables in function 'sync_tx_windows'
                            943 ;------------------------------------------------------------
                            944 ;old_state                 Allocated with name '_sync_tx_windows_old_state_1_155'
                            945 ;------------------------------------------------------------
                            946 ;	radio/tdm.c:204: sync_tx_windows(__pdata uint8_t packet_length)
                            947 ;	-----------------------------------------
                            948 ;	 function sync_tx_windows
                            949 ;	-----------------------------------------
   0105                     950 _sync_tx_windows:
   0105 AF 82         [24]  951 	mov	r7,dpl
                            952 ;	radio/tdm.c:206: __data enum tdm_state old_state = tdm_state;
   0107 78r00         [12]  953 	mov	r0,#_tdm_state
   0109 E2            [24]  954 	movx	a,@r0
   010A F5*0E         [12]  955 	mov	_sync_tx_windows_old_state_1_155,a
                            956 ;	radio/tdm.c:207: __pdata uint16_t old_remaining = tdm_state_remaining;
   010C 78r01         [12]  957 	mov	r0,#_tdm_state_remaining
   010E E2            [24]  958 	movx	a,@r0
   010F FC            [12]  959 	mov	r4,a
   0110 08            [12]  960 	inc	r0
   0111 E2            [24]  961 	movx	a,@r0
   0112 FD            [12]  962 	mov	r5,a
                            963 ;	radio/tdm.c:209: if (trailer.bonus) {
   0113 78r1B         [12]  964 	mov	r0,#(_trailer + 0x0001)
   0115 E2            [24]  965 	movx	a,@r0
   0116 30 E6 46      [24]  966 	jnb	acc.6,00109$
                            967 ;	radio/tdm.c:212: if (old_state == TDM_SILENCE1) {
   0119 74 01         [12]  968 	mov	a,#0x01
   011B B5*0E 10      [24]  969 	cjne	a,_sync_tx_windows_old_state_1_155,00106$
                            970 ;	radio/tdm.c:218: tdm_state_remaining = silence_period;
   011E 78r06         [12]  971 	mov	r0,#_silence_period
   0120 E2            [24]  972 	movx	a,@r0
   0121 FA            [12]  973 	mov	r2,a
   0122 08            [12]  974 	inc	r0
   0123 E2            [24]  975 	movx	a,@r0
   0124 FB            [12]  976 	mov	r3,a
   0125 78r01         [12]  977 	mov	r0,#_tdm_state_remaining
   0127 EA            [12]  978 	mov	a,r2
   0128 F2            [24]  979 	movx	@r0,a
   0129 08            [12]  980 	inc	r0
   012A EB            [12]  981 	mov	a,r3
   012B F2            [24]  982 	movx	@r0,a
   012C 80 46         [24]  983 	sjmp	00110$
   012E                     984 00106$:
                            985 ;	radio/tdm.c:219: } else if (old_state == TDM_RECEIVE || old_state == TDM_SILENCE2) {
   012E 74 02         [12]  986 	mov	a,#0x02
   0130 B5*0E 02      [24]  987 	cjne	a,_sync_tx_windows_old_state_1_155,00151$
   0133 80 05         [24]  988 	sjmp	00101$
   0135                     989 00151$:
   0135 74 03         [12]  990 	mov	a,#0x03
   0137 B5*0E 0F      [24]  991 	cjne	a,_sync_tx_windows_old_state_1_155,00102$
   013A                     992 00101$:
                            993 ;	radio/tdm.c:224: tdm_state = TDM_SILENCE2;
   013A 78r00         [12]  994 	mov	r0,#_tdm_state
   013C 74 03         [12]  995 	mov	a,#0x03
   013E F2            [24]  996 	movx	@r0,a
                            997 ;	radio/tdm.c:225: tdm_state_remaining = 1;
   013F 78r01         [12]  998 	mov	r0,#_tdm_state_remaining
   0141 74 01         [12]  999 	mov	a,#0x01
   0143 F2            [24] 1000 	movx	@r0,a
   0144 08            [12] 1001 	inc	r0
   0145 E4            [12] 1002 	clr	a
   0146 F2            [24] 1003 	movx	@r0,a
   0147 80 2B         [24] 1004 	sjmp	00110$
   0149                    1005 00102$:
                           1006 ;	radio/tdm.c:227: tdm_state = TDM_TRANSMIT;
   0149 78r00         [12] 1007 	mov	r0,#_tdm_state
   014B E4            [12] 1008 	clr	a
   014C F2            [24] 1009 	movx	@r0,a
                           1010 ;	radio/tdm.c:228: tdm_state_remaining = trailer.window;
   014D 78r1A         [12] 1011 	mov	r0,#_trailer
   014F E2            [24] 1012 	movx	a,@r0
   0150 FA            [12] 1013 	mov	r2,a
   0151 08            [12] 1014 	inc	r0
   0152 E2            [24] 1015 	movx	a,@r0
   0153 54 1F         [12] 1016 	anl	a,#0x1F
   0155 FB            [12] 1017 	mov	r3,a
   0156 78r01         [12] 1018 	mov	r0,#_tdm_state_remaining
   0158 EA            [12] 1019 	mov	a,r2
   0159 F2            [24] 1020 	movx	@r0,a
   015A 08            [12] 1021 	inc	r0
   015B EB            [12] 1022 	mov	a,r3
   015C F2            [24] 1023 	movx	@r0,a
   015D 80 15         [24] 1024 	sjmp	00110$
   015F                    1025 00109$:
                           1026 ;	radio/tdm.c:233: tdm_state = TDM_RECEIVE;
   015F 78r00         [12] 1027 	mov	r0,#_tdm_state
   0161 74 02         [12] 1028 	mov	a,#0x02
   0163 F2            [24] 1029 	movx	@r0,a
                           1030 ;	radio/tdm.c:234: tdm_state_remaining = trailer.window;
   0164 78r1A         [12] 1031 	mov	r0,#_trailer
   0166 E2            [24] 1032 	movx	a,@r0
   0167 FA            [12] 1033 	mov	r2,a
   0168 08            [12] 1034 	inc	r0
   0169 E2            [24] 1035 	movx	a,@r0
   016A 54 1F         [12] 1036 	anl	a,#0x1F
   016C FB            [12] 1037 	mov	r3,a
   016D 78r01         [12] 1038 	mov	r0,#_tdm_state_remaining
   016F EA            [12] 1039 	mov	a,r2
   0170 F2            [24] 1040 	movx	@r0,a
   0171 08            [12] 1041 	inc	r0
   0172 EB            [12] 1042 	mov	a,r3
   0173 F2            [24] 1043 	movx	@r0,a
   0174                    1044 00110$:
                           1045 ;	radio/tdm.c:239: bonus_transmit = (tdm_state == TDM_RECEIVE && packet_length==0);
   0174 78r00         [12] 1046 	mov	r0,#_tdm_state
   0176 E2            [24] 1047 	movx	a,@r0
   0177 B4 02 08      [24] 1048 	cjne	a,#0x02,00121$
   017A EF            [12] 1049 	mov	a,r7
   017B B4 01 00      [24] 1050 	cjne	a,#0x01,00156$
   017E                    1051 00156$:
   017E 92*07         [24] 1052 	mov	_sync_tx_windows_sloc0_1_0,c
   0180 40 04         [24] 1053 	jc	00122$
   0182                    1054 00121$:
   0182 C2*07         [12] 1055 	clr	_sync_tx_windows_sloc0_1_0
   0184 80 02         [24] 1056 	sjmp	00123$
   0186                    1057 00122$:
   0186 D2*07         [12] 1058 	setb	_sync_tx_windows_sloc0_1_0
   0188                    1059 00123$:
   0188 A2*07         [12] 1060 	mov	c,_sync_tx_windows_sloc0_1_0
   018A 92*00         [24] 1061 	mov	_bonus_transmit,c
                           1062 ;	radio/tdm.c:242: if (tdm_state != TDM_TRANSMIT) {
   018C 78r00         [12] 1063 	mov	r0,#_tdm_state
   018E E2            [24] 1064 	movx	a,@r0
   018F 60 02         [24] 1065 	jz	00112$
                           1066 ;	radio/tdm.c:243: transmit_yield = 0;
   0191 C2*01         [12] 1067 	clr	_transmit_yield
   0193                    1068 00112$:
                           1069 ;	radio/tdm.c:246: if (at_testmode & AT_TEST_TDM) {
   0193 78r00         [12] 1070 	mov	r0,#_at_testmode
   0195 E2            [24] 1071 	movx	a,@r0
   0196 54 02         [12] 1072 	anl	a,#0x02
   0198 70 01         [24] 1073 	jnz	00159$
   019A 22            [24] 1074 	ret
   019B                    1075 00159$:
                           1076 ;	radio/tdm.c:248: delta = old_remaining - tdm_state_remaining;
   019B 78r01         [12] 1077 	mov	r0,#_tdm_state_remaining
   019D 79r2D         [12] 1078 	mov	r1,#_sync_tx_windows_delta_2_162
   019F D3            [12] 1079 	setb	c
   01A0 E2            [24] 1080 	movx	a,@r0
   01A1 9C            [12] 1081 	subb	a,r4
   01A2 F4            [12] 1082 	cpl	a
   01A3 B3            [12] 1083 	cpl	c
   01A4 F3            [24] 1084 	movx	@r1,a
   01A5 B3            [12] 1085 	cpl	c
   01A6 08            [12] 1086 	inc	r0
   01A7 E2            [24] 1087 	movx	a,@r0
   01A8 9D            [12] 1088 	subb	a,r5
   01A9 F4            [12] 1089 	cpl	a
   01AA 09            [12] 1090 	inc	r1
   01AB F3            [24] 1091 	movx	@r1,a
                           1092 ;	radio/tdm.c:249: if (old_state != tdm_state ||
   01AC 78r00         [12] 1093 	mov	r0,#_tdm_state
   01AE E2            [24] 1094 	movx	a,@r0
   01AF B5*0E 6E      [24] 1095 	cjne	a,_sync_tx_windows_old_state_1_155,00113$
                           1096 ;	radio/tdm.c:250: delta > (int16_t)packet_latency/2 ||
   01B2 C0 07         [24] 1097 	push	ar7
   01B4 78r08         [12] 1098 	mov	r0,#_packet_latency
   01B6 E2            [24] 1099 	movx	a,@r0
   01B7 FA            [12] 1100 	mov	r2,a
   01B8 08            [12] 1101 	inc	r0
   01B9 E2            [24] 1102 	movx	a,@r0
   01BA FB            [12] 1103 	mov	r3,a
   01BB 90r00r00      [24] 1104 	mov	dptr,#__divsint_PARM_2
   01BE 74 02         [12] 1105 	mov	a,#0x02
   01C0 F0            [24] 1106 	movx	@dptr,a
   01C1 E4            [12] 1107 	clr	a
   01C2 A3            [24] 1108 	inc	dptr
   01C3 F0            [24] 1109 	movx	@dptr,a
   01C4 8A 82         [24] 1110 	mov	dpl,r2
   01C6 8B 83         [24] 1111 	mov	dph,r3
   01C8 C0 03         [24] 1112 	push	ar3
   01CA C0 02         [24] 1113 	push	ar2
   01CC 12r00r00      [24] 1114 	lcall	__divsint
   01CF AE 82         [24] 1115 	mov	r6,dpl
   01D1 AF 83         [24] 1116 	mov	r7,dph
   01D3 D0 02         [24] 1117 	pop	ar2
   01D5 D0 03         [24] 1118 	pop	ar3
   01D7 78r2D         [12] 1119 	mov	r0,#_sync_tx_windows_delta_2_162
   01D9 C3            [12] 1120 	clr	c
   01DA E2            [24] 1121 	movx	a,@r0
   01DB F5 F0         [12] 1122 	mov	b,a
   01DD EE            [12] 1123 	mov	a,r6
   01DE 95 F0         [12] 1124 	subb	a,b
   01E0 08            [12] 1125 	inc	r0
   01E1 E2            [24] 1126 	movx	a,@r0
   01E2 F5 F0         [12] 1127 	mov	b,a
   01E4 EF            [12] 1128 	mov	a,r7
   01E5 64 80         [12] 1129 	xrl	a,#0x80
   01E7 63 F0 80      [24] 1130 	xrl	b,#0x80
   01EA 95 F0         [12] 1131 	subb	a,b
   01EC D0 07         [24] 1132 	pop	ar7
                           1133 ;	radio/tdm.c:251: delta < -(int16_t)packet_latency/2) {
   01EE 40 30         [24] 1134 	jc	00113$
   01F0 E4            [12] 1135 	clr	a
   01F1 9A            [12] 1136 	subb	a,r2
   01F2 FA            [12] 1137 	mov	r2,a
   01F3 E4            [12] 1138 	clr	a
   01F4 9B            [12] 1139 	subb	a,r3
   01F5 FB            [12] 1140 	mov	r3,a
   01F6 90r00r00      [24] 1141 	mov	dptr,#__divsint_PARM_2
   01F9 74 02         [12] 1142 	mov	a,#0x02
   01FB F0            [24] 1143 	movx	@dptr,a
   01FC E4            [12] 1144 	clr	a
   01FD A3            [24] 1145 	inc	dptr
   01FE F0            [24] 1146 	movx	@dptr,a
   01FF 8A 82         [24] 1147 	mov	dpl,r2
   0201 8B 83         [24] 1148 	mov	dph,r3
   0203 C0 07         [24] 1149 	push	ar7
   0205 12r00r00      [24] 1150 	lcall	__divsint
   0208 AB 82         [24] 1151 	mov	r3,dpl
   020A AE 83         [24] 1152 	mov	r6,dph
   020C D0 07         [24] 1153 	pop	ar7
   020E 78r2D         [12] 1154 	mov	r0,#_sync_tx_windows_delta_2_162
   0210 C3            [12] 1155 	clr	c
   0211 E2            [24] 1156 	movx	a,@r0
   0212 9B            [12] 1157 	subb	a,r3
   0213 08            [12] 1158 	inc	r0
   0214 E2            [24] 1159 	movx	a,@r0
   0215 64 80         [12] 1160 	xrl	a,#0x80
   0217 8E F0         [24] 1161 	mov	b,r6
   0219 63 F0 80      [24] 1162 	xrl	b,#0x80
   021C 95 F0         [12] 1163 	subb	a,b
   021E 50 4B         [24] 1164 	jnc	00119$
   0220                    1165 00113$:
                           1166 ;	radio/tdm.c:252: printf("TDM: %u/%u len=%u ",
   0220 7E 00         [12] 1167 	mov	r6,#0x00
   0222 78r00         [12] 1168 	mov	r0,#_tdm_state
   0224 E2            [24] 1169 	movx	a,@r0
   0225 FA            [12] 1170 	mov	r2,a
   0226 7B 00         [12] 1171 	mov	r3,#0x00
   0228 AC*0E         [24] 1172 	mov	r4,_sync_tx_windows_old_state_1_155
   022A 7D 00         [12] 1173 	mov	r5,#0x00
   022C C0 07         [24] 1174 	push	ar7
   022E C0 06         [24] 1175 	push	ar6
   0230 C0 02         [24] 1176 	push	ar2
   0232 C0 03         [24] 1177 	push	ar3
   0234 C0 04         [24] 1178 	push	ar4
   0236 C0 05         [24] 1179 	push	ar5
   0238 74r63         [12] 1180 	mov	a,#__str_2
   023A C0 E0         [24] 1181 	push	acc
   023C 74s00         [12] 1182 	mov	a,#(__str_2 >> 8)
   023E C0 E0         [24] 1183 	push	acc
   0240 74 80         [12] 1184 	mov	a,#0x80
   0242 C0 E0         [24] 1185 	push	acc
   0244 12r00r00      [24] 1186 	lcall	_printfl
   0247 E5 81         [12] 1187 	mov	a,sp
   0249 24 F7         [12] 1188 	add	a,#0xf7
   024B F5 81         [12] 1189 	mov	sp,a
                           1190 ;	radio/tdm.c:256: printf(" delta: %d\n",
   024D 78r2D         [12] 1191 	mov	r0,#_sync_tx_windows_delta_2_162
   024F E2            [24] 1192 	movx	a,@r0
   0250 C0 E0         [24] 1193 	push	acc
   0252 08            [12] 1194 	inc	r0
   0253 E2            [24] 1195 	movx	a,@r0
   0254 C0 E0         [24] 1196 	push	acc
   0256 74r76         [12] 1197 	mov	a,#__str_3
   0258 C0 E0         [24] 1198 	push	acc
   025A 74s00         [12] 1199 	mov	a,#(__str_3 >> 8)
   025C C0 E0         [24] 1200 	push	acc
   025E 74 80         [12] 1201 	mov	a,#0x80
   0260 C0 E0         [24] 1202 	push	acc
   0262 12r00r00      [24] 1203 	lcall	_printfl
   0265 E5 81         [12] 1204 	mov	a,sp
   0267 24 FB         [12] 1205 	add	a,#0xfb
   0269 F5 81         [12] 1206 	mov	sp,a
   026B                    1207 00119$:
   026B 22            [24] 1208 	ret
                           1209 ;------------------------------------------------------------
                           1210 ;Allocation info for local variables in function 'tdm_state_update'
                           1211 ;------------------------------------------------------------
                           1212 ;sloc0                     Allocated with name '_tdm_state_update_sloc0_1_0'
                           1213 ;sloc1                     Allocated with name '_tdm_state_update_sloc1_1_0'
                           1214 ;sloc2                     Allocated with name '_tdm_state_update_sloc2_1_0'
                           1215 ;------------------------------------------------------------
                           1216 ;	radio/tdm.c:265: tdm_state_update(__pdata uint16_t tdelta)
                           1217 ;	-----------------------------------------
                           1218 ;	 function tdm_state_update
                           1219 ;	-----------------------------------------
   026C                    1220 _tdm_state_update:
   026C AE 82         [24] 1221 	mov	r6,dpl
   026E AF 83         [24] 1222 	mov	r7,dph
                           1223 ;	radio/tdm.c:269: if (tdelta > transmit_wait) {
   0270 78r0C         [12] 1224 	mov	r0,#_transmit_wait
   0272 C3            [12] 1225 	clr	c
   0273 E2            [24] 1226 	movx	a,@r0
   0274 9E            [12] 1227 	subb	a,r6
   0275 08            [12] 1228 	inc	r0
   0276 E2            [24] 1229 	movx	a,@r0
   0277 9F            [12] 1230 	subb	a,r7
   0278 50 08         [24] 1231 	jnc	00102$
                           1232 ;	radio/tdm.c:270: transmit_wait = 0;
   027A 78r0C         [12] 1233 	mov	r0,#_transmit_wait
   027C E4            [12] 1234 	clr	a
   027D F2            [24] 1235 	movx	@r0,a
   027E 08            [12] 1236 	inc	r0
   027F F2            [24] 1237 	movx	@r0,a
   0280 80 0A         [24] 1238 	sjmp	00116$
   0282                    1239 00102$:
                           1240 ;	radio/tdm.c:272: transmit_wait -= tdelta;
   0282 78r0C         [12] 1241 	mov	r0,#_transmit_wait
   0284 E2            [24] 1242 	movx	a,@r0
   0285 C3            [12] 1243 	clr	c
   0286 9E            [12] 1244 	subb	a,r6
   0287 F2            [24] 1245 	movx	@r0,a
   0288 08            [12] 1246 	inc	r0
   0289 E2            [24] 1247 	movx	a,@r0
   028A 9F            [12] 1248 	subb	a,r7
   028B F2            [24] 1249 	movx	@r0,a
                           1250 ;	radio/tdm.c:276: while (tdelta >= tdm_state_remaining) {
   028C                    1251 00116$:
   028C 78r01         [12] 1252 	mov	r0,#_tdm_state_remaining
   028E C3            [12] 1253 	clr	c
   028F E2            [24] 1254 	movx	a,@r0
   0290 F5 F0         [12] 1255 	mov	b,a
   0292 EE            [12] 1256 	mov	a,r6
   0293 95 F0         [12] 1257 	subb	a,b
   0295 08            [12] 1258 	inc	r0
   0296 E2            [24] 1259 	movx	a,@r0
   0297 F5 F0         [12] 1260 	mov	b,a
   0299 EF            [12] 1261 	mov	a,r7
   029A 95 F0         [12] 1262 	subb	a,b
   029C 50 03         [24] 1263 	jnc	00146$
   029E 02r04rD3      [24] 1264 	ljmp	00118$
   02A1                    1265 00146$:
                           1266 ;	radio/tdm.c:278: tdm_state = (tdm_state+1) % 4;
   02A1 78r00         [12] 1267 	mov	r0,#_tdm_state
   02A3 E2            [24] 1268 	movx	a,@r0
   02A4 FC            [12] 1269 	mov	r4,a
   02A5 7D 00         [12] 1270 	mov	r5,#0x00
   02A7 0C            [12] 1271 	inc	r4
   02A8 BC 00 01      [24] 1272 	cjne	r4,#0x00,00147$
   02AB 0D            [12] 1273 	inc	r5
   02AC                    1274 00147$:
   02AC 90r00r00      [24] 1275 	mov	dptr,#__modsint_PARM_2
   02AF 74 04         [12] 1276 	mov	a,#0x04
   02B1 F0            [24] 1277 	movx	@dptr,a
   02B2 E4            [12] 1278 	clr	a
   02B3 A3            [24] 1279 	inc	dptr
   02B4 F0            [24] 1280 	movx	@dptr,a
   02B5 8C 82         [24] 1281 	mov	dpl,r4
   02B7 8D 83         [24] 1282 	mov	dph,r5
   02B9 C0 07         [24] 1283 	push	ar7
   02BB C0 06         [24] 1284 	push	ar6
   02BD 12r00r00      [24] 1285 	lcall	__modsint
   02C0 AC 82         [24] 1286 	mov	r4,dpl
   02C2 AD 83         [24] 1287 	mov	r5,dph
   02C4 D0 06         [24] 1288 	pop	ar6
   02C6 D0 07         [24] 1289 	pop	ar7
   02C8 78r00         [12] 1290 	mov	r0,#_tdm_state
   02CA EC            [12] 1291 	mov	a,r4
   02CB F2            [24] 1292 	movx	@r0,a
                           1293 ;	radio/tdm.c:281: tdelta -= tdm_state_remaining;
   02CC 78r01         [12] 1294 	mov	r0,#_tdm_state_remaining
   02CE D3            [12] 1295 	setb	c
   02CF E2            [24] 1296 	movx	a,@r0
   02D0 9E            [12] 1297 	subb	a,r6
   02D1 F4            [12] 1298 	cpl	a
   02D2 B3            [12] 1299 	cpl	c
   02D3 FE            [12] 1300 	mov	r6,a
   02D4 B3            [12] 1301 	cpl	c
   02D5 08            [12] 1302 	inc	r0
   02D6 E2            [24] 1303 	movx	a,@r0
   02D7 9F            [12] 1304 	subb	a,r7
   02D8 F4            [12] 1305 	cpl	a
   02D9 FF            [12] 1306 	mov	r7,a
                           1307 ;	radio/tdm.c:283: if (tdm_state == TDM_TRANSMIT || tdm_state == TDM_RECEIVE) {
   02DA 78r00         [12] 1308 	mov	r0,#_tdm_state
   02DC E2            [24] 1309 	movx	a,@r0
   02DD 60 06         [24] 1310 	jz	00104$
   02DF 78r00         [12] 1311 	mov	r0,#_tdm_state
   02E1 E2            [24] 1312 	movx	a,@r0
   02E2 B4 02 10      [24] 1313 	cjne	a,#0x02,00105$
   02E5                    1314 00104$:
                           1315 ;	radio/tdm.c:284: tdm_state_remaining = tx_window_width;
   02E5 78r03         [12] 1316 	mov	r0,#_tx_window_width
   02E7 E2            [24] 1317 	movx	a,@r0
   02E8 FC            [12] 1318 	mov	r4,a
   02E9 08            [12] 1319 	inc	r0
   02EA E2            [24] 1320 	movx	a,@r0
   02EB FD            [12] 1321 	mov	r5,a
   02EC 78r01         [12] 1322 	mov	r0,#_tdm_state_remaining
   02EE EC            [12] 1323 	mov	a,r4
   02EF F2            [24] 1324 	movx	@r0,a
   02F0 08            [12] 1325 	inc	r0
   02F1 ED            [12] 1326 	mov	a,r5
   02F2 F2            [24] 1327 	movx	@r0,a
   02F3 80 0E         [24] 1328 	sjmp	00106$
   02F5                    1329 00105$:
                           1330 ;	radio/tdm.c:286: tdm_state_remaining = silence_period;
   02F5 78r06         [12] 1331 	mov	r0,#_silence_period
   02F7 E2            [24] 1332 	movx	a,@r0
   02F8 FC            [12] 1333 	mov	r4,a
   02F9 08            [12] 1334 	inc	r0
   02FA E2            [24] 1335 	movx	a,@r0
   02FB FD            [12] 1336 	mov	r5,a
   02FC 78r01         [12] 1337 	mov	r0,#_tdm_state_remaining
   02FE EC            [12] 1338 	mov	a,r4
   02FF F2            [24] 1339 	movx	@r0,a
   0300 08            [12] 1340 	inc	r0
   0301 ED            [12] 1341 	mov	a,r5
   0302 F2            [24] 1342 	movx	@r0,a
   0303                    1343 00106$:
                           1344 ;	radio/tdm.c:292: if (tdm_state == TDM_TRANSMIT || tdm_state == TDM_SILENCE1) {
   0303 78r00         [12] 1345 	mov	r0,#_tdm_state
   0305 E2            [24] 1346 	movx	a,@r0
   0306 60 06         [24] 1347 	jz	00110$
   0308 78r00         [12] 1348 	mov	r0,#_tdm_state
   030A E2            [24] 1349 	movx	a,@r0
   030B B4 01 26      [24] 1350 	cjne	a,#0x01,00111$
   030E                    1351 00110$:
                           1352 ;	radio/tdm.c:293: fhop_window_change();
   030E C0 07         [24] 1353 	push	ar7
   0310 C0 06         [24] 1354 	push	ar6
   0312 12r00r00      [24] 1355 	lcall	_fhop_window_change
                           1356 ;	radio/tdm.c:294: radio_receiver_on();
   0315 12r00r00      [24] 1357 	lcall	_radio_receiver_on
   0318 D0 06         [24] 1358 	pop	ar6
   031A D0 07         [24] 1359 	pop	ar7
                           1360 ;	radio/tdm.c:296: if (num_fh_channels > 1) {
   031C 78r00         [12] 1361 	mov	r0,#_num_fh_channels
   031E C3            [12] 1362 	clr	c
   031F E2            [24] 1363 	movx	a,@r0
   0320 F5 F0         [12] 1364 	mov	b,a
   0322 74 01         [12] 1365 	mov	a,#0x01
   0324 95 F0         [12] 1366 	subb	a,b
   0326 50 0C         [24] 1367 	jnc	00111$
                           1368 ;	radio/tdm.c:298: lbt_listen_time = 0;
   0328 78r13         [12] 1369 	mov	r0,#_lbt_listen_time
   032A E4            [12] 1370 	clr	a
   032B F2            [24] 1371 	movx	@r0,a
   032C 08            [12] 1372 	inc	r0
   032D F2            [24] 1373 	movx	@r0,a
                           1374 ;	radio/tdm.c:299: lbt_rand = 0;
   032E 78r17         [12] 1375 	mov	r0,#_lbt_rand
   0330 E4            [12] 1376 	clr	a
   0331 F2            [24] 1377 	movx	@r0,a
   0332 08            [12] 1378 	inc	r0
   0333 F2            [24] 1379 	movx	@r0,a
   0334                    1380 00111$:
                           1381 ;	radio/tdm.c:303: if (tdm_state == TDM_TRANSMIT && (duty_cycle - duty_cycle_offset) != 100) {
   0334 78r00         [12] 1382 	mov	r0,#_tdm_state
   0336 E2            [24] 1383 	movx	a,@r0
   0337 60 03         [24] 1384 	jz	00155$
   0339 02r04rC6      [24] 1385 	ljmp	00114$
   033C                    1386 00155$:
   033C C0 06         [24] 1387 	push	ar6
   033E C0 07         [24] 1388 	push	ar7
   0340 78r0E         [12] 1389 	mov	r0,#_duty_cycle
   0342 E2            [24] 1390 	movx	a,@r0
   0343 FC            [12] 1391 	mov	r4,a
   0344 7D 00         [12] 1392 	mov	r5,#0x00
   0346 78r0F         [12] 1393 	mov	r0,#_duty_cycle_offset
   0348 E2            [24] 1394 	movx	a,@r0
   0349 F5*0F         [12] 1395 	mov	_tdm_state_update_sloc0_1_0,a
   034B 75*10 00      [24] 1396 	mov	(_tdm_state_update_sloc0_1_0 + 1),#0x00
   034E EC            [12] 1397 	mov	a,r4
   034F C3            [12] 1398 	clr	c
   0350 95*0F         [12] 1399 	subb	a,_tdm_state_update_sloc0_1_0
   0352 FE            [12] 1400 	mov	r6,a
   0353 ED            [12] 1401 	mov	a,r5
   0354 95*10         [12] 1402 	subb	a,(_tdm_state_update_sloc0_1_0 + 1)
   0356 FF            [12] 1403 	mov	r7,a
   0357 BE 64 0A      [24] 1404 	cjne	r6,#0x64,00156$
   035A BF 00 07      [24] 1405 	cjne	r7,#0x00,00156$
   035D D0 07         [24] 1406 	pop	ar7
   035F D0 06         [24] 1407 	pop	ar6
   0361 02r04rC6      [24] 1408 	ljmp	00114$
   0364                    1409 00156$:
   0364 D0 07         [24] 1410 	pop	ar7
   0366 D0 06         [24] 1411 	pop	ar6
                           1412 ;	radio/tdm.c:305: average_duty_cycle = (0.95*average_duty_cycle) + (0.05*(100.0*transmitted_ticks)/(2*(silence_period+tx_window_width)));
   0368 C0 06         [24] 1413 	push	ar6
   036A C0 07         [24] 1414 	push	ar7
   036C C0 07         [24] 1415 	push	ar7
   036E C0 06         [24] 1416 	push	ar6
   0370 C0 05         [24] 1417 	push	ar5
   0372 C0 04         [24] 1418 	push	ar4
   0374 C0*00         [24] 1419 	push	_average_duty_cycle
   0376 C0*01         [24] 1420 	push	(_average_duty_cycle + 1)
   0378 C0*02         [24] 1421 	push	(_average_duty_cycle + 2)
   037A C0*03         [24] 1422 	push	(_average_duty_cycle + 3)
   037C 90 33 33      [24] 1423 	mov	dptr,#0x3333
   037F 75 F0 73      [24] 1424 	mov	b,#0x73
   0382 74 3F         [12] 1425 	mov	a,#0x3F
   0384 12r00r00      [24] 1426 	lcall	___fsmul
   0387 85 82*11      [24] 1427 	mov	_tdm_state_update_sloc1_1_0,dpl
   038A 85 83*12      [24] 1428 	mov	(_tdm_state_update_sloc1_1_0 + 1),dph
   038D 85 F0*13      [24] 1429 	mov	(_tdm_state_update_sloc1_1_0 + 2),b
   0390 F5*14         [12] 1430 	mov	(_tdm_state_update_sloc1_1_0 + 3),a
   0392 E5 81         [12] 1431 	mov	a,sp
   0394 24 FC         [12] 1432 	add	a,#0xfc
   0396 F5 81         [12] 1433 	mov	sp,a
   0398 D0 04         [24] 1434 	pop	ar4
   039A D0 05         [24] 1435 	pop	ar5
   039C D0 06         [24] 1436 	pop	ar6
   039E D0 07         [24] 1437 	pop	ar7
   03A0 78r10         [12] 1438 	mov	r0,#_transmitted_ticks
   03A2 E2            [24] 1439 	movx	a,@r0
   03A3 F5 82         [12] 1440 	mov	dpl,a
   03A5 08            [12] 1441 	inc	r0
   03A6 E2            [24] 1442 	movx	a,@r0
   03A7 F5 83         [12] 1443 	mov	dph,a
   03A9 C0 05         [24] 1444 	push	ar5
   03AB C0 04         [24] 1445 	push	ar4
   03AD 12r00r00      [24] 1446 	lcall	___uint2fs
   03B0 AA 82         [24] 1447 	mov	r2,dpl
   03B2 AB 83         [24] 1448 	mov	r3,dph
   03B4 AE F0         [24] 1449 	mov	r6,b
   03B6 FF            [12] 1450 	mov	r7,a
   03B7 D0 04         [24] 1451 	pop	ar4
   03B9 D0 05         [24] 1452 	pop	ar5
   03BB C0 07         [24] 1453 	push	ar7
   03BD C0 06         [24] 1454 	push	ar6
   03BF C0 05         [24] 1455 	push	ar5
   03C1 C0 04         [24] 1456 	push	ar4
   03C3 C0 02         [24] 1457 	push	ar2
   03C5 C0 03         [24] 1458 	push	ar3
   03C7 C0 06         [24] 1459 	push	ar6
   03C9 C0 07         [24] 1460 	push	ar7
   03CB 90 00 00      [24] 1461 	mov	dptr,#0x0000
   03CE 75 F0 A0      [24] 1462 	mov	b,#0xA0
   03D1 74 40         [12] 1463 	mov	a,#0x40
   03D3 12r00r00      [24] 1464 	lcall	___fsmul
   03D6 85 82*15      [24] 1465 	mov	_tdm_state_update_sloc2_1_0,dpl
   03D9 85 83*16      [24] 1466 	mov	(_tdm_state_update_sloc2_1_0 + 1),dph
   03DC 85 F0*17      [24] 1467 	mov	(_tdm_state_update_sloc2_1_0 + 2),b
   03DF F5*18         [12] 1468 	mov	(_tdm_state_update_sloc2_1_0 + 3),a
   03E1 E5 81         [12] 1469 	mov	a,sp
   03E3 24 FC         [12] 1470 	add	a,#0xfc
   03E5 F5 81         [12] 1471 	mov	sp,a
   03E7 D0 04         [24] 1472 	pop	ar4
   03E9 D0 05         [24] 1473 	pop	ar5
   03EB D0 06         [24] 1474 	pop	ar6
   03ED D0 07         [24] 1475 	pop	ar7
   03EF 78r06         [12] 1476 	mov	r0,#_silence_period
   03F1 79r03         [12] 1477 	mov	r1,#_tx_window_width
   03F3 E3            [24] 1478 	movx	a,@r1
   03F4 C5 F0         [12] 1479 	xch	a,b
   03F6 E2            [24] 1480 	movx	a,@r0
   03F7 25 F0         [12] 1481 	add	a,b
   03F9 FE            [12] 1482 	mov	r6,a
   03FA 09            [12] 1483 	inc	r1
   03FB E3            [24] 1484 	movx	a,@r1
   03FC C5 F0         [12] 1485 	xch	a,b
   03FE 08            [12] 1486 	inc	r0
   03FF E2            [24] 1487 	movx	a,@r0
   0400 35 F0         [12] 1488 	addc	a,b
   0402 CE            [12] 1489 	xch	a,r6
   0403 25 E0         [12] 1490 	add	a,acc
   0405 CE            [12] 1491 	xch	a,r6
   0406 33            [12] 1492 	rlc	a
   0407 FF            [12] 1493 	mov	r7,a
   0408 8E 82         [24] 1494 	mov	dpl,r6
   040A 8F 83         [24] 1495 	mov	dph,r7
   040C C0 05         [24] 1496 	push	ar5
   040E C0 04         [24] 1497 	push	ar4
   0410 12r00r00      [24] 1498 	lcall	___uint2fs
   0413 AA 82         [24] 1499 	mov	r2,dpl
   0415 AB 83         [24] 1500 	mov	r3,dph
   0417 AE F0         [24] 1501 	mov	r6,b
   0419 FF            [12] 1502 	mov	r7,a
   041A C0 02         [24] 1503 	push	ar2
   041C C0 03         [24] 1504 	push	ar3
   041E C0 06         [24] 1505 	push	ar6
   0420 C0 07         [24] 1506 	push	ar7
   0422 85*15 82      [24] 1507 	mov	dpl,_tdm_state_update_sloc2_1_0
   0425 85*16 83      [24] 1508 	mov	dph,(_tdm_state_update_sloc2_1_0 + 1)
   0428 85*17 F0      [24] 1509 	mov	b,(_tdm_state_update_sloc2_1_0 + 2)
   042B E5*18         [12] 1510 	mov	a,(_tdm_state_update_sloc2_1_0 + 3)
   042D 12r00r00      [24] 1511 	lcall	___fsdiv
   0430 AA 82         [24] 1512 	mov	r2,dpl
   0432 AB 83         [24] 1513 	mov	r3,dph
   0434 AE F0         [24] 1514 	mov	r6,b
   0436 FF            [12] 1515 	mov	r7,a
   0437 E5 81         [12] 1516 	mov	a,sp
   0439 24 FC         [12] 1517 	add	a,#0xfc
   043B F5 81         [12] 1518 	mov	sp,a
   043D D0 04         [24] 1519 	pop	ar4
   043F D0 05         [24] 1520 	pop	ar5
   0441 C0 07         [24] 1521 	push	ar7
   0443 C0 06         [24] 1522 	push	ar6
   0445 C0 05         [24] 1523 	push	ar5
   0447 C0 04         [24] 1524 	push	ar4
   0449 C0 02         [24] 1525 	push	ar2
   044B C0 03         [24] 1526 	push	ar3
   044D C0 06         [24] 1527 	push	ar6
   044F C0 07         [24] 1528 	push	ar7
   0451 85*11 82      [24] 1529 	mov	dpl,_tdm_state_update_sloc1_1_0
   0454 85*12 83      [24] 1530 	mov	dph,(_tdm_state_update_sloc1_1_0 + 1)
   0457 85*13 F0      [24] 1531 	mov	b,(_tdm_state_update_sloc1_1_0 + 2)
   045A E5*14         [12] 1532 	mov	a,(_tdm_state_update_sloc1_1_0 + 3)
   045C 12r00r00      [24] 1533 	lcall	___fsadd
   045F 85 82*00      [24] 1534 	mov	_average_duty_cycle,dpl
   0462 85 83*01      [24] 1535 	mov	(_average_duty_cycle + 1),dph
   0465 85 F0*02      [24] 1536 	mov	(_average_duty_cycle + 2),b
   0468 F5*03         [12] 1537 	mov	(_average_duty_cycle + 3),a
   046A E5 81         [12] 1538 	mov	a,sp
   046C 24 FC         [12] 1539 	add	a,#0xfc
   046E F5 81         [12] 1540 	mov	sp,a
   0470 D0 04         [24] 1541 	pop	ar4
   0472 D0 05         [24] 1542 	pop	ar5
   0474 D0 06         [24] 1543 	pop	ar6
   0476 D0 07         [24] 1544 	pop	ar7
                           1545 ;	radio/tdm.c:306: transmitted_ticks = 0;
   0478 78r10         [12] 1546 	mov	r0,#_transmitted_ticks
   047A E4            [12] 1547 	clr	a
   047B F2            [24] 1548 	movx	@r0,a
   047C 08            [12] 1549 	inc	r0
   047D F2            [24] 1550 	movx	@r0,a
                           1551 ;	radio/tdm.c:307: duty_cycle_wait = (average_duty_cycle >= (duty_cycle - duty_cycle_offset));
   047E EC            [12] 1552 	mov	a,r4
   047F C3            [12] 1553 	clr	c
   0480 95*0F         [12] 1554 	subb	a,_tdm_state_update_sloc0_1_0
   0482 FC            [12] 1555 	mov	r4,a
   0483 ED            [12] 1556 	mov	a,r5
   0484 95*10         [12] 1557 	subb	a,(_tdm_state_update_sloc0_1_0 + 1)
   0486 FD            [12] 1558 	mov	r5,a
   0487 8C 82         [24] 1559 	mov	dpl,r4
   0489 8D 83         [24] 1560 	mov	dph,r5
   048B 12r00r00      [24] 1561 	lcall	___sint2fs
   048E AC 82         [24] 1562 	mov	r4,dpl
   0490 AD 83         [24] 1563 	mov	r5,dph
   0492 AE F0         [24] 1564 	mov	r6,b
   0494 FF            [12] 1565 	mov	r7,a
   0495 C0 07         [24] 1566 	push	ar7
   0497 C0 06         [24] 1567 	push	ar6
   0499 C0 04         [24] 1568 	push	ar4
   049B C0 05         [24] 1569 	push	ar5
   049D C0 06         [24] 1570 	push	ar6
   049F C0 07         [24] 1571 	push	ar7
   04A1 85*00 82      [24] 1572 	mov	dpl,_average_duty_cycle
   04A4 85*01 83      [24] 1573 	mov	dph,(_average_duty_cycle + 1)
   04A7 85*02 F0      [24] 1574 	mov	b,(_average_duty_cycle + 2)
   04AA E5*03         [12] 1575 	mov	a,(_average_duty_cycle + 3)
   04AC 12r00r00      [24] 1576 	lcall	___fslt
   04AF E5 81         [12] 1577 	mov	a,sp
   04B1 24 FC         [12] 1578 	add	a,#0xfc
   04B3 F5 81         [12] 1579 	mov	sp,a
   04B5 D0 06         [24] 1580 	pop	ar6
   04B7 D0 07         [24] 1581 	pop	ar7
   04B9 E5 82         [12] 1582 	mov	a,dpl
   04BB 24 FF         [12] 1583 	add	a,#0xFF
   04BD 92*08         [24] 1584 	mov  _tdm_state_update_sloc3_1_0,c
   04BF B3            [12] 1585 	cpl	c
   04C0 92*04         [24] 1586 	mov	_duty_cycle_wait,c
                           1587 ;	radio/tdm.c:320: tdm_state_remaining -= tdelta;
   04C2 D0 07         [24] 1588 	pop	ar7
   04C4 D0 06         [24] 1589 	pop	ar6
                           1590 ;	radio/tdm.c:307: duty_cycle_wait = (average_duty_cycle >= (duty_cycle - duty_cycle_offset));
   04C6                    1591 00114$:
                           1592 ;	radio/tdm.c:311: bonus_transmit = 0;
   04C6 C2*00         [12] 1593 	clr	_bonus_transmit
                           1594 ;	radio/tdm.c:314: transmit_yield = 0;
   04C8 C2*01         [12] 1595 	clr	_transmit_yield
                           1596 ;	radio/tdm.c:317: transmit_wait = 0;
   04CA 78r0C         [12] 1597 	mov	r0,#_transmit_wait
   04CC E4            [12] 1598 	clr	a
   04CD F2            [24] 1599 	movx	@r0,a
   04CE 08            [12] 1600 	inc	r0
   04CF F2            [24] 1601 	movx	@r0,a
   04D0 02r02r8C      [24] 1602 	ljmp	00116$
   04D3                    1603 00118$:
                           1604 ;	radio/tdm.c:320: tdm_state_remaining -= tdelta;
   04D3 78r01         [12] 1605 	mov	r0,#_tdm_state_remaining
   04D5 E2            [24] 1606 	movx	a,@r0
   04D6 C3            [12] 1607 	clr	c
   04D7 9E            [12] 1608 	subb	a,r6
   04D8 F2            [24] 1609 	movx	@r0,a
   04D9 08            [12] 1610 	inc	r0
   04DA E2            [24] 1611 	movx	a,@r0
   04DB 9F            [12] 1612 	subb	a,r7
   04DC F2            [24] 1613 	movx	@r0,a
   04DD 22            [24] 1614 	ret
                           1615 ;------------------------------------------------------------
                           1616 ;Allocation info for local variables in function 'tdm_change_phase'
                           1617 ;------------------------------------------------------------
                           1618 ;	radio/tdm.c:326: tdm_change_phase(void)
                           1619 ;	-----------------------------------------
                           1620 ;	 function tdm_change_phase
                           1621 ;	-----------------------------------------
   04DE                    1622 _tdm_change_phase:
                           1623 ;	radio/tdm.c:328: tdm_state = (tdm_state+2) % 4;
   04DE 78r00         [12] 1624 	mov	r0,#_tdm_state
   04E0 E2            [24] 1625 	movx	a,@r0
   04E1 FE            [12] 1626 	mov	r6,a
   04E2 7F 00         [12] 1627 	mov	r7,#0x00
   04E4 74 02         [12] 1628 	mov	a,#0x02
   04E6 2E            [12] 1629 	add	a,r6
   04E7 FE            [12] 1630 	mov	r6,a
   04E8 E4            [12] 1631 	clr	a
   04E9 3F            [12] 1632 	addc	a,r7
   04EA FF            [12] 1633 	mov	r7,a
   04EB 90r00r00      [24] 1634 	mov	dptr,#__modsint_PARM_2
   04EE 74 04         [12] 1635 	mov	a,#0x04
   04F0 F0            [24] 1636 	movx	@dptr,a
   04F1 E4            [12] 1637 	clr	a
   04F2 A3            [24] 1638 	inc	dptr
   04F3 F0            [24] 1639 	movx	@dptr,a
   04F4 8E 82         [24] 1640 	mov	dpl,r6
   04F6 8F 83         [24] 1641 	mov	dph,r7
   04F8 12r00r00      [24] 1642 	lcall	__modsint
   04FB AE 82         [24] 1643 	mov	r6,dpl
   04FD 78r00         [12] 1644 	mov	r0,#_tdm_state
   04FF EE            [12] 1645 	mov	a,r6
   0500 F2            [24] 1646 	movx	@r0,a
   0501 22            [24] 1647 	ret
                           1648 ;------------------------------------------------------------
                           1649 ;Allocation info for local variables in function 'temperature_update'
                           1650 ;------------------------------------------------------------
                           1651 ;diff                      Allocated to registers r6 r7 
                           1652 ;------------------------------------------------------------
                           1653 ;	radio/tdm.c:333: static void temperature_update(void)
                           1654 ;	-----------------------------------------
                           1655 ;	 function temperature_update
                           1656 ;	-----------------------------------------
   0502                    1657 _temperature_update:
                           1658 ;	radio/tdm.c:336: if (radio_get_transmit_power() <= 20) {
   0502 12r00r00      [24] 1659 	lcall	_radio_get_transmit_power
   0505 E5 82         [12] 1660 	mov	a,dpl
   0507 FF            [12] 1661 	mov	r7,a
   0508 24 EB         [12] 1662 	add	a,#0xff - 0x14
   050A 40 05         [24] 1663 	jc	00102$
                           1664 ;	radio/tdm.c:337: duty_cycle_offset = 0;
   050C 78r0F         [12] 1665 	mov	r0,#_duty_cycle_offset
   050E E4            [12] 1666 	clr	a
   050F F2            [24] 1667 	movx	@r0,a
                           1668 ;	radio/tdm.c:338: return;
   0510 22            [24] 1669 	ret
   0511                    1670 00102$:
                           1671 ;	radio/tdm.c:341: diff = radio_temperature() - MAX_PA_TEMPERATURE;
   0511 12r00r00      [24] 1672 	lcall	_radio_temperature
   0514 E5 82         [12] 1673 	mov	a,dpl
   0516 85 83 F0      [24] 1674 	mov	b,dph
   0519 24 9C         [12] 1675 	add	a,#0x9C
   051B FE            [12] 1676 	mov	r6,a
   051C E5 F0         [12] 1677 	mov	a,b
   051E 34 FF         [12] 1678 	addc	a,#0xFF
   0520 FF            [12] 1679 	mov	r7,a
                           1680 ;	radio/tdm.c:342: if (diff <= 0 && duty_cycle_offset > 0) {
   0521 C3            [12] 1681 	clr	c
   0522 E4            [12] 1682 	clr	a
   0523 9E            [12] 1683 	subb	a,r6
   0524 E4            [12] 1684 	clr	a
   0525 64 80         [12] 1685 	xrl	a,#0x80
   0527 8F F0         [24] 1686 	mov	b,r7
   0529 63 F0 80      [24] 1687 	xrl	b,#0x80
   052C 95 F0         [12] 1688 	subb	a,b
   052E E4            [12] 1689 	clr	a
   052F 33            [12] 1690 	rlc	a
   0530 FD            [12] 1691 	mov	r5,a
   0531 70 0C         [24] 1692 	jnz	00112$
   0533 78r0F         [12] 1693 	mov	r0,#_duty_cycle_offset
   0535 E2            [24] 1694 	movx	a,@r0
   0536 60 07         [24] 1695 	jz	00112$
                           1696 ;	radio/tdm.c:344: duty_cycle_offset -= 1;
   0538 78r0F         [12] 1697 	mov	r0,#_duty_cycle_offset
   053A E2            [24] 1698 	movx	a,@r0
   053B 14            [12] 1699 	dec	a
   053C F2            [24] 1700 	movx	@r0,a
   053D 80 39         [24] 1701 	sjmp	00113$
   053F                    1702 00112$:
                           1703 ;	radio/tdm.c:345: } else if (diff > 10) {
   053F C3            [12] 1704 	clr	c
   0540 74 0A         [12] 1705 	mov	a,#0x0A
   0542 9E            [12] 1706 	subb	a,r6
   0543 E4            [12] 1707 	clr	a
   0544 64 80         [12] 1708 	xrl	a,#0x80
   0546 8F F0         [24] 1709 	mov	b,r7
   0548 63 F0 80      [24] 1710 	xrl	b,#0x80
   054B 95 F0         [12] 1711 	subb	a,b
   054D 50 08         [24] 1712 	jnc	00109$
                           1713 ;	radio/tdm.c:347: duty_cycle_offset += 10;
   054F 78r0F         [12] 1714 	mov	r0,#_duty_cycle_offset
   0551 E2            [24] 1715 	movx	a,@r0
   0552 24 0A         [12] 1716 	add	a,#0x0A
   0554 F2            [24] 1717 	movx	@r0,a
   0555 80 21         [24] 1718 	sjmp	00113$
   0557                    1719 00109$:
                           1720 ;	radio/tdm.c:348: } else if (diff > 5) {
   0557 C3            [12] 1721 	clr	c
   0558 74 05         [12] 1722 	mov	a,#0x05
   055A 9E            [12] 1723 	subb	a,r6
   055B E4            [12] 1724 	clr	a
   055C 64 80         [12] 1725 	xrl	a,#0x80
   055E 8F F0         [24] 1726 	mov	b,r7
   0560 63 F0 80      [24] 1727 	xrl	b,#0x80
   0563 95 F0         [12] 1728 	subb	a,b
   0565 50 08         [24] 1729 	jnc	00106$
                           1730 ;	radio/tdm.c:350: duty_cycle_offset += 5;
   0567 78r0F         [12] 1731 	mov	r0,#_duty_cycle_offset
   0569 E2            [24] 1732 	movx	a,@r0
   056A 24 05         [12] 1733 	add	a,#0x05
   056C F2            [24] 1734 	movx	@r0,a
   056D 80 09         [24] 1735 	sjmp	00113$
   056F                    1736 00106$:
                           1737 ;	radio/tdm.c:351: } else if (diff > 0) {
   056F ED            [12] 1738 	mov	a,r5
   0570 60 06         [24] 1739 	jz	00113$
                           1740 ;	radio/tdm.c:353: duty_cycle_offset += 1;				
   0572 78r0F         [12] 1741 	mov	r0,#_duty_cycle_offset
   0574 E2            [24] 1742 	movx	a,@r0
   0575 24 01         [12] 1743 	add	a,#0x01
   0577 F2            [24] 1744 	movx	@r0,a
   0578                    1745 00113$:
                           1746 ;	radio/tdm.c:356: if ((duty_cycle-duty_cycle_offset) < 20) {
   0578 78r0E         [12] 1747 	mov	r0,#_duty_cycle
   057A E2            [24] 1748 	movx	a,@r0
   057B FE            [12] 1749 	mov	r6,a
   057C 7F 00         [12] 1750 	mov	r7,#0x00
   057E 78r0F         [12] 1751 	mov	r0,#_duty_cycle_offset
   0580 E2            [24] 1752 	movx	a,@r0
   0581 FC            [12] 1753 	mov	r4,a
   0582 7D 00         [12] 1754 	mov	r5,#0x00
   0584 EE            [12] 1755 	mov	a,r6
   0585 C3            [12] 1756 	clr	c
   0586 9C            [12] 1757 	subb	a,r4
   0587 FE            [12] 1758 	mov	r6,a
   0588 EF            [12] 1759 	mov	a,r7
   0589 9D            [12] 1760 	subb	a,r5
   058A FF            [12] 1761 	mov	r7,a
   058B C3            [12] 1762 	clr	c
   058C EE            [12] 1763 	mov	a,r6
   058D 94 14         [12] 1764 	subb	a,#0x14
   058F EF            [12] 1765 	mov	a,r7
   0590 64 80         [12] 1766 	xrl	a,#0x80
   0592 94 80         [12] 1767 	subb	a,#0x80
   0594 50 08         [24] 1768 	jnc	00117$
                           1769 ;	radio/tdm.c:357: duty_cycle_offset = duty_cycle - 20;
   0596 78r0E         [12] 1770 	mov	r0,#_duty_cycle
   0598 79r0F         [12] 1771 	mov	r1,#_duty_cycle_offset
   059A E2            [24] 1772 	movx	a,@r0
   059B 24 EC         [12] 1773 	add	a,#0xEC
   059D F3            [24] 1774 	movx	@r1,a
   059E                    1775 00117$:
   059E 22            [24] 1776 	ret
                           1777 ;------------------------------------------------------------
                           1778 ;Allocation info for local variables in function 'link_update'
                           1779 ;------------------------------------------------------------
                           1780 ;old_remaining             Allocated to registers r6 r7 
                           1781 ;unlock_count              Allocated with name '_link_update_unlock_count_1_185'
                           1782 ;temperature_count         Allocated with name '_link_update_temperature_count_1_185'
                           1783 ;------------------------------------------------------------
                           1784 ;	radio/tdm.c:365: link_update(void)
                           1785 ;	-----------------------------------------
                           1786 ;	 function link_update
                           1787 ;	-----------------------------------------
   059F                    1788 _link_update:
                           1789 ;	radio/tdm.c:368: if (received_packet) {
   059F 30*03 0B      [24] 1790 	jnb	_received_packet,00102$
                           1791 ;	radio/tdm.c:369: unlock_count = 0;
   05A2 90r00rFC      [24] 1792 	mov	dptr,#_link_update_unlock_count_1_185
   05A5 E4            [12] 1793 	clr	a
   05A6 F0            [24] 1794 	movx	@dptr,a
                           1795 ;	radio/tdm.c:370: received_packet = false;
   05A7 C2*03         [12] 1796 	clr	_received_packet
                           1797 ;	radio/tdm.c:372: TDM_SYNC_PIN = true;
   05A9 D2 A6         [12] 1798 	setb	_TDM_SYNC_PIN
   05AB 80 07         [24] 1799 	sjmp	00103$
   05AD                    1800 00102$:
                           1801 ;	radio/tdm.c:375: unlock_count++;
   05AD 90r00rFC      [24] 1802 	mov	dptr,#_link_update_unlock_count_1_185
   05B0 E0            [24] 1803 	movx	a,@dptr
   05B1 24 01         [12] 1804 	add	a,#0x01
   05B3 F0            [24] 1805 	movx	@dptr,a
   05B4                    1806 00103$:
                           1807 ;	radio/tdm.c:377: if (unlock_count < 6) {
   05B4 90r00rFC      [24] 1808 	mov	dptr,#_link_update_unlock_count_1_185
   05B7 E0            [24] 1809 	movx	a,@dptr
   05B8 FF            [12] 1810 	mov	r7,a
   05B9 BF 06 00      [24] 1811 	cjne	r7,#0x06,00157$
   05BC                    1812 00157$:
   05BC 50 04         [24] 1813 	jnc	00105$
                           1814 ;	radio/tdm.c:378: LED_RADIO = LED_ON;
   05BE D2 95         [12] 1815 	setb	_LED_GREEN
   05C0 80 08         [24] 1816 	sjmp	00106$
   05C2                    1817 00105$:
                           1818 ;	radio/tdm.c:381: TDM_SYNC_PIN = false;
   05C2 C2 A6         [12] 1819 	clr	_TDM_SYNC_PIN
                           1820 ;	radio/tdm.c:384: LED_RADIO = blink_state;
   05C4 A2*02         [12] 1821 	mov	c,_blink_state
   05C6 92 95         [24] 1822 	mov	_LED_GREEN,c
                           1823 ;	radio/tdm.c:385: blink_state = !blink_state;
   05C8 B2*02         [12] 1824 	cpl	_blink_state
   05CA                    1825 00106$:
                           1826 ;	radio/tdm.c:387: if (unlock_count > 40) {
   05CA EF            [12] 1827 	mov	a,r7
   05CB 24 D7         [12] 1828 	add	a,#0xff - 0x28
   05CD 40 03         [24] 1829 	jc	00159$
   05CF 02r06r5A      [24] 1830 	ljmp	00117$
   05D2                    1831 00159$:
                           1832 ;	radio/tdm.c:391: unlock_count = 5;
   05D2 90r00rFC      [24] 1833 	mov	dptr,#_link_update_unlock_count_1_185
   05D5 74 05         [12] 1834 	mov	a,#0x05
   05D7 F0            [24] 1835 	movx	@dptr,a
                           1836 ;	radio/tdm.c:395: if (timer_entropy() & 1) {
   05D8 12r00r00      [24] 1837 	lcall	_timer_entropy
   05DB E5 82         [12] 1838 	mov	a,dpl
   05DD 30 E0 59      [24] 1839 	jnb	acc.0,00113$
                           1840 ;	radio/tdm.c:396: register uint16_t old_remaining = tdm_state_remaining;
   05E0 78r01         [12] 1841 	mov	r0,#_tdm_state_remaining
   05E2 E2            [24] 1842 	movx	a,@r0
   05E3 FE            [12] 1843 	mov	r6,a
   05E4 08            [12] 1844 	inc	r0
   05E5 E2            [24] 1845 	movx	a,@r0
   05E6 FF            [12] 1846 	mov	r7,a
                           1847 ;	radio/tdm.c:397: if (tdm_state_remaining > silence_period) {
   05E7 78r06         [12] 1848 	mov	r0,#_silence_period
   05E9 C3            [12] 1849 	clr	c
   05EA E2            [24] 1850 	movx	a,@r0
   05EB 9E            [12] 1851 	subb	a,r6
   05EC 08            [12] 1852 	inc	r0
   05ED E2            [24] 1853 	movx	a,@r0
   05EE 9F            [12] 1854 	subb	a,r7
   05EF 50 17         [24] 1855 	jnc	00108$
                           1856 ;	radio/tdm.c:398: tdm_state_remaining -= packet_latency;
   05F1 78r08         [12] 1857 	mov	r0,#_packet_latency
   05F3 D3            [12] 1858 	setb	c
   05F4 E2            [24] 1859 	movx	a,@r0
   05F5 9E            [12] 1860 	subb	a,r6
   05F6 F4            [12] 1861 	cpl	a
   05F7 B3            [12] 1862 	cpl	c
   05F8 FC            [12] 1863 	mov	r4,a
   05F9 B3            [12] 1864 	cpl	c
   05FA 08            [12] 1865 	inc	r0
   05FB E2            [24] 1866 	movx	a,@r0
   05FC 9F            [12] 1867 	subb	a,r7
   05FD F4            [12] 1868 	cpl	a
   05FE FD            [12] 1869 	mov	r5,a
   05FF 78r01         [12] 1870 	mov	r0,#_tdm_state_remaining
   0601 EC            [12] 1871 	mov	a,r4
   0602 F2            [24] 1872 	movx	@r0,a
   0603 08            [12] 1873 	inc	r0
   0604 ED            [12] 1874 	mov	a,r5
   0605 F2            [24] 1875 	movx	@r0,a
   0606 80 08         [24] 1876 	sjmp	00109$
   0608                    1877 00108$:
                           1878 ;	radio/tdm.c:400: tdm_state_remaining = 1;
   0608 78r01         [12] 1879 	mov	r0,#_tdm_state_remaining
   060A 74 01         [12] 1880 	mov	a,#0x01
   060C F2            [24] 1881 	movx	@r0,a
   060D 08            [12] 1882 	inc	r0
   060E E4            [12] 1883 	clr	a
   060F F2            [24] 1884 	movx	@r0,a
   0610                    1885 00109$:
                           1886 ;	radio/tdm.c:402: if (at_testmode & AT_TEST_TDM) {
   0610 78r00         [12] 1887 	mov	r0,#_at_testmode
   0612 E2            [24] 1888 	movx	a,@r0
   0613 54 02         [12] 1889 	anl	a,#0x02
   0615 60 22         [24] 1890 	jz	00113$
                           1891 ;	radio/tdm.c:403: printf("TDM: change timing %u/%u\n",
   0617 78r01         [12] 1892 	mov	r0,#_tdm_state_remaining
   0619 E2            [24] 1893 	movx	a,@r0
   061A C0 E0         [24] 1894 	push	acc
   061C 08            [12] 1895 	inc	r0
   061D E2            [24] 1896 	movx	a,@r0
   061E C0 E0         [24] 1897 	push	acc
   0620 C0 06         [24] 1898 	push	ar6
   0622 C0 07         [24] 1899 	push	ar7
   0624 74r82         [12] 1900 	mov	a,#__str_4
   0626 C0 E0         [24] 1901 	push	acc
   0628 74s00         [12] 1902 	mov	a,#(__str_4 >> 8)
   062A C0 E0         [24] 1903 	push	acc
   062C 74 80         [12] 1904 	mov	a,#0x80
   062E C0 E0         [24] 1905 	push	acc
   0630 12r00r00      [24] 1906 	lcall	_printfl
   0633 E5 81         [12] 1907 	mov	a,sp
   0635 24 F9         [12] 1908 	add	a,#0xf9
   0637 F5 81         [12] 1909 	mov	sp,a
   0639                    1910 00113$:
                           1911 ;	radio/tdm.c:408: if (at_testmode & AT_TEST_TDM) {
   0639 78r00         [12] 1912 	mov	r0,#_at_testmode
   063B E2            [24] 1913 	movx	a,@r0
   063C 54 02         [12] 1914 	anl	a,#0x02
   063E 60 15         [24] 1915 	jz	00115$
                           1916 ;	radio/tdm.c:409: printf("TDM: scanning\n");
   0640 74r9C         [12] 1917 	mov	a,#__str_5
   0642 C0 E0         [24] 1918 	push	acc
   0644 74s00         [12] 1919 	mov	a,#(__str_5 >> 8)
   0646 C0 E0         [24] 1920 	push	acc
   0648 74 80         [12] 1921 	mov	a,#0x80
   064A C0 E0         [24] 1922 	push	acc
   064C 12r00r00      [24] 1923 	lcall	_printfl
   064F 15 81         [12] 1924 	dec	sp
   0651 15 81         [12] 1925 	dec	sp
   0653 15 81         [12] 1926 	dec	sp
   0655                    1927 00115$:
                           1928 ;	radio/tdm.c:411: fhop_set_locked(false);
   0655 C2*00         [12] 1929 	clr	_fhop_set_locked_PARM_1
   0657 12r00r00      [24] 1930 	lcall	_fhop_set_locked
   065A                    1931 00117$:
                           1932 ;	radio/tdm.c:414: if (unlock_count != 0) {
   065A 90r00rFC      [24] 1933 	mov	dptr,#_link_update_unlock_count_1_185
   065D E0            [24] 1934 	movx	a,@dptr
   065E FF            [12] 1935 	mov	r7,a
   065F 60 3D         [24] 1936 	jz	00119$
                           1937 ;	radio/tdm.c:415: statistics.average_rssi = (radio_last_rssi() + 3*(uint16_t)statistics.average_rssi)/4;
   0661 12r00r00      [24] 1938 	lcall	_radio_last_rssi
   0664 AF 82         [24] 1939 	mov	r7,dpl
   0666 7E 00         [12] 1940 	mov	r6,#0x00
   0668 78r00         [12] 1941 	mov	r0,#_statistics
   066A E2            [24] 1942 	movx	a,@r0
   066B 90r00r00      [24] 1943 	mov	dptr,#__mulint_PARM_2
   066E F0            [24] 1944 	movx	@dptr,a
   066F E4            [12] 1945 	clr	a
   0670 A3            [24] 1946 	inc	dptr
   0671 F0            [24] 1947 	movx	@dptr,a
   0672 90 00 03      [24] 1948 	mov	dptr,#0x0003
   0675 C0 07         [24] 1949 	push	ar7
   0677 C0 06         [24] 1950 	push	ar6
   0679 12r00r00      [24] 1951 	lcall	__mulint
   067C AC 82         [24] 1952 	mov	r4,dpl
   067E AD 83         [24] 1953 	mov	r5,dph
   0680 D0 06         [24] 1954 	pop	ar6
   0682 D0 07         [24] 1955 	pop	ar7
   0684 EC            [12] 1956 	mov	a,r4
   0685 2F            [12] 1957 	add	a,r7
   0686 FC            [12] 1958 	mov	r4,a
   0687 ED            [12] 1959 	mov	a,r5
   0688 3E            [12] 1960 	addc	a,r6
   0689 C3            [12] 1961 	clr	c
   068A 13            [12] 1962 	rrc	a
   068B CC            [12] 1963 	xch	a,r4
   068C 13            [12] 1964 	rrc	a
   068D CC            [12] 1965 	xch	a,r4
   068E C3            [12] 1966 	clr	c
   068F 13            [12] 1967 	rrc	a
   0690 CC            [12] 1968 	xch	a,r4
   0691 13            [12] 1969 	rrc	a
   0692 CC            [12] 1970 	xch	a,r4
   0693 FD            [12] 1971 	mov	r5,a
   0694 78r00         [12] 1972 	mov	r0,#_statistics
   0696 EC            [12] 1973 	mov	a,r4
   0697 F2            [24] 1974 	movx	@r0,a
                           1975 ;	radio/tdm.c:418: statistics.receive_count = 0;
   0698 78r02         [12] 1976 	mov	r0,#(_statistics + 0x0002)
   069A E4            [12] 1977 	clr	a
   069B F2            [24] 1978 	movx	@r0,a
   069C 08            [12] 1979 	inc	r0
   069D F2            [24] 1980 	movx	@r0,a
   069E                    1981 00119$:
                           1982 ;	radio/tdm.c:420: if (unlock_count > 5) {
   069E 90r00rFC      [24] 1983 	mov	dptr,#_link_update_unlock_count_1_185
   06A1 E0            [24] 1984 	movx	a,@dptr
   06A2 FF            [12] 1985 	mov  r7,a
   06A3 24 FA         [12] 1986 	add	a,#0xff - 0x05
   06A5 50 17         [24] 1987 	jnc	00121$
                           1988 ;	radio/tdm.c:421: memset(&remote_statistics, 0, sizeof(remote_statistics));
   06A7 90r00r00      [24] 1989 	mov	dptr,#_memset_PARM_2
   06AA E4            [12] 1990 	clr	a
   06AB F0            [24] 1991 	movx	@dptr,a
   06AC 90r00r00      [24] 1992 	mov	dptr,#_memset_PARM_3
   06AF 74 04         [12] 1993 	mov	a,#0x04
   06B1 F0            [24] 1994 	movx	@dptr,a
   06B2 E4            [12] 1995 	clr	a
   06B3 A3            [24] 1996 	inc	dptr
   06B4 F0            [24] 1997 	movx	@dptr,a
   06B5 90r00r00      [24] 1998 	mov	dptr,#_remote_statistics
   06B8 75 F0 60      [24] 1999 	mov	b,#0x60
   06BB 12r00r00      [24] 2000 	lcall	_memset
   06BE                    2001 00121$:
                           2002 ;	radio/tdm.c:424: test_display = at_testmode;
   06BE 78r00         [12] 2003 	mov	r0,#_at_testmode
   06C0 E2            [24] 2004 	movx	a,@r0
   06C1 78r19         [12] 2005 	mov	r0,#_test_display
   06C3 F2            [24] 2006 	movx	@r0,a
                           2007 ;	radio/tdm.c:425: send_statistics = 1;
   06C4 D2*05         [12] 2008 	setb	_send_statistics
                           2009 ;	radio/tdm.c:427: temperature_count++;
   06C6 90r00rFD      [24] 2010 	mov	dptr,#_link_update_temperature_count_1_185
   06C9 E0            [24] 2011 	movx	a,@dptr
   06CA 24 01         [12] 2012 	add	a,#0x01
   06CC F0            [24] 2013 	movx	@dptr,a
                           2014 ;	radio/tdm.c:428: if (temperature_count == 4) {
   06CD 90r00rFD      [24] 2015 	mov	dptr,#_link_update_temperature_count_1_185
   06D0 E0            [24] 2016 	movx	a,@dptr
   06D1 FF            [12] 2017 	mov	r7,a
   06D2 BF 04 08      [24] 2018 	cjne	r7,#0x04,00124$
                           2019 ;	radio/tdm.c:430: temperature_update();
   06D5 12r05r02      [24] 2020 	lcall	_temperature_update
                           2021 ;	radio/tdm.c:431: temperature_count = 0;
   06D8 90r00rFD      [24] 2022 	mov	dptr,#_link_update_temperature_count_1_185
   06DB E4            [12] 2023 	clr	a
   06DC F0            [24] 2024 	movx	@dptr,a
   06DD                    2025 00124$:
   06DD 22            [24] 2026 	ret
                           2027 ;------------------------------------------------------------
                           2028 ;Allocation info for local variables in function 'tdm_remote_at'
                           2029 ;------------------------------------------------------------
                           2030 ;	radio/tdm.c:437: tdm_remote_at(void)
                           2031 ;	-----------------------------------------
                           2032 ;	 function tdm_remote_at
                           2033 ;	-----------------------------------------
   06DE                    2034 _tdm_remote_at:
                           2035 ;	radio/tdm.c:439: memcpy(remote_at_cmd, at_cmd, strlen(at_cmd)+1);
   06DE 90r00r00      [24] 2036 	mov	dptr,#_at_cmd
   06E1 75 F0 60      [24] 2037 	mov	b,#0x60
   06E4 12r00r00      [24] 2038 	lcall	_strlen
   06E7 E5 82         [12] 2039 	mov	a,dpl
   06E9 85 83 F0      [24] 2040 	mov	b,dph
   06EC 24 01         [12] 2041 	add	a,#0x01
   06EE FE            [12] 2042 	mov	r6,a
   06EF E4            [12] 2043 	clr	a
   06F0 35 F0         [12] 2044 	addc	a,b
   06F2 FF            [12] 2045 	mov	r7,a
   06F3 90r00r00      [24] 2046 	mov	dptr,#_memcpy_PARM_2
   06F6 74r00         [12] 2047 	mov	a,#_at_cmd
   06F8 F0            [24] 2048 	movx	@dptr,a
   06F9 74s00         [12] 2049 	mov	a,#(_at_cmd >> 8)
   06FB A3            [24] 2050 	inc	dptr
   06FC F0            [24] 2051 	movx	@dptr,a
   06FD 74 60         [12] 2052 	mov	a,#0x60
   06FF A3            [24] 2053 	inc	dptr
   0700 F0            [24] 2054 	movx	@dptr,a
   0701 90r00r00      [24] 2055 	mov	dptr,#_memcpy_PARM_3
   0704 EE            [12] 2056 	mov	a,r6
   0705 F0            [24] 2057 	movx	@dptr,a
   0706 EF            [12] 2058 	mov	a,r7
   0707 A3            [24] 2059 	inc	dptr
   0708 F0            [24] 2060 	movx	@dptr,a
   0709 90r00r1C      [24] 2061 	mov	dptr,#_remote_at_cmd
   070C 75 F0 60      [24] 2062 	mov	b,#0x60
   070F 12r00r00      [24] 2063 	lcall	_memcpy
                           2064 ;	radio/tdm.c:440: send_at_command = true;
   0712 D2*06         [12] 2065 	setb	_send_at_command
   0714 22            [24] 2066 	ret
                           2067 ;------------------------------------------------------------
                           2068 ;Allocation info for local variables in function 'handle_at_command'
                           2069 ;------------------------------------------------------------
                           2070 ;i                         Allocated to registers r6 
                           2071 ;------------------------------------------------------------
                           2072 ;	radio/tdm.c:445: handle_at_command(__pdata uint8_t len)
                           2073 ;	-----------------------------------------
                           2074 ;	 function handle_at_command
                           2075 ;	-----------------------------------------
   0715                    2076 _handle_at_command:
   0715 AF 82         [24] 2077 	mov	r7,dpl
                           2078 ;	radio/tdm.c:447: if (len < 2 || len > AT_CMD_MAXLEN || 
   0717 BF 02 00      [24] 2079 	cjne	r7,#0x02,00133$
   071A                    2080 00133$:
   071A 40 17         [24] 2081 	jc	00118$
   071C EF            [12] 2082 	mov	a,r7
   071D 24 EF         [12] 2083 	add	a,#0xff - 0x10
   071F 40 12         [24] 2084 	jc	00118$
                           2085 ;	radio/tdm.c:448: pbuf[0] != (uint8_t)'R' || 
   0721 90r00r00      [24] 2086 	mov	dptr,#_pbuf
   0724 E0            [24] 2087 	movx	a,@dptr
   0725 FE            [12] 2088 	mov	r6,a
   0726 BE 52 0A      [24] 2089 	cjne	r6,#0x52,00118$
                           2090 ;	radio/tdm.c:449: pbuf[1] != (uint8_t)'T') {
   0729 90r00r01      [24] 2091 	mov	dptr,#(_pbuf + 0x0001)
   072C E0            [24] 2092 	movx	a,@dptr
   072D FE            [12] 2093 	mov	r6,a
   072E BE 54 02      [24] 2094 	cjne	r6,#0x54,00138$
   0731 80 23         [24] 2095 	sjmp	00103$
   0733                    2096 00138$:
                           2097 ;	radio/tdm.c:452: for (i=0; i<len; i++) {
   0733                    2098 00118$:
   0733 7E 00         [12] 2099 	mov	r6,#0x00
   0735                    2100 00110$:
   0735 C3            [12] 2101 	clr	c
   0736 EE            [12] 2102 	mov	a,r6
   0737 9F            [12] 2103 	subb	a,r7
   0738 50 1B         [24] 2104 	jnc	00101$
                           2105 ;	radio/tdm.c:453: putchar(pbuf[i]);
   073A EE            [12] 2106 	mov	a,r6
   073B 24r00         [12] 2107 	add	a,#_pbuf
   073D F5 82         [12] 2108 	mov	dpl,a
   073F E4            [12] 2109 	clr	a
   0740 34s00         [12] 2110 	addc	a,#(_pbuf >> 8)
   0742 F5 83         [12] 2111 	mov	dph,a
   0744 E0            [24] 2112 	movx	a,@dptr
   0745 F5 82         [12] 2113 	mov	dpl,a
   0747 C0 07         [24] 2114 	push	ar7
   0749 C0 06         [24] 2115 	push	ar6
   074B 12r00r00      [24] 2116 	lcall	_putchar
   074E D0 06         [24] 2117 	pop	ar6
   0750 D0 07         [24] 2118 	pop	ar7
                           2119 ;	radio/tdm.c:452: for (i=0; i<len; i++) {
   0752 0E            [12] 2120 	inc	r6
   0753 80 E0         [24] 2121 	sjmp	00110$
   0755                    2122 00101$:
                           2123 ;	radio/tdm.c:455: return;
   0755 22            [24] 2124 	ret
   0756                    2125 00103$:
                           2126 ;	radio/tdm.c:459: memcpy(at_cmd, pbuf, len);
   0756 90r00r00      [24] 2127 	mov	dptr,#_memcpy_PARM_2
   0759 74r00         [12] 2128 	mov	a,#_pbuf
   075B F0            [24] 2129 	movx	@dptr,a
   075C 74s00         [12] 2130 	mov	a,#(_pbuf >> 8)
   075E A3            [24] 2131 	inc	dptr
   075F F0            [24] 2132 	movx	@dptr,a
   0760 E4            [12] 2133 	clr	a
   0761 A3            [24] 2134 	inc	dptr
   0762 F0            [24] 2135 	movx	@dptr,a
   0763 90r00r00      [24] 2136 	mov	dptr,#_memcpy_PARM_3
   0766 EF            [12] 2137 	mov	a,r7
   0767 F0            [24] 2138 	movx	@dptr,a
   0768 E4            [12] 2139 	clr	a
   0769 A3            [24] 2140 	inc	dptr
   076A F0            [24] 2141 	movx	@dptr,a
   076B 90r00r00      [24] 2142 	mov	dptr,#_at_cmd
   076E 75 F0 60      [24] 2143 	mov	b,#0x60
   0771 C0 07         [24] 2144 	push	ar7
   0773 12r00r00      [24] 2145 	lcall	_memcpy
   0776 D0 07         [24] 2146 	pop	ar7
                           2147 ;	radio/tdm.c:460: at_cmd[len] = 0;
   0778 EF            [12] 2148 	mov	a,r7
   0779 24r00         [12] 2149 	add	a,#_at_cmd
   077B F8            [12] 2150 	mov	r0,a
   077C E4            [12] 2151 	clr	a
   077D F2            [24] 2152 	movx	@r0,a
                           2153 ;	radio/tdm.c:461: at_cmd[0] = 'A'; // replace 'R'
   077E 78r00         [12] 2154 	mov	r0,#_at_cmd
   0780 74 41         [12] 2155 	mov	a,#0x41
   0782 F2            [24] 2156 	movx	@r0,a
                           2157 ;	radio/tdm.c:462: at_cmd_len = len;
   0783 78r00         [12] 2158 	mov	r0,#_at_cmd_len
   0785 EF            [12] 2159 	mov	a,r7
   0786 F2            [24] 2160 	movx	@r0,a
                           2161 ;	radio/tdm.c:463: at_cmd_ready = true;
   0787 D2*00         [12] 2162 	setb	_at_cmd_ready
                           2163 ;	radio/tdm.c:468: printf_start_capture(pbuf, sizeof(pbuf));
   0789 90r00r00      [24] 2164 	mov	dptr,#_printf_start_capture_PARM_2
   078C 74 FC         [12] 2165 	mov	a,#0xFC
   078E F0            [24] 2166 	movx	@dptr,a
   078F 90r00r00      [24] 2167 	mov	dptr,#_pbuf
   0792 12r00r00      [24] 2168 	lcall	_printf_start_capture
                           2169 ;	radio/tdm.c:469: at_command();
   0795 12r00r00      [24] 2170 	lcall	_at_command
                           2171 ;	radio/tdm.c:470: len = printf_end_capture();
   0798 12r00r00      [24] 2172 	lcall	_printf_end_capture
                           2173 ;	radio/tdm.c:471: if (len > 0) {
   079B E5 82         [12] 2174 	mov	a,dpl
   079D FF            [12] 2175 	mov	r7,a
   079E 60 0A         [24] 2176 	jz	00112$
                           2177 ;	radio/tdm.c:472: packet_inject(pbuf, len);
   07A0 78r00         [12] 2178 	mov	r0,#_packet_inject_PARM_2
   07A2 EF            [12] 2179 	mov	a,r7
   07A3 F2            [24] 2180 	movx	@r0,a
   07A4 90r00r00      [24] 2181 	mov	dptr,#_pbuf
   07A7 02r00r00      [24] 2182 	ljmp	_packet_inject
   07AA                    2183 00112$:
   07AA 22            [24] 2184 	ret
                           2185 ;------------------------------------------------------------
                           2186 ;Allocation info for local variables in function 'tdm_serial_loop'
                           2187 ;------------------------------------------------------------
                           2188 ;	radio/tdm.c:482: tdm_serial_loop(void)
                           2189 ;	-----------------------------------------
                           2190 ;	 function tdm_serial_loop
                           2191 ;	-----------------------------------------
   07AB                    2192 _tdm_serial_loop:
                           2193 ;	radio/tdm.c:484: __pdata uint16_t last_t = timer2_tick();
   07AB 12r00r00      [24] 2194 	lcall	_timer2_tick
   07AE 78r2F         [12] 2195 	mov	r0,#_tdm_serial_loop_last_t_1_207
   07B0 E5 82         [12] 2196 	mov	a,dpl
   07B2 F2            [24] 2197 	movx	@r0,a
   07B3 08            [12] 2198 	inc	r0
   07B4 E5 83         [12] 2199 	mov	a,dph
   07B6 F2            [24] 2200 	movx	@r0,a
                           2201 ;	radio/tdm.c:485: __pdata uint16_t last_link_update = last_t;
   07B7 78r2F         [12] 2202 	mov	r0,#_tdm_serial_loop_last_t_1_207
   07B9 79r31         [12] 2203 	mov	r1,#_tdm_serial_loop_last_link_update_1_207
   07BB E2            [24] 2204 	movx	a,@r0
   07BC F3            [24] 2205 	movx	@r1,a
   07BD 08            [12] 2206 	inc	r0
   07BE E2            [24] 2207 	movx	a,@r0
   07BF 09            [12] 2208 	inc	r1
   07C0 F3            [24] 2209 	movx	@r1,a
                           2210 ;	radio/tdm.c:487: _canary = 42;
   07C1 78 FF         [12] 2211 	mov	r0,#__canary
   07C3 76 2A         [12] 2212 	mov	@r0,#0x2A
   07C5                    2213 00192$:
                           2214 ;	radio/tdm.c:494: if (_canary != 42) {
   07C5 78 FF         [12] 2215 	mov	r0,#__canary
   07C7 B6 2A 02      [24] 2216 	cjne	@r0,#0x2A,00339$
   07CA 80 15         [24] 2217 	sjmp	00102$
   07CC                    2218 00339$:
                           2219 ;	radio/tdm.c:495: panic("stack blown\n");
   07CC 74rAB         [12] 2220 	mov	a,#__str_6
   07CE C0 E0         [24] 2221 	push	acc
   07D0 74s00         [12] 2222 	mov	a,#(__str_6 >> 8)
   07D2 C0 E0         [24] 2223 	push	acc
   07D4 74 80         [12] 2224 	mov	a,#0x80
   07D6 C0 E0         [24] 2225 	push	acc
   07D8 12r00r00      [24] 2226 	lcall	_panic
   07DB 15 81         [12] 2227 	dec	sp
   07DD 15 81         [12] 2228 	dec	sp
   07DF 15 81         [12] 2229 	dec	sp
   07E1                    2230 00102$:
                           2231 ;	radio/tdm.c:498: if (pdata_canary != 0x41) {
   07E1 78r00         [12] 2232 	mov	r0,#_pdata_canary
   07E3 E2            [24] 2233 	movx	a,@r0
   07E4 B4 41 02      [24] 2234 	cjne	a,#0x41,00340$
   07E7 80 15         [24] 2235 	sjmp	00104$
   07E9                    2236 00340$:
                           2237 ;	radio/tdm.c:499: panic("pdata canary changed\n");
   07E9 74rB8         [12] 2238 	mov	a,#__str_7
   07EB C0 E0         [24] 2239 	push	acc
   07ED 74s00         [12] 2240 	mov	a,#(__str_7 >> 8)
   07EF C0 E0         [24] 2241 	push	acc
   07F1 74 80         [12] 2242 	mov	a,#0x80
   07F3 C0 E0         [24] 2243 	push	acc
   07F5 12r00r00      [24] 2244 	lcall	_panic
   07F8 15 81         [12] 2245 	dec	sp
   07FA 15 81         [12] 2246 	dec	sp
   07FC 15 81         [12] 2247 	dec	sp
   07FE                    2248 00104$:
                           2249 ;	radio/tdm.c:503: at_command();
   07FE 12r00r00      [24] 2250 	lcall	_at_command
                           2251 ;	radio/tdm.c:506: if (test_display) {
   0801 78r19         [12] 2252 	mov	r0,#_test_display
   0803 E2            [24] 2253 	movx	a,@r0
   0804 60 07         [24] 2254 	jz	00106$
                           2255 ;	radio/tdm.c:507: display_test_output();
   0806 12r00rD3      [24] 2256 	lcall	_display_test_output
                           2257 ;	radio/tdm.c:508: test_display = 0;
   0809 78r19         [12] 2258 	mov	r0,#_test_display
   080B E4            [12] 2259 	clr	a
   080C F2            [24] 2260 	movx	@r0,a
   080D                    2261 00106$:
                           2262 ;	radio/tdm.c:511: if (seen_mavlink && feature_mavlink_framing && !at_mode_active) {
   080D 30*00 0B      [24] 2263 	jnb	_seen_mavlink,00108$
   0810 30*00 08      [24] 2264 	jnb	_feature_mavlink_framing,00108$
   0813 20*00 05      [24] 2265 	jb	_at_mode_active,00108$
                           2266 ;	radio/tdm.c:512: seen_mavlink = false;
   0816 C2*00         [12] 2267 	clr	_seen_mavlink
                           2268 ;	radio/tdm.c:513: MAVLink_report();
   0818 12r00r00      [24] 2269 	lcall	_MAVLink_report
   081B                    2270 00108$:
                           2271 ;	radio/tdm.c:517: radio_set_channel(fhop_receive_channel());
   081B 12r00r00      [24] 2272 	lcall	_fhop_receive_channel
   081E 12r00r00      [24] 2273 	lcall	_radio_set_channel
                           2274 ;	radio/tdm.c:520: tnow = timer2_tick();
   0821 12r00r00      [24] 2275 	lcall	_timer2_tick
   0824 AA 82         [24] 2276 	mov	r2,dpl
   0826 AB 83         [24] 2277 	mov	r3,dph
                           2278 ;	radio/tdm.c:523: if (radio_receive_packet(&len, pbuf)) {
   0828 78r00         [12] 2279 	mov	r0,#_radio_receive_packet_PARM_2
   082A 74r00         [12] 2280 	mov	a,#_pbuf
   082C F2            [24] 2281 	movx	@r0,a
   082D 08            [12] 2282 	inc	r0
   082E 74s00         [12] 2283 	mov	a,#(_pbuf >> 8)
   0830 F2            [24] 2284 	movx	@r0,a
   0831 90r00r33      [24] 2285 	mov	dptr,#_tdm_serial_loop_len_2_208
   0834 75 F0 60      [24] 2286 	mov	b,#0x60
   0837 C0 03         [24] 2287 	push	ar3
   0839 C0 02         [24] 2288 	push	ar2
   083B 12r00r00      [24] 2289 	lcall	_radio_receive_packet
   083E D0 02         [24] 2290 	pop	ar2
   0840 D0 03         [24] 2291 	pop	ar3
   0842 40 03         [24] 2292 	jc	00345$
   0844 02r09rBD      [24] 2293 	ljmp	00129$
   0847                    2294 00345$:
                           2295 ;	radio/tdm.c:526: received_packet = true;
   0847 D2*03         [12] 2296 	setb	_received_packet
                           2297 ;	radio/tdm.c:527: fhop_set_locked(true);
   0849 D2*00         [12] 2298 	setb	_fhop_set_locked_PARM_1
   084B C0 03         [24] 2299 	push	ar3
   084D C0 02         [24] 2300 	push	ar2
   084F 12r00r00      [24] 2301 	lcall	_fhop_set_locked
                           2302 ;	radio/tdm.c:530: statistics.average_rssi = (radio_last_rssi() + 7*(uint16_t)statistics.average_rssi)/8;
   0852 12r00r00      [24] 2303 	lcall	_radio_last_rssi
   0855 AD 82         [24] 2304 	mov	r5,dpl
   0857 D0 02         [24] 2305 	pop	ar2
   0859 D0 03         [24] 2306 	pop	ar3
   085B 7C 00         [12] 2307 	mov	r4,#0x00
   085D 78r00         [12] 2308 	mov	r0,#_statistics
   085F E2            [24] 2309 	movx	a,@r0
   0860 90r00r00      [24] 2310 	mov	dptr,#__mulint_PARM_2
   0863 F0            [24] 2311 	movx	@dptr,a
   0864 E4            [12] 2312 	clr	a
   0865 A3            [24] 2313 	inc	dptr
   0866 F0            [24] 2314 	movx	@dptr,a
   0867 90 00 07      [24] 2315 	mov	dptr,#0x0007
   086A C0 05         [24] 2316 	push	ar5
   086C C0 04         [24] 2317 	push	ar4
   086E C0 03         [24] 2318 	push	ar3
   0870 C0 02         [24] 2319 	push	ar2
   0872 12r00r00      [24] 2320 	lcall	__mulint
   0875 AE 82         [24] 2321 	mov	r6,dpl
   0877 AF 83         [24] 2322 	mov	r7,dph
   0879 D0 02         [24] 2323 	pop	ar2
   087B D0 03         [24] 2324 	pop	ar3
   087D D0 04         [24] 2325 	pop	ar4
   087F D0 05         [24] 2326 	pop	ar5
   0881 EE            [12] 2327 	mov	a,r6
   0882 2D            [12] 2328 	add	a,r5
   0883 FE            [12] 2329 	mov	r6,a
   0884 EF            [12] 2330 	mov	a,r7
   0885 3C            [12] 2331 	addc	a,r4
   0886 C4            [12] 2332 	swap	a
   0887 23            [12] 2333 	rl	a
   0888 CE            [12] 2334 	xch	a,r6
   0889 C4            [12] 2335 	swap	a
   088A 23            [12] 2336 	rl	a
   088B 54 1F         [12] 2337 	anl	a,#0x1F
   088D 6E            [12] 2338 	xrl	a,r6
   088E CE            [12] 2339 	xch	a,r6
   088F 54 1F         [12] 2340 	anl	a,#0x1F
   0891 CE            [12] 2341 	xch	a,r6
   0892 6E            [12] 2342 	xrl	a,r6
   0893 CE            [12] 2343 	xch	a,r6
   0894 78r00         [12] 2344 	mov	r0,#_statistics
   0896 EE            [12] 2345 	mov	a,r6
   0897 F2            [24] 2346 	movx	@r0,a
                           2347 ;	radio/tdm.c:531: statistics.receive_count++;
   0898 78r02         [12] 2348 	mov	r0,#(_statistics + 0x0002)
   089A E2            [24] 2349 	movx	a,@r0
   089B FE            [12] 2350 	mov	r6,a
   089C 08            [12] 2351 	inc	r0
   089D E2            [24] 2352 	movx	a,@r0
   089E FF            [12] 2353 	mov	r7,a
   089F 0E            [12] 2354 	inc	r6
   08A0 BE 00 01      [24] 2355 	cjne	r6,#0x00,00346$
   08A3 0F            [12] 2356 	inc	r7
   08A4                    2357 00346$:
   08A4 78r02         [12] 2358 	mov	r0,#(_statistics + 0x0002)
   08A6 EE            [12] 2359 	mov	a,r6
   08A7 F2            [24] 2360 	movx	@r0,a
   08A8 08            [12] 2361 	inc	r0
   08A9 EF            [12] 2362 	mov	a,r7
   08AA F2            [24] 2363 	movx	@r0,a
                           2364 ;	radio/tdm.c:535: transmit_wait = 0;
   08AB 78r0C         [12] 2365 	mov	r0,#_transmit_wait
   08AD E4            [12] 2366 	clr	a
   08AE F2            [24] 2367 	movx	@r0,a
   08AF 08            [12] 2368 	inc	r0
   08B0 F2            [24] 2369 	movx	@r0,a
                           2370 ;	radio/tdm.c:537: if (len < 2) {
   08B1 78r33         [12] 2371 	mov	r0,#_tdm_serial_loop_len_2_208
   08B3 E2            [24] 2372 	movx	a,@r0
   08B4 B4 02 00      [24] 2373 	cjne	a,#0x02,00347$
   08B7                    2374 00347$:
   08B7 50 03         [24] 2375 	jnc	00348$
   08B9 02r07rC5      [24] 2376 	ljmp	00192$
   08BC                    2377 00348$:
                           2378 ;	radio/tdm.c:544: memcpy(&trailer, &pbuf[len-sizeof(trailer)], sizeof(trailer));
   08BC 78r33         [12] 2379 	mov	r0,#_tdm_serial_loop_len_2_208
   08BE E2            [24] 2380 	movx	a,@r0
   08BF 24 FE         [12] 2381 	add	a,#0xFE
   08C1 24r00         [12] 2382 	add	a,#_pbuf
   08C3 FE            [12] 2383 	mov	r6,a
   08C4 E4            [12] 2384 	clr	a
   08C5 34s00         [12] 2385 	addc	a,#(_pbuf >> 8)
   08C7 FF            [12] 2386 	mov	r7,a
   08C8 90r00r00      [24] 2387 	mov	dptr,#_memcpy_PARM_2
   08CB EE            [12] 2388 	mov	a,r6
   08CC F0            [24] 2389 	movx	@dptr,a
   08CD EF            [12] 2390 	mov	a,r7
   08CE A3            [24] 2391 	inc	dptr
   08CF F0            [24] 2392 	movx	@dptr,a
   08D0 E4            [12] 2393 	clr	a
   08D1 A3            [24] 2394 	inc	dptr
   08D2 F0            [24] 2395 	movx	@dptr,a
   08D3 90r00r00      [24] 2396 	mov	dptr,#_memcpy_PARM_3
   08D6 74 02         [12] 2397 	mov	a,#0x02
   08D8 F0            [24] 2398 	movx	@dptr,a
   08D9 E4            [12] 2399 	clr	a
   08DA A3            [24] 2400 	inc	dptr
   08DB F0            [24] 2401 	movx	@dptr,a
   08DC 90r00r1A      [24] 2402 	mov	dptr,#_trailer
   08DF 75 F0 60      [24] 2403 	mov	b,#0x60
   08E2 C0 03         [24] 2404 	push	ar3
   08E4 C0 02         [24] 2405 	push	ar2
   08E6 12r00r00      [24] 2406 	lcall	_memcpy
   08E9 D0 02         [24] 2407 	pop	ar2
   08EB D0 03         [24] 2408 	pop	ar3
                           2409 ;	radio/tdm.c:545: len -= sizeof(trailer);
   08ED 78r33         [12] 2410 	mov	r0,#_tdm_serial_loop_len_2_208
   08EF E2            [24] 2411 	movx	a,@r0
   08F0 14            [12] 2412 	dec	a
   08F1 14            [12] 2413 	dec	a
   08F2 F2            [24] 2414 	movx	@r0,a
                           2415 ;	radio/tdm.c:547: if (trailer.window == 0 && len != 0) {
   08F3 78r1A         [12] 2416 	mov	r0,#_trailer
   08F5 E2            [24] 2417 	movx	a,@r0
   08F6 FE            [12] 2418 	mov	r6,a
   08F7 08            [12] 2419 	inc	r0
   08F8 E2            [24] 2420 	movx	a,@r0
   08F9 54 1F         [12] 2421 	anl	a,#0x1F
   08FB FF            [12] 2422 	mov	r7,a
   08FC 4E            [12] 2423 	orl	a,r6
   08FD 70 41         [24] 2424 	jnz	00125$
   08FF 78r33         [12] 2425 	mov	r0,#_tdm_serial_loop_len_2_208
   0901 E2            [24] 2426 	movx	a,@r0
   0902 60 3C         [24] 2427 	jz	00125$
                           2428 ;	radio/tdm.c:549: if (len == sizeof(struct statistics)) {
   0904 78r33         [12] 2429 	mov	r0,#_tdm_serial_loop_len_2_208
   0906 E2            [24] 2430 	movx	a,@r0
   0907 B4 04 20      [24] 2431 	cjne	a,#0x04,00114$
                           2432 ;	radio/tdm.c:550: memcpy(&remote_statistics, pbuf, len);
   090A 90r00r00      [24] 2433 	mov	dptr,#_memcpy_PARM_2
   090D 74r00         [12] 2434 	mov	a,#_pbuf
   090F F0            [24] 2435 	movx	@dptr,a
   0910 74s00         [12] 2436 	mov	a,#(_pbuf >> 8)
   0912 A3            [24] 2437 	inc	dptr
   0913 F0            [24] 2438 	movx	@dptr,a
   0914 E4            [12] 2439 	clr	a
   0915 A3            [24] 2440 	inc	dptr
   0916 F0            [24] 2441 	movx	@dptr,a
   0917 78r33         [12] 2442 	mov	r0,#_tdm_serial_loop_len_2_208
   0919 90r00r00      [24] 2443 	mov	dptr,#_memcpy_PARM_3
   091C E2            [24] 2444 	movx	a,@r0
   091D F0            [24] 2445 	movx	@dptr,a
   091E E4            [12] 2446 	clr	a
   091F A3            [24] 2447 	inc	dptr
   0920 F0            [24] 2448 	movx	@dptr,a
   0921 90r00r00      [24] 2449 	mov	dptr,#_remote_statistics
   0924 75 F0 60      [24] 2450 	mov	b,#0x60
   0927 12r00r00      [24] 2451 	lcall	_memcpy
   092A                    2452 00114$:
                           2453 ;	radio/tdm.c:554: statistics.receive_count--;
   092A 78r02         [12] 2454 	mov	r0,#(_statistics + 0x0002)
   092C E2            [24] 2455 	movx	a,@r0
   092D FE            [12] 2456 	mov	r6,a
   092E 08            [12] 2457 	inc	r0
   092F E2            [24] 2458 	movx	a,@r0
   0930 FF            [12] 2459 	mov	r7,a
   0931 1E            [12] 2460 	dec	r6
   0932 BE FF 01      [24] 2461 	cjne	r6,#0xFF,00353$
   0935 1F            [12] 2462 	dec	r7
   0936                    2463 00353$:
   0936 78r02         [12] 2464 	mov	r0,#(_statistics + 0x0002)
   0938 EE            [12] 2465 	mov	a,r6
   0939 F2            [24] 2466 	movx	@r0,a
   093A 08            [12] 2467 	inc	r0
   093B EF            [12] 2468 	mov	a,r7
   093C F2            [24] 2469 	movx	@r0,a
   093D 02r07rC5      [24] 2470 	ljmp	00192$
   0940                    2471 00125$:
                           2472 ;	radio/tdm.c:555: } else if (trailer.window != 0) {
   0940 78r1A         [12] 2473 	mov	r0,#_trailer
   0942 E2            [24] 2474 	movx	a,@r0
   0943 FE            [12] 2475 	mov	r6,a
   0944 08            [12] 2476 	inc	r0
   0945 E2            [24] 2477 	movx	a,@r0
   0946 54 1F         [12] 2478 	anl	a,#0x1F
   0948 FF            [12] 2479 	mov	r7,a
   0949 4E            [12] 2480 	orl	a,r6
   094A 70 03         [24] 2481 	jnz	00354$
   094C 02r07rC5      [24] 2482 	ljmp	00192$
   094F                    2483 00354$:
                           2484 ;	radio/tdm.c:558: sync_tx_windows(len);
   094F 78r33         [12] 2485 	mov	r0,#_tdm_serial_loop_len_2_208
   0951 E2            [24] 2486 	movx	a,@r0
   0952 F5 82         [12] 2487 	mov	dpl,a
   0954 C0 03         [24] 2488 	push	ar3
   0956 C0 02         [24] 2489 	push	ar2
   0958 12r01r05      [24] 2490 	lcall	_sync_tx_windows
   095B D0 02         [24] 2491 	pop	ar2
   095D D0 03         [24] 2492 	pop	ar3
                           2493 ;	radio/tdm.c:559: last_t = tnow;
   095F 78r2F         [12] 2494 	mov	r0,#_tdm_serial_loop_last_t_1_207
   0961 EA            [12] 2495 	mov	a,r2
   0962 F2            [24] 2496 	movx	@r0,a
   0963 08            [12] 2497 	inc	r0
   0964 EB            [12] 2498 	mov	a,r3
   0965 F2            [24] 2499 	movx	@r0,a
                           2500 ;	radio/tdm.c:561: if (trailer.command == 1) {
   0966 78r1B         [12] 2501 	mov	r0,#(_trailer + 0x0001)
   0968 E2            [24] 2502 	movx	a,@r0
   0969 C4            [12] 2503 	swap	a
   096A 03            [12] 2504 	rr	a
   096B 54 01         [12] 2505 	anl	a,#0x01
   096D FF            [12] 2506 	mov	r7,a
   096E BF 01 0B      [24] 2507 	cjne	r7,#0x01,00120$
                           2508 ;	radio/tdm.c:562: handle_at_command(len);
   0971 78r33         [12] 2509 	mov	r0,#_tdm_serial_loop_len_2_208
   0973 E2            [24] 2510 	movx	a,@r0
   0974 F5 82         [12] 2511 	mov	dpl,a
   0976 12r07r15      [24] 2512 	lcall	_handle_at_command
   0979 02r07rC5      [24] 2513 	ljmp	00192$
   097C                    2514 00120$:
                           2515 ;	radio/tdm.c:563: } else if (len != 0 && 
   097C 78r33         [12] 2516 	mov	r0,#_tdm_serial_loop_len_2_208
   097E E2            [24] 2517 	movx	a,@r0
   097F 70 03         [24] 2518 	jnz	00357$
   0981 02r07rC5      [24] 2519 	ljmp	00192$
   0984                    2520 00357$:
                           2521 ;	radio/tdm.c:564: !packet_is_duplicate(len, pbuf, trailer.resend) &&
   0984 78r1B         [12] 2522 	mov	r0,#(_trailer + 0x0001)
   0986 E2            [24] 2523 	movx	a,@r0
   0987 23            [12] 2524 	rl	a
   0988 54 01         [12] 2525 	anl	a,#0x01
   098A 24 FF         [12] 2526 	add	a,#0xff
   098C 92*00         [24] 2527 	mov	_packet_is_duplicate_PARM_3,c
   098E 78r00         [12] 2528 	mov	r0,#_packet_is_duplicate_PARM_2
   0990 74r00         [12] 2529 	mov	a,#_pbuf
   0992 F2            [24] 2530 	movx	@r0,a
   0993 08            [12] 2531 	inc	r0
   0994 74s00         [12] 2532 	mov	a,#(_pbuf >> 8)
   0996 F2            [24] 2533 	movx	@r0,a
   0997 78r33         [12] 2534 	mov	r0,#_tdm_serial_loop_len_2_208
   0999 E2            [24] 2535 	movx	a,@r0
   099A F5 82         [12] 2536 	mov	dpl,a
   099C 12r00r00      [24] 2537 	lcall	_packet_is_duplicate
   099F 50 03         [24] 2538 	jnc	00358$
   09A1 02r07rC5      [24] 2539 	ljmp	00192$
   09A4                    2540 00358$:
                           2541 ;	radio/tdm.c:565: !at_mode_active) {
   09A4 30*00 03      [24] 2542 	jnb	_at_mode_active,00359$
   09A7 02r07rC5      [24] 2543 	ljmp	00192$
   09AA                    2544 00359$:
                           2545 ;	radio/tdm.c:569: LED_ACTIVITY = LED_ON;
   09AA D2 96         [12] 2546 	setb	_LED_RED
                           2547 ;	radio/tdm.c:570: serial_write_buf(pbuf, len);
   09AC 78r33         [12] 2548 	mov	r0,#_tdm_serial_loop_len_2_208
   09AE 79r00         [12] 2549 	mov	r1,#_serial_write_buf_PARM_2
   09B0 E2            [24] 2550 	movx	a,@r0
   09B1 F3            [24] 2551 	movx	@r1,a
   09B2 90r00r00      [24] 2552 	mov	dptr,#_pbuf
   09B5 12r00r00      [24] 2553 	lcall	_serial_write_buf
                           2554 ;	radio/tdm.c:571: LED_ACTIVITY = LED_OFF;
   09B8 C2 96         [12] 2555 	clr	_LED_RED
                           2556 ;	radio/tdm.c:575: continue;
   09BA 02r07rC5      [24] 2557 	ljmp	00192$
   09BD                    2558 00129$:
                           2559 ;	radio/tdm.c:581: tnow = timer2_tick();
   09BD 12r00r00      [24] 2560 	lcall	_timer2_tick
   09C0 AA 82         [24] 2561 	mov	r2,dpl
   09C2 AB 83         [24] 2562 	mov	r3,dph
                           2563 ;	radio/tdm.c:582: tdelta = tnow - last_t;
   09C4 78r2F         [12] 2564 	mov	r0,#_tdm_serial_loop_last_t_1_207
   09C6 79r34         [12] 2565 	mov	r1,#_tdm_serial_loop_tdelta_2_208
   09C8 D3            [12] 2566 	setb	c
   09C9 E2            [24] 2567 	movx	a,@r0
   09CA 9A            [12] 2568 	subb	a,r2
   09CB F4            [12] 2569 	cpl	a
   09CC B3            [12] 2570 	cpl	c
   09CD F3            [24] 2571 	movx	@r1,a
   09CE B3            [12] 2572 	cpl	c
   09CF 08            [12] 2573 	inc	r0
   09D0 E2            [24] 2574 	movx	a,@r0
   09D1 9B            [12] 2575 	subb	a,r3
   09D2 F4            [12] 2576 	cpl	a
   09D3 09            [12] 2577 	inc	r1
   09D4 F3            [24] 2578 	movx	@r1,a
                           2579 ;	radio/tdm.c:583: tdm_state_update(tdelta);
   09D5 78r34         [12] 2580 	mov	r0,#_tdm_serial_loop_tdelta_2_208
   09D7 E2            [24] 2581 	movx	a,@r0
   09D8 F5 82         [12] 2582 	mov	dpl,a
   09DA 08            [12] 2583 	inc	r0
   09DB E2            [24] 2584 	movx	a,@r0
   09DC F5 83         [12] 2585 	mov	dph,a
   09DE C0 03         [24] 2586 	push	ar3
   09E0 C0 02         [24] 2587 	push	ar2
   09E2 12r02r6C      [24] 2588 	lcall	_tdm_state_update
   09E5 D0 02         [24] 2589 	pop	ar2
   09E7 D0 03         [24] 2590 	pop	ar3
                           2591 ;	radio/tdm.c:584: last_t = tnow;
   09E9 78r2F         [12] 2592 	mov	r0,#_tdm_serial_loop_last_t_1_207
   09EB EA            [12] 2593 	mov	a,r2
   09EC F2            [24] 2594 	movx	@r0,a
   09ED 08            [12] 2595 	inc	r0
   09EE EB            [12] 2596 	mov	a,r3
   09EF F2            [24] 2597 	movx	@r0,a
                           2598 ;	radio/tdm.c:587: if (tnow - last_link_update > 32768) {
   09F0 78r31         [12] 2599 	mov	r0,#_tdm_serial_loop_last_link_update_1_207
   09F2 D3            [12] 2600 	setb	c
   09F3 E2            [24] 2601 	movx	a,@r0
   09F4 9A            [12] 2602 	subb	a,r2
   09F5 F4            [12] 2603 	cpl	a
   09F6 B3            [12] 2604 	cpl	c
   09F7 FC            [12] 2605 	mov	r4,a
   09F8 B3            [12] 2606 	cpl	c
   09F9 08            [12] 2607 	inc	r0
   09FA E2            [24] 2608 	movx	a,@r0
   09FB 9B            [12] 2609 	subb	a,r3
   09FC F4            [12] 2610 	cpl	a
   09FD FD            [12] 2611 	mov	r5,a
   09FE 7E 00         [12] 2612 	mov	r6,#0x00
   0A00 7F 00         [12] 2613 	mov	r7,#0x00
   0A02 C3            [12] 2614 	clr	c
   0A03 E4            [12] 2615 	clr	a
   0A04 9C            [12] 2616 	subb	a,r4
   0A05 74 80         [12] 2617 	mov	a,#0x80
   0A07 9D            [12] 2618 	subb	a,r5
   0A08 E4            [12] 2619 	clr	a
   0A09 9E            [12] 2620 	subb	a,r6
   0A0A E4            [12] 2621 	clr	a
   0A0B 64 80         [12] 2622 	xrl	a,#0x80
   0A0D 8F F0         [24] 2623 	mov	b,r7
   0A0F 63 F0 80      [24] 2624 	xrl	b,#0x80
   0A12 95 F0         [12] 2625 	subb	a,b
   0A14 50 12         [24] 2626 	jnc	00131$
                           2627 ;	radio/tdm.c:588: link_update();
   0A16 C0 03         [24] 2628 	push	ar3
   0A18 C0 02         [24] 2629 	push	ar2
   0A1A 12r05r9F      [24] 2630 	lcall	_link_update
   0A1D D0 02         [24] 2631 	pop	ar2
   0A1F D0 03         [24] 2632 	pop	ar3
                           2633 ;	radio/tdm.c:589: last_link_update = tnow;
   0A21 78r31         [12] 2634 	mov	r0,#_tdm_serial_loop_last_link_update_1_207
   0A23 EA            [12] 2635 	mov	a,r2
   0A24 F2            [24] 2636 	movx	@r0,a
   0A25 08            [12] 2637 	inc	r0
   0A26 EB            [12] 2638 	mov	a,r3
   0A27 F2            [24] 2639 	movx	@r0,a
   0A28                    2640 00131$:
                           2641 ;	radio/tdm.c:592: if (lbt_rssi != 0) {
   0A28 78r12         [12] 2642 	mov	r0,#_lbt_rssi
   0A2A E2            [24] 2643 	movx	a,@r0
   0A2B 70 03         [24] 2644 	jnz	00361$
   0A2D 02r0ArAD      [24] 2645 	ljmp	00140$
   0A30                    2646 00361$:
                           2647 ;	radio/tdm.c:594: if (radio_current_rssi() < lbt_rssi) {
   0A30 12r00r00      [24] 2648 	lcall	_radio_current_rssi
   0A33 AF 82         [24] 2649 	mov	r7,dpl
   0A35 78r12         [12] 2650 	mov	r0,#_lbt_rssi
   0A37 C3            [12] 2651 	clr	c
   0A38 E2            [24] 2652 	movx	a,@r0
   0A39 F5 F0         [12] 2653 	mov	b,a
   0A3B EF            [12] 2654 	mov	a,r7
   0A3C 95 F0         [12] 2655 	subb	a,b
   0A3E 50 16         [24] 2656 	jnc	00135$
                           2657 ;	radio/tdm.c:595: lbt_listen_time += tdelta;
   0A40 78r13         [12] 2658 	mov	r0,#_lbt_listen_time
   0A42 79r34         [12] 2659 	mov	r1,#_tdm_serial_loop_tdelta_2_208
   0A44 E3            [24] 2660 	movx	a,@r1
   0A45 C5 F0         [12] 2661 	xch	a,b
   0A47 E2            [24] 2662 	movx	a,@r0
   0A48 25 F0         [12] 2663 	add	a,b
   0A4A F2            [24] 2664 	movx	@r0,a
   0A4B 09            [12] 2665 	inc	r1
   0A4C E3            [24] 2666 	movx	a,@r1
   0A4D C5 F0         [12] 2667 	xch	a,b
   0A4F 08            [12] 2668 	inc	r0
   0A50 E2            [24] 2669 	movx	a,@r0
   0A51 35 F0         [12] 2670 	addc	a,b
   0A53 F2            [24] 2671 	movx	@r0,a
   0A54 80 36         [24] 2672 	sjmp	00136$
   0A56                    2673 00135$:
                           2674 ;	radio/tdm.c:597: lbt_listen_time = 0;
   0A56 78r13         [12] 2675 	mov	r0,#_lbt_listen_time
   0A58 E4            [12] 2676 	clr	a
   0A59 F2            [24] 2677 	movx	@r0,a
   0A5A 08            [12] 2678 	inc	r0
   0A5B F2            [24] 2679 	movx	@r0,a
                           2680 ;	radio/tdm.c:598: if (lbt_rand == 0) {
   0A5C 78r17         [12] 2681 	mov	r0,#_lbt_rand
   0A5E E2            [24] 2682 	movx	a,@r0
   0A5F F5 F0         [12] 2683 	mov	b,a
   0A61 08            [12] 2684 	inc	r0
   0A62 E2            [24] 2685 	movx	a,@r0
   0A63 45 F0         [12] 2686 	orl	a,b
   0A65 70 25         [24] 2687 	jnz	00136$
                           2688 ;	radio/tdm.c:599: lbt_rand = ((uint16_t)rand()) % lbt_min_time;
   0A67 12r00r00      [24] 2689 	lcall	_rand
   0A6A AE 82         [24] 2690 	mov	r6,dpl
   0A6C AF 83         [24] 2691 	mov	r7,dph
   0A6E 78r15         [12] 2692 	mov	r0,#_lbt_min_time
   0A70 90r00r00      [24] 2693 	mov	dptr,#__moduint_PARM_2
   0A73 E2            [24] 2694 	movx	a,@r0
   0A74 F0            [24] 2695 	movx	@dptr,a
   0A75 08            [12] 2696 	inc	r0
   0A76 E2            [24] 2697 	movx	a,@r0
   0A77 A3            [24] 2698 	inc	dptr
   0A78 F0            [24] 2699 	movx	@dptr,a
   0A79 8E 82         [24] 2700 	mov	dpl,r6
   0A7B 8F 83         [24] 2701 	mov	dph,r7
   0A7D 12r00r00      [24] 2702 	lcall	__moduint
   0A80 E5 82         [12] 2703 	mov	a,dpl
   0A82 85 83 F0      [24] 2704 	mov	b,dph
   0A85 78r17         [12] 2705 	mov	r0,#_lbt_rand
   0A87 F2            [24] 2706 	movx	@r0,a
   0A88 08            [12] 2707 	inc	r0
   0A89 E5 F0         [12] 2708 	mov	a,b
   0A8B F2            [24] 2709 	movx	@r0,a
   0A8C                    2710 00136$:
                           2711 ;	radio/tdm.c:602: if (lbt_listen_time < lbt_min_time + lbt_rand) {
   0A8C 78r15         [12] 2712 	mov	r0,#_lbt_min_time
   0A8E 79r17         [12] 2713 	mov	r1,#_lbt_rand
   0A90 E3            [24] 2714 	movx	a,@r1
   0A91 C5 F0         [12] 2715 	xch	a,b
   0A93 E2            [24] 2716 	movx	a,@r0
   0A94 25 F0         [12] 2717 	add	a,b
   0A96 FE            [12] 2718 	mov	r6,a
   0A97 09            [12] 2719 	inc	r1
   0A98 E3            [24] 2720 	movx	a,@r1
   0A99 C5 F0         [12] 2721 	xch	a,b
   0A9B 08            [12] 2722 	inc	r0
   0A9C E2            [24] 2723 	movx	a,@r0
   0A9D 35 F0         [12] 2724 	addc	a,b
   0A9F FF            [12] 2725 	mov	r7,a
   0AA0 78r13         [12] 2726 	mov	r0,#_lbt_listen_time
   0AA2 C3            [12] 2727 	clr	c
   0AA3 E2            [24] 2728 	movx	a,@r0
   0AA4 9E            [12] 2729 	subb	a,r6
   0AA5 08            [12] 2730 	inc	r0
   0AA6 E2            [24] 2731 	movx	a,@r0
   0AA7 9F            [12] 2732 	subb	a,r7
   0AA8 50 03         [24] 2733 	jnc	00364$
   0AAA 02r07rC5      [24] 2734 	ljmp	00192$
   0AAD                    2735 00364$:
                           2736 ;	radio/tdm.c:604: continue;
   0AAD                    2737 00140$:
                           2738 ;	radio/tdm.c:612: if (tdm_state != TDM_TRANSMIT &&
   0AAD 78r00         [12] 2739 	mov	r0,#_tdm_state
   0AAF E2            [24] 2740 	movx	a,@r0
   0AB0 60 11         [24] 2741 	jz	00142$
                           2742 ;	radio/tdm.c:613: !(bonus_transmit && tdm_state == TDM_RECEIVE)) {
   0AB2 20*00 03      [24] 2743 	jb	_bonus_transmit,00366$
   0AB5 02r07rC5      [24] 2744 	ljmp	00192$
   0AB8                    2745 00366$:
   0AB8 78r00         [12] 2746 	mov	r0,#_tdm_state
   0ABA E2            [24] 2747 	movx	a,@r0
   0ABB B4 02 02      [24] 2748 	cjne	a,#0x02,00367$
   0ABE 80 03         [24] 2749 	sjmp	00368$
   0AC0                    2750 00367$:
   0AC0 02r07rC5      [24] 2751 	ljmp	00192$
   0AC3                    2752 00368$:
                           2753 ;	radio/tdm.c:615: continue;
   0AC3                    2754 00142$:
                           2755 ;	radio/tdm.c:623: if (transmit_yield != 0) {
   0AC3 30*01 03      [24] 2756 	jnb	_transmit_yield,00369$
   0AC6 02r07rC5      [24] 2757 	ljmp	00192$
   0AC9                    2758 00369$:
                           2759 ;	radio/tdm.c:628: if (transmit_wait != 0) {
   0AC9 78r0C         [12] 2760 	mov	r0,#_transmit_wait
   0ACB E2            [24] 2761 	movx	a,@r0
   0ACC F5 F0         [12] 2762 	mov	b,a
   0ACE 08            [12] 2763 	inc	r0
   0ACF E2            [24] 2764 	movx	a,@r0
   0AD0 45 F0         [12] 2765 	orl	a,b
   0AD2 60 03         [24] 2766 	jz	00370$
   0AD4 02r07rC5      [24] 2767 	ljmp	00192$
   0AD7                    2768 00370$:
                           2769 ;	radio/tdm.c:633: if (!received_packet &&
   0AD7 20*03 05      [24] 2770 	jb	_received_packet,00152$
                           2771 ;	radio/tdm.c:634: radio_preamble_detected() ||
   0ADA 12r00r00      [24] 2772 	lcall	_radio_preamble_detected
   0ADD 40 05         [24] 2773 	jc	00149$
   0ADF                    2774 00152$:
                           2775 ;	radio/tdm.c:635: radio_receive_in_progress()) {
   0ADF 12r00r00      [24] 2776 	lcall	_radio_receive_in_progress
   0AE2 50 11         [24] 2777 	jnc	00150$
   0AE4                    2778 00149$:
                           2779 ;	radio/tdm.c:638: transmit_wait = packet_latency;
   0AE4 78r08         [12] 2780 	mov	r0,#_packet_latency
   0AE6 E2            [24] 2781 	movx	a,@r0
   0AE7 FE            [12] 2782 	mov	r6,a
   0AE8 08            [12] 2783 	inc	r0
   0AE9 E2            [24] 2784 	movx	a,@r0
   0AEA FF            [12] 2785 	mov	r7,a
   0AEB 78r0C         [12] 2786 	mov	r0,#_transmit_wait
   0AED EE            [12] 2787 	mov	a,r6
   0AEE F2            [24] 2788 	movx	@r0,a
   0AEF 08            [12] 2789 	inc	r0
   0AF0 EF            [12] 2790 	mov	a,r7
   0AF1 F2            [24] 2791 	movx	@r0,a
                           2792 ;	radio/tdm.c:639: continue;
   0AF2 02r07rC5      [24] 2793 	ljmp	00192$
   0AF5                    2794 00150$:
                           2795 ;	radio/tdm.c:645: statistics.average_noise = (radio_current_rssi() + 3*(uint16_t)statistics.average_noise)/4;
   0AF5 12r00r00      [24] 2796 	lcall	_radio_current_rssi
   0AF8 AF 82         [24] 2797 	mov	r7,dpl
   0AFA 7E 00         [12] 2798 	mov	r6,#0x00
   0AFC 78r01         [12] 2799 	mov	r0,#(_statistics + 0x0001)
   0AFE E2            [24] 2800 	movx	a,@r0
   0AFF 90r00r00      [24] 2801 	mov	dptr,#__mulint_PARM_2
   0B02 F0            [24] 2802 	movx	@dptr,a
   0B03 E4            [12] 2803 	clr	a
   0B04 A3            [24] 2804 	inc	dptr
   0B05 F0            [24] 2805 	movx	@dptr,a
   0B06 90 00 03      [24] 2806 	mov	dptr,#0x0003
   0B09 C0 07         [24] 2807 	push	ar7
   0B0B C0 06         [24] 2808 	push	ar6
   0B0D 12r00r00      [24] 2809 	lcall	__mulint
   0B10 AC 82         [24] 2810 	mov	r4,dpl
   0B12 AD 83         [24] 2811 	mov	r5,dph
   0B14 D0 06         [24] 2812 	pop	ar6
   0B16 D0 07         [24] 2813 	pop	ar7
   0B18 EC            [12] 2814 	mov	a,r4
   0B19 2F            [12] 2815 	add	a,r7
   0B1A FC            [12] 2816 	mov	r4,a
   0B1B ED            [12] 2817 	mov	a,r5
   0B1C 3E            [12] 2818 	addc	a,r6
   0B1D C3            [12] 2819 	clr	c
   0B1E 13            [12] 2820 	rrc	a
   0B1F CC            [12] 2821 	xch	a,r4
   0B20 13            [12] 2822 	rrc	a
   0B21 CC            [12] 2823 	xch	a,r4
   0B22 C3            [12] 2824 	clr	c
   0B23 13            [12] 2825 	rrc	a
   0B24 CC            [12] 2826 	xch	a,r4
   0B25 13            [12] 2827 	rrc	a
   0B26 CC            [12] 2828 	xch	a,r4
   0B27 FD            [12] 2829 	mov	r5,a
   0B28 78r01         [12] 2830 	mov	r0,#(_statistics + 0x0001)
   0B2A EC            [12] 2831 	mov	a,r4
   0B2B F2            [24] 2832 	movx	@r0,a
                           2833 ;	radio/tdm.c:647: if (duty_cycle_wait) {
   0B2C 30*04 03      [24] 2834 	jnb	_duty_cycle_wait,00374$
   0B2F 02r07rC5      [24] 2835 	ljmp	00192$
   0B32                    2836 00374$:
                           2837 ;	radio/tdm.c:654: if (tdm_state_remaining < packet_latency) {
   0B32 78r01         [12] 2838 	mov	r0,#_tdm_state_remaining
   0B34 79r08         [12] 2839 	mov	r1,#_packet_latency
   0B36 C3            [12] 2840 	clr	c
   0B37 E3            [24] 2841 	movx	a,@r1
   0B38 F5 F0         [12] 2842 	mov	b,a
   0B3A E2            [24] 2843 	movx	a,@r0
   0B3B 95 F0         [12] 2844 	subb	a,b
   0B3D 09            [12] 2845 	inc	r1
   0B3E E3            [24] 2846 	movx	a,@r1
   0B3F F5 F0         [12] 2847 	mov	b,a
   0B41 08            [12] 2848 	inc	r0
   0B42 E2            [24] 2849 	movx	a,@r0
   0B43 95 F0         [12] 2850 	subb	a,b
   0B45 50 03         [24] 2851 	jnc	00375$
   0B47 02r07rC5      [24] 2852 	ljmp	00192$
   0B4A                    2853 00375$:
                           2854 ;	radio/tdm.c:658: max_xmit = (tdm_state_remaining - packet_latency) / ticks_per_byte;
   0B4A 78r01         [12] 2855 	mov	r0,#_tdm_state_remaining
   0B4C 79r08         [12] 2856 	mov	r1,#_packet_latency
   0B4E E3            [24] 2857 	movx	a,@r1
   0B4F F5 F0         [12] 2858 	mov	b,a
   0B51 C3            [12] 2859 	clr	c
   0B52 E2            [24] 2860 	movx	a,@r0
   0B53 95 F0         [12] 2861 	subb	a,b
   0B55 FE            [12] 2862 	mov	r6,a
   0B56 09            [12] 2863 	inc	r1
   0B57 E3            [24] 2864 	movx	a,@r1
   0B58 F5 F0         [12] 2865 	mov	b,a
   0B5A 08            [12] 2866 	inc	r0
   0B5B E2            [24] 2867 	movx	a,@r0
   0B5C 95 F0         [12] 2868 	subb	a,b
   0B5E FF            [12] 2869 	mov	r7,a
   0B5F 78r0A         [12] 2870 	mov	r0,#_ticks_per_byte
   0B61 90r00r00      [24] 2871 	mov	dptr,#__divuint_PARM_2
   0B64 E2            [24] 2872 	movx	a,@r0
   0B65 F0            [24] 2873 	movx	@dptr,a
   0B66 08            [12] 2874 	inc	r0
   0B67 E2            [24] 2875 	movx	a,@r0
   0B68 A3            [24] 2876 	inc	dptr
   0B69 F0            [24] 2877 	movx	@dptr,a
   0B6A 8E 82         [24] 2878 	mov	dpl,r6
   0B6C 8F 83         [24] 2879 	mov	dph,r7
   0B6E 12r00r00      [24] 2880 	lcall	__divuint
   0B71 AE 82         [24] 2881 	mov	r6,dpl
   0B73 AF 83         [24] 2882 	mov	r7,dph
                           2883 ;	radio/tdm.c:659: if (max_xmit < sizeof(trailer)+1) {
   0B75 BE 03 00      [24] 2884 	cjne	r6,#0x03,00376$
   0B78                    2885 00376$:
   0B78 50 03         [24] 2886 	jnc	00377$
   0B7A 02r07rC5      [24] 2887 	ljmp	00192$
   0B7D                    2888 00377$:
                           2889 ;	radio/tdm.c:663: max_xmit -= sizeof(trailer)+1;
   0B7D 1E            [12] 2890 	dec	r6
   0B7E 1E            [12] 2891 	dec	r6
   0B7F 1E            [12] 2892 	dec	r6
                           2893 ;	radio/tdm.c:664: if (max_xmit > max_data_packet_length) {
   0B80 78r05         [12] 2894 	mov	r0,#_max_data_packet_length
   0B82 C3            [12] 2895 	clr	c
   0B83 E2            [24] 2896 	movx	a,@r0
   0B84 9E            [12] 2897 	subb	a,r6
   0B85 50 04         [24] 2898 	jnc	00160$
                           2899 ;	radio/tdm.c:665: max_xmit = max_data_packet_length;
   0B87 78r05         [12] 2900 	mov	r0,#_max_data_packet_length
   0B89 E2            [24] 2901 	movx	a,@r0
   0B8A FE            [12] 2902 	mov	r6,a
   0B8B                    2903 00160$:
                           2904 ;	radio/tdm.c:669: if (send_at_command && 
   0B8B 30*06 57      [24] 2905 	jnb	_send_at_command,00162$
                           2906 ;	radio/tdm.c:670: max_xmit >= strlen(remote_at_cmd)) {
   0B8E 90r00r1C      [24] 2907 	mov	dptr,#_remote_at_cmd
   0B91 75 F0 60      [24] 2908 	mov	b,#0x60
   0B94 C0 06         [24] 2909 	push	ar6
   0B96 12r00r00      [24] 2910 	lcall	_strlen
   0B99 AD 82         [24] 2911 	mov	r5,dpl
   0B9B AF 83         [24] 2912 	mov	r7,dph
   0B9D D0 06         [24] 2913 	pop	ar6
   0B9F 8E 03         [24] 2914 	mov	ar3,r6
   0BA1 7C 00         [12] 2915 	mov	r4,#0x00
   0BA3 C3            [12] 2916 	clr	c
   0BA4 EB            [12] 2917 	mov	a,r3
   0BA5 9D            [12] 2918 	subb	a,r5
   0BA6 EC            [12] 2919 	mov	a,r4
   0BA7 9F            [12] 2920 	subb	a,r7
   0BA8 40 3B         [24] 2921 	jc	00162$
                           2922 ;	radio/tdm.c:672: len = strlen(remote_at_cmd);
   0BAA 90r00r1C      [24] 2923 	mov	dptr,#_remote_at_cmd
   0BAD 75 F0 60      [24] 2924 	mov	b,#0x60
   0BB0 C0 06         [24] 2925 	push	ar6
   0BB2 12r00r00      [24] 2926 	lcall	_strlen
   0BB5 AD 82         [24] 2927 	mov	r5,dpl
   0BB7 78r33         [12] 2928 	mov	r0,#_tdm_serial_loop_len_2_208
   0BB9 ED            [12] 2929 	mov	a,r5
   0BBA F2            [24] 2930 	movx	@r0,a
                           2931 ;	radio/tdm.c:673: memcpy(pbuf, remote_at_cmd, len);
   0BBB 90r00r00      [24] 2932 	mov	dptr,#_memcpy_PARM_2
   0BBE 74r1C         [12] 2933 	mov	a,#_remote_at_cmd
   0BC0 F0            [24] 2934 	movx	@dptr,a
   0BC1 E4            [12] 2935 	clr	a
   0BC2 A3            [24] 2936 	inc	dptr
   0BC3 F0            [24] 2937 	movx	@dptr,a
   0BC4 74 60         [12] 2938 	mov	a,#0x60
   0BC6 A3            [24] 2939 	inc	dptr
   0BC7 F0            [24] 2940 	movx	@dptr,a
   0BC8 90r00r00      [24] 2941 	mov	dptr,#_memcpy_PARM_3
   0BCB ED            [12] 2942 	mov	a,r5
   0BCC F0            [24] 2943 	movx	@dptr,a
   0BCD E4            [12] 2944 	clr	a
   0BCE A3            [24] 2945 	inc	dptr
   0BCF F0            [24] 2946 	movx	@dptr,a
   0BD0 90r00r00      [24] 2947 	mov	dptr,#_pbuf
   0BD3 75 F0 00      [24] 2948 	mov	b,#0x00
   0BD6 12r00r00      [24] 2949 	lcall	_memcpy
   0BD9 D0 06         [24] 2950 	pop	ar6
                           2951 ;	radio/tdm.c:674: trailer.command = 1;
   0BDB 78r1B         [12] 2952 	mov	r0,#(_trailer + 0x0001)
   0BDD E2            [24] 2953 	movx	a,@r0
   0BDE 44 20         [12] 2954 	orl	a,#0x20
   0BE0 F2            [24] 2955 	movx	@r0,a
                           2956 ;	radio/tdm.c:675: send_at_command = false;
   0BE1 C2*06         [12] 2957 	clr	_send_at_command
   0BE3 80 26         [24] 2958 	sjmp	00163$
   0BE5                    2959 00162$:
                           2960 ;	radio/tdm.c:678: len = packet_get_next(max_xmit, pbuf);
   0BE5 78r00         [12] 2961 	mov	r0,#_packet_get_next_PARM_2
   0BE7 74r00         [12] 2962 	mov	a,#_pbuf
   0BE9 F2            [24] 2963 	movx	@r0,a
   0BEA 08            [12] 2964 	inc	r0
   0BEB 74s00         [12] 2965 	mov	a,#(_pbuf >> 8)
   0BED F2            [24] 2966 	movx	@r0,a
   0BEE 8E 82         [24] 2967 	mov	dpl,r6
   0BF0 C0 06         [24] 2968 	push	ar6
   0BF2 12r00r00      [24] 2969 	lcall	_packet_get_next
   0BF5 E5 82         [12] 2970 	mov	a,dpl
   0BF7 78r33         [12] 2971 	mov	r0,#_tdm_serial_loop_len_2_208
   0BF9 F2            [24] 2972 	movx	@r0,a
                           2973 ;	radio/tdm.c:679: trailer.command = packet_is_injected();
   0BFA 12r00r00      [24] 2974 	lcall	_packet_is_injected
   0BFD D0 06         [24] 2975 	pop	ar6
   0BFF 92*09         [24] 2976 	mov  _tdm_serial_loop_sloc0_1_0,c
   0C01 E4            [12] 2977 	clr	a
   0C02 33            [12] 2978 	rlc	a
   0C03 FF            [12] 2979 	mov	r7,a
   0C04 78r1B         [12] 2980 	mov	r0,#(_trailer + 0x0001)
   0C06 13            [12] 2981 	rrc	a
   0C07 E2            [24] 2982 	movx	a,@r0
   0C08 92 E5         [24] 2983 	mov	acc.5,c
   0C0A F2            [24] 2984 	movx	@r0,a
   0C0B                    2985 00163$:
                           2986 ;	radio/tdm.c:682: if (len > max_data_packet_length) {
   0C0B 78r33         [12] 2987 	mov	r0,#_tdm_serial_loop_len_2_208
   0C0D 79r05         [12] 2988 	mov	r1,#_max_data_packet_length
   0C0F C3            [12] 2989 	clr	c
   0C10 E2            [24] 2990 	movx	a,@r0
   0C11 F5 F0         [12] 2991 	mov	b,a
   0C13 E3            [24] 2992 	movx	a,@r1
   0C14 95 F0         [12] 2993 	subb	a,b
   0C16 50 19         [24] 2994 	jnc	00166$
                           2995 ;	radio/tdm.c:683: panic("oversized tdm packet");
   0C18 C0 06         [24] 2996 	push	ar6
   0C1A 74rCE         [12] 2997 	mov	a,#__str_8
   0C1C C0 E0         [24] 2998 	push	acc
   0C1E 74s00         [12] 2999 	mov	a,#(__str_8 >> 8)
   0C20 C0 E0         [24] 3000 	push	acc
   0C22 74 80         [12] 3001 	mov	a,#0x80
   0C24 C0 E0         [24] 3002 	push	acc
   0C26 12r00r00      [24] 3003 	lcall	_panic
   0C29 15 81         [12] 3004 	dec	sp
   0C2B 15 81         [12] 3005 	dec	sp
   0C2D 15 81         [12] 3006 	dec	sp
   0C2F D0 06         [24] 3007 	pop	ar6
   0C31                    3008 00166$:
                           3009 ;	radio/tdm.c:686: trailer.bonus = (tdm_state == TDM_RECEIVE);
   0C31 78r00         [12] 3010 	mov	r0,#_tdm_state
   0C33 E2            [24] 3011 	movx	a,@r0
   0C34 B4 02 03      [24] 3012 	cjne	a,#0x02,00382$
   0C37 D3            [12] 3013 	setb	c
   0C38 80 01         [24] 3014 	sjmp	00383$
   0C3A                    3015 00382$:
   0C3A C3            [12] 3016 	clr	c
   0C3B                    3017 00383$:
   0C3B 92*09         [24] 3018 	mov  _tdm_serial_loop_sloc0_1_0,c
   0C3D E4            [12] 3019 	clr	a
   0C3E 33            [12] 3020 	rlc	a
   0C3F 78r1B         [12] 3021 	mov	r0,#(_trailer + 0x0001)
   0C41 13            [12] 3022 	rrc	a
   0C42 E2            [24] 3023 	movx	a,@r0
   0C43 92 E6         [24] 3024 	mov	acc.6,c
   0C45 F2            [24] 3025 	movx	@r0,a
                           3026 ;	radio/tdm.c:687: trailer.resend = packet_is_resend();
   0C46 C0 06         [24] 3027 	push	ar6
   0C48 12r00r00      [24] 3028 	lcall	_packet_is_resend
   0C4B D0 06         [24] 3029 	pop	ar6
   0C4D 92*09         [24] 3030 	mov  _tdm_serial_loop_sloc0_1_0,c
   0C4F E4            [12] 3031 	clr	a
   0C50 33            [12] 3032 	rlc	a
   0C51 FF            [12] 3033 	mov	r7,a
   0C52 78r1B         [12] 3034 	mov	r0,#(_trailer + 0x0001)
   0C54 13            [12] 3035 	rrc	a
   0C55 E2            [24] 3036 	movx	a,@r0
   0C56 92 E7         [24] 3037 	mov	acc.7,c
   0C58 F2            [24] 3038 	movx	@r0,a
                           3039 ;	radio/tdm.c:689: if (tdm_state == TDM_TRANSMIT &&
   0C59 78r00         [12] 3040 	mov	r0,#_tdm_state
   0C5B E2            [24] 3041 	movx	a,@r0
   0C5C 70 44         [24] 3042 	jnz	00168$
                           3043 ;	radio/tdm.c:690: len == 0 && 
   0C5E 78r33         [12] 3044 	mov	r0,#_tdm_serial_loop_len_2_208
   0C60 E2            [24] 3045 	movx	a,@r0
   0C61 70 3F         [24] 3046 	jnz	00168$
                           3047 ;	radio/tdm.c:691: send_statistics && 
   0C63 30*05 3C      [24] 3048 	jnb	_send_statistics,00168$
                           3049 ;	radio/tdm.c:692: max_xmit >= sizeof(statistics)) {
   0C66 BE 04 00      [24] 3050 	cjne	r6,#0x04,00387$
   0C69                    3051 00387$:
   0C69 40 37         [24] 3052 	jc	00168$
                           3053 ;	radio/tdm.c:694: send_statistics = 0;
   0C6B C2*05         [12] 3054 	clr	_send_statistics
                           3055 ;	radio/tdm.c:695: memcpy(pbuf, &statistics, sizeof(statistics));
   0C6D 90r00r00      [24] 3056 	mov	dptr,#_memcpy_PARM_2
   0C70 74r00         [12] 3057 	mov	a,#_statistics
   0C72 F0            [24] 3058 	movx	@dptr,a
   0C73 E4            [12] 3059 	clr	a
   0C74 A3            [24] 3060 	inc	dptr
   0C75 F0            [24] 3061 	movx	@dptr,a
   0C76 74 60         [12] 3062 	mov	a,#0x60
   0C78 A3            [24] 3063 	inc	dptr
   0C79 F0            [24] 3064 	movx	@dptr,a
   0C7A 90r00r00      [24] 3065 	mov	dptr,#_memcpy_PARM_3
   0C7D 74 04         [12] 3066 	mov	a,#0x04
   0C7F F0            [24] 3067 	movx	@dptr,a
   0C80 E4            [12] 3068 	clr	a
   0C81 A3            [24] 3069 	inc	dptr
   0C82 F0            [24] 3070 	movx	@dptr,a
   0C83 90r00r00      [24] 3071 	mov	dptr,#_pbuf
   0C86 75 F0 00      [24] 3072 	mov	b,#0x00
   0C89 12r00r00      [24] 3073 	lcall	_memcpy
                           3074 ;	radio/tdm.c:696: len = sizeof(statistics);
   0C8C 78r33         [12] 3075 	mov	r0,#_tdm_serial_loop_len_2_208
   0C8E 74 04         [12] 3076 	mov	a,#0x04
   0C90 F2            [24] 3077 	movx	@r0,a
                           3078 ;	radio/tdm.c:699: trailer.window = 0;
   0C91 78r1A         [12] 3079 	mov	r0,#_trailer
   0C93 E4            [12] 3080 	clr	a
   0C94 F2            [24] 3081 	movx	@r0,a
   0C95 08            [12] 3082 	inc	r0
   0C96 E2            [24] 3083 	movx	a,@r0
   0C97 54 E0         [12] 3084 	anl	a,#0xE0
   0C99 F2            [24] 3085 	movx	@r0,a
                           3086 ;	radio/tdm.c:700: trailer.resend = 0;
   0C9A 78r1B         [12] 3087 	mov	r0,#(_trailer + 0x0001)
   0C9C E2            [24] 3088 	movx	a,@r0
   0C9D 54 7F         [12] 3089 	anl	a,#0x7F
   0C9F F2            [24] 3090 	movx	@r0,a
   0CA0 80 28         [24] 3091 	sjmp	00169$
   0CA2                    3092 00168$:
                           3093 ;	radio/tdm.c:705: trailer.window = (uint16_t)(tdm_state_remaining - flight_time_estimate(len+sizeof(trailer)));
   0CA2 78r33         [12] 3094 	mov	r0,#_tdm_serial_loop_len_2_208
   0CA4 E2            [24] 3095 	movx	a,@r0
   0CA5 24 02         [12] 3096 	add	a,#0x02
   0CA7 F5 82         [12] 3097 	mov	dpl,a
   0CA9 12r00rDE      [24] 3098 	lcall	_flight_time_estimate
   0CAC AE 82         [24] 3099 	mov	r6,dpl
   0CAE AF 83         [24] 3100 	mov	r7,dph
   0CB0 78r01         [12] 3101 	mov	r0,#_tdm_state_remaining
   0CB2 E2            [24] 3102 	movx	a,@r0
   0CB3 C3            [12] 3103 	clr	c
   0CB4 9E            [12] 3104 	subb	a,r6
   0CB5 FE            [12] 3105 	mov	r6,a
   0CB6 08            [12] 3106 	inc	r0
   0CB7 E2            [24] 3107 	movx	a,@r0
   0CB8 9F            [12] 3108 	subb	a,r7
   0CB9 FF            [12] 3109 	mov	r7,a
   0CBA 78r1A         [12] 3110 	mov	r0,#_trailer
   0CBC EE            [12] 3111 	mov	a,r6
   0CBD F2            [24] 3112 	movx	@r0,a
   0CBE 08            [12] 3113 	inc	r0
   0CBF EF            [12] 3114 	mov	a,r7
   0CC0 54 1F         [12] 3115 	anl	a,#0x1F
   0CC2 F5 F0         [12] 3116 	mov	b,a
   0CC4 E2            [24] 3117 	movx	a,@r0
   0CC5 54 E0         [12] 3118 	anl	a,#0xE0
   0CC7 45 F0         [12] 3119 	orl	a,b
   0CC9 F2            [24] 3120 	movx	@r0,a
   0CCA                    3121 00169$:
                           3122 ;	radio/tdm.c:709: radio_set_channel(fhop_transmit_channel());
   0CCA 12r00r00      [24] 3123 	lcall	_fhop_transmit_channel
   0CCD 12r00r00      [24] 3124 	lcall	_radio_set_channel
                           3125 ;	radio/tdm.c:711: memcpy(&pbuf[len], &trailer, sizeof(trailer));
   0CD0 78r33         [12] 3126 	mov	r0,#_tdm_serial_loop_len_2_208
   0CD2 E2            [24] 3127 	movx	a,@r0
   0CD3 24r00         [12] 3128 	add	a,#_pbuf
   0CD5 FE            [12] 3129 	mov	r6,a
   0CD6 E4            [12] 3130 	clr	a
   0CD7 34s00         [12] 3131 	addc	a,#(_pbuf >> 8)
   0CD9 FF            [12] 3132 	mov	r7,a
   0CDA 7D 00         [12] 3133 	mov	r5,#0x00
   0CDC 90r00r00      [24] 3134 	mov	dptr,#_memcpy_PARM_2
   0CDF 74r1A         [12] 3135 	mov	a,#_trailer
   0CE1 F0            [24] 3136 	movx	@dptr,a
   0CE2 E4            [12] 3137 	clr	a
   0CE3 A3            [24] 3138 	inc	dptr
   0CE4 F0            [24] 3139 	movx	@dptr,a
   0CE5 74 60         [12] 3140 	mov	a,#0x60
   0CE7 A3            [24] 3141 	inc	dptr
   0CE8 F0            [24] 3142 	movx	@dptr,a
   0CE9 90r00r00      [24] 3143 	mov	dptr,#_memcpy_PARM_3
   0CEC 74 02         [12] 3144 	mov	a,#0x02
   0CEE F0            [24] 3145 	movx	@dptr,a
   0CEF E4            [12] 3146 	clr	a
   0CF0 A3            [24] 3147 	inc	dptr
   0CF1 F0            [24] 3148 	movx	@dptr,a
   0CF2 8E 82         [24] 3149 	mov	dpl,r6
   0CF4 8F 83         [24] 3150 	mov	dph,r7
   0CF6 8D F0         [24] 3151 	mov	b,r5
   0CF8 12r00r00      [24] 3152 	lcall	_memcpy
                           3153 ;	radio/tdm.c:713: if (len != 0 && trailer.window != 0) {
   0CFB 78r33         [12] 3154 	mov	r0,#_tdm_serial_loop_len_2_208
   0CFD E2            [24] 3155 	movx	a,@r0
   0CFE 60 0E         [24] 3156 	jz	00174$
   0D00 78r1A         [12] 3157 	mov	r0,#_trailer
   0D02 E2            [24] 3158 	movx	a,@r0
   0D03 FE            [12] 3159 	mov	r6,a
   0D04 08            [12] 3160 	inc	r0
   0D05 E2            [24] 3161 	movx	a,@r0
   0D06 54 1F         [12] 3162 	anl	a,#0x1F
   0D08 FF            [12] 3163 	mov	r7,a
   0D09 4E            [12] 3164 	orl	a,r6
   0D0A 60 02         [24] 3165 	jz	00174$
                           3166 ;	radio/tdm.c:715: LED_ACTIVITY = LED_ON;
   0D0C D2 96         [12] 3167 	setb	_LED_RED
   0D0E                    3168 00174$:
                           3169 ;	radio/tdm.c:718: if (len == 0) {
   0D0E 78r33         [12] 3170 	mov	r0,#_tdm_serial_loop_len_2_208
   0D10 E2            [24] 3171 	movx	a,@r0
   0D11 70 02         [24] 3172 	jnz	00177$
                           3173 ;	radio/tdm.c:722: transmit_yield = 1;
   0D13 D2*01         [12] 3174 	setb	_transmit_yield
   0D15                    3175 00177$:
                           3176 ;	radio/tdm.c:728: transmit_wait = packet_latency;
   0D15 78r08         [12] 3177 	mov	r0,#_packet_latency
   0D17 E2            [24] 3178 	movx	a,@r0
   0D18 FE            [12] 3179 	mov	r6,a
   0D19 08            [12] 3180 	inc	r0
   0D1A E2            [24] 3181 	movx	a,@r0
   0D1B FF            [12] 3182 	mov	r7,a
   0D1C 78r0C         [12] 3183 	mov	r0,#_transmit_wait
   0D1E EE            [12] 3184 	mov	a,r6
   0D1F F2            [24] 3185 	movx	@r0,a
   0D20 08            [12] 3186 	inc	r0
   0D21 EF            [12] 3187 	mov	a,r7
   0D22 F2            [24] 3188 	movx	@r0,a
                           3189 ;	radio/tdm.c:732: if ((duty_cycle - duty_cycle_offset) != 100) {
   0D23 78r0E         [12] 3190 	mov	r0,#_duty_cycle
   0D25 E2            [24] 3191 	movx	a,@r0
   0D26 FE            [12] 3192 	mov	r6,a
   0D27 7F 00         [12] 3193 	mov	r7,#0x00
   0D29 78r0F         [12] 3194 	mov	r0,#_duty_cycle_offset
   0D2B E2            [24] 3195 	movx	a,@r0
   0D2C FC            [12] 3196 	mov	r4,a
   0D2D 7D 00         [12] 3197 	mov	r5,#0x00
   0D2F EE            [12] 3198 	mov	a,r6
   0D30 C3            [12] 3199 	clr	c
   0D31 9C            [12] 3200 	subb	a,r4
   0D32 FE            [12] 3201 	mov	r6,a
   0D33 EF            [12] 3202 	mov	a,r7
   0D34 9D            [12] 3203 	subb	a,r5
   0D35 FF            [12] 3204 	mov	r7,a
   0D36 BE 64 05      [24] 3205 	cjne	r6,#0x64,00392$
   0D39 BF 00 02      [24] 3206 	cjne	r7,#0x00,00392$
   0D3C 80 17         [24] 3207 	sjmp	00179$
   0D3E                    3208 00392$:
                           3209 ;	radio/tdm.c:733: transmitted_ticks += flight_time_estimate(len+sizeof(trailer));
   0D3E 78r33         [12] 3210 	mov	r0,#_tdm_serial_loop_len_2_208
   0D40 E2            [24] 3211 	movx	a,@r0
   0D41 24 02         [12] 3212 	add	a,#0x02
   0D43 F5 82         [12] 3213 	mov	dpl,a
   0D45 12r00rDE      [24] 3214 	lcall	_flight_time_estimate
   0D48 AE 82         [24] 3215 	mov	r6,dpl
   0D4A AF 83         [24] 3216 	mov	r7,dph
   0D4C 78r10         [12] 3217 	mov	r0,#_transmitted_ticks
   0D4E E2            [24] 3218 	movx	a,@r0
   0D4F 2E            [12] 3219 	add	a,r6
   0D50 F2            [24] 3220 	movx	@r0,a
   0D51 08            [12] 3221 	inc	r0
   0D52 E2            [24] 3222 	movx	a,@r0
   0D53 3F            [12] 3223 	addc	a,r7
   0D54 F2            [24] 3224 	movx	@r0,a
   0D55                    3225 00179$:
                           3226 ;	radio/tdm.c:737: if (!radio_transmit(len + sizeof(trailer), pbuf, tdm_state_remaining + (silence_period/2)) &&
   0D55 78r33         [12] 3227 	mov	r0,#_tdm_serial_loop_len_2_208
   0D57 E2            [24] 3228 	movx	a,@r0
   0D58 24 02         [12] 3229 	add	a,#0x02
   0D5A FF            [12] 3230 	mov	r7,a
   0D5B 78r06         [12] 3231 	mov	r0,#_silence_period
   0D5D E2            [24] 3232 	movx	a,@r0
   0D5E FD            [12] 3233 	mov	r5,a
   0D5F 08            [12] 3234 	inc	r0
   0D60 E2            [24] 3235 	movx	a,@r0
   0D61 C3            [12] 3236 	clr	c
   0D62 13            [12] 3237 	rrc	a
   0D63 CD            [12] 3238 	xch	a,r5
   0D64 13            [12] 3239 	rrc	a
   0D65 CD            [12] 3240 	xch	a,r5
   0D66 FE            [12] 3241 	mov	r6,a
   0D67 78r01         [12] 3242 	mov	r0,#_tdm_state_remaining
   0D69 E2            [24] 3243 	movx	a,@r0
   0D6A 2D            [12] 3244 	add	a,r5
   0D6B FD            [12] 3245 	mov	r5,a
   0D6C 08            [12] 3246 	inc	r0
   0D6D E2            [24] 3247 	movx	a,@r0
   0D6E 3E            [12] 3248 	addc	a,r6
   0D6F FE            [12] 3249 	mov	r6,a
   0D70 78r00         [12] 3250 	mov	r0,#_radio_transmit_PARM_2
   0D72 74r00         [12] 3251 	mov	a,#_pbuf
   0D74 F2            [24] 3252 	movx	@r0,a
   0D75 08            [12] 3253 	inc	r0
   0D76 74s00         [12] 3254 	mov	a,#(_pbuf >> 8)
   0D78 F2            [24] 3255 	movx	@r0,a
   0D79 78r00         [12] 3256 	mov	r0,#_radio_transmit_PARM_3
   0D7B ED            [12] 3257 	mov	a,r5
   0D7C F2            [24] 3258 	movx	@r0,a
   0D7D 08            [12] 3259 	inc	r0
   0D7E EE            [12] 3260 	mov	a,r6
   0D7F F2            [24] 3261 	movx	@r0,a
   0D80 8F 82         [24] 3262 	mov	dpl,r7
   0D82 12r00r00      [24] 3263 	lcall	_radio_transmit
   0D85 40 1A         [24] 3264 	jc	00181$
                           3265 ;	radio/tdm.c:738: len != 0 && trailer.window != 0 && trailer.command == 0) {
   0D87 78r33         [12] 3266 	mov	r0,#_tdm_serial_loop_len_2_208
   0D89 E2            [24] 3267 	movx	a,@r0
   0D8A 60 15         [24] 3268 	jz	00181$
   0D8C 78r1A         [12] 3269 	mov	r0,#_trailer
   0D8E E2            [24] 3270 	movx	a,@r0
   0D8F FE            [12] 3271 	mov	r6,a
   0D90 08            [12] 3272 	inc	r0
   0D91 E2            [24] 3273 	movx	a,@r0
   0D92 54 1F         [12] 3274 	anl	a,#0x1F
   0D94 FF            [12] 3275 	mov	r7,a
   0D95 4E            [12] 3276 	orl	a,r6
   0D96 60 09         [24] 3277 	jz	00181$
   0D98 78r1B         [12] 3278 	mov	r0,#(_trailer + 0x0001)
   0D9A E2            [24] 3279 	movx	a,@r0
   0D9B 20 E5 03      [24] 3280 	jb	acc.5,00181$
                           3281 ;	radio/tdm.c:739: packet_force_resend();
   0D9E 12r00r00      [24] 3282 	lcall	_packet_force_resend
   0DA1                    3283 00181$:
                           3284 ;	radio/tdm.c:742: if (lbt_rssi != 0) {
   0DA1 78r12         [12] 3285 	mov	r0,#_lbt_rssi
   0DA3 E2            [24] 3286 	movx	a,@r0
   0DA4 60 0C         [24] 3287 	jz	00186$
                           3288 ;	radio/tdm.c:744: lbt_listen_time = 0;
   0DA6 78r13         [12] 3289 	mov	r0,#_lbt_listen_time
   0DA8 E4            [12] 3290 	clr	a
   0DA9 F2            [24] 3291 	movx	@r0,a
   0DAA 08            [12] 3292 	inc	r0
   0DAB F2            [24] 3293 	movx	@r0,a
                           3294 ;	radio/tdm.c:745: lbt_rand = 0;
   0DAC 78r17         [12] 3295 	mov	r0,#_lbt_rand
   0DAE E4            [12] 3296 	clr	a
   0DAF F2            [24] 3297 	movx	@r0,a
   0DB0 08            [12] 3298 	inc	r0
   0DB1 F2            [24] 3299 	movx	@r0,a
   0DB2                    3300 00186$:
                           3301 ;	radio/tdm.c:749: radio_set_channel(fhop_receive_channel());
   0DB2 12r00r00      [24] 3302 	lcall	_fhop_receive_channel
   0DB5 12r00r00      [24] 3303 	lcall	_radio_set_channel
                           3304 ;	radio/tdm.c:752: radio_receiver_on();
   0DB8 12r00r00      [24] 3305 	lcall	_radio_receiver_on
                           3306 ;	radio/tdm.c:754: if (len != 0 && trailer.window != 0) {
   0DBB 78r33         [12] 3307 	mov	r0,#_tdm_serial_loop_len_2_208
   0DBD E2            [24] 3308 	movx	a,@r0
   0DBE 70 03         [24] 3309 	jnz	00398$
   0DC0 02r07rC5      [24] 3310 	ljmp	00192$
   0DC3                    3311 00398$:
   0DC3 78r1A         [12] 3312 	mov	r0,#_trailer
   0DC5 E2            [24] 3313 	movx	a,@r0
   0DC6 FE            [12] 3314 	mov	r6,a
   0DC7 08            [12] 3315 	inc	r0
   0DC8 E2            [24] 3316 	movx	a,@r0
   0DC9 54 1F         [12] 3317 	anl	a,#0x1F
   0DCB FF            [12] 3318 	mov	r7,a
   0DCC 4E            [12] 3319 	orl	a,r6
   0DCD 70 03         [24] 3320 	jnz	00399$
   0DCF 02r07rC5      [24] 3321 	ljmp	00192$
   0DD2                    3322 00399$:
                           3323 ;	radio/tdm.c:755: LED_ACTIVITY = LED_OFF;
   0DD2 C2 96         [12] 3324 	clr	_LED_RED
   0DD4 02r07rC5      [24] 3325 	ljmp	00192$
                           3326 ;------------------------------------------------------------
                           3327 ;Allocation info for local variables in function 'tdm_init'
                           3328 ;------------------------------------------------------------
                           3329 ;sloc0                     Allocated with name '_tdm_init_sloc0_1_0'
                           3330 ;------------------------------------------------------------
                           3331 ;	radio/tdm.c:873: tdm_init(void)
                           3332 ;	-----------------------------------------
                           3333 ;	 function tdm_init
                           3334 ;	-----------------------------------------
   0DD7                    3335 _tdm_init:
                           3336 ;	radio/tdm.c:876: __pdata uint8_t air_rate = radio_air_rate();
   0DD7 12r00r00      [24] 3337 	lcall	_radio_air_rate
   0DDA AF 82         [24] 3338 	mov	r7,dpl
                           3339 ;	radio/tdm.c:885: ticks_per_byte = (8+(8000000UL/(air_rate*1000UL)))/16;
   0DDC 90r00r00      [24] 3340 	mov	dptr,#__mullong_PARM_2
   0DDF EF            [12] 3341 	mov	a,r7
   0DE0 F0            [24] 3342 	movx	@dptr,a
   0DE1 E4            [12] 3343 	clr	a
   0DE2 A3            [24] 3344 	inc	dptr
   0DE3 F0            [24] 3345 	movx	@dptr,a
   0DE4 E4            [12] 3346 	clr	a
   0DE5 A3            [24] 3347 	inc	dptr
   0DE6 F0            [24] 3348 	movx	@dptr,a
   0DE7 E4            [12] 3349 	clr	a
   0DE8 A3            [24] 3350 	inc	dptr
   0DE9 F0            [24] 3351 	movx	@dptr,a
   0DEA 90 03 E8      [24] 3352 	mov	dptr,#0x03E8
   0DED E4            [12] 3353 	clr	a
   0DEE F5 F0         [12] 3354 	mov	b,a
   0DF0 12r00r00      [24] 3355 	lcall	__mullong
   0DF3 AC 82         [24] 3356 	mov	r4,dpl
   0DF5 AD 83         [24] 3357 	mov	r5,dph
   0DF7 AE F0         [24] 3358 	mov	r6,b
   0DF9 FF            [12] 3359 	mov	r7,a
   0DFA 90r00r00      [24] 3360 	mov	dptr,#__divulong_PARM_2
   0DFD EC            [12] 3361 	mov	a,r4
   0DFE F0            [24] 3362 	movx	@dptr,a
   0DFF ED            [12] 3363 	mov	a,r5
   0E00 A3            [24] 3364 	inc	dptr
   0E01 F0            [24] 3365 	movx	@dptr,a
   0E02 EE            [12] 3366 	mov	a,r6
   0E03 A3            [24] 3367 	inc	dptr
   0E04 F0            [24] 3368 	movx	@dptr,a
   0E05 EF            [12] 3369 	mov	a,r7
   0E06 A3            [24] 3370 	inc	dptr
   0E07 F0            [24] 3371 	movx	@dptr,a
   0E08 90 12 00      [24] 3372 	mov	dptr,#0x1200
   0E0B 75 F0 7A      [24] 3373 	mov	b,#0x7A
   0E0E E4            [12] 3374 	clr	a
   0E0F 12r00r00      [24] 3375 	lcall	__divulong
   0E12 AC 82         [24] 3376 	mov	r4,dpl
   0E14 AD 83         [24] 3377 	mov	r5,dph
   0E16 AE F0         [24] 3378 	mov	r6,b
   0E18 FF            [12] 3379 	mov	r7,a
   0E19 74 08         [12] 3380 	mov	a,#0x08
   0E1B 2C            [12] 3381 	add	a,r4
   0E1C FC            [12] 3382 	mov	r4,a
   0E1D E4            [12] 3383 	clr	a
   0E1E 3D            [12] 3384 	addc	a,r5
   0E1F FD            [12] 3385 	mov	r5,a
   0E20 E4            [12] 3386 	clr	a
   0E21 3E            [12] 3387 	addc	a,r6
   0E22 FE            [12] 3388 	mov	r6,a
   0E23 E4            [12] 3389 	clr	a
   0E24 3F            [12] 3390 	addc	a,r7
   0E25 FF            [12] 3391 	mov	r7,a
   0E26 ED            [12] 3392 	mov	a,r5
   0E27 C4            [12] 3393 	swap	a
   0E28 CC            [12] 3394 	xch	a,r4
   0E29 C4            [12] 3395 	swap	a
   0E2A 54 0F         [12] 3396 	anl	a,#0x0F
   0E2C 6C            [12] 3397 	xrl	a,r4
   0E2D CC            [12] 3398 	xch	a,r4
   0E2E 54 0F         [12] 3399 	anl	a,#0x0F
   0E30 CC            [12] 3400 	xch	a,r4
   0E31 6C            [12] 3401 	xrl	a,r4
   0E32 CC            [12] 3402 	xch	a,r4
   0E33 FD            [12] 3403 	mov	r5,a
   0E34 EE            [12] 3404 	mov	a,r6
   0E35 C4            [12] 3405 	swap	a
   0E36 54 F0         [12] 3406 	anl	a,#0xF0
   0E38 4D            [12] 3407 	orl	a,r5
   0E39 FD            [12] 3408 	mov	r5,a
   0E3A EF            [12] 3409 	mov	a,r7
   0E3B C4            [12] 3410 	swap	a
   0E3C CE            [12] 3411 	xch	a,r6
   0E3D C4            [12] 3412 	swap	a
   0E3E 54 0F         [12] 3413 	anl	a,#0x0F
   0E40 6E            [12] 3414 	xrl	a,r6
   0E41 CE            [12] 3415 	xch	a,r6
   0E42 54 0F         [12] 3416 	anl	a,#0x0F
   0E44 CE            [12] 3417 	xch	a,r6
   0E45 6E            [12] 3418 	xrl	a,r6
   0E46 CE            [12] 3419 	xch	a,r6
   0E47 78r0A         [12] 3420 	mov	r0,#_ticks_per_byte
   0E49 EC            [12] 3421 	mov	a,r4
   0E4A F2            [24] 3422 	movx	@r0,a
   0E4B 08            [12] 3423 	inc	r0
   0E4C ED            [12] 3424 	mov	a,r5
   0E4D F2            [24] 3425 	movx	@r0,a
                           3426 ;	radio/tdm.c:892: packet_latency = (8+(10/2)) * ticks_per_byte + 13;
   0E4E 90r00r00      [24] 3427 	mov	dptr,#__mulint_PARM_2
   0E51 EC            [12] 3428 	mov	a,r4
   0E52 F0            [24] 3429 	movx	@dptr,a
   0E53 ED            [12] 3430 	mov	a,r5
   0E54 A3            [24] 3431 	inc	dptr
   0E55 F0            [24] 3432 	movx	@dptr,a
   0E56 90 00 0D      [24] 3433 	mov	dptr,#0x000D
   0E59 C0 05         [24] 3434 	push	ar5
   0E5B C0 04         [24] 3435 	push	ar4
   0E5D 12r00r00      [24] 3436 	lcall	__mulint
   0E60 E5 82         [12] 3437 	mov	a,dpl
   0E62 85 83 F0      [24] 3438 	mov	b,dph
   0E65 D0 04         [24] 3439 	pop	ar4
   0E67 D0 05         [24] 3440 	pop	ar5
   0E69 24 0D         [12] 3441 	add	a,#0x0D
   0E6B FE            [12] 3442 	mov	r6,a
   0E6C E4            [12] 3443 	clr	a
   0E6D 35 F0         [12] 3444 	addc	a,b
   0E6F FF            [12] 3445 	mov	r7,a
   0E70 78r08         [12] 3446 	mov	r0,#_packet_latency
   0E72 EE            [12] 3447 	mov	a,r6
   0E73 F2            [24] 3448 	movx	@r0,a
   0E74 08            [12] 3449 	inc	r0
   0E75 EF            [12] 3450 	mov	a,r7
   0E76 F2            [24] 3451 	movx	@r0,a
                           3452 ;	radio/tdm.c:894: if (feature_golay) {
   0E77 30*00 2E      [24] 3453 	jnb	_feature_golay,00102$
                           3454 ;	radio/tdm.c:895: max_data_packet_length = (MAX_PACKET_LENGTH/2) - (6+sizeof(trailer));
   0E7A 78r05         [12] 3455 	mov	r0,#_max_data_packet_length
   0E7C 74 76         [12] 3456 	mov	a,#0x76
   0E7E F2            [24] 3457 	movx	@r0,a
                           3458 ;	radio/tdm.c:898: ticks_per_byte *= 2;
   0E7F ED            [12] 3459 	mov	a,r5
   0E80 CC            [12] 3460 	xch	a,r4
   0E81 25 E0         [12] 3461 	add	a,acc
   0E83 CC            [12] 3462 	xch	a,r4
   0E84 33            [12] 3463 	rlc	a
   0E85 FD            [12] 3464 	mov	r5,a
   0E86 78r0A         [12] 3465 	mov	r0,#_ticks_per_byte
   0E88 EC            [12] 3466 	mov	a,r4
   0E89 F2            [24] 3467 	movx	@r0,a
   0E8A 08            [12] 3468 	inc	r0
   0E8B ED            [12] 3469 	mov	a,r5
   0E8C F2            [24] 3470 	movx	@r0,a
                           3471 ;	radio/tdm.c:901: packet_latency += 4*ticks_per_byte;
   0E8D ED            [12] 3472 	mov	a,r5
   0E8E CC            [12] 3473 	xch	a,r4
   0E8F 25 E0         [12] 3474 	add	a,acc
   0E91 CC            [12] 3475 	xch	a,r4
   0E92 33            [12] 3476 	rlc	a
   0E93 CC            [12] 3477 	xch	a,r4
   0E94 25 E0         [12] 3478 	add	a,acc
   0E96 CC            [12] 3479 	xch	a,r4
   0E97 33            [12] 3480 	rlc	a
   0E98 FD            [12] 3481 	mov	r5,a
   0E99 EC            [12] 3482 	mov	a,r4
   0E9A 2E            [12] 3483 	add	a,r6
   0E9B FE            [12] 3484 	mov	r6,a
   0E9C ED            [12] 3485 	mov	a,r5
   0E9D 3F            [12] 3486 	addc	a,r7
   0E9E FF            [12] 3487 	mov	r7,a
   0E9F 78r08         [12] 3488 	mov	r0,#_packet_latency
   0EA1 EE            [12] 3489 	mov	a,r6
   0EA2 F2            [24] 3490 	movx	@r0,a
   0EA3 08            [12] 3491 	inc	r0
   0EA4 EF            [12] 3492 	mov	a,r7
   0EA5 F2            [24] 3493 	movx	@r0,a
   0EA6 80 05         [24] 3494 	sjmp	00103$
   0EA8                    3495 00102$:
                           3496 ;	radio/tdm.c:903: max_data_packet_length = MAX_PACKET_LENGTH - sizeof(trailer);
   0EA8 78r05         [12] 3497 	mov	r0,#_max_data_packet_length
   0EAA 74 FA         [12] 3498 	mov	a,#0xFA
   0EAC F2            [24] 3499 	movx	@r0,a
   0EAD                    3500 00103$:
                           3501 ;	radio/tdm.c:907: silence_period = 2*packet_latency;
   0EAD 78r08         [12] 3502 	mov	r0,#_packet_latency
   0EAF 79r06         [12] 3503 	mov	r1,#_silence_period
   0EB1 E2            [24] 3504 	movx	a,@r0
   0EB2 F3            [24] 3505 	movx	@r1,a
   0EB3 08            [12] 3506 	inc	r0
   0EB4 E2            [24] 3507 	movx	a,@r0
   0EB5 F5 F0         [12] 3508 	mov	b,a
   0EB7 E3            [24] 3509 	movx	a,@r1
   0EB8 25 E0         [12] 3510 	add	a,acc
   0EBA C5 F0         [12] 3511 	xch	a,b
   0EBC 33            [12] 3512 	rlc	a
   0EBD C5 F0         [12] 3513 	xch	a,b
   0EBF F3            [24] 3514 	movx	@r1,a
   0EC0 09            [12] 3515 	inc	r1
   0EC1 E5 F0         [12] 3516 	mov	a,b
   0EC3 F3            [24] 3517 	movx	@r1,a
                           3518 ;	radio/tdm.c:910: window_width = 3*(packet_latency+(max_data_packet_length*(uint32_t)ticks_per_byte));
   0EC4 78r0A         [12] 3519 	mov	r0,#_ticks_per_byte
   0EC6 90r00r00      [24] 3520 	mov	dptr,#__mullong_PARM_2
   0EC9 E2            [24] 3521 	movx	a,@r0
   0ECA F0            [24] 3522 	movx	@dptr,a
   0ECB 08            [12] 3523 	inc	r0
   0ECC E2            [24] 3524 	movx	a,@r0
   0ECD A3            [24] 3525 	inc	dptr
   0ECE F0            [24] 3526 	movx	@dptr,a
   0ECF E4            [12] 3527 	clr	a
   0ED0 A3            [24] 3528 	inc	dptr
   0ED1 F0            [24] 3529 	movx	@dptr,a
   0ED2 E4            [12] 3530 	clr	a
   0ED3 A3            [24] 3531 	inc	dptr
   0ED4 F0            [24] 3532 	movx	@dptr,a
   0ED5 78r05         [12] 3533 	mov	r0,#_max_data_packet_length
   0ED7 E2            [24] 3534 	movx	a,@r0
   0ED8 FC            [12] 3535 	mov	r4,a
   0ED9 7D 00         [12] 3536 	mov	r5,#0x00
   0EDB 7E 00         [12] 3537 	mov	r6,#0x00
   0EDD 7F 00         [12] 3538 	mov	r7,#0x00
   0EDF 8C 82         [24] 3539 	mov	dpl,r4
   0EE1 8D 83         [24] 3540 	mov	dph,r5
   0EE3 8E F0         [24] 3541 	mov	b,r6
   0EE5 EF            [12] 3542 	mov	a,r7
   0EE6 12r00r00      [24] 3543 	lcall	__mullong
   0EE9 85 82*19      [24] 3544 	mov	_tdm_init_sloc0_1_0,dpl
   0EEC 85 83*1A      [24] 3545 	mov	(_tdm_init_sloc0_1_0 + 1),dph
   0EEF 85 F0*1B      [24] 3546 	mov	(_tdm_init_sloc0_1_0 + 2),b
   0EF2 F5*1C         [12] 3547 	mov	(_tdm_init_sloc0_1_0 + 3),a
   0EF4 78r08         [12] 3548 	mov	r0,#_packet_latency
   0EF6 E2            [24] 3549 	movx	a,@r0
   0EF7 FA            [12] 3550 	mov	r2,a
   0EF8 08            [12] 3551 	inc	r0
   0EF9 E2            [24] 3552 	movx	a,@r0
   0EFA FB            [12] 3553 	mov	r3,a
   0EFB 7E 00         [12] 3554 	mov	r6,#0x00
   0EFD 7F 00         [12] 3555 	mov	r7,#0x00
   0EFF 90r00r00      [24] 3556 	mov	dptr,#__mullong_PARM_2
   0F02 E5*19         [12] 3557 	mov	a,_tdm_init_sloc0_1_0
   0F04 2A            [12] 3558 	add	a,r2
   0F05 F0            [24] 3559 	movx	@dptr,a
   0F06 E5*1A         [12] 3560 	mov	a,(_tdm_init_sloc0_1_0 + 1)
   0F08 3B            [12] 3561 	addc	a,r3
   0F09 A3            [24] 3562 	inc	dptr
   0F0A F0            [24] 3563 	movx	@dptr,a
   0F0B E5*1B         [12] 3564 	mov	a,(_tdm_init_sloc0_1_0 + 2)
   0F0D 3E            [12] 3565 	addc	a,r6
   0F0E A3            [24] 3566 	inc	dptr
   0F0F F0            [24] 3567 	movx	@dptr,a
   0F10 E5*1C         [12] 3568 	mov	a,(_tdm_init_sloc0_1_0 + 3)
   0F12 3F            [12] 3569 	addc	a,r7
   0F13 A3            [24] 3570 	inc	dptr
   0F14 F0            [24] 3571 	movx	@dptr,a
   0F15 90 00 03      [24] 3572 	mov	dptr,#(0x03&0x00ff)
   0F18 E4            [12] 3573 	clr	a
   0F19 F5 F0         [12] 3574 	mov	b,a
   0F1B 12r00r00      [24] 3575 	lcall	__mullong
   0F1E AC 82         [24] 3576 	mov	r4,dpl
   0F20 AD 83         [24] 3577 	mov	r5,dph
   0F22 AE F0         [24] 3578 	mov	r6,b
   0F24 FF            [12] 3579 	mov	r7,a
                           3580 ;	radio/tdm.c:913: if (lbt_rssi != 0) {
   0F25 78r12         [12] 3581 	mov	r0,#_lbt_rssi
   0F27 E2            [24] 3582 	movx	a,@r0
   0F28 60 35         [24] 3583 	jz	00105$
                           3584 ;	radio/tdm.c:915: lbt_min_time = LBT_MIN_TIME_USEC/16;
   0F2A 78r15         [12] 3585 	mov	r0,#_lbt_min_time
   0F2C 74 38         [12] 3586 	mov	a,#0x38
   0F2E F2            [24] 3587 	movx	@r0,a
   0F2F 08            [12] 3588 	inc	r0
   0F30 74 01         [12] 3589 	mov	a,#0x01
   0F32 F2            [24] 3590 	movx	@r0,a
                           3591 ;	radio/tdm.c:916: window_width = constrain(window_width, 3*lbt_min_time, window_width);
   0F33 78r00         [12] 3592 	mov	r0,#_constrain_PARM_2
   0F35 74 A8         [12] 3593 	mov	a,#0xA8
   0F37 F2            [24] 3594 	movx	@r0,a
   0F38 08            [12] 3595 	inc	r0
   0F39 74 03         [12] 3596 	mov	a,#0x03
   0F3B F2            [24] 3597 	movx	@r0,a
   0F3C 08            [12] 3598 	inc	r0
   0F3D E4            [12] 3599 	clr	a
   0F3E F2            [24] 3600 	movx	@r0,a
   0F3F 08            [12] 3601 	inc	r0
   0F40 F2            [24] 3602 	movx	@r0,a
   0F41 78r00         [12] 3603 	mov	r0,#_constrain_PARM_3
   0F43 EC            [12] 3604 	mov	a,r4
   0F44 F2            [24] 3605 	movx	@r0,a
   0F45 08            [12] 3606 	inc	r0
   0F46 ED            [12] 3607 	mov	a,r5
   0F47 F2            [24] 3608 	movx	@r0,a
   0F48 08            [12] 3609 	inc	r0
   0F49 EE            [12] 3610 	mov	a,r6
   0F4A F2            [24] 3611 	movx	@r0,a
   0F4B 08            [12] 3612 	inc	r0
   0F4C EF            [12] 3613 	mov	a,r7
   0F4D F2            [24] 3614 	movx	@r0,a
   0F4E 8C 82         [24] 3615 	mov	dpl,r4
   0F50 8D 83         [24] 3616 	mov	dph,r5
   0F52 8E F0         [24] 3617 	mov	b,r6
   0F54 EF            [12] 3618 	mov	a,r7
   0F55 12r00r00      [24] 3619 	lcall	_constrain
   0F58 AC 82         [24] 3620 	mov	r4,dpl
   0F5A AD 83         [24] 3621 	mov	r5,dph
   0F5C AE F0         [24] 3622 	mov	r6,b
   0F5E FF            [12] 3623 	mov	r7,a
   0F5F                    3624 00105$:
                           3625 ;	radio/tdm.c:921: if (window_width >= REGULATORY_MAX_WINDOW) {
   0F5F C3            [12] 3626 	clr	c
   0F60 EC            [12] 3627 	mov	a,r4
   0F61 94 A8         [12] 3628 	subb	a,#0xA8
   0F63 ED            [12] 3629 	mov	a,r5
   0F64 94 61         [12] 3630 	subb	a,#0x61
   0F66 EE            [12] 3631 	mov	a,r6
   0F67 94 00         [12] 3632 	subb	a,#0x00
   0F69 EF            [12] 3633 	mov	a,r7
   0F6A 94 00         [12] 3634 	subb	a,#0x00
   0F6C 40 08         [24] 3635 	jc	00108$
                           3636 ;	radio/tdm.c:922: window_width = REGULATORY_MAX_WINDOW;
   0F6E 7C A8         [12] 3637 	mov	r4,#0xA8
   0F70 7D 61         [12] 3638 	mov	r5,#0x61
   0F72 7E 00         [12] 3639 	mov	r6,#0x00
   0F74 7F 00         [12] 3640 	mov	r7,#0x00
                           3641 ;	radio/tdm.c:926: while (window_width > 0x1FFF) {
   0F76                    3642 00108$:
   0F76 ED            [12] 3643 	mov	a,r5
   0F77 54 E0         [12] 3644 	anl	a,#0xE0
   0F79 70 06         [24] 3645 	jnz	00136$
   0F7B EE            [12] 3646 	mov	a,r6
   0F7C 70 03         [24] 3647 	jnz	00136$
   0F7E EF            [12] 3648 	mov	a,r7
   0F7F 60 0A         [24] 3649 	jz	00110$
   0F81                    3650 00136$:
                           3651 ;	radio/tdm.c:927: window_width = 0x1FFF;
   0F81 7C FF         [12] 3652 	mov	r4,#0xFF
   0F83 7D 1F         [12] 3653 	mov	r5,#0x1F
   0F85 7E 00         [12] 3654 	mov	r6,#0x00
   0F87 7F 00         [12] 3655 	mov	r7,#0x00
   0F89 80 EB         [24] 3656 	sjmp	00108$
   0F8B                    3657 00110$:
                           3658 ;	radio/tdm.c:930: tx_window_width = window_width;
   0F8B 78r03         [12] 3659 	mov	r0,#_tx_window_width
   0F8D EC            [12] 3660 	mov	a,r4
   0F8E F2            [24] 3661 	movx	@r0,a
   0F8F 08            [12] 3662 	inc	r0
   0F90 ED            [12] 3663 	mov	a,r5
   0F91 F2            [24] 3664 	movx	@r0,a
                           3665 ;	radio/tdm.c:935: packet_latency += ((settings.preamble_length-10)/2) * ticks_per_byte;
   0F92 78r0B         [12] 3666 	mov	r0,#(_settings + 0x000b)
   0F94 E2            [24] 3667 	movx	a,@r0
   0F95 7E 00         [12] 3668 	mov	r6,#0x00
   0F97 24 F6         [12] 3669 	add	a,#0xF6
   0F99 FF            [12] 3670 	mov	r7,a
   0F9A EE            [12] 3671 	mov	a,r6
   0F9B 34 FF         [12] 3672 	addc	a,#0xFF
   0F9D FE            [12] 3673 	mov	r6,a
   0F9E 90r00r00      [24] 3674 	mov	dptr,#__divsint_PARM_2
   0FA1 74 02         [12] 3675 	mov	a,#0x02
   0FA3 F0            [24] 3676 	movx	@dptr,a
   0FA4 E4            [12] 3677 	clr	a
   0FA5 A3            [24] 3678 	inc	dptr
   0FA6 F0            [24] 3679 	movx	@dptr,a
   0FA7 8F 82         [24] 3680 	mov	dpl,r7
   0FA9 8E 83         [24] 3681 	mov	dph,r6
   0FAB C0 05         [24] 3682 	push	ar5
   0FAD C0 04         [24] 3683 	push	ar4
   0FAF 12r00r00      [24] 3684 	lcall	__divsint
   0FB2 AE 82         [24] 3685 	mov	r6,dpl
   0FB4 AF 83         [24] 3686 	mov	r7,dph
   0FB6 78r0A         [12] 3687 	mov	r0,#_ticks_per_byte
   0FB8 90r00r00      [24] 3688 	mov	dptr,#__mulint_PARM_2
   0FBB E2            [24] 3689 	movx	a,@r0
   0FBC F0            [24] 3690 	movx	@dptr,a
   0FBD 08            [12] 3691 	inc	r0
   0FBE E2            [24] 3692 	movx	a,@r0
   0FBF A3            [24] 3693 	inc	dptr
   0FC0 F0            [24] 3694 	movx	@dptr,a
   0FC1 8E 82         [24] 3695 	mov	dpl,r6
   0FC3 8F 83         [24] 3696 	mov	dph,r7
   0FC5 12r00r00      [24] 3697 	lcall	__mulint
   0FC8 AE 82         [24] 3698 	mov	r6,dpl
   0FCA AF 83         [24] 3699 	mov	r7,dph
   0FCC D0 04         [24] 3700 	pop	ar4
   0FCE D0 05         [24] 3701 	pop	ar5
   0FD0 78r08         [12] 3702 	mov	r0,#_packet_latency
   0FD2 E2            [24] 3703 	movx	a,@r0
   0FD3 2E            [12] 3704 	add	a,r6
   0FD4 F2            [24] 3705 	movx	@r0,a
   0FD5 08            [12] 3706 	inc	r0
   0FD6 E2            [24] 3707 	movx	a,@r0
   0FD7 3F            [12] 3708 	addc	a,r7
   0FD8 F2            [24] 3709 	movx	@r0,a
                           3710 ;	radio/tdm.c:939: i = (tx_window_width - packet_latency) / ticks_per_byte;
   0FD9 78r08         [12] 3711 	mov	r0,#_packet_latency
   0FDB D3            [12] 3712 	setb	c
   0FDC E2            [24] 3713 	movx	a,@r0
   0FDD 9C            [12] 3714 	subb	a,r4
   0FDE F4            [12] 3715 	cpl	a
   0FDF B3            [12] 3716 	cpl	c
   0FE0 FC            [12] 3717 	mov	r4,a
   0FE1 B3            [12] 3718 	cpl	c
   0FE2 08            [12] 3719 	inc	r0
   0FE3 E2            [24] 3720 	movx	a,@r0
   0FE4 9D            [12] 3721 	subb	a,r5
   0FE5 F4            [12] 3722 	cpl	a
   0FE6 FD            [12] 3723 	mov	r5,a
   0FE7 78r0A         [12] 3724 	mov	r0,#_ticks_per_byte
   0FE9 90r00r00      [24] 3725 	mov	dptr,#__divuint_PARM_2
   0FEC E2            [24] 3726 	movx	a,@r0
   0FED F0            [24] 3727 	movx	@dptr,a
   0FEE 08            [12] 3728 	inc	r0
   0FEF E2            [24] 3729 	movx	a,@r0
   0FF0 A3            [24] 3730 	inc	dptr
   0FF1 F0            [24] 3731 	movx	@dptr,a
   0FF2 8C 82         [24] 3732 	mov	dpl,r4
   0FF4 8D 83         [24] 3733 	mov	dph,r5
   0FF6 12r00r00      [24] 3734 	lcall	__divuint
   0FF9 AE 82         [24] 3735 	mov	r6,dpl
   0FFB AF 83         [24] 3736 	mov	r7,dph
                           3737 ;	radio/tdm.c:940: if (i > max_data_packet_length) {
   0FFD 78r05         [12] 3738 	mov	r0,#_max_data_packet_length
   0FFF E2            [24] 3739 	movx	a,@r0
   1000 FC            [12] 3740 	mov	r4,a
   1001 7D 00         [12] 3741 	mov	r5,#0x00
   1003 C3            [12] 3742 	clr	c
   1004 EC            [12] 3743 	mov	a,r4
   1005 9E            [12] 3744 	subb	a,r6
   1006 ED            [12] 3745 	mov	a,r5
   1007 9F            [12] 3746 	subb	a,r7
   1008 50 04         [24] 3747 	jnc	00112$
                           3748 ;	radio/tdm.c:941: i = max_data_packet_length;
   100A 8C 06         [24] 3749 	mov	ar6,r4
   100C 8D 07         [24] 3750 	mov	ar7,r5
   100E                    3751 00112$:
                           3752 ;	radio/tdm.c:943: packet_set_max_xmit(i);
   100E 8E 82         [24] 3753 	mov	dpl,r6
   1010 12r00r00      [24] 3754 	lcall	_packet_set_max_xmit
                           3755 ;	radio/tdm.c:946: TDM_SYNC_PIN = false;
   1013 C2 A6         [12] 3756 	clr	_TDM_SYNC_PIN
   1015 22            [24] 3757 	ret
                           3758 ;------------------------------------------------------------
                           3759 ;Allocation info for local variables in function 'tdm_report_timing'
                           3760 ;------------------------------------------------------------
                           3761 ;	radio/tdm.c:960: tdm_report_timing(void)
                           3762 ;	-----------------------------------------
                           3763 ;	 function tdm_report_timing
                           3764 ;	-----------------------------------------
   1016                    3765 _tdm_report_timing:
                           3766 ;	radio/tdm.c:962: printf("silence_period: %u\n", (unsigned)silence_period); delay_msec(1);
   1016 78r06         [12] 3767 	mov	r0,#_silence_period
   1018 E2            [24] 3768 	movx	a,@r0
   1019 C0 E0         [24] 3769 	push	acc
   101B 08            [12] 3770 	inc	r0
   101C E2            [24] 3771 	movx	a,@r0
   101D C0 E0         [24] 3772 	push	acc
   101F 74rE3         [12] 3773 	mov	a,#__str_9
   1021 C0 E0         [24] 3774 	push	acc
   1023 74s00         [12] 3775 	mov	a,#(__str_9 >> 8)
   1025 C0 E0         [24] 3776 	push	acc
   1027 74 80         [12] 3777 	mov	a,#0x80
   1029 C0 E0         [24] 3778 	push	acc
   102B 12r00r00      [24] 3779 	lcall	_printfl
   102E E5 81         [12] 3780 	mov	a,sp
   1030 24 FB         [12] 3781 	add	a,#0xfb
   1032 F5 81         [12] 3782 	mov	sp,a
   1034 90 00 01      [24] 3783 	mov	dptr,#0x0001
   1037 12r00r00      [24] 3784 	lcall	_delay_msec
                           3785 ;	radio/tdm.c:963: printf("tx_window_width: %u\n", (unsigned)tx_window_width); delay_msec(1);
   103A 78r03         [12] 3786 	mov	r0,#_tx_window_width
   103C E2            [24] 3787 	movx	a,@r0
   103D C0 E0         [24] 3788 	push	acc
   103F 08            [12] 3789 	inc	r0
   1040 E2            [24] 3790 	movx	a,@r0
   1041 C0 E0         [24] 3791 	push	acc
   1043 74rF7         [12] 3792 	mov	a,#__str_10
   1045 C0 E0         [24] 3793 	push	acc
   1047 74s00         [12] 3794 	mov	a,#(__str_10 >> 8)
   1049 C0 E0         [24] 3795 	push	acc
   104B 74 80         [12] 3796 	mov	a,#0x80
   104D C0 E0         [24] 3797 	push	acc
   104F 12r00r00      [24] 3798 	lcall	_printfl
   1052 E5 81         [12] 3799 	mov	a,sp
   1054 24 FB         [12] 3800 	add	a,#0xfb
   1056 F5 81         [12] 3801 	mov	sp,a
   1058 90 00 01      [24] 3802 	mov	dptr,#0x0001
   105B 12r00r00      [24] 3803 	lcall	_delay_msec
                           3804 ;	radio/tdm.c:964: printf("max_data_packet_length: %u\n", (unsigned)max_data_packet_length); delay_msec(1);
   105E 78r05         [12] 3805 	mov	r0,#_max_data_packet_length
   1060 E2            [24] 3806 	movx	a,@r0
   1061 FE            [12] 3807 	mov	r6,a
   1062 7F 00         [12] 3808 	mov	r7,#0x00
   1064 C0 06         [24] 3809 	push	ar6
   1066 C0 07         [24] 3810 	push	ar7
   1068 74r0C         [12] 3811 	mov	a,#__str_11
   106A C0 E0         [24] 3812 	push	acc
   106C 74s01         [12] 3813 	mov	a,#(__str_11 >> 8)
   106E C0 E0         [24] 3814 	push	acc
   1070 74 80         [12] 3815 	mov	a,#0x80
   1072 C0 E0         [24] 3816 	push	acc
   1074 12r00r00      [24] 3817 	lcall	_printfl
   1077 E5 81         [12] 3818 	mov	a,sp
   1079 24 FB         [12] 3819 	add	a,#0xfb
   107B F5 81         [12] 3820 	mov	sp,a
   107D 90 00 01      [24] 3821 	mov	dptr,#0x0001
   1080 02r00r00      [24] 3822 	ljmp	_delay_msec
                           3823 	.area CSEG    (CODE)
                           3824 	.area CONST   (CODE)
   0000                    3825 __str_0:
   0000 4C 2F 52 20 52 53  3826 	.ascii "L/R RSSI: %u/%u  L/R noise: %u/%u pkts: %u "
        53 49 3A 20 25 75
        2F 25 75 20 20 4C
        2F 52 20 6E 6F 69
        73 65 3A 20 25 75
        2F 25 75 20 70 6B
        74 73 3A 20 25 75
        20
   002B 00                 3827 	.db 0x00
   002C                    3828 __str_1:
   002C 20 74 78 65 3D 25  3829 	.ascii " txe=%u rxe=%u stx=%u srx=%u ecc=%u/%u temp=%d dco=%u"
        75 20 72 78 65 3D
        25 75 20 73 74 78
        3D 25 75 20 73 72
        78 3D 25 75 20 65
        63 63 3D 25 75 2F
        25 75 20 74 65 6D
        70 3D 25 64 20 64
        63 6F 3D 25 75
   0061 0A                 3830 	.db 0x0A
   0062 00                 3831 	.db 0x00
   0063                    3832 __str_2:
   0063 54 44 4D 3A 20 25  3833 	.ascii "TDM: %u/%u len=%u "
        75 2F 25 75 20 6C
        65 6E 3D 25 75 20
   0075 00                 3834 	.db 0x00
   0076                    3835 __str_3:
   0076 20 64 65 6C 74 61  3836 	.ascii " delta: %d"
        3A 20 25 64
   0080 0A                 3837 	.db 0x0A
   0081 00                 3838 	.db 0x00
   0082                    3839 __str_4:
   0082 54 44 4D 3A 20 63  3840 	.ascii "TDM: change timing %u/%u"
        68 61 6E 67 65 20
        74 69 6D 69 6E 67
        20 25 75 2F 25 75
   009A 0A                 3841 	.db 0x0A
   009B 00                 3842 	.db 0x00
   009C                    3843 __str_5:
   009C 54 44 4D 3A 20 73  3844 	.ascii "TDM: scanning"
        63 61 6E 6E 69 6E
        67
   00A9 0A                 3845 	.db 0x0A
   00AA 00                 3846 	.db 0x00
   00AB                    3847 __str_6:
   00AB 73 74 61 63 6B 20  3848 	.ascii "stack blown"
        62 6C 6F 77 6E
   00B6 0A                 3849 	.db 0x0A
   00B7 00                 3850 	.db 0x00
   00B8                    3851 __str_7:
   00B8 70 64 61 74 61 20  3852 	.ascii "pdata canary changed"
        63 61 6E 61 72 79
        20 63 68 61 6E 67
        65 64
   00CC 0A                 3853 	.db 0x0A
   00CD 00                 3854 	.db 0x00
   00CE                    3855 __str_8:
   00CE 6F 76 65 72 73 69  3856 	.ascii "oversized tdm packet"
        7A 65 64 20 74 64
        6D 20 70 61 63 6B
        65 74
   00E2 00                 3857 	.db 0x00
   00E3                    3858 __str_9:
   00E3 73 69 6C 65 6E 63  3859 	.ascii "silence_period: %u"
        65 5F 70 65 72 69
        6F 64 3A 20 25 75
   00F5 0A                 3860 	.db 0x0A
   00F6 00                 3861 	.db 0x00
   00F7                    3862 __str_10:
   00F7 74 78 5F 77 69 6E  3863 	.ascii "tx_window_width: %u"
        64 6F 77 5F 77 69
        64 74 68 3A 20 25
        75
   010A 0A                 3864 	.db 0x0A
   010B 00                 3865 	.db 0x00
   010C                    3866 __str_11:
   010C 6D 61 78 5F 64 61  3867 	.ascii "max_data_packet_length: %u"
        74 61 5F 70 61 63
        6B 65 74 5F 6C 65
        6E 67 74 68 3A 20
        25 75
   0126 0A                 3868 	.db 0x0A
   0127 00                 3869 	.db 0x00
                           3870 	.area XINIT   (CODE)
                           3871 	.area CABS    (ABS,CODE)
