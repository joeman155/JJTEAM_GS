                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.3.0 #8604 (May 11 2013) (Linux)
                              4 ; This file was generated Sun Nov 24 17:43:10 2013
                              5 ;--------------------------------------------------------
                              6 	.module radio
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _Receiver_ISR
                             13 	.globl _crc16
                             14 	.globl _golay_decode
                             15 	.globl _golay_encode
                             16 	.globl _delay_msec
                             17 	.globl _delay_expired
                             18 	.globl _delay_set
                             19 	.globl _timer2_tick
                             20 	.globl _panic
                             21 	.globl _calibration_get
                             22 	.globl _param_get
                             23 	.globl _memcpy
                             24 	.globl _NSS1
                             25 	.globl _IRQ
                             26 	.globl _PA_ENABLE
                             27 	.globl _PIN_ENABLE
                             28 	.globl _PIN_CONFIG
                             29 	.globl _LED_GREEN
                             30 	.globl _LED_RED
                             31 	.globl _SPI0EN
                             32 	.globl _TXBMT0
                             33 	.globl _NSS0MD0
                             34 	.globl _NSS0MD1
                             35 	.globl _RXOVRN0
                             36 	.globl _MODF0
                             37 	.globl _WCOL0
                             38 	.globl _SPIF0
                             39 	.globl _AD0CM0
                             40 	.globl _AD0CM1
                             41 	.globl _AD0CM2
                             42 	.globl _AD0WINT
                             43 	.globl _AD0BUSY
                             44 	.globl _AD0INT
                             45 	.globl _BURSTEN
                             46 	.globl _AD0EN
                             47 	.globl _CCF0
                             48 	.globl _CCF1
                             49 	.globl _CCF2
                             50 	.globl _CCF3
                             51 	.globl _CCF4
                             52 	.globl _CCF5
                             53 	.globl _CR
                             54 	.globl _CF
                             55 	.globl _P
                             56 	.globl _F1
                             57 	.globl _OV
                             58 	.globl _RS0
                             59 	.globl _RS1
                             60 	.globl _F0
                             61 	.globl _AC
                             62 	.globl _CY
                             63 	.globl _T2XCLK
                             64 	.globl _T2RCLK
                             65 	.globl _TR2
                             66 	.globl _T2SPLIT
                             67 	.globl _TF2CEN
                             68 	.globl _TF2LEN
                             69 	.globl _TF2L
                             70 	.globl _TF2H
                             71 	.globl _SI
                             72 	.globl _ACK
                             73 	.globl _ARBLOST
                             74 	.globl _ACKRQ
                             75 	.globl _STO
                             76 	.globl _STA
                             77 	.globl _TXMODE
                             78 	.globl _MASTER
                             79 	.globl _PX0
                             80 	.globl _PT0
                             81 	.globl _PX1
                             82 	.globl _PT1
                             83 	.globl _PS0
                             84 	.globl _PT2
                             85 	.globl _PSPI0
                             86 	.globl _SPI1EN
                             87 	.globl _TXBMT1
                             88 	.globl _NSS1MD0
                             89 	.globl _NSS1MD1
                             90 	.globl _RXOVRN1
                             91 	.globl _MODF1
                             92 	.globl _WCOL1
                             93 	.globl _SPIF1
                             94 	.globl _EX0
                             95 	.globl _ET0
                             96 	.globl _EX1
                             97 	.globl _ET1
                             98 	.globl _ES0
                             99 	.globl _ET2
                            100 	.globl _ESPI0
                            101 	.globl _EA
                            102 	.globl _RI0
                            103 	.globl _TI0
                            104 	.globl _RB80
                            105 	.globl _TB80
                            106 	.globl _REN0
                            107 	.globl _MCE0
                            108 	.globl _S0MODE
                            109 	.globl _CRC0VAL
                            110 	.globl _CRC0INIT
                            111 	.globl _CRC0SEL
                            112 	.globl _IT0
                            113 	.globl _IE0
                            114 	.globl _IT1
                            115 	.globl _IE1
                            116 	.globl _TR0
                            117 	.globl _TF0
                            118 	.globl _TR1
                            119 	.globl _TF1
                            120 	.globl _PCA0CP4
                            121 	.globl _PCA0CP0
                            122 	.globl _PCA0
                            123 	.globl _PCA0CP3
                            124 	.globl _PCA0CP2
                            125 	.globl _PCA0CP1
                            126 	.globl _PCA0CP5
                            127 	.globl _TMR2
                            128 	.globl _TMR2RL
                            129 	.globl _ADC0LT
                            130 	.globl _ADC0GT
                            131 	.globl _ADC0
                            132 	.globl _TMR3
                            133 	.globl _TMR3RL
                            134 	.globl _TOFF
                            135 	.globl _DP
                            136 	.globl _VDM0CN
                            137 	.globl _PCA0CPH4
                            138 	.globl _PCA0CPL4
                            139 	.globl _PCA0CPH0
                            140 	.globl _PCA0CPL0
                            141 	.globl _PCA0H
                            142 	.globl _PCA0L
                            143 	.globl _SPI0CN
                            144 	.globl _EIP2
                            145 	.globl _EIP1
                            146 	.globl _SMB0ADM
                            147 	.globl _SMB0ADR
                            148 	.globl _P2MDIN
                            149 	.globl _P1MDIN
                            150 	.globl _P0MDIN
                            151 	.globl _B
                            152 	.globl _RSTSRC
                            153 	.globl _PCA0CPH3
                            154 	.globl _PCA0CPL3
                            155 	.globl _PCA0CPH2
                            156 	.globl _PCA0CPL2
                            157 	.globl _PCA0CPH1
                            158 	.globl _PCA0CPL1
                            159 	.globl _ADC0CN
                            160 	.globl _EIE2
                            161 	.globl _EIE1
                            162 	.globl _FLWR
                            163 	.globl _IT01CF
                            164 	.globl _XBR2
                            165 	.globl _XBR1
                            166 	.globl _XBR0
                            167 	.globl _ACC
                            168 	.globl _PCA0PWM
                            169 	.globl _PCA0CPM4
                            170 	.globl _PCA0CPM3
                            171 	.globl _PCA0CPM2
                            172 	.globl _PCA0CPM1
                            173 	.globl _PCA0CPM0
                            174 	.globl _PCA0MD
                            175 	.globl _PCA0CN
                            176 	.globl _P0MAT
                            177 	.globl _P2SKIP
                            178 	.globl _P1SKIP
                            179 	.globl _P0SKIP
                            180 	.globl _PCA0CPH5
                            181 	.globl _PCA0CPL5
                            182 	.globl _REF0CN
                            183 	.globl _PSW
                            184 	.globl _P1MAT
                            185 	.globl _PCA0CPM5
                            186 	.globl _TMR2H
                            187 	.globl _TMR2L
                            188 	.globl _TMR2RLH
                            189 	.globl _TMR2RLL
                            190 	.globl _REG0CN
                            191 	.globl _TMR2CN
                            192 	.globl _P0MASK
                            193 	.globl _ADC0LTH
                            194 	.globl _ADC0LTL
                            195 	.globl _ADC0GTH
                            196 	.globl _ADC0GTL
                            197 	.globl _SMB0DAT
                            198 	.globl _SMB0CF
                            199 	.globl _SMB0CN
                            200 	.globl _P1MASK
                            201 	.globl _ADC0H
                            202 	.globl _ADC0L
                            203 	.globl _ADC0TK
                            204 	.globl _ADC0CF
                            205 	.globl _ADC0MX
                            206 	.globl _ADC0PWR
                            207 	.globl _ADC0AC
                            208 	.globl _IREF0CN
                            209 	.globl _IP
                            210 	.globl _FLKEY
                            211 	.globl _FLSCL
                            212 	.globl _PMU0CF
                            213 	.globl _OSCICL
                            214 	.globl _OSCICN
                            215 	.globl _OSCXCN
                            216 	.globl _SPI1CN
                            217 	.globl _ONESHOT
                            218 	.globl _EMI0TC
                            219 	.globl _RTC0KEY
                            220 	.globl _RTC0DAT
                            221 	.globl _RTC0ADR
                            222 	.globl _EMI0CF
                            223 	.globl _EMI0CN
                            224 	.globl _CLKSEL
                            225 	.globl _IE
                            226 	.globl _SFRPAGE
                            227 	.globl _P2DRV
                            228 	.globl _P2MDOUT
                            229 	.globl _P1DRV
                            230 	.globl _P1MDOUT
                            231 	.globl _P0DRV
                            232 	.globl _P0MDOUT
                            233 	.globl _SPI0DAT
                            234 	.globl _SPI0CKR
                            235 	.globl _SPI0CFG
                            236 	.globl _P2
                            237 	.globl _CPT0MX
                            238 	.globl _CPT1MX
                            239 	.globl _CPT0MD
                            240 	.globl _CPT1MD
                            241 	.globl _CPT0CN
                            242 	.globl _CPT1CN
                            243 	.globl _SBUF0
                            244 	.globl _SCON0
                            245 	.globl _CRC0CNT
                            246 	.globl _DC0CN
                            247 	.globl _CRC0AUTO
                            248 	.globl _DC0CF
                            249 	.globl _TMR3H
                            250 	.globl _CRC0FLIP
                            251 	.globl _TMR3L
                            252 	.globl _CRC0IN
                            253 	.globl _TMR3RLH
                            254 	.globl _CRC0CN
                            255 	.globl _TMR3RLL
                            256 	.globl _CRC0DAT
                            257 	.globl _TMR3CN
                            258 	.globl _P1
                            259 	.globl _PSCTL
                            260 	.globl _CKCON
                            261 	.globl _TH1
                            262 	.globl _TH0
                            263 	.globl _TL1
                            264 	.globl _TL0
                            265 	.globl _TMOD
                            266 	.globl _TCON
                            267 	.globl _PCON
                            268 	.globl _TOFFH
                            269 	.globl _SPI1DAT
                            270 	.globl _TOFFL
                            271 	.globl _SPI1CKR
                            272 	.globl _SPI1CFG
                            273 	.globl _DPH
                            274 	.globl _DPL
                            275 	.globl _SP
                            276 	.globl _P0
                            277 	.globl _radio_buffer
                            278 	.globl _radio_transmit_PARM_3
                            279 	.globl _radio_transmit_PARM_2
                            280 	.globl _radio_receive_packet_PARM_2
                            281 	.globl _settings
                            282 	.globl _netid
                            283 	.globl _last_rssi
                            284 	.globl _partial_packet_length
                            285 	.globl _receive_packet_length
                            286 	.globl _radio_set_diversity_PARM_1
                            287 	.globl _radio_receive_packet
                            288 	.globl _radio_receive_in_progress
                            289 	.globl _radio_preamble_detected
                            290 	.globl _radio_last_rssi
                            291 	.globl _radio_current_rssi
                            292 	.globl _radio_air_rate
                            293 	.globl _radio_transmit
                            294 	.globl _radio_receiver_on
                            295 	.globl _radio_initialise
                            296 	.globl _radio_set_frequency
                            297 	.globl _radio_set_channel_spacing
                            298 	.globl _radio_set_channel
                            299 	.globl _radio_get_channel
                            300 	.globl _radio_configure
                            301 	.globl _radio_set_transmit_power
                            302 	.globl _radio_get_transmit_power
                            303 	.globl _radio_set_network_id
                            304 	.globl _radio_temperature
                            305 	.globl _radio_set_diversity
                            306 ;--------------------------------------------------------
                            307 ; special function registers
                            308 ;--------------------------------------------------------
                            309 	.area RSEG    (ABS,DATA)
   0000                     310 	.org 0x0000
                     0080   311 _P0	=	0x0080
                     0081   312 _SP	=	0x0081
                     0082   313 _DPL	=	0x0082
                     0083   314 _DPH	=	0x0083
                     0084   315 _SPI1CFG	=	0x0084
                     0085   316 _SPI1CKR	=	0x0085
                     0085   317 _TOFFL	=	0x0085
                     0086   318 _SPI1DAT	=	0x0086
                     0086   319 _TOFFH	=	0x0086
                     0087   320 _PCON	=	0x0087
                     0088   321 _TCON	=	0x0088
                     0089   322 _TMOD	=	0x0089
                     008A   323 _TL0	=	0x008a
                     008B   324 _TL1	=	0x008b
                     008C   325 _TH0	=	0x008c
                     008D   326 _TH1	=	0x008d
                     008E   327 _CKCON	=	0x008e
                     008F   328 _PSCTL	=	0x008f
                     0090   329 _P1	=	0x0090
                     0091   330 _TMR3CN	=	0x0091
                     0091   331 _CRC0DAT	=	0x0091
                     0092   332 _TMR3RLL	=	0x0092
                     0092   333 _CRC0CN	=	0x0092
                     0093   334 _TMR3RLH	=	0x0093
                     0093   335 _CRC0IN	=	0x0093
                     0094   336 _TMR3L	=	0x0094
                     0095   337 _CRC0FLIP	=	0x0095
                     0095   338 _TMR3H	=	0x0095
                     0096   339 _DC0CF	=	0x0096
                     0096   340 _CRC0AUTO	=	0x0096
                     0097   341 _DC0CN	=	0x0097
                     0097   342 _CRC0CNT	=	0x0097
                     0098   343 _SCON0	=	0x0098
                     0099   344 _SBUF0	=	0x0099
                     009A   345 _CPT1CN	=	0x009a
                     009B   346 _CPT0CN	=	0x009b
                     009C   347 _CPT1MD	=	0x009c
                     009D   348 _CPT0MD	=	0x009d
                     009E   349 _CPT1MX	=	0x009e
                     009F   350 _CPT0MX	=	0x009f
                     00A0   351 _P2	=	0x00a0
                     00A1   352 _SPI0CFG	=	0x00a1
                     00A2   353 _SPI0CKR	=	0x00a2
                     00A3   354 _SPI0DAT	=	0x00a3
                     00A4   355 _P0MDOUT	=	0x00a4
                     00A4   356 _P0DRV	=	0x00a4
                     00A5   357 _P1MDOUT	=	0x00a5
                     00A5   358 _P1DRV	=	0x00a5
                     00A6   359 _P2MDOUT	=	0x00a6
                     00A6   360 _P2DRV	=	0x00a6
                     00A7   361 _SFRPAGE	=	0x00a7
                     00A8   362 _IE	=	0x00a8
                     00A9   363 _CLKSEL	=	0x00a9
                     00AA   364 _EMI0CN	=	0x00aa
                     00AB   365 _EMI0CF	=	0x00ab
                     00AC   366 _RTC0ADR	=	0x00ac
                     00AD   367 _RTC0DAT	=	0x00ad
                     00AE   368 _RTC0KEY	=	0x00ae
                     00AF   369 _EMI0TC	=	0x00af
                     00AF   370 _ONESHOT	=	0x00af
                     00B0   371 _SPI1CN	=	0x00b0
                     00B1   372 _OSCXCN	=	0x00b1
                     00B2   373 _OSCICN	=	0x00b2
                     00B3   374 _OSCICL	=	0x00b3
                     00B5   375 _PMU0CF	=	0x00b5
                     00B6   376 _FLSCL	=	0x00b6
                     00B7   377 _FLKEY	=	0x00b7
                     00B8   378 _IP	=	0x00b8
                     00B9   379 _IREF0CN	=	0x00b9
                     00BA   380 _ADC0AC	=	0x00ba
                     00BA   381 _ADC0PWR	=	0x00ba
                     00BB   382 _ADC0MX	=	0x00bb
                     00BC   383 _ADC0CF	=	0x00bc
                     00BD   384 _ADC0TK	=	0x00bd
                     00BD   385 _ADC0L	=	0x00bd
                     00BE   386 _ADC0H	=	0x00be
                     00BF   387 _P1MASK	=	0x00bf
                     00C0   388 _SMB0CN	=	0x00c0
                     00C1   389 _SMB0CF	=	0x00c1
                     00C2   390 _SMB0DAT	=	0x00c2
                     00C3   391 _ADC0GTL	=	0x00c3
                     00C4   392 _ADC0GTH	=	0x00c4
                     00C5   393 _ADC0LTL	=	0x00c5
                     00C6   394 _ADC0LTH	=	0x00c6
                     00C7   395 _P0MASK	=	0x00c7
                     00C8   396 _TMR2CN	=	0x00c8
                     00C9   397 _REG0CN	=	0x00c9
                     00CA   398 _TMR2RLL	=	0x00ca
                     00CB   399 _TMR2RLH	=	0x00cb
                     00CC   400 _TMR2L	=	0x00cc
                     00CD   401 _TMR2H	=	0x00cd
                     00CE   402 _PCA0CPM5	=	0x00ce
                     00CF   403 _P1MAT	=	0x00cf
                     00D0   404 _PSW	=	0x00d0
                     00D1   405 _REF0CN	=	0x00d1
                     00D2   406 _PCA0CPL5	=	0x00d2
                     00D3   407 _PCA0CPH5	=	0x00d3
                     00D4   408 _P0SKIP	=	0x00d4
                     00D5   409 _P1SKIP	=	0x00d5
                     00D6   410 _P2SKIP	=	0x00d6
                     00D7   411 _P0MAT	=	0x00d7
                     00D8   412 _PCA0CN	=	0x00d8
                     00D9   413 _PCA0MD	=	0x00d9
                     00DA   414 _PCA0CPM0	=	0x00da
                     00DB   415 _PCA0CPM1	=	0x00db
                     00DC   416 _PCA0CPM2	=	0x00dc
                     00DD   417 _PCA0CPM3	=	0x00dd
                     00DE   418 _PCA0CPM4	=	0x00de
                     00DF   419 _PCA0PWM	=	0x00df
                     00E0   420 _ACC	=	0x00e0
                     00E1   421 _XBR0	=	0x00e1
                     00E2   422 _XBR1	=	0x00e2
                     00E3   423 _XBR2	=	0x00e3
                     00E4   424 _IT01CF	=	0x00e4
                     00E5   425 _FLWR	=	0x00e5
                     00E6   426 _EIE1	=	0x00e6
                     00E7   427 _EIE2	=	0x00e7
                     00E8   428 _ADC0CN	=	0x00e8
                     00E9   429 _PCA0CPL1	=	0x00e9
                     00EA   430 _PCA0CPH1	=	0x00ea
                     00EB   431 _PCA0CPL2	=	0x00eb
                     00EC   432 _PCA0CPH2	=	0x00ec
                     00ED   433 _PCA0CPL3	=	0x00ed
                     00EE   434 _PCA0CPH3	=	0x00ee
                     00EF   435 _RSTSRC	=	0x00ef
                     00F0   436 _B	=	0x00f0
                     00F1   437 _P0MDIN	=	0x00f1
                     00F2   438 _P1MDIN	=	0x00f2
                     00F3   439 _P2MDIN	=	0x00f3
                     00F4   440 _SMB0ADR	=	0x00f4
                     00F5   441 _SMB0ADM	=	0x00f5
                     00F6   442 _EIP1	=	0x00f6
                     00F7   443 _EIP2	=	0x00f7
                     00F8   444 _SPI0CN	=	0x00f8
                     00F9   445 _PCA0L	=	0x00f9
                     00FA   446 _PCA0H	=	0x00fa
                     00FB   447 _PCA0CPL0	=	0x00fb
                     00FC   448 _PCA0CPH0	=	0x00fc
                     00FD   449 _PCA0CPL4	=	0x00fd
                     00FE   450 _PCA0CPH4	=	0x00fe
                     00FF   451 _VDM0CN	=	0x00ff
                     8382   452 _DP	=	0x8382
                     8685   453 _TOFF	=	0x8685
                     9392   454 _TMR3RL	=	0x9392
                     9594   455 _TMR3	=	0x9594
                     BEBD   456 _ADC0	=	0xbebd
                     C4C3   457 _ADC0GT	=	0xc4c3
                     C6C5   458 _ADC0LT	=	0xc6c5
                     CBCA   459 _TMR2RL	=	0xcbca
                     CDCC   460 _TMR2	=	0xcdcc
                     D3D2   461 _PCA0CP5	=	0xd3d2
                     EAE9   462 _PCA0CP1	=	0xeae9
                     ECEB   463 _PCA0CP2	=	0xeceb
                     EEED   464 _PCA0CP3	=	0xeeed
                     FAF9   465 _PCA0	=	0xfaf9
                     FCFB   466 _PCA0CP0	=	0xfcfb
                     FEFD   467 _PCA0CP4	=	0xfefd
                            468 ;--------------------------------------------------------
                            469 ; special function bits
                            470 ;--------------------------------------------------------
                            471 	.area RSEG    (ABS,DATA)
   0000                     472 	.org 0x0000
                     008F   473 _TF1	=	0x008f
                     008E   474 _TR1	=	0x008e
                     008D   475 _TF0	=	0x008d
                     008C   476 _TR0	=	0x008c
                     008B   477 _IE1	=	0x008b
                     008A   478 _IT1	=	0x008a
                     0089   479 _IE0	=	0x0089
                     0088   480 _IT0	=	0x0088
                     0096   481 _CRC0SEL	=	0x0096
                     0095   482 _CRC0INIT	=	0x0095
                     0094   483 _CRC0VAL	=	0x0094
                     009F   484 _S0MODE	=	0x009f
                     009D   485 _MCE0	=	0x009d
                     009C   486 _REN0	=	0x009c
                     009B   487 _TB80	=	0x009b
                     009A   488 _RB80	=	0x009a
                     0099   489 _TI0	=	0x0099
                     0098   490 _RI0	=	0x0098
                     00AF   491 _EA	=	0x00af
                     00AE   492 _ESPI0	=	0x00ae
                     00AD   493 _ET2	=	0x00ad
                     00AC   494 _ES0	=	0x00ac
                     00AB   495 _ET1	=	0x00ab
                     00AA   496 _EX1	=	0x00aa
                     00A9   497 _ET0	=	0x00a9
                     00A8   498 _EX0	=	0x00a8
                     00B7   499 _SPIF1	=	0x00b7
                     00B6   500 _WCOL1	=	0x00b6
                     00B5   501 _MODF1	=	0x00b5
                     00B4   502 _RXOVRN1	=	0x00b4
                     00B3   503 _NSS1MD1	=	0x00b3
                     00B2   504 _NSS1MD0	=	0x00b2
                     00B1   505 _TXBMT1	=	0x00b1
                     00B0   506 _SPI1EN	=	0x00b0
                     00BE   507 _PSPI0	=	0x00be
                     00BD   508 _PT2	=	0x00bd
                     00BC   509 _PS0	=	0x00bc
                     00BB   510 _PT1	=	0x00bb
                     00BA   511 _PX1	=	0x00ba
                     00B9   512 _PT0	=	0x00b9
                     00B8   513 _PX0	=	0x00b8
                     00C7   514 _MASTER	=	0x00c7
                     00C6   515 _TXMODE	=	0x00c6
                     00C5   516 _STA	=	0x00c5
                     00C4   517 _STO	=	0x00c4
                     00C3   518 _ACKRQ	=	0x00c3
                     00C2   519 _ARBLOST	=	0x00c2
                     00C1   520 _ACK	=	0x00c1
                     00C0   521 _SI	=	0x00c0
                     00CF   522 _TF2H	=	0x00cf
                     00CE   523 _TF2L	=	0x00ce
                     00CD   524 _TF2LEN	=	0x00cd
                     00CC   525 _TF2CEN	=	0x00cc
                     00CB   526 _T2SPLIT	=	0x00cb
                     00CA   527 _TR2	=	0x00ca
                     00C9   528 _T2RCLK	=	0x00c9
                     00C8   529 _T2XCLK	=	0x00c8
                     00D7   530 _CY	=	0x00d7
                     00D6   531 _AC	=	0x00d6
                     00D5   532 _F0	=	0x00d5
                     00D4   533 _RS1	=	0x00d4
                     00D3   534 _RS0	=	0x00d3
                     00D2   535 _OV	=	0x00d2
                     00D1   536 _F1	=	0x00d1
                     00D0   537 _P	=	0x00d0
                     00DF   538 _CF	=	0x00df
                     00DE   539 _CR	=	0x00de
                     00DD   540 _CCF5	=	0x00dd
                     00DC   541 _CCF4	=	0x00dc
                     00DB   542 _CCF3	=	0x00db
                     00DA   543 _CCF2	=	0x00da
                     00D9   544 _CCF1	=	0x00d9
                     00D8   545 _CCF0	=	0x00d8
                     00EF   546 _AD0EN	=	0x00ef
                     00EE   547 _BURSTEN	=	0x00ee
                     00ED   548 _AD0INT	=	0x00ed
                     00EC   549 _AD0BUSY	=	0x00ec
                     00EB   550 _AD0WINT	=	0x00eb
                     00EA   551 _AD0CM2	=	0x00ea
                     00E9   552 _AD0CM1	=	0x00e9
                     00E8   553 _AD0CM0	=	0x00e8
                     00FF   554 _SPIF0	=	0x00ff
                     00FE   555 _WCOL0	=	0x00fe
                     00FD   556 _MODF0	=	0x00fd
                     00FC   557 _RXOVRN0	=	0x00fc
                     00FB   558 _NSS0MD1	=	0x00fb
                     00FA   559 _NSS0MD0	=	0x00fa
                     00F9   560 _TXBMT0	=	0x00f9
                     00F8   561 _SPI0EN	=	0x00f8
                     0096   562 _LED_RED	=	0x0096
                     0095   563 _LED_GREEN	=	0x0095
                     0082   564 _PIN_CONFIG	=	0x0082
                     0083   565 _PIN_ENABLE	=	0x0083
                     00A5   566 _PA_ENABLE	=	0x00a5
                     0087   567 _IRQ	=	0x0087
                     0094   568 _NSS1	=	0x0094
                            569 ;--------------------------------------------------------
                            570 ; overlayable register banks
                            571 ;--------------------------------------------------------
                            572 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     573 	.ds 8
                            574 ;--------------------------------------------------------
                            575 ; overlayable bit register bank
                            576 ;--------------------------------------------------------
                            577 	.area BIT_BANK	(REL,OVR,DATA)
   0000                     578 bits:
   0000                     579 	.ds 1
                     8000   580 	b0 = bits[0]
                     8100   581 	b1 = bits[1]
                     8200   582 	b2 = bits[2]
                     8300   583 	b3 = bits[3]
                     8400   584 	b4 = bits[4]
                     8500   585 	b5 = bits[5]
                     8600   586 	b6 = bits[6]
                     8700   587 	b7 = bits[7]
                            588 ;--------------------------------------------------------
                            589 ; internal ram data
                            590 ;--------------------------------------------------------
                            591 	.area DSEG    (DATA)
   0000                     592 _radio_receive_packet_crc1_1_137:
   0000                     593 	.ds 2
   0002                     594 _radio_transmit_golay_elen_1_188:
   0002                     595 	.ds 1
                            596 ;--------------------------------------------------------
                            597 ; overlayable items in internal ram 
                            598 ;--------------------------------------------------------
                            599 	.area	OSEG    (OVR,DATA)
                            600 ;--------------------------------------------------------
                            601 ; indirectly addressable internal ram data
                            602 ;--------------------------------------------------------
                            603 	.area ISEG    (DATA)
                            604 ;--------------------------------------------------------
                            605 ; absolute internal ram data
                            606 ;--------------------------------------------------------
                            607 	.area IABS    (ABS,DATA)
                            608 	.area IABS    (ABS,DATA)
                            609 ;--------------------------------------------------------
                            610 ; bit data
                            611 ;--------------------------------------------------------
                            612 	.area BSEG    (BIT)
   0000                     613 _packet_received:
   0000                     614 	.ds 1
   0001                     615 _preamble_detected:
   0001                     616 	.ds 1
   0002                     617 _radio_preamble_detected_EX0_saved_1_159:
   0002                     618 	.ds 1
   0003                     619 _radio_transmit_simple_transmit_started_1_172:
   0003                     620 	.ds 1
   0004                     621 _radio_transmit_golay_sloc0_1_0:
   0004                     622 	.ds 1
   0005                     623 _radio_transmit_EX0_saved_1_191:
   0005                     624 	.ds 1
   0006                     625 _radio_transmit_sloc0_1_0:
   0006                     626 	.ds 1
   0007                     627 _radio_initialise_sloc0_1_0:
   0007                     628 	.ds 1
   0008                     629 _radio_set_diversity_PARM_1:
   0008                     630 	.ds 1
                            631 ;--------------------------------------------------------
                            632 ; paged external ram data
                            633 ;--------------------------------------------------------
                            634 	.area PSEG    (PAG,XDATA)
   0000                     635 _receive_packet_length::
   0000                     636 	.ds 1
   0001                     637 _partial_packet_length::
   0001                     638 	.ds 1
   0002                     639 _last_rssi::
   0002                     640 	.ds 1
   0003                     641 _netid::
   0003                     642 	.ds 2
   0005                     643 _settings::
   0005                     644 	.ds 12
   0011                     645 _radio_receive_packet_PARM_2:
   0011                     646 	.ds 2
   0013                     647 _radio_write_transmit_fifo_PARM_2:
   0013                     648 	.ds 2
   0015                     649 _radio_transmit_simple_PARM_2:
   0015                     650 	.ds 2
   0017                     651 _radio_transmit_simple_PARM_3:
   0017                     652 	.ds 2
   0019                     653 _radio_transmit_golay_PARM_2:
   0019                     654 	.ds 2
   001B                     655 _radio_transmit_golay_PARM_3:
   001B                     656 	.ds 2
   001D                     657 _radio_transmit_PARM_2:
   001D                     658 	.ds 2
   001F                     659 _radio_transmit_PARM_3:
   001F                     660 	.ds 2
   0021                     661 _scale_uint32_PARM_2:
   0021                     662 	.ds 4
   0025                     663 _scale_uint32_value_1_250:
   0025                     664 	.ds 4
   0029                     665 _set_frequency_registers_frequency_1_258:
   0029                     666 	.ds 4
                            667 ;--------------------------------------------------------
                            668 ; external ram data
                            669 ;--------------------------------------------------------
                            670 	.area XSEG    (XDATA)
   0000                     671 _radio_buffer::
   0000                     672 	.ds 252
   00FC                     673 _radio_receive_packet_length_1_136:
   00FC                     674 	.ds 3
   00FF                     675 _radio_receive_packet_gout_1_137:
   00FF                     676 	.ds 3
   0102                     677 _radio_transmit_golay_length_1_187:
   0102                     678 	.ds 1
   0103                     679 _radio_transmit_golay_gin_1_188:
   0103                     680 	.ds 3
   0106                     681 _radio_transmit_length_1_190:
   0106                     682 	.ds 1
   0107                     683 _radio_set_channel_channel_1_208:
   0107                     684 	.ds 1
   0108                     685 _radio_set_transmit_power_power_1_232:
   0108                     686 	.ds 1
   0109                     687 _radio_set_network_id_id_1_238:
   0109                     688 	.ds 2
   010B                     689 _set_frequency_registers_band_1_259:
   010B                     690 	.ds 1
                            691 ;--------------------------------------------------------
                            692 ; absolute external ram data
                            693 ;--------------------------------------------------------
                            694 	.area XABS    (ABS,XDATA)
                            695 ;--------------------------------------------------------
                            696 ; external initialized ram data
                            697 ;--------------------------------------------------------
                            698 	.area XISEG   (XDATA)
                            699 	.area HOME    (CODE)
                            700 	.area GSINIT0 (CODE)
                            701 	.area GSINIT1 (CODE)
                            702 	.area GSINIT2 (CODE)
                            703 	.area GSINIT3 (CODE)
                            704 	.area GSINIT4 (CODE)
                            705 	.area GSINIT5 (CODE)
                            706 	.area GSINIT  (CODE)
                            707 	.area GSFINAL (CODE)
                            708 	.area CSEG    (CODE)
                            709 ;--------------------------------------------------------
                            710 ; global & static initialisations
                            711 ;--------------------------------------------------------
                            712 	.area HOME    (CODE)
                            713 	.area GSINIT  (CODE)
                            714 	.area GSFINAL (CODE)
                            715 	.area GSINIT  (CODE)
                            716 ;--------------------------------------------------------
                            717 ; Home
                            718 ;--------------------------------------------------------
                            719 	.area HOME    (CODE)
                            720 	.area HOME    (CODE)
                            721 ;--------------------------------------------------------
                            722 ; code
                            723 ;--------------------------------------------------------
                            724 	.area CSEG    (CODE)
                            725 ;------------------------------------------------------------
                            726 ;Allocation info for local variables in function 'radio_receive_packet'
                            727 ;------------------------------------------------------------
                            728 ;crc1                      Allocated with name '_radio_receive_packet_crc1_1_137'
                            729 ;crc2                      Allocated to registers r5 r7 
                            730 ;errcount                  Allocated to registers r6 
                            731 ;elen                      Allocated to registers r7 
                            732 ;length                    Allocated with name '_radio_receive_packet_length_1_136'
                            733 ;gout                      Allocated with name '_radio_receive_packet_gout_1_137'
                            734 ;------------------------------------------------------------
                            735 ;	radio/radio.c:77: radio_receive_packet(uint8_t *length, __xdata uint8_t * __pdata buf)
                            736 ;	-----------------------------------------
                            737 ;	 function radio_receive_packet
                            738 ;	-----------------------------------------
   0000                     739 _radio_receive_packet:
                     0007   740 	ar7 = 0x07
                     0006   741 	ar6 = 0x06
                     0005   742 	ar5 = 0x05
                     0004   743 	ar4 = 0x04
                     0003   744 	ar3 = 0x03
                     0002   745 	ar2 = 0x02
                     0001   746 	ar1 = 0x01
                     0000   747 	ar0 = 0x00
   0000 AF F0         [24]  748 	mov	r7,b
   0002 AE 83         [24]  749 	mov	r6,dph
   0004 E5 82         [12]  750 	mov	a,dpl
   0006 90r00rFC      [24]  751 	mov	dptr,#_radio_receive_packet_length_1_136
   0009 F0            [24]  752 	movx	@dptr,a
   000A EE            [12]  753 	mov	a,r6
   000B A3            [24]  754 	inc	dptr
   000C F0            [24]  755 	movx	@dptr,a
   000D EF            [12]  756 	mov	a,r7
   000E A3            [24]  757 	inc	dptr
   000F F0            [24]  758 	movx	@dptr,a
                            759 ;	radio/radio.c:84: if (!packet_received) {
   0010 20*00 02      [24]  760 	jb	_packet_received,00102$
                            761 ;	radio/radio.c:85: return false;
   0013 C3            [12]  762 	clr	c
   0014 22            [24]  763 	ret
   0015                     764 00102$:
                            765 ;	radio/radio.c:88: if (receive_packet_length > MAX_PACKET_LENGTH) {
   0015 78r00         [12]  766 	mov	r0,#_receive_packet_length
   0017 C3            [12]  767 	clr	c
   0018 E2            [24]  768 	movx	a,@r0
   0019 F5 F0         [12]  769 	mov	b,a
   001B 74 FC         [12]  770 	mov	a,#0xFC
   001D 95 F0         [12]  771 	subb	a,b
   001F 50 06         [24]  772 	jnc	00104$
                            773 ;	radio/radio.c:89: radio_receiver_on();
   0021 12r06r74      [24]  774 	lcall	_radio_receiver_on
                            775 ;	radio/radio.c:90: goto failed;
   0024 02r02r40      [24]  776 	ljmp	00126$
   0027                     777 00104$:
                            778 ;	radio/radio.c:101: if (!feature_golay) {
   0027 20*00 45      [24]  779 	jb	_feature_golay,00106$
                            780 ;	radio/radio.c:103: *length = receive_packet_length;
   002A 90r00rFC      [24]  781 	mov	dptr,#_radio_receive_packet_length_1_136
   002D E0            [24]  782 	movx	a,@dptr
   002E FD            [12]  783 	mov	r5,a
   002F A3            [24]  784 	inc	dptr
   0030 E0            [24]  785 	movx	a,@dptr
   0031 FE            [12]  786 	mov	r6,a
   0032 A3            [24]  787 	inc	dptr
   0033 E0            [24]  788 	movx	a,@dptr
   0034 FF            [12]  789 	mov	r7,a
   0035 8D 82         [24]  790 	mov	dpl,r5
   0037 8E 83         [24]  791 	mov	dph,r6
   0039 8F F0         [24]  792 	mov	b,r7
   003B 78r00         [12]  793 	mov	r0,#_receive_packet_length
   003D E2            [24]  794 	movx	a,@r0
   003E 12r00r00      [24]  795 	lcall	__gptrput
                            796 ;	radio/radio.c:104: memcpy(buf, radio_buffer, receive_packet_length);
   0041 78r11         [12]  797 	mov	r0,#_radio_receive_packet_PARM_2
   0043 E2            [24]  798 	movx	a,@r0
   0044 FD            [12]  799 	mov	r5,a
   0045 08            [12]  800 	inc	r0
   0046 E2            [24]  801 	movx	a,@r0
   0047 FE            [12]  802 	mov	r6,a
   0048 7F 00         [12]  803 	mov	r7,#0x00
   004A 90r00r00      [24]  804 	mov	dptr,#_memcpy_PARM_2
   004D 74r00         [12]  805 	mov	a,#_radio_buffer
   004F F0            [24]  806 	movx	@dptr,a
   0050 74s00         [12]  807 	mov	a,#(_radio_buffer >> 8)
   0052 A3            [24]  808 	inc	dptr
   0053 F0            [24]  809 	movx	@dptr,a
   0054 E4            [12]  810 	clr	a
   0055 A3            [24]  811 	inc	dptr
   0056 F0            [24]  812 	movx	@dptr,a
   0057 78r00         [12]  813 	mov	r0,#_receive_packet_length
   0059 90r00r00      [24]  814 	mov	dptr,#_memcpy_PARM_3
   005C E2            [24]  815 	movx	a,@r0
   005D F0            [24]  816 	movx	@dptr,a
   005E E4            [12]  817 	clr	a
   005F A3            [24]  818 	inc	dptr
   0060 F0            [24]  819 	movx	@dptr,a
   0061 8D 82         [24]  820 	mov	dpl,r5
   0063 8E 83         [24]  821 	mov	dph,r6
   0065 8F F0         [24]  822 	mov	b,r7
   0067 12r00r00      [24]  823 	lcall	_memcpy
                            824 ;	radio/radio.c:105: radio_receiver_on();
   006A 12r06r74      [24]  825 	lcall	_radio_receiver_on
                            826 ;	radio/radio.c:106: return true;
   006D D3            [12]  827 	setb	c
   006E 22            [24]  828 	ret
   006F                     829 00106$:
                            830 ;	radio/radio.c:112: memcpy(buf, radio_buffer, receive_packet_length);
   006F 78r11         [12]  831 	mov	r0,#_radio_receive_packet_PARM_2
   0071 E2            [24]  832 	movx	a,@r0
   0072 FD            [12]  833 	mov	r5,a
   0073 08            [12]  834 	inc	r0
   0074 E2            [24]  835 	movx	a,@r0
   0075 FE            [12]  836 	mov	r6,a
   0076 7F 00         [12]  837 	mov	r7,#0x00
   0078 90r00r00      [24]  838 	mov	dptr,#_memcpy_PARM_2
   007B 74r00         [12]  839 	mov	a,#_radio_buffer
   007D F0            [24]  840 	movx	@dptr,a
   007E 74s00         [12]  841 	mov	a,#(_radio_buffer >> 8)
   0080 A3            [24]  842 	inc	dptr
   0081 F0            [24]  843 	movx	@dptr,a
   0082 E4            [12]  844 	clr	a
   0083 A3            [24]  845 	inc	dptr
   0084 F0            [24]  846 	movx	@dptr,a
   0085 78r00         [12]  847 	mov	r0,#_receive_packet_length
   0087 90r00r00      [24]  848 	mov	dptr,#_memcpy_PARM_3
   008A E2            [24]  849 	movx	a,@r0
   008B F0            [24]  850 	movx	@dptr,a
   008C E4            [12]  851 	clr	a
   008D A3            [24]  852 	inc	dptr
   008E F0            [24]  853 	movx	@dptr,a
   008F 8D 82         [24]  854 	mov	dpl,r5
   0091 8E 83         [24]  855 	mov	dph,r6
   0093 8F F0         [24]  856 	mov	b,r7
   0095 12r00r00      [24]  857 	lcall	_memcpy
                            858 ;	radio/radio.c:116: elen = receive_packet_length;
   0098 78r00         [12]  859 	mov	r0,#_receive_packet_length
   009A E2            [24]  860 	movx	a,@r0
   009B FF            [12]  861 	mov	r7,a
                            862 ;	radio/radio.c:117: radio_receiver_on();	
   009C C0 07         [24]  863 	push	ar7
   009E 12r06r74      [24]  864 	lcall	_radio_receiver_on
   00A1 D0 07         [24]  865 	pop	ar7
                            866 ;	radio/radio.c:119: if (elen < 12 || (elen%6) != 0) {
   00A3 BF 0C 00      [24]  867 	cjne	r7,#0x0C,00176$
   00A6                     868 00176$:
   00A6 50 03         [24]  869 	jnc	00177$
   00A8 02r02r40      [24]  870 	ljmp	00126$
   00AB                     871 00177$:
   00AB 75 F0 06      [24]  872 	mov	b,#0x06
   00AE EF            [12]  873 	mov	a,r7
   00AF 84            [48]  874 	div	ab
   00B0 E5 F0         [12]  875 	mov	a,b
   00B2 60 03         [24]  876 	jz	00178$
   00B4 02r02r40      [24]  877 	ljmp	00126$
   00B7                     878 00178$:
                            879 ;	radio/radio.c:126: errcount = golay_decode(6, buf, gout);
   00B7 78r11         [12]  880 	mov	r0,#_radio_receive_packet_PARM_2
   00B9 79r00         [12]  881 	mov	r1,#_golay_decode_PARM_2
   00BB E2            [24]  882 	movx	a,@r0
   00BC F3            [24]  883 	movx	@r1,a
   00BD 08            [12]  884 	inc	r0
   00BE E2            [24]  885 	movx	a,@r0
   00BF 09            [12]  886 	inc	r1
   00C0 F3            [24]  887 	movx	@r1,a
   00C1 78r00         [12]  888 	mov	r0,#_golay_decode_PARM_3
   00C3 74rFF         [12]  889 	mov	a,#_radio_receive_packet_gout_1_137
   00C5 F2            [24]  890 	movx	@r0,a
   00C6 08            [12]  891 	inc	r0
   00C7 74s00         [12]  892 	mov	a,#(_radio_receive_packet_gout_1_137 >> 8)
   00C9 F2            [24]  893 	movx	@r0,a
   00CA 75 82 06      [24]  894 	mov	dpl,#0x06
   00CD C0 07         [24]  895 	push	ar7
   00CF 12r00r00      [24]  896 	lcall	_golay_decode
   00D2 AE 82         [24]  897 	mov	r6,dpl
   00D4 D0 07         [24]  898 	pop	ar7
                            899 ;	radio/radio.c:127: if (gout[0] != netid[0] ||
   00D6 90r00rFF      [24]  900 	mov	dptr,#_radio_receive_packet_gout_1_137
   00D9 E0            [24]  901 	movx	a,@dptr
   00DA FD            [12]  902 	mov	r5,a
   00DB 78r03         [12]  903 	mov	r0,#_netid
   00DD E2            [24]  904 	movx	a,@r0
   00DE FC            [12]  905 	mov	r4,a
   00DF ED            [12]  906 	mov	a,r5
   00E0 B5 04 02      [24]  907 	cjne	a,ar4,00179$
   00E3 80 03         [24]  908 	sjmp	00180$
   00E5                     909 00179$:
   00E5 02r02r40      [24]  910 	ljmp	00126$
   00E8                     911 00180$:
                            912 ;	radio/radio.c:128: gout[1] != netid[1]) {
   00E8 90r01r00      [24]  913 	mov	dptr,#(_radio_receive_packet_gout_1_137 + 0x0001)
   00EB E0            [24]  914 	movx	a,@dptr
   00EC FD            [12]  915 	mov	r5,a
   00ED 78r04         [12]  916 	mov	r0,#(_netid + 0x0001)
   00EF E2            [24]  917 	movx	a,@r0
   00F0 FC            [12]  918 	mov	r4,a
   00F1 ED            [12]  919 	mov	a,r5
   00F2 B5 04 02      [24]  920 	cjne	a,ar4,00181$
   00F5 80 03         [24]  921 	sjmp	00182$
   00F7                     922 00181$:
   00F7 02r02r40      [24]  923 	ljmp	00126$
   00FA                     924 00182$:
                            925 ;	radio/radio.c:136: if (6*((gout[2]+2)/3+2) != elen) {
   00FA 90r01r01      [24]  926 	mov	dptr,#(_radio_receive_packet_gout_1_137 + 0x0002)
   00FD E0            [24]  927 	movx	a,@dptr
   00FE FD            [12]  928 	mov	r5,a
   00FF 7C 00         [12]  929 	mov	r4,#0x00
   0101 74 02         [12]  930 	mov	a,#0x02
   0103 2D            [12]  931 	add	a,r5
   0104 FD            [12]  932 	mov	r5,a
   0105 E4            [12]  933 	clr	a
   0106 3C            [12]  934 	addc	a,r4
   0107 FC            [12]  935 	mov	r4,a
   0108 90r00r00      [24]  936 	mov	dptr,#__divsint_PARM_2
   010B 74 03         [12]  937 	mov	a,#0x03
   010D F0            [24]  938 	movx	@dptr,a
   010E E4            [12]  939 	clr	a
   010F A3            [24]  940 	inc	dptr
   0110 F0            [24]  941 	movx	@dptr,a
   0111 8D 82         [24]  942 	mov	dpl,r5
   0113 8C 83         [24]  943 	mov	dph,r4
   0115 C0 07         [24]  944 	push	ar7
   0117 C0 06         [24]  945 	push	ar6
   0119 12r00r00      [24]  946 	lcall	__divsint
   011C E5 82         [12]  947 	mov	a,dpl
   011E 85 83 F0      [24]  948 	mov	b,dph
   0121 90r00r00      [24]  949 	mov	dptr,#__mulint_PARM_2
   0124 24 02         [12]  950 	add	a,#0x02
   0126 F0            [24]  951 	movx	@dptr,a
   0127 E4            [12]  952 	clr	a
   0128 35 F0         [12]  953 	addc	a,b
   012A A3            [24]  954 	inc	dptr
   012B F0            [24]  955 	movx	@dptr,a
   012C 90 00 06      [24]  956 	mov	dptr,#0x0006
   012F 12r00r00      [24]  957 	lcall	__mulint
   0132 AC 82         [24]  958 	mov	r4,dpl
   0134 AD 83         [24]  959 	mov	r5,dph
   0136 D0 06         [24]  960 	pop	ar6
   0138 D0 07         [24]  961 	pop	ar7
   013A 8F 02         [24]  962 	mov	ar2,r7
   013C 7B 00         [12]  963 	mov	r3,#0x00
   013E EC            [12]  964 	mov	a,r4
   013F B5 02 06      [24]  965 	cjne	a,ar2,00183$
   0142 ED            [12]  966 	mov	a,r5
   0143 B5 03 02      [24]  967 	cjne	a,ar3,00183$
   0146 80 03         [24]  968 	sjmp	00184$
   0148                     969 00183$:
   0148 02r02r40      [24]  970 	ljmp	00126$
   014B                     971 00184$:
                            972 ;	radio/radio.c:144: errcount += golay_decode(6, &buf[6], gout);
   014B 78r11         [12]  973 	mov	r0,#_radio_receive_packet_PARM_2
   014D 79r00         [12]  974 	mov	r1,#_golay_decode_PARM_2
   014F E2            [24]  975 	movx	a,@r0
   0150 24 06         [12]  976 	add	a,#0x06
   0152 F3            [24]  977 	movx	@r1,a
   0153 08            [12]  978 	inc	r0
   0154 E2            [24]  979 	movx	a,@r0
   0155 34 00         [12]  980 	addc	a,#0x00
   0157 09            [12]  981 	inc	r1
   0158 F3            [24]  982 	movx	@r1,a
   0159 78r00         [12]  983 	mov	r0,#_golay_decode_PARM_3
   015B 74rFF         [12]  984 	mov	a,#_radio_receive_packet_gout_1_137
   015D F2            [24]  985 	movx	@r0,a
   015E 08            [12]  986 	inc	r0
   015F 74s00         [12]  987 	mov	a,#(_radio_receive_packet_gout_1_137 >> 8)
   0161 F2            [24]  988 	movx	@r0,a
   0162 75 82 06      [24]  989 	mov	dpl,#0x06
   0165 C0 07         [24]  990 	push	ar7
   0167 C0 06         [24]  991 	push	ar6
   0169 12r00r00      [24]  992 	lcall	_golay_decode
   016C AD 82         [24]  993 	mov	r5,dpl
   016E D0 06         [24]  994 	pop	ar6
   0170 D0 07         [24]  995 	pop	ar7
   0172 ED            [12]  996 	mov	a,r5
   0173 2E            [12]  997 	add	a,r6
   0174 FE            [12]  998 	mov	r6,a
                            999 ;	radio/radio.c:145: crc1 = gout[0] | (((uint16_t)gout[1])<<8);
   0175 90r00rFF      [24] 1000 	mov	dptr,#_radio_receive_packet_gout_1_137
   0178 E0            [24] 1001 	movx	a,@dptr
   0179 FD            [12] 1002 	mov	r5,a
   017A 90r01r00      [24] 1003 	mov	dptr,#(_radio_receive_packet_gout_1_137 + 0x0001)
   017D E0            [24] 1004 	movx	a,@dptr
   017E FB            [12] 1005 	mov	r3,a
   017F E4            [12] 1006 	clr	a
   0180 FC            [12] 1007 	mov	r4,a
   0181 FA            [12] 1008 	mov	r2,a
   0182 4D            [12] 1009 	orl	a,r5
   0183 F5*00         [12] 1010 	mov	_radio_receive_packet_crc1_1_137,a
   0185 EB            [12] 1011 	mov	a,r3
   0186 4A            [12] 1012 	orl	a,r2
   0187 F5*01         [12] 1013 	mov	(_radio_receive_packet_crc1_1_137 + 1),a
                           1014 ;	radio/radio.c:147: if (elen != 12) {
   0189 BF 0C 02      [24] 1015 	cjne	r7,#0x0C,00185$
   018C 80 2A         [24] 1016 	sjmp	00116$
   018E                    1017 00185$:
                           1018 ;	radio/radio.c:148: errcount += golay_decode(elen-12, &buf[12], buf);
   018E EF            [12] 1019 	mov	a,r7
   018F 24 F4         [12] 1020 	add	a,#0xF4
   0191 FF            [12] 1021 	mov	r7,a
   0192 78r11         [12] 1022 	mov	r0,#_radio_receive_packet_PARM_2
   0194 79r00         [12] 1023 	mov	r1,#_golay_decode_PARM_2
   0196 E2            [24] 1024 	movx	a,@r0
   0197 24 0C         [12] 1025 	add	a,#0x0C
   0199 F3            [24] 1026 	movx	@r1,a
   019A 08            [12] 1027 	inc	r0
   019B E2            [24] 1028 	movx	a,@r0
   019C 34 00         [12] 1029 	addc	a,#0x00
   019E 09            [12] 1030 	inc	r1
   019F F3            [24] 1031 	movx	@r1,a
   01A0 78r11         [12] 1032 	mov	r0,#_radio_receive_packet_PARM_2
   01A2 79r00         [12] 1033 	mov	r1,#_golay_decode_PARM_3
   01A4 E2            [24] 1034 	movx	a,@r0
   01A5 F3            [24] 1035 	movx	@r1,a
   01A6 08            [12] 1036 	inc	r0
   01A7 E2            [24] 1037 	movx	a,@r0
   01A8 09            [12] 1038 	inc	r1
   01A9 F3            [24] 1039 	movx	@r1,a
   01AA 8F 82         [24] 1040 	mov	dpl,r7
   01AC C0 06         [24] 1041 	push	ar6
   01AE 12r00r00      [24] 1042 	lcall	_golay_decode
   01B1 AF 82         [24] 1043 	mov	r7,dpl
   01B3 D0 06         [24] 1044 	pop	ar6
   01B5 EF            [12] 1045 	mov	a,r7
   01B6 2E            [12] 1046 	add	a,r6
   01B7 FE            [12] 1047 	mov	r6,a
   01B8                    1048 00116$:
                           1049 ;	radio/radio.c:151: *length = gout[2];
   01B8 90r00rFC      [24] 1050 	mov	dptr,#_radio_receive_packet_length_1_136
   01BB E0            [24] 1051 	movx	a,@dptr
   01BC FA            [12] 1052 	mov	r2,a
   01BD A3            [24] 1053 	inc	dptr
   01BE E0            [24] 1054 	movx	a,@dptr
   01BF FB            [12] 1055 	mov	r3,a
   01C0 A3            [24] 1056 	inc	dptr
   01C1 E0            [24] 1057 	movx	a,@dptr
   01C2 FF            [12] 1058 	mov	r7,a
   01C3 90r01r01      [24] 1059 	mov	dptr,#(_radio_receive_packet_gout_1_137 + 0x0002)
   01C6 E0            [24] 1060 	movx	a,@dptr
   01C7 FD            [12] 1061 	mov	r5,a
   01C8 8A 82         [24] 1062 	mov	dpl,r2
   01CA 8B 83         [24] 1063 	mov	dph,r3
   01CC 8F F0         [24] 1064 	mov	b,r7
   01CE 12r00r00      [24] 1065 	lcall	__gptrput
                           1066 ;	radio/radio.c:153: crc2 = crc16(*length, buf);
   01D1 78r11         [12] 1067 	mov	r0,#_radio_receive_packet_PARM_2
   01D3 E2            [24] 1068 	movx	a,@r0
   01D4 F5*00         [12] 1069 	mov	_crc16_PARM_2,a
   01D6 08            [12] 1070 	inc	r0
   01D7 E2            [24] 1071 	movx	a,@r0
   01D8 F5*01         [12] 1072 	mov	(_crc16_PARM_2 + 1),a
   01DA 8D 82         [24] 1073 	mov	dpl,r5
   01DC C0 06         [24] 1074 	push	ar6
   01DE 12r00r00      [24] 1075 	lcall	_crc16
   01E1 AD 82         [24] 1076 	mov	r5,dpl
   01E3 AF 83         [24] 1077 	mov	r7,dph
   01E5 D0 06         [24] 1078 	pop	ar6
                           1079 ;	radio/radio.c:155: if (crc1 != crc2) {
   01E7 ED            [12] 1080 	mov	a,r5
   01E8 B5*00 55      [24] 1081 	cjne	a,_radio_receive_packet_crc1_1_137,00126$
   01EB EF            [12] 1082 	mov	a,r7
   01EC B5*01 51      [24] 1083 	cjne	a,(_radio_receive_packet_crc1_1_137 + 1),00126$
                           1084 ;	radio/radio.c:165: if (errcount != 0) {
   01EF EE            [12] 1085 	mov	a,r6
   01F0 60 4C         [24] 1086 	jz	00125$
                           1087 ;	radio/radio.c:166: if ((uint16_t)(0xFFFF - errcount) > errors.corrected_errors) {
   01F2 7F 00         [12] 1088 	mov	r7,#0x00
   01F4 74 FF         [12] 1089 	mov	a,#0xFF
   01F6 C3            [12] 1090 	clr	c
   01F7 9E            [12] 1091 	subb	a,r6
   01F8 FC            [12] 1092 	mov	r4,a
   01F9 74 FF         [12] 1093 	mov	a,#0xFF
   01FB 9F            [12] 1094 	subb	a,r7
   01FC FD            [12] 1095 	mov	r5,a
   01FD 78r08         [12] 1096 	mov	r0,#(_errors + 0x0008)
   01FF E2            [24] 1097 	movx	a,@r0
   0200 FA            [12] 1098 	mov	r2,a
   0201 08            [12] 1099 	inc	r0
   0202 E2            [24] 1100 	movx	a,@r0
   0203 FB            [12] 1101 	mov	r3,a
   0204 C3            [12] 1102 	clr	c
   0205 EA            [12] 1103 	mov	a,r2
   0206 9C            [12] 1104 	subb	a,r4
   0207 EB            [12] 1105 	mov	a,r3
   0208 9D            [12] 1106 	subb	a,r5
   0209 50 0F         [24] 1107 	jnc	00120$
                           1108 ;	radio/radio.c:167: errors.corrected_errors += errcount;
   020B EE            [12] 1109 	mov	a,r6
   020C 2A            [12] 1110 	add	a,r2
   020D FE            [12] 1111 	mov	r6,a
   020E EF            [12] 1112 	mov	a,r7
   020F 3B            [12] 1113 	addc	a,r3
   0210 FF            [12] 1114 	mov	r7,a
   0211 78r08         [12] 1115 	mov	r0,#(_errors + 0x0008)
   0213 EE            [12] 1116 	mov	a,r6
   0214 F2            [24] 1117 	movx	@r0,a
   0215 08            [12] 1118 	inc	r0
   0216 EF            [12] 1119 	mov	a,r7
   0217 F2            [24] 1120 	movx	@r0,a
   0218 80 09         [24] 1121 	sjmp	00121$
   021A                    1122 00120$:
                           1123 ;	radio/radio.c:169: errors.corrected_errors = 0xFFFF;
   021A 78r08         [12] 1124 	mov	r0,#(_errors + 0x0008)
   021C 74 FF         [12] 1125 	mov	a,#0xFF
   021E F2            [24] 1126 	movx	@r0,a
   021F 08            [12] 1127 	inc	r0
   0220 74 FF         [12] 1128 	mov	a,#0xFF
   0222 F2            [24] 1129 	movx	@r0,a
   0223                    1130 00121$:
                           1131 ;	radio/radio.c:171: if (errors.corrected_packets != 0xFFFF) {
   0223 78r0A         [12] 1132 	mov	r0,#(_errors + 0x000a)
   0225 E2            [24] 1133 	movx	a,@r0
   0226 FE            [12] 1134 	mov	r6,a
   0227 08            [12] 1135 	inc	r0
   0228 E2            [24] 1136 	movx	a,@r0
   0229 FF            [12] 1137 	mov	r7,a
   022A BE FF 05      [24] 1138 	cjne	r6,#0xFF,00190$
   022D BF FF 02      [24] 1139 	cjne	r7,#0xFF,00190$
   0230 80 0C         [24] 1140 	sjmp	00125$
   0232                    1141 00190$:
                           1142 ;	radio/radio.c:172: errors.corrected_packets++;
   0232 0E            [12] 1143 	inc	r6
   0233 BE 00 01      [24] 1144 	cjne	r6,#0x00,00191$
   0236 0F            [12] 1145 	inc	r7
   0237                    1146 00191$:
   0237 78r0A         [12] 1147 	mov	r0,#(_errors + 0x000a)
   0239 EE            [12] 1148 	mov	a,r6
   023A F2            [24] 1149 	movx	@r0,a
   023B 08            [12] 1150 	inc	r0
   023C EF            [12] 1151 	mov	a,r7
   023D F2            [24] 1152 	movx	@r0,a
   023E                    1153 00125$:
                           1154 ;	radio/radio.c:176: return true;
   023E D3            [12] 1155 	setb	c
                           1156 ;	radio/radio.c:178: failed:
   023F 22            [24] 1157 	ret
   0240                    1158 00126$:
                           1159 ;	radio/radio.c:179: if (errors.rx_errors != 0xFFFF) {
   0240 78r00         [12] 1160 	mov	r0,#_errors
   0242 E2            [24] 1161 	movx	a,@r0
   0243 FE            [12] 1162 	mov	r6,a
   0244 08            [12] 1163 	inc	r0
   0245 E2            [24] 1164 	movx	a,@r0
   0246 FF            [12] 1165 	mov	r7,a
   0247 BE FF 05      [24] 1166 	cjne	r6,#0xFF,00192$
   024A BF FF 02      [24] 1167 	cjne	r7,#0xFF,00192$
   024D 80 0C         [24] 1168 	sjmp	00128$
   024F                    1169 00192$:
                           1170 ;	radio/radio.c:180: errors.rx_errors++;
   024F 0E            [12] 1171 	inc	r6
   0250 BE 00 01      [24] 1172 	cjne	r6,#0x00,00193$
   0253 0F            [12] 1173 	inc	r7
   0254                    1174 00193$:
   0254 78r00         [12] 1175 	mov	r0,#_errors
   0256 EE            [12] 1176 	mov	a,r6
   0257 F2            [24] 1177 	movx	@r0,a
   0258 08            [12] 1178 	inc	r0
   0259 EF            [12] 1179 	mov	a,r7
   025A F2            [24] 1180 	movx	@r0,a
   025B                    1181 00128$:
                           1182 ;	radio/radio.c:182: return false;
   025B C3            [12] 1183 	clr	c
   025C 22            [24] 1184 	ret
                           1185 ;------------------------------------------------------------
                           1186 ;Allocation info for local variables in function 'radio_write_transmit_fifo'
                           1187 ;------------------------------------------------------------
                           1188 ;n                         Allocated to registers r7 
                           1189 ;------------------------------------------------------------
                           1190 ;	radio/radio.c:189: radio_write_transmit_fifo(register uint8_t n, __xdata uint8_t * __pdata buffer)
                           1191 ;	-----------------------------------------
                           1192 ;	 function radio_write_transmit_fifo
                           1193 ;	-----------------------------------------
   025D                    1194 _radio_write_transmit_fifo:
   025D AF 82         [24] 1195 	mov	r7,dpl
                           1196 ;	radio/radio.c:191: NSS1 = 0;
   025F C2 94         [12] 1197 	clr	_NSS1
                           1198 ;	radio/radio.c:192: SPIF1 = 0;
   0261 C2 B7         [12] 1199 	clr	_SPIF1
                           1200 ;	radio/radio.c:193: SPI1DAT = (0x80 | EZRADIOPRO_FIFO_ACCESS);
   0263 75 86 FF      [24] 1201 	mov	_SPI1DAT,#0xFF
                           1202 ;	radio/radio.c:195: while (n--) {
   0266 78r13         [12] 1203 	mov	r0,#_radio_write_transmit_fifo_PARM_2
   0268 E2            [24] 1204 	movx	a,@r0
   0269 FD            [12] 1205 	mov	r5,a
   026A 08            [12] 1206 	inc	r0
   026B E2            [24] 1207 	movx	a,@r0
   026C FE            [12] 1208 	mov	r6,a
   026D                    1209 00104$:
   026D 8F 04         [24] 1210 	mov	ar4,r7
   026F 1F            [12] 1211 	dec	r7
   0270 EC            [12] 1212 	mov	a,r4
   0271 60 11         [24] 1213 	jz	00107$
                           1214 ;	radio/radio.c:196: while (!TXBMT1) /* noop */;
   0273                    1215 00101$:
   0273 30 B1 FD      [24] 1216 	jnb	_TXBMT1,00101$
                           1217 ;	radio/radio.c:197: SPI1DAT = *buffer++;
   0276 8D 82         [24] 1218 	mov	dpl,r5
   0278 8E 83         [24] 1219 	mov	dph,r6
   027A E0            [24] 1220 	movx	a,@dptr
   027B F5 86         [12] 1221 	mov	_SPI1DAT,a
   027D A3            [24] 1222 	inc	dptr
   027E AD 82         [24] 1223 	mov	r5,dpl
   0280 AE 83         [24] 1224 	mov	r6,dph
                           1225 ;	radio/radio.c:200: while (!TXBMT1) /* noop */;
   0282 80 E9         [24] 1226 	sjmp	00104$
   0284                    1227 00107$:
   0284 30 B1 FD      [24] 1228 	jnb	_TXBMT1,00107$
                           1229 ;	radio/radio.c:201: while ((SPI1CFG & 0x80) == 0x80);
   0287                    1230 00110$:
   0287 74 80         [12] 1231 	mov	a,#0x80
   0289 55 84         [12] 1232 	anl	a,_SPI1CFG
   028B FF            [12] 1233 	mov	r7,a
   028C BF 80 02      [24] 1234 	cjne	r7,#0x80,00137$
   028F 80 F6         [24] 1235 	sjmp	00110$
   0291                    1236 00137$:
                           1237 ;	radio/radio.c:203: SPIF1 = 0;
   0291 C2 B7         [12] 1238 	clr	_SPIF1
                           1239 ;	radio/radio.c:204: NSS1 = 1;
   0293 D2 94         [12] 1240 	setb	_NSS1
   0295 22            [24] 1241 	ret
                           1242 ;------------------------------------------------------------
                           1243 ;Allocation info for local variables in function 'radio_receive_in_progress'
                           1244 ;------------------------------------------------------------
                           1245 ;	radio/radio.c:210: radio_receive_in_progress(void)
                           1246 ;	-----------------------------------------
                           1247 ;	 function radio_receive_in_progress
                           1248 ;	-----------------------------------------
   0296                    1249 _radio_receive_in_progress:
                           1250 ;	radio/radio.c:212: if (packet_received ||
   0296 20*00 05      [24] 1251 	jb	_packet_received,00101$
                           1252 ;	radio/radio.c:213: partial_packet_length != 0) {
   0299 78r01         [12] 1253 	mov	r0,#_partial_packet_length
   029B E2            [24] 1254 	movx	a,@r0
   029C 60 02         [24] 1255 	jz	00102$
   029E                    1256 00101$:
                           1257 ;	radio/radio.c:214: return true;
   029E D3            [12] 1258 	setb	c
   029F 22            [24] 1259 	ret
   02A0                    1260 00102$:
                           1261 ;	radio/radio.c:218: if (register_read(EZRADIOPRO_EZMAC_STATUS) & EZRADIOPRO_PKRX) {
   02A0 75 82 31      [24] 1262 	mov	dpl,#0x31
   02A3 12r0Br78      [24] 1263 	lcall	_register_read
   02A6 E5 82         [12] 1264 	mov	a,dpl
   02A8 30 E4 02      [24] 1265 	jnb	acc.4,00105$
                           1266 ;	radio/radio.c:219: return true;
   02AB D3            [12] 1267 	setb	c
   02AC 22            [24] 1268 	ret
   02AD                    1269 00105$:
                           1270 ;	radio/radio.c:221: return false;
   02AD C3            [12] 1271 	clr	c
   02AE 22            [24] 1272 	ret
                           1273 ;------------------------------------------------------------
                           1274 ;Allocation info for local variables in function 'radio_preamble_detected'
                           1275 ;------------------------------------------------------------
                           1276 ;	radio/radio.c:228: radio_preamble_detected(void)
                           1277 ;	-----------------------------------------
                           1278 ;	 function radio_preamble_detected
                           1279 ;	-----------------------------------------
   02AF                    1280 _radio_preamble_detected:
                           1281 ;	radio/radio.c:230: EX0_SAVE_DISABLE;
   02AF A2 A8         [12] 1282 	mov	c,_EX0
   02B1 92*02         [24] 1283 	mov	_radio_preamble_detected_EX0_saved_1_159,c
   02B3 C2 A8         [12] 1284 	clr	_EX0
                           1285 ;	radio/radio.c:231: if (preamble_detected) {
                           1286 ;	radio/radio.c:232: preamble_detected = 0;
   02B5 10*01 02      [24] 1287 	jbc	_preamble_detected,00108$
   02B8 80 06         [24] 1288 	sjmp	00102$
   02BA                    1289 00108$:
                           1290 ;	radio/radio.c:233: EX0_RESTORE;
   02BA A2*02         [12] 1291 	mov	c,_radio_preamble_detected_EX0_saved_1_159
   02BC 92 A8         [24] 1292 	mov	_EX0,c
                           1293 ;	radio/radio.c:234: return true;
   02BE D3            [12] 1294 	setb	c
   02BF 22            [24] 1295 	ret
   02C0                    1296 00102$:
                           1297 ;	radio/radio.c:236: EX0_RESTORE;
   02C0 A2*02         [12] 1298 	mov	c,_radio_preamble_detected_EX0_saved_1_159
   02C2 92 A8         [24] 1299 	mov	_EX0,c
                           1300 ;	radio/radio.c:237: return false;
   02C4 C3            [12] 1301 	clr	c
   02C5 22            [24] 1302 	ret
                           1303 ;------------------------------------------------------------
                           1304 ;Allocation info for local variables in function 'radio_last_rssi'
                           1305 ;------------------------------------------------------------
                           1306 ;	radio/radio.c:245: radio_last_rssi(void)
                           1307 ;	-----------------------------------------
                           1308 ;	 function radio_last_rssi
                           1309 ;	-----------------------------------------
   02C6                    1310 _radio_last_rssi:
                           1311 ;	radio/radio.c:247: return last_rssi;
   02C6 78r02         [12] 1312 	mov	r0,#_last_rssi
   02C8 E2            [24] 1313 	movx	a,@r0
   02C9 F5 82         [12] 1314 	mov	dpl,a
   02CB 22            [24] 1315 	ret
                           1316 ;------------------------------------------------------------
                           1317 ;Allocation info for local variables in function 'radio_current_rssi'
                           1318 ;------------------------------------------------------------
                           1319 ;	radio/radio.c:253: radio_current_rssi(void)
                           1320 ;	-----------------------------------------
                           1321 ;	 function radio_current_rssi
                           1322 ;	-----------------------------------------
   02CC                    1323 _radio_current_rssi:
                           1324 ;	radio/radio.c:255: return register_read(EZRADIOPRO_RECEIVED_SIGNAL_STRENGTH_INDICATOR);
   02CC 75 82 26      [24] 1325 	mov	dpl,#0x26
   02CF 02r0Br78      [24] 1326 	ljmp	_register_read
                           1327 ;------------------------------------------------------------
                           1328 ;Allocation info for local variables in function 'radio_air_rate'
                           1329 ;------------------------------------------------------------
                           1330 ;	radio/radio.c:261: radio_air_rate(void)
                           1331 ;	-----------------------------------------
                           1332 ;	 function radio_air_rate
                           1333 ;	-----------------------------------------
   02D2                    1334 _radio_air_rate:
                           1335 ;	radio/radio.c:263: return settings.air_data_rate;
   02D2 78r0D         [12] 1336 	mov	r0,#(_settings + 0x0008)
   02D4 E2            [24] 1337 	movx	a,@r0
   02D5 F5 82         [12] 1338 	mov	dpl,a
   02D7 22            [24] 1339 	ret
                           1340 ;------------------------------------------------------------
                           1341 ;Allocation info for local variables in function 'radio_clear_transmit_fifo'
                           1342 ;------------------------------------------------------------
                           1343 ;control                   Allocated to registers r7 
                           1344 ;------------------------------------------------------------
                           1345 ;	radio/radio.c:269: radio_clear_transmit_fifo(void)
                           1346 ;	-----------------------------------------
                           1347 ;	 function radio_clear_transmit_fifo
                           1348 ;	-----------------------------------------
   02D8                    1349 _radio_clear_transmit_fifo:
                           1350 ;	radio/radio.c:272: control = register_read(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2);
   02D8 75 82 08      [24] 1351 	mov	dpl,#0x08
   02DB 12r0Br78      [24] 1352 	lcall	_register_read
   02DE AF 82         [24] 1353 	mov	r7,dpl
                           1354 ;	radio/radio.c:273: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, control | EZRADIOPRO_FFCLRTX);
   02E0 74 01         [12] 1355 	mov	a,#0x01
   02E2 4F            [12] 1356 	orl	a,r7
   02E3 FE            [12] 1357 	mov	r6,a
   02E4 C0 07         [24] 1358 	push	ar7
   02E6 C0 06         [24] 1359 	push	ar6
   02E8 75 82 08      [24] 1360 	mov	dpl,#0x08
   02EB 12r0Br48      [24] 1361 	lcall	_register_write
   02EE 15 81         [12] 1362 	dec	sp
   02F0 D0 07         [24] 1363 	pop	ar7
                           1364 ;	radio/radio.c:274: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, control & ~EZRADIOPRO_FFCLRTX);
   02F2 53 07 FE      [24] 1365 	anl	ar7,#0xFE
   02F5 C0 07         [24] 1366 	push	ar7
   02F7 75 82 08      [24] 1367 	mov	dpl,#0x08
   02FA 12r0Br48      [24] 1368 	lcall	_register_write
   02FD 15 81         [12] 1369 	dec	sp
   02FF 22            [24] 1370 	ret
                           1371 ;------------------------------------------------------------
                           1372 ;Allocation info for local variables in function 'radio_clear_receive_fifo'
                           1373 ;------------------------------------------------------------
                           1374 ;control                   Allocated to registers r7 
                           1375 ;------------------------------------------------------------
                           1376 ;	radio/radio.c:281: radio_clear_receive_fifo(void) __reentrant
                           1377 ;	-----------------------------------------
                           1378 ;	 function radio_clear_receive_fifo
                           1379 ;	-----------------------------------------
   0300                    1380 _radio_clear_receive_fifo:
                           1381 ;	radio/radio.c:284: control = register_read(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2);
   0300 75 82 08      [24] 1382 	mov	dpl,#0x08
   0303 12r0Br78      [24] 1383 	lcall	_register_read
   0306 AF 82         [24] 1384 	mov	r7,dpl
                           1385 ;	radio/radio.c:285: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, control | EZRADIOPRO_FFCLRRX);
   0308 74 02         [12] 1386 	mov	a,#0x02
   030A 4F            [12] 1387 	orl	a,r7
   030B FE            [12] 1388 	mov	r6,a
   030C C0 07         [24] 1389 	push	ar7
   030E C0 06         [24] 1390 	push	ar6
   0310 75 82 08      [24] 1391 	mov	dpl,#0x08
   0313 12r0Br48      [24] 1392 	lcall	_register_write
   0316 15 81         [12] 1393 	dec	sp
   0318 D0 07         [24] 1394 	pop	ar7
                           1395 ;	radio/radio.c:286: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, control & ~EZRADIOPRO_FFCLRRX);
   031A 53 07 FD      [24] 1396 	anl	ar7,#0xFD
   031D C0 07         [24] 1397 	push	ar7
   031F 75 82 08      [24] 1398 	mov	dpl,#0x08
   0322 12r0Br48      [24] 1399 	lcall	_register_write
   0325 15 81         [12] 1400 	dec	sp
   0327 22            [24] 1401 	ret
                           1402 ;------------------------------------------------------------
                           1403 ;Allocation info for local variables in function 'radio_transmit_simple'
                           1404 ;------------------------------------------------------------
                           1405 ;length                    Allocated to registers r7 
                           1406 ;n                         Allocated to registers r6 
                           1407 ;status                    Allocated to registers r3 
                           1408 ;------------------------------------------------------------
                           1409 ;	radio/radio.c:298: radio_transmit_simple(__data uint8_t length, __xdata uint8_t * __pdata buf, __pdata uint16_t timeout_ticks)
                           1410 ;	-----------------------------------------
                           1411 ;	 function radio_transmit_simple
                           1412 ;	-----------------------------------------
   0328                    1413 _radio_transmit_simple:
                           1414 ;	radio/radio.c:304: if (length > sizeof(radio_buffer)) {
   0328 E5 82         [12] 1415 	mov	a,dpl
   032A FF            [12] 1416 	mov	r7,a
   032B 24 03         [12] 1417 	add	a,#0xff - 0xFC
   032D 50 19         [24] 1418 	jnc	00102$
                           1419 ;	radio/radio.c:305: panic("oversized packet");
   032F C0 07         [24] 1420 	push	ar7
   0331 74r00         [12] 1421 	mov	a,#__str_0
   0333 C0 E0         [24] 1422 	push	acc
   0335 74s00         [12] 1423 	mov	a,#(__str_0 >> 8)
   0337 C0 E0         [24] 1424 	push	acc
   0339 74 80         [12] 1425 	mov	a,#0x80
   033B C0 E0         [24] 1426 	push	acc
   033D 12r00r00      [24] 1427 	lcall	_panic
   0340 15 81         [12] 1428 	dec	sp
   0342 15 81         [12] 1429 	dec	sp
   0344 15 81         [12] 1430 	dec	sp
   0346 D0 07         [24] 1431 	pop	ar7
   0348                    1432 00102$:
                           1433 ;	radio/radio.c:308: radio_clear_transmit_fifo();
   0348 C0 07         [24] 1434 	push	ar7
   034A 12r02rD8      [24] 1435 	lcall	_radio_clear_transmit_fifo
   034D D0 07         [24] 1436 	pop	ar7
                           1437 ;	radio/radio.c:310: register_write(EZRADIOPRO_TRANSMIT_PACKET_LENGTH, length);
   034F C0 07         [24] 1438 	push	ar7
   0351 C0 07         [24] 1439 	push	ar7
   0353 75 82 3E      [24] 1440 	mov	dpl,#0x3E
   0356 12r0Br48      [24] 1441 	lcall	_register_write
   0359 15 81         [12] 1442 	dec	sp
   035B D0 07         [24] 1443 	pop	ar7
                           1444 ;	radio/radio.c:313: n = length;
                           1445 ;	radio/radio.c:314: if (n > TX_FIFO_THRESHOLD_LOW) {
   035D EF            [12] 1446 	mov	a,r7
   035E FE            [12] 1447 	mov	r6,a
   035F 24 DF         [12] 1448 	add	a,#0xff - 0x20
   0361 50 02         [24] 1449 	jnc	00104$
                           1450 ;	radio/radio.c:315: n = TX_FIFO_THRESHOLD_LOW;
   0363 7E 20         [12] 1451 	mov	r6,#0x20
   0365                    1452 00104$:
                           1453 ;	radio/radio.c:317: radio_write_transmit_fifo(n, buf);
   0365 78r15         [12] 1454 	mov	r0,#_radio_transmit_simple_PARM_2
   0367 79r13         [12] 1455 	mov	r1,#_radio_write_transmit_fifo_PARM_2
   0369 E2            [24] 1456 	movx	a,@r0
   036A F3            [24] 1457 	movx	@r1,a
   036B 08            [12] 1458 	inc	r0
   036C E2            [24] 1459 	movx	a,@r0
   036D 09            [12] 1460 	inc	r1
   036E F3            [24] 1461 	movx	@r1,a
   036F 8E 82         [24] 1462 	mov	dpl,r6
   0371 C0 07         [24] 1463 	push	ar7
   0373 C0 06         [24] 1464 	push	ar6
   0375 12r02r5D      [24] 1465 	lcall	_radio_write_transmit_fifo
   0378 D0 06         [24] 1466 	pop	ar6
   037A D0 07         [24] 1467 	pop	ar7
                           1468 ;	radio/radio.c:318: length -= n;
   037C EF            [12] 1469 	mov	a,r7
   037D C3            [12] 1470 	clr	c
   037E 9E            [12] 1471 	subb	a,r6
   037F FF            [12] 1472 	mov	r7,a
                           1473 ;	radio/radio.c:319: buf += n;
   0380 78r15         [12] 1474 	mov	r0,#_radio_transmit_simple_PARM_2
   0382 E2            [24] 1475 	movx	a,@r0
   0383 2E            [12] 1476 	add	a,r6
   0384 F2            [24] 1477 	movx	@r0,a
   0385 08            [12] 1478 	inc	r0
   0386 E2            [24] 1479 	movx	a,@r0
   0387 34 00         [12] 1480 	addc	a,#0x00
   0389 F2            [24] 1481 	movx	@r0,a
                           1482 ;	radio/radio.c:322: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, 0);
   038A C0 07         [24] 1483 	push	ar7
   038C E4            [12] 1484 	clr	a
   038D C0 E0         [24] 1485 	push	acc
   038F 75 82 05      [24] 1486 	mov	dpl,#0x05
   0392 12r0Br48      [24] 1487 	lcall	_register_write
   0395 15 81         [12] 1488 	dec	sp
                           1489 ;	radio/radio.c:323: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, 0);
   0397 E4            [12] 1490 	clr	a
   0398 C0 E0         [24] 1491 	push	acc
   039A 75 82 06      [24] 1492 	mov	dpl,#0x06
   039D 12r0Br48      [24] 1493 	lcall	_register_write
   03A0 15 81         [12] 1494 	dec	sp
                           1495 ;	radio/radio.c:325: preamble_detected = 0;
   03A2 C2*01         [12] 1496 	clr	_preamble_detected
                           1497 ;	radio/radio.c:326: transmit_started = false;
   03A4 C2*03         [12] 1498 	clr	_radio_transmit_simple_transmit_started_1_172
                           1499 ;	radio/radio.c:329: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_1, EZRADIOPRO_TXON | EZRADIOPRO_XTON);
   03A6 74 09         [12] 1500 	mov	a,#0x09
   03A8 C0 E0         [24] 1501 	push	acc
   03AA 75 82 07      [24] 1502 	mov	dpl,#0x07
   03AD 12r0Br48      [24] 1503 	lcall	_register_write
   03B0 15 81         [12] 1504 	dec	sp
                           1505 ;	radio/radio.c:332: tstart = timer2_tick();
   03B2 12r00r00      [24] 1506 	lcall	_timer2_tick
   03B5 AC 82         [24] 1507 	mov	r4,dpl
   03B7 AD 83         [24] 1508 	mov	r5,dph
   03B9 D0 07         [24] 1509 	pop	ar7
                           1510 ;	radio/radio.c:333: while ((uint16_t)(timer2_tick() - tstart) < timeout_ticks) {
   03BB                    1511 00130$:
   03BB C0 07         [24] 1512 	push	ar7
   03BD C0 05         [24] 1513 	push	ar5
   03BF C0 04         [24] 1514 	push	ar4
   03C1 12r00r00      [24] 1515 	lcall	_timer2_tick
   03C4 AA 82         [24] 1516 	mov	r2,dpl
   03C6 AB 83         [24] 1517 	mov	r3,dph
   03C8 D0 04         [24] 1518 	pop	ar4
   03CA D0 05         [24] 1519 	pop	ar5
   03CC D0 07         [24] 1520 	pop	ar7
   03CE EA            [12] 1521 	mov	a,r2
   03CF C3            [12] 1522 	clr	c
   03D0 9C            [12] 1523 	subb	a,r4
   03D1 FA            [12] 1524 	mov	r2,a
   03D2 EB            [12] 1525 	mov	a,r3
   03D3 9D            [12] 1526 	subb	a,r5
   03D4 FB            [12] 1527 	mov	r3,a
   03D5 78r17         [12] 1528 	mov	r0,#_radio_transmit_simple_PARM_3
   03D7 C3            [12] 1529 	clr	c
   03D8 E2            [24] 1530 	movx	a,@r0
   03D9 F5 F0         [12] 1531 	mov	b,a
   03DB EA            [12] 1532 	mov	a,r2
   03DC 95 F0         [12] 1533 	subb	a,b
   03DE 08            [12] 1534 	inc	r0
   03DF E2            [24] 1535 	movx	a,@r0
   03E0 F5 F0         [12] 1536 	mov	b,a
   03E2 EB            [12] 1537 	mov	a,r3
   03E3 95 F0         [12] 1538 	subb	a,b
   03E5 40 03         [24] 1539 	jc	00199$
   03E7 02r04rF4      [24] 1540 	ljmp	00132$
   03EA                    1541 00199$:
                           1542 ;	radio/radio.c:337: status = register_read(EZRADIOPRO_INTERRUPT_STATUS_1);
   03EA 75 82 03      [24] 1543 	mov	dpl,#0x03
   03ED C0 07         [24] 1544 	push	ar7
   03EF C0 05         [24] 1545 	push	ar5
   03F1 C0 04         [24] 1546 	push	ar4
   03F3 12r0Br78      [24] 1547 	lcall	_register_read
   03F6 AB 82         [24] 1548 	mov	r3,dpl
   03F8 D0 04         [24] 1549 	pop	ar4
   03FA D0 05         [24] 1550 	pop	ar5
   03FC D0 07         [24] 1551 	pop	ar7
                           1552 ;	radio/radio.c:338: if (transmit_started && length != 0 && (status & EZRADIOPRO_ITXFFAEM)) {
   03FE 30*03 40      [24] 1553 	jnb	_radio_transmit_simple_transmit_started_1_172,00108$
   0401 EF            [12] 1554 	mov	a,r7
   0402 60 3D         [24] 1555 	jz	00108$
   0404 EB            [12] 1556 	mov	a,r3
   0405 30 E5 39      [24] 1557 	jnb	acc.5,00108$
                           1558 ;	radio/radio.c:345: n = 4;
   0408 7E 04         [12] 1559 	mov	r6,#0x04
                           1560 ;	radio/radio.c:346: if (n > length) {
   040A BF 04 00      [24] 1561 	cjne	r7,#0x04,00203$
   040D                    1562 00203$:
   040D 50 02         [24] 1563 	jnc	00106$
                           1564 ;	radio/radio.c:347: n = length;
   040F 8F 06         [24] 1565 	mov	ar6,r7
   0411                    1566 00106$:
                           1567 ;	radio/radio.c:349: radio_write_transmit_fifo(n, buf);
   0411 78r15         [12] 1568 	mov	r0,#_radio_transmit_simple_PARM_2
   0413 79r13         [12] 1569 	mov	r1,#_radio_write_transmit_fifo_PARM_2
   0415 E2            [24] 1570 	movx	a,@r0
   0416 F3            [24] 1571 	movx	@r1,a
   0417 08            [12] 1572 	inc	r0
   0418 E2            [24] 1573 	movx	a,@r0
   0419 09            [12] 1574 	inc	r1
   041A F3            [24] 1575 	movx	@r1,a
   041B 8E 82         [24] 1576 	mov	dpl,r6
   041D C0 07         [24] 1577 	push	ar7
   041F C0 06         [24] 1578 	push	ar6
   0421 C0 05         [24] 1579 	push	ar5
   0423 C0 04         [24] 1580 	push	ar4
   0425 12r02r5D      [24] 1581 	lcall	_radio_write_transmit_fifo
   0428 D0 04         [24] 1582 	pop	ar4
   042A D0 05         [24] 1583 	pop	ar5
   042C D0 06         [24] 1584 	pop	ar6
   042E D0 07         [24] 1585 	pop	ar7
                           1586 ;	radio/radio.c:350: length -= n;
   0430 EF            [12] 1587 	mov	a,r7
   0431 C3            [12] 1588 	clr	c
   0432 9E            [12] 1589 	subb	a,r6
   0433 FF            [12] 1590 	mov	r7,a
                           1591 ;	radio/radio.c:351: buf += n;
   0434 78r15         [12] 1592 	mov	r0,#_radio_transmit_simple_PARM_2
   0436 E2            [24] 1593 	movx	a,@r0
   0437 2E            [12] 1594 	add	a,r6
   0438 F2            [24] 1595 	movx	@r0,a
   0439 08            [12] 1596 	inc	r0
   043A E2            [24] 1597 	movx	a,@r0
   043B 34 00         [12] 1598 	addc	a,#0x00
   043D F2            [24] 1599 	movx	@r0,a
                           1600 ;	radio/radio.c:352: continue;
   043E 02r03rBB      [24] 1601 	ljmp	00130$
   0441                    1602 00108$:
                           1603 ;	radio/radio.c:354: if (transmit_started && length != 0 && (status & EZRADIOPRO_ITXFFAFULL) == 0) {
   0441 30*03 40      [24] 1604 	jnb	_radio_transmit_simple_transmit_started_1_172,00114$
   0444 EF            [12] 1605 	mov	a,r7
   0445 60 3D         [24] 1606 	jz	00114$
   0447 EB            [12] 1607 	mov	a,r3
   0448 20 E6 39      [24] 1608 	jb	acc.6,00114$
                           1609 ;	radio/radio.c:358: n = 4;
   044B 7E 04         [12] 1610 	mov	r6,#0x04
                           1611 ;	radio/radio.c:359: if (n > length) {
   044D BF 04 00      [24] 1612 	cjne	r7,#0x04,00208$
   0450                    1613 00208$:
   0450 50 02         [24] 1614 	jnc	00112$
                           1615 ;	radio/radio.c:360: n = length;
   0452 8F 06         [24] 1616 	mov	ar6,r7
   0454                    1617 00112$:
                           1618 ;	radio/radio.c:362: radio_write_transmit_fifo(n, buf);
   0454 78r15         [12] 1619 	mov	r0,#_radio_transmit_simple_PARM_2
   0456 79r13         [12] 1620 	mov	r1,#_radio_write_transmit_fifo_PARM_2
   0458 E2            [24] 1621 	movx	a,@r0
   0459 F3            [24] 1622 	movx	@r1,a
   045A 08            [12] 1623 	inc	r0
   045B E2            [24] 1624 	movx	a,@r0
   045C 09            [12] 1625 	inc	r1
   045D F3            [24] 1626 	movx	@r1,a
   045E 8E 82         [24] 1627 	mov	dpl,r6
   0460 C0 07         [24] 1628 	push	ar7
   0462 C0 06         [24] 1629 	push	ar6
   0464 C0 05         [24] 1630 	push	ar5
   0466 C0 04         [24] 1631 	push	ar4
   0468 12r02r5D      [24] 1632 	lcall	_radio_write_transmit_fifo
   046B D0 04         [24] 1633 	pop	ar4
   046D D0 05         [24] 1634 	pop	ar5
   046F D0 06         [24] 1635 	pop	ar6
   0471 D0 07         [24] 1636 	pop	ar7
                           1637 ;	radio/radio.c:363: length -= n;
   0473 EF            [12] 1638 	mov	a,r7
   0474 C3            [12] 1639 	clr	c
   0475 9E            [12] 1640 	subb	a,r6
   0476 FF            [12] 1641 	mov	r7,a
                           1642 ;	radio/radio.c:364: buf += n;
   0477 78r15         [12] 1643 	mov	r0,#_radio_transmit_simple_PARM_2
   0479 E2            [24] 1644 	movx	a,@r0
   047A 2E            [12] 1645 	add	a,r6
   047B F2            [24] 1646 	movx	@r0,a
   047C 08            [12] 1647 	inc	r0
   047D E2            [24] 1648 	movx	a,@r0
   047E 34 00         [12] 1649 	addc	a,#0x00
   0480 F2            [24] 1650 	movx	@r0,a
                           1651 ;	radio/radio.c:365: continue;
   0481 02r03rBB      [24] 1652 	ljmp	00130$
   0484                    1653 00114$:
                           1654 ;	radio/radio.c:368: if (status & EZRADIOPRO_IFFERR) {
   0484 EB            [12] 1655 	mov	a,r3
   0485 30 E7 20      [24] 1656 	jnb	acc.7,00120$
                           1657 ;	radio/radio.c:370: radio_clear_transmit_fifo();
   0488 12r02rD8      [24] 1658 	lcall	_radio_clear_transmit_fifo
                           1659 ;	radio/radio.c:372: if (errors.tx_errors != 0xFFFF) {
   048B 78r02         [12] 1660 	mov	r0,#(_errors + 0x0002)
   048D E2            [24] 1661 	movx	a,@r0
   048E FA            [12] 1662 	mov	r2,a
   048F 08            [12] 1663 	inc	r0
   0490 E2            [24] 1664 	movx	a,@r0
   0491 FE            [12] 1665 	mov	r6,a
   0492 BA FF 05      [24] 1666 	cjne	r2,#0xFF,00211$
   0495 BE FF 02      [24] 1667 	cjne	r6,#0xFF,00211$
   0498 80 0C         [24] 1668 	sjmp	00118$
   049A                    1669 00211$:
                           1670 ;	radio/radio.c:373: errors.tx_errors++;
   049A 0A            [12] 1671 	inc	r2
   049B BA 00 01      [24] 1672 	cjne	r2,#0x00,00212$
   049E 0E            [12] 1673 	inc	r6
   049F                    1674 00212$:
   049F 78r02         [12] 1675 	mov	r0,#(_errors + 0x0002)
   04A1 EA            [12] 1676 	mov	a,r2
   04A2 F2            [24] 1677 	movx	@r0,a
   04A3 08            [12] 1678 	inc	r0
   04A4 EE            [12] 1679 	mov	a,r6
   04A5 F2            [24] 1680 	movx	@r0,a
   04A6                    1681 00118$:
                           1682 ;	radio/radio.c:375: return false;
   04A6 C3            [12] 1683 	clr	c
   04A7 22            [24] 1684 	ret
   04A8                    1685 00120$:
                           1686 ;	radio/radio.c:380: status = register_read(EZRADIOPRO_DEVICE_STATUS);
   04A8 75 82 02      [24] 1687 	mov	dpl,#0x02
   04AB C0 07         [24] 1688 	push	ar7
   04AD C0 05         [24] 1689 	push	ar5
   04AF C0 04         [24] 1690 	push	ar4
   04B1 12r0Br78      [24] 1691 	lcall	_register_read
   04B4 AB 82         [24] 1692 	mov	r3,dpl
   04B6 D0 04         [24] 1693 	pop	ar4
   04B8 D0 05         [24] 1694 	pop	ar5
   04BA D0 07         [24] 1695 	pop	ar7
                           1696 ;	radio/radio.c:381: if (status & 0x02) {
   04BC EB            [12] 1697 	mov	a,r3
   04BD 30 E1 05      [24] 1698 	jnb	acc.1,00122$
                           1699 ;	radio/radio.c:383: transmit_started = true;
   04C0 D2*03         [12] 1700 	setb	_radio_transmit_simple_transmit_started_1_172
                           1701 ;	radio/radio.c:384: continue;
   04C2 02r03rBB      [24] 1702 	ljmp	00130$
   04C5                    1703 00122$:
                           1704 ;	radio/radio.c:386: if (transmit_started && (status & 0x02) == 0) {
   04C5 20*03 03      [24] 1705 	jb	_radio_transmit_simple_transmit_started_1_172,00214$
   04C8 02r03rBB      [24] 1706 	ljmp	00130$
   04CB                    1707 00214$:
   04CB EB            [12] 1708 	mov	a,r3
   04CC 30 E1 03      [24] 1709 	jnb	acc.1,00215$
   04CF 02r03rBB      [24] 1710 	ljmp	00130$
   04D2                    1711 00215$:
                           1712 ;	radio/radio.c:389: if (length != 0) {
   04D2 EF            [12] 1713 	mov	a,r7
   04D3 60 1D         [24] 1714 	jz	00126$
                           1715 ;	radio/radio.c:391: if (errors.tx_errors != 0xFFFF) {
   04D5 78r02         [12] 1716 	mov	r0,#(_errors + 0x0002)
   04D7 E2            [24] 1717 	movx	a,@r0
   04D8 FE            [12] 1718 	mov	r6,a
   04D9 08            [12] 1719 	inc	r0
   04DA E2            [24] 1720 	movx	a,@r0
   04DB FF            [12] 1721 	mov	r7,a
   04DC BE FF 05      [24] 1722 	cjne	r6,#0xFF,00217$
   04DF BF FF 02      [24] 1723 	cjne	r7,#0xFF,00217$
   04E2 80 0C         [24] 1724 	sjmp	00124$
   04E4                    1725 00217$:
                           1726 ;	radio/radio.c:392: errors.tx_errors++;
   04E4 0E            [12] 1727 	inc	r6
   04E5 BE 00 01      [24] 1728 	cjne	r6,#0x00,00218$
   04E8 0F            [12] 1729 	inc	r7
   04E9                    1730 00218$:
   04E9 78r02         [12] 1731 	mov	r0,#(_errors + 0x0002)
   04EB EE            [12] 1732 	mov	a,r6
   04EC F2            [24] 1733 	movx	@r0,a
   04ED 08            [12] 1734 	inc	r0
   04EE EF            [12] 1735 	mov	a,r7
   04EF F2            [24] 1736 	movx	@r0,a
   04F0                    1737 00124$:
                           1738 ;	radio/radio.c:394: return false;
   04F0 C3            [12] 1739 	clr	c
   04F1 22            [24] 1740 	ret
   04F2                    1741 00126$:
                           1742 ;	radio/radio.c:396: return true;			
   04F2 D3            [12] 1743 	setb	c
   04F3 22            [24] 1744 	ret
   04F4                    1745 00132$:
                           1746 ;	radio/radio.c:407: if (errors.tx_errors != 0xFFFF) {
   04F4 78r02         [12] 1747 	mov	r0,#(_errors + 0x0002)
   04F6 E2            [24] 1748 	movx	a,@r0
   04F7 FE            [12] 1749 	mov	r6,a
   04F8 08            [12] 1750 	inc	r0
   04F9 E2            [24] 1751 	movx	a,@r0
   04FA FF            [12] 1752 	mov	r7,a
   04FB BE FF 05      [24] 1753 	cjne	r6,#0xFF,00219$
   04FE BF FF 02      [24] 1754 	cjne	r7,#0xFF,00219$
   0501 80 0C         [24] 1755 	sjmp	00134$
   0503                    1756 00219$:
                           1757 ;	radio/radio.c:408: errors.tx_errors++;
   0503 0E            [12] 1758 	inc	r6
   0504 BE 00 01      [24] 1759 	cjne	r6,#0x00,00220$
   0507 0F            [12] 1760 	inc	r7
   0508                    1761 00220$:
   0508 78r02         [12] 1762 	mov	r0,#(_errors + 0x0002)
   050A EE            [12] 1763 	mov	a,r6
   050B F2            [24] 1764 	movx	@r0,a
   050C 08            [12] 1765 	inc	r0
   050D EF            [12] 1766 	mov	a,r7
   050E F2            [24] 1767 	movx	@r0,a
   050F                    1768 00134$:
                           1769 ;	radio/radio.c:411: return false;
   050F C3            [12] 1770 	clr	c
   0510 22            [24] 1771 	ret
                           1772 ;------------------------------------------------------------
                           1773 ;Allocation info for local variables in function 'radio_transmit_golay'
                           1774 ;------------------------------------------------------------
                           1775 ;elen                      Allocated with name '_radio_transmit_golay_elen_1_188'
                           1776 ;rlen                      Allocated to registers r5 
                           1777 ;length                    Allocated with name '_radio_transmit_golay_length_1_187'
                           1778 ;gin                       Allocated with name '_radio_transmit_golay_gin_1_188'
                           1779 ;------------------------------------------------------------
                           1780 ;	radio/radio.c:424: radio_transmit_golay(uint8_t length, __xdata uint8_t * __pdata buf, __pdata uint16_t timeout_ticks)
                           1781 ;	-----------------------------------------
                           1782 ;	 function radio_transmit_golay
                           1783 ;	-----------------------------------------
   0511                    1784 _radio_transmit_golay:
   0511 E5 82         [12] 1785 	mov	a,dpl
                           1786 ;	radio/radio.c:430: if (length > (sizeof(radio_buffer)/2)-6) {
   0513 90r01r02      [24] 1787 	mov	dptr,#_radio_transmit_golay_length_1_187
   0516 F0            [24] 1788 	movx	@dptr,a
   0517 FF            [12] 1789 	mov  r7,a
   0518 24 87         [12] 1790 	add	a,#0xff - 0x78
   051A 50 19         [24] 1791 	jnc	00102$
                           1792 ;	radio/radio.c:432: panic("oversized golay packet");		
   051C C0 07         [24] 1793 	push	ar7
   051E 74r11         [12] 1794 	mov	a,#__str_1
   0520 C0 E0         [24] 1795 	push	acc
   0522 74s00         [12] 1796 	mov	a,#(__str_1 >> 8)
   0524 C0 E0         [24] 1797 	push	acc
   0526 74 80         [12] 1798 	mov	a,#0x80
   0528 C0 E0         [24] 1799 	push	acc
   052A 12r00r00      [24] 1800 	lcall	_panic
   052D 15 81         [12] 1801 	dec	sp
   052F 15 81         [12] 1802 	dec	sp
   0531 15 81         [12] 1803 	dec	sp
   0533 D0 07         [24] 1804 	pop	ar7
   0535                    1805 00102$:
                           1806 ;	radio/radio.c:436: rlen = ((length+2)/3)*3;
   0535 8F 05         [24] 1807 	mov	ar5,r7
   0537 7E 00         [12] 1808 	mov	r6,#0x00
   0539 74 02         [12] 1809 	mov	a,#0x02
   053B 2D            [12] 1810 	add	a,r5
   053C FD            [12] 1811 	mov	r5,a
   053D E4            [12] 1812 	clr	a
   053E 3E            [12] 1813 	addc	a,r6
   053F FE            [12] 1814 	mov	r6,a
   0540 90r00r00      [24] 1815 	mov	dptr,#__divsint_PARM_2
   0543 74 03         [12] 1816 	mov	a,#0x03
   0545 F0            [24] 1817 	movx	@dptr,a
   0546 E4            [12] 1818 	clr	a
   0547 A3            [24] 1819 	inc	dptr
   0548 F0            [24] 1820 	movx	@dptr,a
   0549 8D 82         [24] 1821 	mov	dpl,r5
   054B 8E 83         [24] 1822 	mov	dph,r6
   054D C0 07         [24] 1823 	push	ar7
   054F 12r00r00      [24] 1824 	lcall	__divsint
   0552 AD 82         [24] 1825 	mov	r5,dpl
   0554 D0 07         [24] 1826 	pop	ar7
   0556 ED            [12] 1827 	mov	a,r5
   0557 75 F0 03      [24] 1828 	mov	b,#0x03
   055A A4            [48] 1829 	mul	ab
                           1830 ;	radio/radio.c:439: elen = (rlen+6)*2;
   055B FD            [12] 1831 	mov	r5,a
   055C 24 06         [12] 1832 	add	a,#0x06
   055E 25 E0         [12] 1833 	add	a,acc
   0560 F5*02         [12] 1834 	mov	_radio_transmit_golay_elen_1_188,a
                           1835 ;	radio/radio.c:442: gin[0] = netid[0];
   0562 78r03         [12] 1836 	mov	r0,#_netid
   0564 E2            [24] 1837 	movx	a,@r0
   0565 90r01r03      [24] 1838 	mov	dptr,#_radio_transmit_golay_gin_1_188
   0568 F0            [24] 1839 	movx	@dptr,a
                           1840 ;	radio/radio.c:443: gin[1] = netid[1];
   0569 78r04         [12] 1841 	mov	r0,#(_netid + 0x0001)
   056B E2            [24] 1842 	movx	a,@r0
   056C 90r01r04      [24] 1843 	mov	dptr,#(_radio_transmit_golay_gin_1_188 + 0x0001)
   056F F0            [24] 1844 	movx	@dptr,a
                           1845 ;	radio/radio.c:444: gin[2] = length;
   0570 90r01r05      [24] 1846 	mov	dptr,#(_radio_transmit_golay_gin_1_188 + 0x0002)
   0573 EF            [12] 1847 	mov	a,r7
   0574 F0            [24] 1848 	movx	@dptr,a
                           1849 ;	radio/radio.c:447: golay_encode(3, gin, radio_buffer);
   0575 78r00         [12] 1850 	mov	r0,#_golay_encode_PARM_2
   0577 74r03         [12] 1851 	mov	a,#_radio_transmit_golay_gin_1_188
   0579 F2            [24] 1852 	movx	@r0,a
   057A 08            [12] 1853 	inc	r0
   057B 74s01         [12] 1854 	mov	a,#(_radio_transmit_golay_gin_1_188 >> 8)
   057D F2            [24] 1855 	movx	@r0,a
   057E 78r00         [12] 1856 	mov	r0,#_golay_encode_PARM_3
   0580 74r00         [12] 1857 	mov	a,#_radio_buffer
   0582 F2            [24] 1858 	movx	@r0,a
   0583 08            [12] 1859 	inc	r0
   0584 74s00         [12] 1860 	mov	a,#(_radio_buffer >> 8)
   0586 F2            [24] 1861 	movx	@r0,a
   0587 75 82 03      [24] 1862 	mov	dpl,#0x03
   058A C0 07         [24] 1863 	push	ar7
   058C C0 05         [24] 1864 	push	ar5
   058E 12r00r00      [24] 1865 	lcall	_golay_encode
   0591 D0 05         [24] 1866 	pop	ar5
   0593 D0 07         [24] 1867 	pop	ar7
                           1868 ;	radio/radio.c:451: crc = crc16(length, buf);
   0595 78r19         [12] 1869 	mov	r0,#_radio_transmit_golay_PARM_2
   0597 E2            [24] 1870 	movx	a,@r0
   0598 F5*00         [12] 1871 	mov	_crc16_PARM_2,a
   059A 08            [12] 1872 	inc	r0
   059B E2            [24] 1873 	movx	a,@r0
   059C F5*01         [12] 1874 	mov	(_crc16_PARM_2 + 1),a
   059E 8F 82         [24] 1875 	mov	dpl,r7
   05A0 C0 07         [24] 1876 	push	ar7
   05A2 C0 05         [24] 1877 	push	ar5
   05A4 12r00r00      [24] 1878 	lcall	_crc16
   05A7 AB 82         [24] 1879 	mov	r3,dpl
   05A9 AC 83         [24] 1880 	mov	r4,dph
   05AB D0 05         [24] 1881 	pop	ar5
   05AD D0 07         [24] 1882 	pop	ar7
                           1883 ;	radio/radio.c:452: gin[0] = crc&0xFF;
   05AF 8B 02         [24] 1884 	mov	ar2,r3
   05B1 90r01r03      [24] 1885 	mov	dptr,#_radio_transmit_golay_gin_1_188
   05B4 EA            [12] 1886 	mov	a,r2
   05B5 F0            [24] 1887 	movx	@dptr,a
                           1888 ;	radio/radio.c:453: gin[1] = crc>>8;
   05B6 8C 03         [24] 1889 	mov	ar3,r4
   05B8 90r01r04      [24] 1890 	mov	dptr,#(_radio_transmit_golay_gin_1_188 + 0x0001)
   05BB EB            [12] 1891 	mov	a,r3
   05BC F0            [24] 1892 	movx	@dptr,a
                           1893 ;	radio/radio.c:454: gin[2] = length;
   05BD 90r01r05      [24] 1894 	mov	dptr,#(_radio_transmit_golay_gin_1_188 + 0x0002)
   05C0 EF            [12] 1895 	mov	a,r7
   05C1 F0            [24] 1896 	movx	@dptr,a
                           1897 ;	radio/radio.c:457: golay_encode(3, gin, &radio_buffer[6]);
   05C2 78r00         [12] 1898 	mov	r0,#_golay_encode_PARM_3
   05C4 74 06         [12] 1899 	mov	a,#0x06
   05C6 24r00         [12] 1900 	add	a,#_radio_buffer
   05C8 F2            [24] 1901 	movx	@r0,a
   05C9 E4            [12] 1902 	clr	a
   05CA 34s00         [12] 1903 	addc	a,#(_radio_buffer >> 8)
   05CC 08            [12] 1904 	inc	r0
   05CD F2            [24] 1905 	movx	@r0,a
   05CE 78r00         [12] 1906 	mov	r0,#_golay_encode_PARM_2
   05D0 74r03         [12] 1907 	mov	a,#_radio_transmit_golay_gin_1_188
   05D2 F2            [24] 1908 	movx	@r0,a
   05D3 08            [12] 1909 	inc	r0
   05D4 74s01         [12] 1910 	mov	a,#(_radio_transmit_golay_gin_1_188 >> 8)
   05D6 F2            [24] 1911 	movx	@r0,a
   05D7 75 82 03      [24] 1912 	mov	dpl,#0x03
   05DA C0 05         [24] 1913 	push	ar5
   05DC 12r00r00      [24] 1914 	lcall	_golay_encode
   05DF D0 05         [24] 1915 	pop	ar5
                           1916 ;	radio/radio.c:460: golay_encode(rlen, buf, &radio_buffer[12]);
   05E1 78r00         [12] 1917 	mov	r0,#_golay_encode_PARM_3
   05E3 74 0C         [12] 1918 	mov	a,#0x0C
   05E5 24r00         [12] 1919 	add	a,#_radio_buffer
   05E7 F2            [24] 1920 	movx	@r0,a
   05E8 E4            [12] 1921 	clr	a
   05E9 34s00         [12] 1922 	addc	a,#(_radio_buffer >> 8)
   05EB 08            [12] 1923 	inc	r0
   05EC F2            [24] 1924 	movx	@r0,a
   05ED 78r19         [12] 1925 	mov	r0,#_radio_transmit_golay_PARM_2
   05EF 79r00         [12] 1926 	mov	r1,#_golay_encode_PARM_2
   05F1 E2            [24] 1927 	movx	a,@r0
   05F2 F3            [24] 1928 	movx	@r1,a
   05F3 08            [12] 1929 	inc	r0
   05F4 E2            [24] 1930 	movx	a,@r0
   05F5 09            [12] 1931 	inc	r1
   05F6 F3            [24] 1932 	movx	@r1,a
   05F7 8D 82         [24] 1933 	mov	dpl,r5
   05F9 12r00r00      [24] 1934 	lcall	_golay_encode
                           1935 ;	radio/radio.c:462: return radio_transmit_simple(elen, radio_buffer, timeout_ticks);
   05FC 78r15         [12] 1936 	mov	r0,#_radio_transmit_simple_PARM_2
   05FE 74r00         [12] 1937 	mov	a,#_radio_buffer
   0600 F2            [24] 1938 	movx	@r0,a
   0601 08            [12] 1939 	inc	r0
   0602 74s00         [12] 1940 	mov	a,#(_radio_buffer >> 8)
   0604 F2            [24] 1941 	movx	@r0,a
   0605 78r1B         [12] 1942 	mov	r0,#_radio_transmit_golay_PARM_3
   0607 79r17         [12] 1943 	mov	r1,#_radio_transmit_simple_PARM_3
   0609 E2            [24] 1944 	movx	a,@r0
   060A F3            [24] 1945 	movx	@r1,a
   060B 08            [12] 1946 	inc	r0
   060C E2            [24] 1947 	movx	a,@r0
   060D 09            [12] 1948 	inc	r1
   060E F3            [24] 1949 	movx	@r1,a
   060F 85*02 82      [24] 1950 	mov	dpl,_radio_transmit_golay_elen_1_188
   0612 12r03r28      [24] 1951 	lcall	_radio_transmit_simple
   0615 92*04         [24] 1952 	mov  _radio_transmit_golay_sloc0_1_0,c
   0617 22            [24] 1953 	ret
                           1954 ;------------------------------------------------------------
                           1955 ;Allocation info for local variables in function 'radio_transmit'
                           1956 ;------------------------------------------------------------
                           1957 ;length                    Allocated with name '_radio_transmit_length_1_190'
                           1958 ;------------------------------------------------------------
                           1959 ;	radio/radio.c:474: radio_transmit(uint8_t length, __xdata uint8_t * __pdata buf, __pdata uint16_t timeout_ticks)
                           1960 ;	-----------------------------------------
                           1961 ;	 function radio_transmit
                           1962 ;	-----------------------------------------
   0618                    1963 _radio_transmit:
   0618 E5 82         [12] 1964 	mov	a,dpl
   061A 90r01r06      [24] 1965 	mov	dptr,#_radio_transmit_length_1_190
   061D F0            [24] 1966 	movx	@dptr,a
                           1967 ;	radio/radio.c:477: EX0_SAVE_DISABLE;
   061E A2 A8         [12] 1968 	mov	c,_EX0
   0620 92*05         [24] 1969 	mov	_radio_transmit_EX0_saved_1_191,c
   0622 C2 A8         [12] 1970 	clr	_EX0
                           1971 ;	radio/radio.c:480: PA_ENABLE = 1;		// Set PA_Enable to turn on PA prior to TX cycle
   0624 D2 A5         [12] 1972 	setb	_PA_ENABLE
                           1973 ;	radio/radio.c:483: if (!feature_golay) {
   0626 20*00 22      [24] 1974 	jb	_feature_golay,00102$
                           1975 ;	radio/radio.c:484: ret = radio_transmit_simple(length, buf, timeout_ticks);
   0629 90r01r06      [24] 1976 	mov	dptr,#_radio_transmit_length_1_190
   062C E0            [24] 1977 	movx	a,@dptr
   062D FF            [12] 1978 	mov	r7,a
   062E 78r1D         [12] 1979 	mov	r0,#_radio_transmit_PARM_2
   0630 79r15         [12] 1980 	mov	r1,#_radio_transmit_simple_PARM_2
   0632 E2            [24] 1981 	movx	a,@r0
   0633 F3            [24] 1982 	movx	@r1,a
   0634 08            [12] 1983 	inc	r0
   0635 E2            [24] 1984 	movx	a,@r0
   0636 09            [12] 1985 	inc	r1
   0637 F3            [24] 1986 	movx	@r1,a
   0638 78r1F         [12] 1987 	mov	r0,#_radio_transmit_PARM_3
   063A 79r17         [12] 1988 	mov	r1,#_radio_transmit_simple_PARM_3
   063C E2            [24] 1989 	movx	a,@r0
   063D F3            [24] 1990 	movx	@r1,a
   063E 08            [12] 1991 	inc	r0
   063F E2            [24] 1992 	movx	a,@r0
   0640 09            [12] 1993 	inc	r1
   0641 F3            [24] 1994 	movx	@r1,a
   0642 8F 82         [24] 1995 	mov	dpl,r7
   0644 12r03r28      [24] 1996 	lcall	_radio_transmit_simple
   0647 92*06         [24] 1997 	mov	_radio_transmit_sloc0_1_0,c
   0649 80 20         [24] 1998 	sjmp	00103$
   064B                    1999 00102$:
                           2000 ;	radio/radio.c:486: ret = radio_transmit_golay(length, buf, timeout_ticks);
   064B 90r01r06      [24] 2001 	mov	dptr,#_radio_transmit_length_1_190
   064E E0            [24] 2002 	movx	a,@dptr
   064F FF            [12] 2003 	mov	r7,a
   0650 78r1D         [12] 2004 	mov	r0,#_radio_transmit_PARM_2
   0652 79r19         [12] 2005 	mov	r1,#_radio_transmit_golay_PARM_2
   0654 E2            [24] 2006 	movx	a,@r0
   0655 F3            [24] 2007 	movx	@r1,a
   0656 08            [12] 2008 	inc	r0
   0657 E2            [24] 2009 	movx	a,@r0
   0658 09            [12] 2010 	inc	r1
   0659 F3            [24] 2011 	movx	@r1,a
   065A 78r1F         [12] 2012 	mov	r0,#_radio_transmit_PARM_3
   065C 79r1B         [12] 2013 	mov	r1,#_radio_transmit_golay_PARM_3
   065E E2            [24] 2014 	movx	a,@r0
   065F F3            [24] 2015 	movx	@r1,a
   0660 08            [12] 2016 	inc	r0
   0661 E2            [24] 2017 	movx	a,@r0
   0662 09            [12] 2018 	inc	r1
   0663 F3            [24] 2019 	movx	@r1,a
   0664 8F 82         [24] 2020 	mov	dpl,r7
   0666 12r05r11      [24] 2021 	lcall	_radio_transmit_golay
   0669 92*06         [24] 2022 	mov	_radio_transmit_sloc0_1_0,c
   066B                    2023 00103$:
                           2024 ;	radio/radio.c:489: PA_ENABLE = 0;		// Set PA_Enable to off the PA after TX cycle
   066B C2 A5         [12] 2025 	clr	_PA_ENABLE
                           2026 ;	radio/radio.c:491: EX0_RESTORE;
   066D A2*05         [12] 2027 	mov	c,_radio_transmit_EX0_saved_1_191
   066F 92 A8         [24] 2028 	mov	_EX0,c
                           2029 ;	radio/radio.c:492: return ret;
   0671 A2*06         [12] 2030 	mov	c,_radio_transmit_sloc0_1_0
   0673 22            [24] 2031 	ret
                           2032 ;------------------------------------------------------------
                           2033 ;Allocation info for local variables in function 'radio_receiver_on'
                           2034 ;------------------------------------------------------------
                           2035 ;	radio/radio.c:499: radio_receiver_on(void)
                           2036 ;	-----------------------------------------
                           2037 ;	 function radio_receiver_on
                           2038 ;	-----------------------------------------
   0674                    2039 _radio_receiver_on:
                           2040 ;	radio/radio.c:501: EX0 = 0;
   0674 C2 A8         [12] 2041 	clr	_EX0
                           2042 ;	radio/radio.c:503: packet_received = 0;
   0676 C2*00         [12] 2043 	clr	_packet_received
                           2044 ;	radio/radio.c:504: receive_packet_length = 0;
   0678 78r00         [12] 2045 	mov	r0,#_receive_packet_length
   067A E4            [12] 2046 	clr	a
   067B F2            [24] 2047 	movx	@r0,a
                           2048 ;	radio/radio.c:505: preamble_detected = 0;
   067C C2*01         [12] 2049 	clr	_preamble_detected
                           2050 ;	radio/radio.c:506: partial_packet_length = 0;
   067E 78r01         [12] 2051 	mov	r0,#_partial_packet_length
   0680 E4            [12] 2052 	clr	a
   0681 F2            [24] 2053 	movx	@r0,a
                           2054 ;	radio/radio.c:509: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, RADIO_RX_INTERRUPTS);
   0682 74 13         [12] 2055 	mov	a,#0x13
   0684 C0 E0         [24] 2056 	push	acc
   0686 75 82 05      [24] 2057 	mov	dpl,#0x05
   0689 12r0Br48      [24] 2058 	lcall	_register_write
   068C 15 81         [12] 2059 	dec	sp
                           2060 ;	radio/radio.c:510: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, EZRADIOPRO_ENPREAVAL);
   068E 74 40         [12] 2061 	mov	a,#0x40
   0690 C0 E0         [24] 2062 	push	acc
   0692 75 82 06      [24] 2063 	mov	dpl,#0x06
   0695 12r0Br48      [24] 2064 	lcall	_register_write
   0698 15 81         [12] 2065 	dec	sp
                           2066 ;	radio/radio.c:512: clear_status_registers();
   069A 12r0BrE0      [24] 2067 	lcall	_clear_status_registers
                           2068 ;	radio/radio.c:513: radio_clear_transmit_fifo();
   069D 12r02rD8      [24] 2069 	lcall	_radio_clear_transmit_fifo
                           2070 ;	radio/radio.c:514: radio_clear_receive_fifo();
   06A0 12r03r00      [24] 2071 	lcall	_radio_clear_receive_fifo
                           2072 ;	radio/radio.c:517: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_1, EZRADIOPRO_RXON | EZRADIOPRO_XTON);
   06A3 74 05         [12] 2073 	mov	a,#0x05
   06A5 C0 E0         [24] 2074 	push	acc
   06A7 75 82 07      [24] 2075 	mov	dpl,#0x07
   06AA 12r0Br48      [24] 2076 	lcall	_register_write
   06AD 15 81         [12] 2077 	dec	sp
                           2078 ;	radio/radio.c:520: EX0 = 1;
   06AF D2 A8         [12] 2079 	setb	_EX0
                           2080 ;	radio/radio.c:522: return true;
   06B1 D3            [12] 2081 	setb	c
   06B2 22            [24] 2082 	ret
                           2083 ;------------------------------------------------------------
                           2084 ;Allocation info for local variables in function 'radio_initialise'
                           2085 ;------------------------------------------------------------
                           2086 ;status                    Allocated with name '_radio_initialise_status_1_197'
                           2087 ;------------------------------------------------------------
                           2088 ;	radio/radio.c:529: radio_initialise(void)
                           2089 ;	-----------------------------------------
                           2090 ;	 function radio_initialise
                           2091 ;	-----------------------------------------
   06B3                    2092 _radio_initialise:
                           2093 ;	radio/radio.c:533: delay_msec(50);
   06B3 90 00 32      [24] 2094 	mov	dptr,#0x0032
   06B6 12r00r00      [24] 2095 	lcall	_delay_msec
                           2096 ;	radio/radio.c:536: status = register_read(EZRADIOPRO_DEVICE_VERSION);
   06B9 75 82 01      [24] 2097 	mov	dpl,#0x01
   06BC 12r0Br78      [24] 2098 	lcall	_register_read
   06BF AF 82         [24] 2099 	mov	r7,dpl
                           2100 ;	radio/radio.c:537: if (status == 0xFF || status < 5) {
   06C1 BF FF 02      [24] 2101 	cjne	r7,#0xFF,00133$
   06C4 80 05         [24] 2102 	sjmp	00101$
   06C6                    2103 00133$:
   06C6 BF 05 00      [24] 2104 	cjne	r7,#0x05,00134$
   06C9                    2105 00134$:
   06C9 50 02         [24] 2106 	jnc	00102$
   06CB                    2107 00101$:
                           2108 ;	radio/radio.c:539: return false;
   06CB C3            [12] 2109 	clr	c
   06CC 22            [24] 2110 	ret
   06CD                    2111 00102$:
                           2112 ;	radio/radio.c:542: status = register_read(EZRADIOPRO_INTERRUPT_STATUS_2);
   06CD 75 82 04      [24] 2113 	mov	dpl,#0x04
   06D0 12r0Br78      [24] 2114 	lcall	_register_read
                           2115 ;	radio/radio.c:544: if ((status & EZRADIOPRO_IPOR) == 0) {
   06D3 E5 82         [12] 2116 	mov	a,dpl
   06D5 FF            [12] 2117 	mov	r7,a
   06D6 20 E0 06      [24] 2118 	jb	acc.0,00105$
                           2119 ;	radio/radio.c:546: return software_reset();
   06D9 12r0Cr40      [24] 2120 	lcall	_software_reset
   06DC 92*07         [24] 2121 	mov  _radio_initialise_sloc0_1_0,c
   06DE 22            [24] 2122 	ret
   06DF                    2123 00105$:
                           2124 ;	radio/radio.c:549: if (status & EZRADIOPRO_ICHIPRDY) {
   06DF EF            [12] 2125 	mov	a,r7
   06E0 30 E1 02      [24] 2126 	jnb	acc.1,00107$
                           2127 ;	radio/radio.c:551: return true;
   06E3 D3            [12] 2128 	setb	c
   06E4 22            [24] 2129 	ret
   06E5                    2130 00107$:
                           2131 ;	radio/radio.c:555: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, 0);
   06E5 E4            [12] 2132 	clr	a
   06E6 C0 E0         [24] 2133 	push	acc
   06E8 75 82 05      [24] 2134 	mov	dpl,#0x05
   06EB 12r0Br48      [24] 2135 	lcall	_register_write
   06EE 15 81         [12] 2136 	dec	sp
                           2137 ;	radio/radio.c:556: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, EZRADIOPRO_ENCHIPRDY);
   06F0 74 02         [12] 2138 	mov	a,#0x02
   06F2 C0 E0         [24] 2139 	push	acc
   06F4 75 82 06      [24] 2140 	mov	dpl,#0x06
   06F7 12r0Br48      [24] 2141 	lcall	_register_write
   06FA 15 81         [12] 2142 	dec	sp
                           2143 ;	radio/radio.c:559: delay_set(50);
   06FC 90 00 32      [24] 2144 	mov	dptr,#0x0032
   06FF 12r00r00      [24] 2145 	lcall	_delay_set
                           2146 ;	radio/radio.c:560: while (!delay_expired()) {
   0702                    2147 00110$:
   0702 12r00r00      [24] 2148 	lcall	_delay_expired
   0705 40 13         [24] 2149 	jc	00112$
                           2150 ;	radio/radio.c:561: status = register_read(EZRADIOPRO_INTERRUPT_STATUS_1);
   0707 75 82 03      [24] 2151 	mov	dpl,#0x03
   070A 12r0Br78      [24] 2152 	lcall	_register_read
                           2153 ;	radio/radio.c:562: status = register_read(EZRADIOPRO_INTERRUPT_STATUS_2);
   070D 75 82 04      [24] 2154 	mov	dpl,#0x04
   0710 12r0Br78      [24] 2155 	lcall	_register_read
   0713 E5 82         [12] 2156 	mov	a,dpl
                           2157 ;	radio/radio.c:563: if (status & EZRADIOPRO_ICHIPRDY) {
   0715 30 E1 EA      [24] 2158 	jnb	acc.1,00110$
                           2159 ;	radio/radio.c:564: return true;
   0718 D3            [12] 2160 	setb	c
   0719 22            [24] 2161 	ret
   071A                    2162 00112$:
                           2163 ;	radio/radio.c:568: return false;
   071A C3            [12] 2164 	clr	c
   071B 22            [24] 2165 	ret
                           2166 ;------------------------------------------------------------
                           2167 ;Allocation info for local variables in function 'radio_set_frequency'
                           2168 ;------------------------------------------------------------
                           2169 ;	radio/radio.c:575: radio_set_frequency(__pdata uint32_t value)
                           2170 ;	-----------------------------------------
                           2171 ;	 function radio_set_frequency
                           2172 ;	-----------------------------------------
   071C                    2173 _radio_set_frequency:
   071C AC 82         [24] 2174 	mov	r4,dpl
   071E AD 83         [24] 2175 	mov	r5,dph
   0720 AE F0         [24] 2176 	mov	r6,b
   0722 FF            [12] 2177 	mov	r7,a
                           2178 ;	radio/radio.c:577: if (value < 240000000UL || value > 935000000UL) {
   0723 C3            [12] 2179 	clr	c
   0724 ED            [12] 2180 	mov	a,r5
   0725 94 1C         [12] 2181 	subb	a,#0x1C
   0727 EE            [12] 2182 	mov	a,r6
   0728 94 4E         [12] 2183 	subb	a,#0x4E
   072A EF            [12] 2184 	mov	a,r7
   072B 94 0E         [12] 2185 	subb	a,#0x0E
   072D 40 0E         [24] 2186 	jc	00101$
   072F 74 C0         [12] 2187 	mov	a,#0xC0
   0731 9C            [12] 2188 	subb	a,r4
   0732 74 F7         [12] 2189 	mov	a,#0xF7
   0734 9D            [12] 2190 	subb	a,r5
   0735 74 BA         [12] 2191 	mov	a,#0xBA
   0737 9E            [12] 2192 	subb	a,r6
   0738 74 37         [12] 2193 	mov	a,#0x37
   073A 9F            [12] 2194 	subb	a,r7
   073B 50 02         [24] 2195 	jnc	00102$
   073D                    2196 00101$:
                           2197 ;	radio/radio.c:578: return false;
   073D C3            [12] 2198 	clr	c
   073E 22            [24] 2199 	ret
   073F                    2200 00102$:
                           2201 ;	radio/radio.c:580: settings.frequency = value;
   073F 78r05         [12] 2202 	mov	r0,#_settings
   0741 EC            [12] 2203 	mov	a,r4
   0742 F2            [24] 2204 	movx	@r0,a
   0743 08            [12] 2205 	inc	r0
   0744 ED            [12] 2206 	mov	a,r5
   0745 F2            [24] 2207 	movx	@r0,a
   0746 08            [12] 2208 	inc	r0
   0747 EE            [12] 2209 	mov	a,r6
   0748 F2            [24] 2210 	movx	@r0,a
   0749 08            [12] 2211 	inc	r0
   074A EF            [12] 2212 	mov	a,r7
   074B F2            [24] 2213 	movx	@r0,a
                           2214 ;	radio/radio.c:581: set_frequency_registers(value);
   074C 8C 82         [24] 2215 	mov	dpl,r4
   074E 8D 83         [24] 2216 	mov	dph,r5
   0750 8E F0         [24] 2217 	mov	b,r6
   0752 EF            [12] 2218 	mov	a,r7
   0753 12r0CrAC      [24] 2219 	lcall	_set_frequency_registers
                           2220 ;	radio/radio.c:582: return true;
   0756 D3            [12] 2221 	setb	c
   0757 22            [24] 2222 	ret
                           2223 ;------------------------------------------------------------
                           2224 ;Allocation info for local variables in function 'radio_set_channel_spacing'
                           2225 ;------------------------------------------------------------
                           2226 ;	radio/radio.c:589: radio_set_channel_spacing(__pdata uint32_t value)
                           2227 ;	-----------------------------------------
                           2228 ;	 function radio_set_channel_spacing
                           2229 ;	-----------------------------------------
   0758                    2230 _radio_set_channel_spacing:
   0758 AC 82         [24] 2231 	mov	r4,dpl
   075A AD 83         [24] 2232 	mov	r5,dph
   075C AE F0         [24] 2233 	mov	r6,b
   075E FF            [12] 2234 	mov	r7,a
                           2235 ;	radio/radio.c:591: if (value > 2550000L)
   075F C3            [12] 2236 	clr	c
   0760 74 F0         [12] 2237 	mov	a,#0xF0
   0762 9C            [12] 2238 	subb	a,r4
   0763 74 E8         [12] 2239 	mov	a,#0xE8
   0765 9D            [12] 2240 	subb	a,r5
   0766 74 26         [12] 2241 	mov	a,#0x26
   0768 9E            [12] 2242 	subb	a,r6
   0769 E4            [12] 2243 	clr	a
   076A 9F            [12] 2244 	subb	a,r7
   076B 50 02         [24] 2245 	jnc	00102$
                           2246 ;	radio/radio.c:592: return false;
   076D C3            [12] 2247 	clr	c
   076E 22            [24] 2248 	ret
   076F                    2249 00102$:
                           2250 ;	radio/radio.c:593: value = scale_uint32(value, 10000);
   076F 90r00r21      [24] 2251 	mov	dptr,#_scale_uint32_PARM_2
   0772 74 10         [12] 2252 	mov	a,#0x10
   0774 F0            [24] 2253 	movx	@dptr,a
   0775 74 27         [12] 2254 	mov	a,#0x27
   0777 A3            [24] 2255 	inc	dptr
   0778 F0            [24] 2256 	movx	@dptr,a
   0779 E4            [12] 2257 	clr	a
   077A A3            [24] 2258 	inc	dptr
   077B F0            [24] 2259 	movx	@dptr,a
   077C E4            [12] 2260 	clr	a
   077D A3            [24] 2261 	inc	dptr
   077E F0            [24] 2262 	movx	@dptr,a
   077F 8C 82         [24] 2263 	mov	dpl,r4
   0781 8D 83         [24] 2264 	mov	dph,r5
   0783 8E F0         [24] 2265 	mov	b,r6
   0785 EF            [12] 2266 	mov	a,r7
   0786 12r0BrEC      [24] 2267 	lcall	_scale_uint32
   0789 AC 82         [24] 2268 	mov	r4,dpl
   078B AD 83         [24] 2269 	mov	r5,dph
   078D AE F0         [24] 2270 	mov	r6,b
   078F FF            [12] 2271 	mov	r7,a
                           2272 ;	radio/radio.c:594: settings.channel_spacing = value;
   0790 78r09         [12] 2273 	mov	r0,#(_settings + 0x0004)
   0792 EC            [12] 2274 	mov	a,r4
   0793 F2            [24] 2275 	movx	@r0,a
   0794 08            [12] 2276 	inc	r0
   0795 ED            [12] 2277 	mov	a,r5
   0796 F2            [24] 2278 	movx	@r0,a
   0797 08            [12] 2279 	inc	r0
   0798 EE            [12] 2280 	mov	a,r6
   0799 F2            [24] 2281 	movx	@r0,a
   079A 08            [12] 2282 	inc	r0
   079B EF            [12] 2283 	mov	a,r7
   079C F2            [24] 2284 	movx	@r0,a
                           2285 ;	radio/radio.c:595: register_write(EZRADIOPRO_FREQUENCY_HOPPING_STEP_SIZE, value);
   079D C0 04         [24] 2286 	push	ar4
   079F 75 82 7A      [24] 2287 	mov	dpl,#0x7A
   07A2 12r0Br48      [24] 2288 	lcall	_register_write
   07A5 15 81         [12] 2289 	dec	sp
                           2290 ;	radio/radio.c:596: return true;
   07A7 D3            [12] 2291 	setb	c
   07A8 22            [24] 2292 	ret
                           2293 ;------------------------------------------------------------
                           2294 ;Allocation info for local variables in function 'radio_set_channel'
                           2295 ;------------------------------------------------------------
                           2296 ;channel                   Allocated with name '_radio_set_channel_channel_1_208'
                           2297 ;------------------------------------------------------------
                           2298 ;	radio/radio.c:602: radio_set_channel(uint8_t channel)
                           2299 ;	-----------------------------------------
                           2300 ;	 function radio_set_channel
                           2301 ;	-----------------------------------------
   07A9                    2302 _radio_set_channel:
   07A9 E5 82         [12] 2303 	mov	a,dpl
   07AB 90r01r07      [24] 2304 	mov	dptr,#_radio_set_channel_channel_1_208
   07AE F0            [24] 2305 	movx	@dptr,a
                           2306 ;	radio/radio.c:604: if (channel != settings.current_channel) {
   07AF 78r0E         [12] 2307 	mov	r0,#(_settings + 0x0009)
   07B1 E2            [24] 2308 	movx	a,@r0
   07B2 FF            [12] 2309 	mov	r7,a
   07B3 90r01r07      [24] 2310 	mov	dptr,#_radio_set_channel_channel_1_208
   07B6 E0            [24] 2311 	movx	a,@dptr
   07B7 FE            [12] 2312 	mov	r6,a
   07B8 B5 07 01      [24] 2313 	cjne	a,ar7,00108$
   07BB 22            [24] 2314 	ret
   07BC                    2315 00108$:
                           2316 ;	radio/radio.c:605: settings.current_channel = channel;
   07BC 78r0E         [12] 2317 	mov	r0,#(_settings + 0x0009)
   07BE EE            [12] 2318 	mov	a,r6
   07BF F2            [24] 2319 	movx	@r0,a
                           2320 ;	radio/radio.c:606: register_write(EZRADIOPRO_FREQUENCY_HOPPING_CHANNEL_SELECT, channel);
   07C0 C0 06         [24] 2321 	push	ar6
   07C2 75 82 79      [24] 2322 	mov	dpl,#0x79
   07C5 12r0Br48      [24] 2323 	lcall	_register_write
   07C8 15 81         [12] 2324 	dec	sp
                           2325 ;	radio/radio.c:607: preamble_detected = 0;
   07CA C2*01         [12] 2326 	clr	_preamble_detected
   07CC 22            [24] 2327 	ret
                           2328 ;------------------------------------------------------------
                           2329 ;Allocation info for local variables in function 'radio_get_channel'
                           2330 ;------------------------------------------------------------
                           2331 ;	radio/radio.c:614: radio_get_channel(void)
                           2332 ;	-----------------------------------------
                           2333 ;	 function radio_get_channel
                           2334 ;	-----------------------------------------
   07CD                    2335 _radio_get_channel:
                           2336 ;	radio/radio.c:616: return settings.current_channel;
   07CD 78r0E         [12] 2337 	mov	r0,#(_settings + 0x0009)
   07CF E2            [24] 2338 	movx	a,@r0
   07D0 F5 82         [12] 2339 	mov	dpl,a
   07D2 22            [24] 2340 	ret
                           2341 ;------------------------------------------------------------
                           2342 ;Allocation info for local variables in function 'radio_configure'
                           2343 ;------------------------------------------------------------
                           2344 ;	radio/radio.c:713: radio_configure(__pdata uint8_t air_rate)
                           2345 ;	-----------------------------------------
                           2346 ;	 function radio_configure
                           2347 ;	-----------------------------------------
   07D3                    2348 _radio_configure:
   07D3 AF 82         [24] 2349 	mov	r7,dpl
                           2350 ;	radio/radio.c:718: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, 0x00);
   07D5 C0 07         [24] 2351 	push	ar7
   07D7 E4            [12] 2352 	clr	a
   07D8 C0 E0         [24] 2353 	push	acc
   07DA 75 82 05      [24] 2354 	mov	dpl,#0x05
   07DD 12r0Br48      [24] 2355 	lcall	_register_write
   07E0 15 81         [12] 2356 	dec	sp
                           2357 ;	radio/radio.c:719: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, 0x00);
   07E2 E4            [12] 2358 	clr	a
   07E3 C0 E0         [24] 2359 	push	acc
   07E5 75 82 06      [24] 2360 	mov	dpl,#0x06
   07E8 12r0Br48      [24] 2361 	lcall	_register_write
   07EB 15 81         [12] 2362 	dec	sp
                           2363 ;	radio/radio.c:721: clear_status_registers();
   07ED 12r0BrE0      [24] 2364 	lcall	_clear_status_registers
                           2365 ;	radio/radio.c:735: register_write(EZRADIOPRO_GPIO0_CONFIGURATION, 0x15);	// RX data (output)
   07F0 74 15         [12] 2366 	mov	a,#0x15
   07F2 C0 E0         [24] 2367 	push	acc
   07F4 75 82 0B      [24] 2368 	mov	dpl,#0x0B
   07F7 12r0Br48      [24] 2369 	lcall	_register_write
   07FA 15 81         [12] 2370 	dec	sp
                           2371 ;	radio/radio.c:736: register_write(EZRADIOPRO_GPIO1_CONFIGURATION, 0x12);	// RX data (output)
   07FC 74 12         [12] 2372 	mov	a,#0x12
   07FE C0 E0         [24] 2373 	push	acc
   0800 75 82 0C      [24] 2374 	mov	dpl,#0x0C
   0803 12r0Br48      [24] 2375 	lcall	_register_write
   0806 15 81         [12] 2376 	dec	sp
                           2377 ;	radio/radio.c:738: radio_set_diversity(true);
   0808 D2*08         [12] 2378 	setb	_radio_set_diversity_PARM_1
   080A 12r0Fr62      [24] 2379 	lcall	_radio_set_diversity
                           2380 ;	radio/radio.c:750: register_write(EZRADIOPRO_CRYSTAL_OSCILLATOR_LOAD_CAPACITANCE, EZRADIOPRO_OSC_CAP_VALUE);
   080D 74 B6         [12] 2381 	mov	a,#0xB6
   080F C0 E0         [24] 2382 	push	acc
   0811 75 82 09      [24] 2383 	mov	dpl,#0x09
   0814 12r0Br48      [24] 2384 	lcall	_register_write
   0817 15 81         [12] 2385 	dec	sp
   0819 D0 07         [24] 2386 	pop	ar7
                           2387 ;	radio/radio.c:753: if (air_rate > 100) {
   081B EF            [12] 2388 	mov	a,r7
   081C 24 9B         [12] 2389 	add	a,#0xff - 0x64
   081E 50 10         [24] 2390 	jnc	00102$
                           2391 ;	radio/radio.c:754: register_write(EZRADIOPRO_CHARGEPUMP_CURRENT_TRIMMING_OVERRIDE, 0xC0);
   0820 C0 07         [24] 2392 	push	ar7
   0822 74 C0         [12] 2393 	mov	a,#0xC0
   0824 C0 E0         [24] 2394 	push	acc
   0826 75 82 58      [24] 2395 	mov	dpl,#0x58
   0829 12r0Br48      [24] 2396 	lcall	_register_write
   082C 15 81         [12] 2397 	dec	sp
   082E D0 07         [24] 2398 	pop	ar7
   0830                    2399 00102$:
                           2400 ;	radio/radio.c:758: set_frequency_registers(settings.frequency);
   0830 78r05         [12] 2401 	mov	r0,#_settings
   0832 E2            [24] 2402 	movx	a,@r0
   0833 FB            [12] 2403 	mov	r3,a
   0834 08            [12] 2404 	inc	r0
   0835 E2            [24] 2405 	movx	a,@r0
   0836 FC            [12] 2406 	mov	r4,a
   0837 08            [12] 2407 	inc	r0
   0838 E2            [24] 2408 	movx	a,@r0
   0839 FD            [12] 2409 	mov	r5,a
   083A 08            [12] 2410 	inc	r0
   083B E2            [24] 2411 	movx	a,@r0
   083C 8B 82         [24] 2412 	mov	dpl,r3
   083E 8C 83         [24] 2413 	mov	dph,r4
   0840 8D F0         [24] 2414 	mov	b,r5
   0842 C0 07         [24] 2415 	push	ar7
   0844 12r0CrAC      [24] 2416 	lcall	_set_frequency_registers
                           2417 ;	radio/radio.c:759: register_write(EZRADIOPRO_FREQUENCY_HOPPING_STEP_SIZE, settings.channel_spacing);
   0847 78r09         [12] 2418 	mov	r0,#(_settings + 0x0004)
   0849 E2            [24] 2419 	movx	a,@r0
   084A FB            [12] 2420 	mov	r3,a
   084B 08            [12] 2421 	inc	r0
   084C E2            [24] 2422 	movx	a,@r0
   084D 08            [12] 2423 	inc	r0
   084E E2            [24] 2424 	movx	a,@r0
   084F 08            [12] 2425 	inc	r0
   0850 E2            [24] 2426 	movx	a,@r0
   0851 C0 03         [24] 2427 	push	ar3
   0853 75 82 7A      [24] 2428 	mov	dpl,#0x7A
   0856 12r0Br48      [24] 2429 	lcall	_register_write
   0859 15 81         [12] 2430 	dec	sp
   085B D0 07         [24] 2431 	pop	ar7
                           2432 ;	radio/radio.c:761: if (feature_golay) {
   085D 30*00 29      [24] 2433 	jnb	_feature_golay,00104$
                           2434 ;	radio/radio.c:765: register_write(EZRADIOPRO_DATA_ACCESS_CONTROL,
   0860 C0 07         [24] 2435 	push	ar7
   0862 74 88         [12] 2436 	mov	a,#0x88
   0864 C0 E0         [24] 2437 	push	acc
   0866 75 82 30      [24] 2438 	mov	dpl,#0x30
   0869 12r0Br48      [24] 2439 	lcall	_register_write
   086C 15 81         [12] 2440 	dec	sp
                           2441 ;	radio/radio.c:769: register_write(EZRADIOPRO_HEADER_CONTROL_2, EZRADIOPRO_HDLEN_0BYTE | EZRADIOPRO_SYNCLEN_2BYTE);
   086E 74 02         [12] 2442 	mov	a,#0x02
   0870 C0 E0         [24] 2443 	push	acc
   0872 75 82 33      [24] 2444 	mov	dpl,#0x33
   0875 12r0Br48      [24] 2445 	lcall	_register_write
   0878 15 81         [12] 2446 	dec	sp
                           2447 ;	radio/radio.c:772: register_write(EZRADIOPRO_HEADER_CONTROL_1, 0x00);
   087A E4            [12] 2448 	clr	a
   087B C0 E0         [24] 2449 	push	acc
   087D 75 82 32      [24] 2450 	mov	dpl,#0x32
   0880 12r0Br48      [24] 2451 	lcall	_register_write
   0883 15 81         [12] 2452 	dec	sp
   0885 D0 07         [24] 2453 	pop	ar7
   0887 80 40         [24] 2454 	sjmp	00105$
   0889                    2455 00104$:
                           2456 ;	radio/radio.c:774: register_write(EZRADIOPRO_DATA_ACCESS_CONTROL,
   0889 C0 07         [24] 2457 	push	ar7
   088B 74 8D         [12] 2458 	mov	a,#0x8D
   088D C0 E0         [24] 2459 	push	acc
   088F 75 82 30      [24] 2460 	mov	dpl,#0x30
   0892 12r0Br48      [24] 2461 	lcall	_register_write
   0895 15 81         [12] 2462 	dec	sp
                           2463 ;	radio/radio.c:780: register_write(EZRADIOPRO_HEADER_CONTROL_2, EZRADIOPRO_HDLEN_2BYTE | EZRADIOPRO_SYNCLEN_2BYTE);
   0897 74 22         [12] 2464 	mov	a,#0x22
   0899 C0 E0         [24] 2465 	push	acc
   089B 75 82 33      [24] 2466 	mov	dpl,#0x33
   089E 12r0Br48      [24] 2467 	lcall	_register_write
   08A1 15 81         [12] 2468 	dec	sp
                           2469 ;	radio/radio.c:782: register_write(EZRADIOPRO_HEADER_CONTROL_1, 0x0C);
   08A3 74 0C         [12] 2470 	mov	a,#0x0C
   08A5 C0 E0         [24] 2471 	push	acc
   08A7 75 82 32      [24] 2472 	mov	dpl,#0x32
   08AA 12r0Br48      [24] 2473 	lcall	_register_write
   08AD 15 81         [12] 2474 	dec	sp
                           2475 ;	radio/radio.c:783: register_write(EZRADIOPRO_HEADER_ENABLE_3, 0xFF);
   08AF 74 FF         [12] 2476 	mov	a,#0xFF
   08B1 C0 E0         [24] 2477 	push	acc
   08B3 75 82 43      [24] 2478 	mov	dpl,#0x43
   08B6 12r0Br48      [24] 2479 	lcall	_register_write
   08B9 15 81         [12] 2480 	dec	sp
                           2481 ;	radio/radio.c:784: register_write(EZRADIOPRO_HEADER_ENABLE_2, 0xFF);
   08BB 74 FF         [12] 2482 	mov	a,#0xFF
   08BD C0 E0         [24] 2483 	push	acc
   08BF 75 82 44      [24] 2484 	mov	dpl,#0x44
   08C2 12r0Br48      [24] 2485 	lcall	_register_write
   08C5 15 81         [12] 2486 	dec	sp
   08C7 D0 07         [24] 2487 	pop	ar7
   08C9                    2488 00105$:
                           2489 ;	radio/radio.c:789: register_write(EZRADIOPRO_TX_FIFO_CONTROL_1, TX_FIFO_THRESHOLD_HIGH);
   08C9 C0 07         [24] 2490 	push	ar7
   08CB 74 3C         [12] 2491 	mov	a,#0x3C
   08CD C0 E0         [24] 2492 	push	acc
   08CF 75 82 7C      [24] 2493 	mov	dpl,#0x7C
   08D2 12r0Br48      [24] 2494 	lcall	_register_write
   08D5 15 81         [12] 2495 	dec	sp
                           2496 ;	radio/radio.c:790: register_write(EZRADIOPRO_TX_FIFO_CONTROL_2, TX_FIFO_THRESHOLD_LOW);
   08D7 74 20         [12] 2497 	mov	a,#0x20
   08D9 C0 E0         [24] 2498 	push	acc
   08DB 75 82 7D      [24] 2499 	mov	dpl,#0x7D
   08DE 12r0Br48      [24] 2500 	lcall	_register_write
   08E1 15 81         [12] 2501 	dec	sp
                           2502 ;	radio/radio.c:791: register_write(EZRADIOPRO_RX_FIFO_CONTROL, RX_FIFO_THRESHOLD_HIGH);
   08E3 74 32         [12] 2503 	mov	a,#0x32
   08E5 C0 E0         [24] 2504 	push	acc
   08E7 75 82 7E      [24] 2505 	mov	dpl,#0x7E
   08EA 12r0Br48      [24] 2506 	lcall	_register_write
   08ED 15 81         [12] 2507 	dec	sp
                           2508 ;	radio/radio.c:793: settings.preamble_length = 16;
   08EF 78r10         [12] 2509 	mov	r0,#(_settings + 0x000b)
   08F1 74 10         [12] 2510 	mov	a,#0x10
   08F3 F2            [24] 2511 	movx	@r0,a
                           2512 ;	radio/radio.c:795: register_write(EZRADIOPRO_PREAMBLE_LENGTH, settings.preamble_length); // nibbles 
   08F4 78r10         [12] 2513 	mov	r0,#(_settings + 0x000b)
   08F6 E2            [24] 2514 	movx	a,@r0
   08F7 FE            [12] 2515 	mov	r6,a
   08F8 C0 06         [24] 2516 	push	ar6
   08FA 75 82 34      [24] 2517 	mov	dpl,#0x34
   08FD 12r0Br48      [24] 2518 	lcall	_register_write
   0900 15 81         [12] 2519 	dec	sp
                           2520 ;	radio/radio.c:796: register_write(EZRADIOPRO_PREAMBLE_DETECTION_CONTROL, 5<<3); // 5 nibbles
   0902 74 28         [12] 2521 	mov	a,#0x28
   0904 C0 E0         [24] 2522 	push	acc
   0906 75 82 35      [24] 2523 	mov	dpl,#0x35
   0909 12r0Br48      [24] 2524 	lcall	_register_write
   090C 15 81         [12] 2525 	dec	sp
                           2526 ;	radio/radio.c:799: radio_set_transmit_power(0);
   090E 75 82 00      [24] 2527 	mov	dpl,#0x00
   0911 12r0ArAB      [24] 2528 	lcall	_radio_set_transmit_power
   0914 D0 07         [24] 2529 	pop	ar7
                           2530 ;	radio/radio.c:802: for (i = 0; i < NUM_DATA_RATES - 1; i++) {
   0916 7E 00         [12] 2531 	mov	r6,#0x00
   0918                    2532 00131$:
                           2533 ;	radio/radio.c:803: if (air_data_rates[i] >= air_rate) break;
   0918 EE            [12] 2534 	mov	a,r6
   0919 90r00r34      [24] 2535 	mov	dptr,#_air_data_rates
   091C 93            [24] 2536 	movc	a,@a+dptr
   091D FD            [12] 2537 	mov	r5,a
   091E C3            [12] 2538 	clr	c
   091F 9F            [12] 2539 	subb	a,r7
   0920 50 06         [24] 2540 	jnc	00108$
                           2541 ;	radio/radio.c:802: for (i = 0; i < NUM_DATA_RATES - 1; i++) {
   0922 0E            [12] 2542 	inc	r6
   0923 BE 0C 00      [24] 2543 	cjne	r6,#0x0C,00205$
   0926                    2544 00205$:
   0926 40 F0         [24] 2545 	jc	00131$
   0928                    2546 00108$:
                           2547 ;	radio/radio.c:805: rate_selection = i;
                           2548 ;	radio/radio.c:807: settings.air_data_rate = air_data_rates[rate_selection];
   0928 EE            [12] 2549 	mov	a,r6
   0929 FF            [12] 2550 	mov	r7,a
   092A 90r00r34      [24] 2551 	mov	dptr,#_air_data_rates
   092D 93            [24] 2552 	movc	a,@a+dptr
   092E FE            [12] 2553 	mov	r6,a
   092F 78r0D         [12] 2554 	mov	r0,#(_settings + 0x0008)
   0931 F2            [24] 2555 	movx	@r0,a
                           2556 ;	radio/radio.c:809: if (settings.air_data_rate >= 32) {
   0932 BE 20 00      [24] 2557 	cjne	r6,#0x20,00207$
   0935                    2558 00207$:
   0935 40 04         [24] 2559 	jc	00110$
                           2560 ;	radio/radio.c:810: control = 0x0D;
   0937 7E 0D         [12] 2561 	mov	r6,#0x0D
   0939 80 02         [24] 2562 	sjmp	00111$
   093B                    2563 00110$:
                           2564 ;	radio/radio.c:812: control = 0x2D;
   093B 7E 2D         [12] 2565 	mov	r6,#0x2D
   093D                    2566 00111$:
                           2567 ;	radio/radio.c:814: if (param_get(PARAM_MANCHESTER) && settings.air_data_rate <= 128) {
   093D 75 82 0D      [24] 2568 	mov	dpl,#0x0D
   0940 C0 07         [24] 2569 	push	ar7
   0942 C0 06         [24] 2570 	push	ar6
   0944 12r00r00      [24] 2571 	lcall	_param_get
   0947 AA 82         [24] 2572 	mov	r2,dpl
   0949 AB 83         [24] 2573 	mov	r3,dph
   094B AC F0         [24] 2574 	mov	r4,b
   094D FD            [12] 2575 	mov	r5,a
   094E D0 06         [24] 2576 	pop	ar6
   0950 D0 07         [24] 2577 	pop	ar7
   0952 EA            [12] 2578 	mov	a,r2
   0953 4B            [12] 2579 	orl	a,r3
   0954 4C            [12] 2580 	orl	a,r4
   0955 4D            [12] 2581 	orl	a,r5
   0956 60 0B         [24] 2582 	jz	00113$
   0958 78r0D         [12] 2583 	mov	r0,#(_settings + 0x0008)
   095A E2            [24] 2584 	movx	a,@r0
   095B FD            [12] 2585 	mov  r5,a
   095C 24 7F         [12] 2586 	add	a,#0xff - 0x80
   095E 40 03         [24] 2587 	jc	00113$
                           2588 ;	radio/radio.c:816: control |= EZRADIOPRO_ENMANCH;
   0960 43 06 02      [24] 2589 	orl	ar6,#0x02
   0963                    2590 00113$:
                           2591 ;	radio/radio.c:818: register_write(EZRADIOPRO_MODULATION_MODE_CONTROL_1, control);
   0963 C0 07         [24] 2592 	push	ar7
   0965 C0 06         [24] 2593 	push	ar6
   0967 75 82 70      [24] 2594 	mov	dpl,#0x70
   096A 12r0Br48      [24] 2595 	lcall	_register_write
   096D 15 81         [12] 2596 	dec	sp
                           2597 ;	radio/radio.c:820: register_write(EZRADIOPRO_MODULATION_MODE_CONTROL_2, 0x23);
   096F 74 23         [12] 2598 	mov	a,#0x23
   0971 C0 E0         [24] 2599 	push	acc
   0973 75 82 71      [24] 2600 	mov	dpl,#0x71
   0976 12r0Br48      [24] 2601 	lcall	_register_write
   0979 15 81         [12] 2602 	dec	sp
                           2603 ;	radio/radio.c:824: register_write(EZRADIOPRO_AFC_LOOP_GEARSHIFT_OVERRIDE, 0x44);
   097B 74 44         [12] 2604 	mov	a,#0x44
   097D C0 E0         [24] 2605 	push	acc
   097F 75 82 1D      [24] 2606 	mov	dpl,#0x1D
   0982 12r0Br48      [24] 2607 	lcall	_register_write
   0985 15 81         [12] 2608 	dec	sp
   0987 D0 07         [24] 2609 	pop	ar7
                           2610 ;	radio/radio.c:828: if (settings.air_data_rate < 200) {
   0989 78r0D         [12] 2611 	mov	r0,#(_settings + 0x0008)
   098B E2            [24] 2612 	movx	a,@r0
   098C FE            [12] 2613 	mov	r6,a
   098D BE C8 00      [24] 2614 	cjne	r6,#0xC8,00211$
   0990                    2615 00211$:
   0990 50 12         [24] 2616 	jnc	00116$
                           2617 ;	radio/radio.c:829: register_write(EZRADIOPRO_AFC_TIMING_CONTROL, 0x0A);
   0992 C0 07         [24] 2618 	push	ar7
   0994 74 0A         [12] 2619 	mov	a,#0x0A
   0996 C0 E0         [24] 2620 	push	acc
   0998 75 82 1E      [24] 2621 	mov	dpl,#0x1E
   099B 12r0Br48      [24] 2622 	lcall	_register_write
   099E 15 81         [12] 2623 	dec	sp
   09A0 D0 07         [24] 2624 	pop	ar7
   09A2 80 10         [24] 2625 	sjmp	00117$
   09A4                    2626 00116$:
                           2627 ;	radio/radio.c:831: register_write(EZRADIOPRO_AFC_TIMING_CONTROL, 0x02);
   09A4 C0 07         [24] 2628 	push	ar7
   09A6 74 02         [12] 2629 	mov	a,#0x02
   09A8 C0 E0         [24] 2630 	push	acc
   09AA 75 82 1E      [24] 2631 	mov	dpl,#0x1E
   09AD 12r0Br48      [24] 2632 	lcall	_register_write
   09B0 15 81         [12] 2633 	dec	sp
   09B2 D0 07         [24] 2634 	pop	ar7
   09B4                    2635 00117$:
                           2636 ;	radio/radio.c:835: if (g_board_frequency == FREQ_433) {
   09B4 78r00         [12] 2637 	mov	r0,#_g_board_frequency
   09B6 E2            [24] 2638 	movx	a,@r0
   09B7 B4 43 3A      [24] 2639 	cjne	a,#0x43,00129$
                           2640 ;	radio/radio.c:836: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
   09BA 7E 00         [12] 2641 	mov	r6,#0x00
   09BC                    2642 00133$:
                           2643 ;	radio/radio.c:838: reg_table_433[i][rate_selection]);
   09BC EE            [12] 2644 	mov	a,r6
   09BD 75 F0 0D      [24] 2645 	mov	b,#0x0D
   09C0 A4            [48] 2646 	mul	ab
   09C1 24r41         [12] 2647 	add	a,#_reg_table_433
   09C3 FC            [12] 2648 	mov	r4,a
   09C4 74s00         [12] 2649 	mov	a,#(_reg_table_433 >> 8)
   09C6 35 F0         [12] 2650 	addc	a,b
   09C8 FD            [12] 2651 	mov	r5,a
   09C9 EF            [12] 2652 	mov	a,r7
   09CA 2C            [12] 2653 	add	a,r4
   09CB F5 82         [12] 2654 	mov	dpl,a
   09CD E4            [12] 2655 	clr	a
   09CE 3D            [12] 2656 	addc	a,r5
   09CF F5 83         [12] 2657 	mov	dph,a
   09D1 E4            [12] 2658 	clr	a
   09D2 93            [24] 2659 	movc	a,@a+dptr
   09D3 FD            [12] 2660 	mov	r5,a
                           2661 ;	radio/radio.c:837: register_write(reg_index[i],
   09D4 EE            [12] 2662 	mov	a,r6
   09D5 90r00r28      [24] 2663 	mov	dptr,#_reg_index
   09D8 93            [24] 2664 	movc	a,@a+dptr
   09D9 FC            [12] 2665 	mov	r4,a
   09DA C0 07         [24] 2666 	push	ar7
   09DC C0 06         [24] 2667 	push	ar6
   09DE C0 05         [24] 2668 	push	ar5
   09E0 8C 82         [24] 2669 	mov	dpl,r4
   09E2 12r0Br48      [24] 2670 	lcall	_register_write
   09E5 15 81         [12] 2671 	dec	sp
   09E7 D0 06         [24] 2672 	pop	ar6
   09E9 D0 07         [24] 2673 	pop	ar7
                           2674 ;	radio/radio.c:836: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
   09EB 0E            [12] 2675 	inc	r6
   09EC BE 0C 00      [24] 2676 	cjne	r6,#0x0C,00215$
   09EF                    2677 00215$:
   09EF 40 CB         [24] 2678 	jc	00133$
   09F1 02r0ArA9      [24] 2679 	ljmp	00130$
   09F4                    2680 00129$:
                           2681 ;	radio/radio.c:840: } else if (g_board_frequency == FREQ_470) {
   09F4 78r00         [12] 2682 	mov	r0,#_g_board_frequency
   09F6 E2            [24] 2683 	movx	a,@r0
   09F7 B4 47 39      [24] 2684 	cjne	a,#0x47,00126$
                           2685 ;	radio/radio.c:841: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
   09FA 7E 00         [12] 2686 	mov	r6,#0x00
   09FC                    2687 00135$:
                           2688 ;	radio/radio.c:843: reg_table_470[i][rate_selection]);
   09FC EE            [12] 2689 	mov	a,r6
   09FD 75 F0 0D      [24] 2690 	mov	b,#0x0D
   0A00 A4            [48] 2691 	mul	ab
   0A01 24rDD         [12] 2692 	add	a,#_reg_table_470
   0A03 FC            [12] 2693 	mov	r4,a
   0A04 74s00         [12] 2694 	mov	a,#(_reg_table_470 >> 8)
   0A06 35 F0         [12] 2695 	addc	a,b
   0A08 FD            [12] 2696 	mov	r5,a
   0A09 EF            [12] 2697 	mov	a,r7
   0A0A 2C            [12] 2698 	add	a,r4
   0A0B F5 82         [12] 2699 	mov	dpl,a
   0A0D E4            [12] 2700 	clr	a
   0A0E 3D            [12] 2701 	addc	a,r5
   0A0F F5 83         [12] 2702 	mov	dph,a
   0A11 E4            [12] 2703 	clr	a
   0A12 93            [24] 2704 	movc	a,@a+dptr
   0A13 FD            [12] 2705 	mov	r5,a
                           2706 ;	radio/radio.c:842: register_write(reg_index[i],
   0A14 EE            [12] 2707 	mov	a,r6
   0A15 90r00r28      [24] 2708 	mov	dptr,#_reg_index
   0A18 93            [24] 2709 	movc	a,@a+dptr
   0A19 FC            [12] 2710 	mov	r4,a
   0A1A C0 07         [24] 2711 	push	ar7
   0A1C C0 06         [24] 2712 	push	ar6
   0A1E C0 05         [24] 2713 	push	ar5
   0A20 8C 82         [24] 2714 	mov	dpl,r4
   0A22 12r0Br48      [24] 2715 	lcall	_register_write
   0A25 15 81         [12] 2716 	dec	sp
   0A27 D0 06         [24] 2717 	pop	ar6
   0A29 D0 07         [24] 2718 	pop	ar7
                           2719 ;	radio/radio.c:841: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
   0A2B 0E            [12] 2720 	inc	r6
   0A2C BE 0C 00      [24] 2721 	cjne	r6,#0x0C,00219$
   0A2F                    2722 00219$:
   0A2F 40 CB         [24] 2723 	jc	00135$
   0A31 80 76         [24] 2724 	sjmp	00130$
   0A33                    2725 00126$:
                           2726 ;	radio/radio.c:845: } else if (g_board_frequency == FREQ_868) {
   0A33 78r00         [12] 2727 	mov	r0,#_g_board_frequency
   0A35 E2            [24] 2728 	movx	a,@r0
   0A36 B4 86 39      [24] 2729 	cjne	a,#0x86,00160$
                           2730 ;	radio/radio.c:846: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
   0A39 7E 00         [12] 2731 	mov	r6,#0x00
   0A3B                    2732 00137$:
                           2733 ;	radio/radio.c:848: reg_table_868[i][rate_selection]);
   0A3B EE            [12] 2734 	mov	a,r6
   0A3C 75 F0 0D      [24] 2735 	mov	b,#0x0D
   0A3F A4            [48] 2736 	mul	ab
   0A40 24r79         [12] 2737 	add	a,#_reg_table_868
   0A42 FC            [12] 2738 	mov	r4,a
   0A43 74s01         [12] 2739 	mov	a,#(_reg_table_868 >> 8)
   0A45 35 F0         [12] 2740 	addc	a,b
   0A47 FD            [12] 2741 	mov	r5,a
   0A48 EF            [12] 2742 	mov	a,r7
   0A49 2C            [12] 2743 	add	a,r4
   0A4A F5 82         [12] 2744 	mov	dpl,a
   0A4C E4            [12] 2745 	clr	a
   0A4D 3D            [12] 2746 	addc	a,r5
   0A4E F5 83         [12] 2747 	mov	dph,a
   0A50 E4            [12] 2748 	clr	a
   0A51 93            [24] 2749 	movc	a,@a+dptr
   0A52 FD            [12] 2750 	mov	r5,a
                           2751 ;	radio/radio.c:847: register_write(reg_index[i],
   0A53 EE            [12] 2752 	mov	a,r6
   0A54 90r00r28      [24] 2753 	mov	dptr,#_reg_index
   0A57 93            [24] 2754 	movc	a,@a+dptr
   0A58 FC            [12] 2755 	mov	r4,a
   0A59 C0 07         [24] 2756 	push	ar7
   0A5B C0 06         [24] 2757 	push	ar6
   0A5D C0 05         [24] 2758 	push	ar5
   0A5F 8C 82         [24] 2759 	mov	dpl,r4
   0A61 12r0Br48      [24] 2760 	lcall	_register_write
   0A64 15 81         [12] 2761 	dec	sp
   0A66 D0 06         [24] 2762 	pop	ar6
   0A68 D0 07         [24] 2763 	pop	ar7
                           2764 ;	radio/radio.c:846: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
   0A6A 0E            [12] 2765 	inc	r6
   0A6B BE 0C 00      [24] 2766 	cjne	r6,#0x0C,00223$
   0A6E                    2767 00223$:
   0A6E 40 CB         [24] 2768 	jc	00137$
                           2769 ;	radio/radio.c:851: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
   0A70 80 37         [24] 2770 	sjmp	00130$
   0A72                    2771 00160$:
   0A72 7E 00         [12] 2772 	mov	r6,#0x00
   0A74                    2773 00139$:
                           2774 ;	radio/radio.c:853: reg_table_915[i][rate_selection]);
   0A74 EE            [12] 2775 	mov	a,r6
   0A75 75 F0 0D      [24] 2776 	mov	b,#0x0D
   0A78 A4            [48] 2777 	mul	ab
   0A79 24r15         [12] 2778 	add	a,#_reg_table_915
   0A7B FC            [12] 2779 	mov	r4,a
   0A7C 74s02         [12] 2780 	mov	a,#(_reg_table_915 >> 8)
   0A7E 35 F0         [12] 2781 	addc	a,b
   0A80 FD            [12] 2782 	mov	r5,a
   0A81 EF            [12] 2783 	mov	a,r7
   0A82 2C            [12] 2784 	add	a,r4
   0A83 F5 82         [12] 2785 	mov	dpl,a
   0A85 E4            [12] 2786 	clr	a
   0A86 3D            [12] 2787 	addc	a,r5
   0A87 F5 83         [12] 2788 	mov	dph,a
   0A89 E4            [12] 2789 	clr	a
   0A8A 93            [24] 2790 	movc	a,@a+dptr
   0A8B FD            [12] 2791 	mov	r5,a
                           2792 ;	radio/radio.c:852: register_write(reg_index[i],
   0A8C EE            [12] 2793 	mov	a,r6
   0A8D 90r00r28      [24] 2794 	mov	dptr,#_reg_index
   0A90 93            [24] 2795 	movc	a,@a+dptr
   0A91 FC            [12] 2796 	mov	r4,a
   0A92 C0 07         [24] 2797 	push	ar7
   0A94 C0 06         [24] 2798 	push	ar6
   0A96 C0 05         [24] 2799 	push	ar5
   0A98 8C 82         [24] 2800 	mov	dpl,r4
   0A9A 12r0Br48      [24] 2801 	lcall	_register_write
   0A9D 15 81         [12] 2802 	dec	sp
   0A9F D0 06         [24] 2803 	pop	ar6
   0AA1 D0 07         [24] 2804 	pop	ar7
                           2805 ;	radio/radio.c:851: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
   0AA3 0E            [12] 2806 	inc	r6
   0AA4 BE 0C 00      [24] 2807 	cjne	r6,#0x0C,00225$
   0AA7                    2808 00225$:
   0AA7 40 CB         [24] 2809 	jc	00139$
   0AA9                    2810 00130$:
                           2811 ;	radio/radio.c:857: return true;
   0AA9 D3            [12] 2812 	setb	c
   0AAA 22            [24] 2813 	ret
                           2814 ;------------------------------------------------------------
                           2815 ;Allocation info for local variables in function 'radio_set_transmit_power'
                           2816 ;------------------------------------------------------------
                           2817 ;power                     Allocated with name '_radio_set_transmit_power_power_1_232'
                           2818 ;i                         Allocated with name '_radio_set_transmit_power_i_1_233'
                           2819 ;------------------------------------------------------------
                           2820 ;	radio/radio.c:884: radio_set_transmit_power(uint8_t power)
                           2821 ;	-----------------------------------------
                           2822 ;	 function radio_set_transmit_power
                           2823 ;	-----------------------------------------
   0AAB                    2824 _radio_set_transmit_power:
   0AAB E5 82         [12] 2825 	mov	a,dpl
   0AAD 90r01r08      [24] 2826 	mov	dptr,#_radio_set_transmit_power_power_1_232
   0AB0 F0            [24] 2827 	movx	@dptr,a
                           2828 ;	radio/radio.c:889: register_write(EZRADIOPRO_TX_POWER, 6); // Set output power of Si1002 to 6 = +10dBm as a nominal level
   0AB1 74 06         [12] 2829 	mov	a,#0x06
   0AB3 C0 E0         [24] 2830 	push	acc
   0AB5 75 82 6D      [24] 2831 	mov	dpl,#0x6D
   0AB8 12r0Br48      [24] 2832 	lcall	_register_write
   0ABB 15 81         [12] 2833 	dec	sp
                           2834 ;	radio/radio.c:890: i = calibration_get(power);
   0ABD 90r01r08      [24] 2835 	mov	dptr,#_radio_set_transmit_power_power_1_232
   0AC0 E0            [24] 2836 	movx	a,@dptr
   0AC1 FF            [12] 2837 	mov	r7,a
   0AC2 F5 82         [12] 2838 	mov	dpl,a
   0AC4 C0 07         [24] 2839 	push	ar7
   0AC6 12r00r00      [24] 2840 	lcall	_calibration_get
   0AC9 AE 82         [24] 2841 	mov	r6,dpl
   0ACB D0 07         [24] 2842 	pop	ar7
                           2843 ;	radio/radio.c:891: if (i != 0xFF)
   0ACD BE FF 02      [24] 2844 	cjne	r6,#0xFF,00109$
   0AD0 80 07         [24] 2845 	sjmp	00102$
   0AD2                    2846 00109$:
                           2847 ;	radio/radio.c:893: PCA0CPH0 = i;     // Set PWM for PA to correct duty cycle
   0AD2 8E FC         [24] 2848 	mov	_PCA0CPH0,r6
                           2849 ;	radio/radio.c:894: settings.transmit_power = power;
   0AD4 78r0F         [12] 2850 	mov	r0,#(_settings + 0x000a)
   0AD6 EF            [12] 2851 	mov	a,r7
   0AD7 F2            [24] 2852 	movx	@r0,a
   0AD8 22            [24] 2853 	ret
   0AD9                    2854 00102$:
                           2855 ;	radio/radio.c:898: i = power / POWER_LEVEL_STEP;
   0AD9 EF            [12] 2856 	mov	a,r7
   0ADA C3            [12] 2857 	clr	c
   0ADB 13            [12] 2858 	rrc	a
                           2859 ;	radio/radio.c:899: PCA0CPH0 = power_levels[i];     // Set PWM for PA to correct duty cycle
   0ADC FF            [12] 2860 	mov	r7,a
   0ADD 90r02rB1      [24] 2861 	mov	dptr,#_power_levels
   0AE0 93            [24] 2862 	movc	a,@a+dptr
   0AE1 F5 FC         [12] 2863 	mov	_PCA0CPH0,a
                           2864 ;	radio/radio.c:900: settings.transmit_power = i * POWER_LEVEL_STEP;
   0AE3 EF            [12] 2865 	mov	a,r7
   0AE4 2F            [12] 2866 	add	a,r7
   0AE5 FF            [12] 2867 	mov	r7,a
   0AE6 78r0F         [12] 2868 	mov	r0,#(_settings + 0x000a)
   0AE8 EF            [12] 2869 	mov	a,r7
   0AE9 F2            [24] 2870 	movx	@r0,a
   0AEA 22            [24] 2871 	ret
                           2872 ;------------------------------------------------------------
                           2873 ;Allocation info for local variables in function 'radio_get_transmit_power'
                           2874 ;------------------------------------------------------------
                           2875 ;	radio/radio.c:917: radio_get_transmit_power(void)
                           2876 ;	-----------------------------------------
                           2877 ;	 function radio_get_transmit_power
                           2878 ;	-----------------------------------------
   0AEB                    2879 _radio_get_transmit_power:
                           2880 ;	radio/radio.c:919: return settings.transmit_power;
   0AEB 78r0F         [12] 2881 	mov	r0,#(_settings + 0x000a)
   0AED E2            [24] 2882 	movx	a,@r0
   0AEE F5 82         [12] 2883 	mov	dpl,a
   0AF0 22            [24] 2884 	ret
                           2885 ;------------------------------------------------------------
                           2886 ;Allocation info for local variables in function 'radio_set_network_id'
                           2887 ;------------------------------------------------------------
                           2888 ;id                        Allocated with name '_radio_set_network_id_id_1_238'
                           2889 ;------------------------------------------------------------
                           2890 ;	radio/radio.c:925: radio_set_network_id(uint16_t id)
                           2891 ;	-----------------------------------------
                           2892 ;	 function radio_set_network_id
                           2893 ;	-----------------------------------------
   0AF1                    2894 _radio_set_network_id:
   0AF1 AF 83         [24] 2895 	mov	r7,dph
   0AF3 E5 82         [12] 2896 	mov	a,dpl
   0AF5 90r01r09      [24] 2897 	mov	dptr,#_radio_set_network_id_id_1_238
   0AF8 F0            [24] 2898 	movx	@dptr,a
   0AF9 EF            [12] 2899 	mov	a,r7
   0AFA A3            [24] 2900 	inc	dptr
   0AFB F0            [24] 2901 	movx	@dptr,a
                           2902 ;	radio/radio.c:927: netid[0] = id&0xFF;
   0AFC 90r01r09      [24] 2903 	mov	dptr,#_radio_set_network_id_id_1_238
   0AFF E0            [24] 2904 	movx	a,@dptr
   0B00 FE            [12] 2905 	mov	r6,a
   0B01 A3            [24] 2906 	inc	dptr
   0B02 E0            [24] 2907 	movx	a,@dptr
   0B03 FF            [12] 2908 	mov	r7,a
   0B04 8E 04         [24] 2909 	mov	ar4,r6
   0B06 78r03         [12] 2910 	mov	r0,#_netid
   0B08 EC            [12] 2911 	mov	a,r4
   0B09 F2            [24] 2912 	movx	@r0,a
                           2913 ;	radio/radio.c:928: netid[1] = id>>8;
   0B0A 8F 05         [24] 2914 	mov	ar5,r7
   0B0C 78r04         [12] 2915 	mov	r0,#(_netid + 0x0001)
   0B0E ED            [12] 2916 	mov	a,r5
   0B0F F2            [24] 2917 	movx	@r0,a
                           2918 ;	radio/radio.c:929: if (!feature_golay) {
   0B10 20*00 34      [24] 2919 	jb	_feature_golay,00103$
                           2920 ;	radio/radio.c:932: register_write(EZRADIOPRO_TRANSMIT_HEADER_3, id >> 8);
   0B13 C0 07         [24] 2921 	push	ar7
   0B15 C0 06         [24] 2922 	push	ar6
   0B17 C0 05         [24] 2923 	push	ar5
   0B19 C0 05         [24] 2924 	push	ar5
   0B1B 75 82 3A      [24] 2925 	mov	dpl,#0x3A
   0B1E 12r0Br48      [24] 2926 	lcall	_register_write
   0B21 15 81         [12] 2927 	dec	sp
   0B23 D0 05         [24] 2928 	pop	ar5
   0B25 D0 06         [24] 2929 	pop	ar6
   0B27 D0 07         [24] 2930 	pop	ar7
                           2931 ;	radio/radio.c:933: register_write(EZRADIOPRO_TRANSMIT_HEADER_2, id & 0xFF);
   0B29 C0 06         [24] 2932 	push	ar6
   0B2B C0 05         [24] 2933 	push	ar5
   0B2D C0 06         [24] 2934 	push	ar6
   0B2F 75 82 3B      [24] 2935 	mov	dpl,#0x3B
   0B32 12r0Br48      [24] 2936 	lcall	_register_write
   0B35 15 81         [12] 2937 	dec	sp
                           2938 ;	radio/radio.c:934: register_write(EZRADIOPRO_CHECK_HEADER_3, id >> 8);
   0B37 75 82 3F      [24] 2939 	mov	dpl,#0x3F
   0B3A 12r0Br48      [24] 2940 	lcall	_register_write
   0B3D 15 81         [12] 2941 	dec	sp
                           2942 ;	radio/radio.c:935: register_write(EZRADIOPRO_CHECK_HEADER_2, id & 0xFF);
   0B3F 75 82 40      [24] 2943 	mov	dpl,#0x40
   0B42 12r0Br48      [24] 2944 	lcall	_register_write
   0B45 15 81         [12] 2945 	dec	sp
   0B47                    2946 00103$:
   0B47 22            [24] 2947 	ret
                           2948 ;------------------------------------------------------------
                           2949 ;Allocation info for local variables in function 'register_write'
                           2950 ;------------------------------------------------------------
                           2951 ;value                     Allocated to stack - sp -2
                           2952 ;reg                       Allocated to registers r7 
                           2953 ;EX0_saved                 Allocated to registers b0 
                           2954 ;------------------------------------------------------------
                           2955 ;	radio/radio.c:946: register_write(uint8_t reg, uint8_t value) __reentrant
                           2956 ;	-----------------------------------------
                           2957 ;	 function register_write
                           2958 ;	-----------------------------------------
   0B48                    2959 _register_write:
   0B48 AF 82         [24] 2960 	mov	r7,dpl
                           2961 ;	radio/radio.c:948: EX0_SAVE_DISABLE;
   0B4A A2 A8         [12] 2962 	mov	c,_EX0
   0B4C 92*00         [24] 2963 	mov	b0,c
   0B4E C2 A8         [12] 2964 	clr	_EX0
                           2965 ;	radio/radio.c:950: NSS1 = 0;                           // drive NSS low
   0B50 C2 94         [12] 2966 	clr	_NSS1
                           2967 ;	radio/radio.c:951: SPIF1 = 0;                          // clear SPIF
   0B52 C2 B7         [12] 2968 	clr	_SPIF1
                           2969 ;	radio/radio.c:952: SPI1DAT = (reg | 0x80);             // write reg address
   0B54 74 80         [12] 2970 	mov	a,#0x80
   0B56 4F            [12] 2971 	orl	a,r7
   0B57 F5 86         [12] 2972 	mov	_SPI1DAT,a
                           2973 ;	radio/radio.c:953: while (!TXBMT1);                    // wait on TXBMT
   0B59                    2974 00101$:
   0B59 30 B1 FD      [24] 2975 	jnb	_TXBMT1,00101$
                           2976 ;	radio/radio.c:954: SPI1DAT = value;                    // write value
   0B5C A8 81         [24] 2977 	mov	r0,sp
   0B5E 18            [12] 2978 	dec	r0
   0B5F 18            [12] 2979 	dec	r0
   0B60 86 86         [24] 2980 	mov	_SPI1DAT,@r0
                           2981 ;	radio/radio.c:955: while (!TXBMT1);                    // wait on TXBMT
   0B62                    2982 00104$:
   0B62 30 B1 FD      [24] 2983 	jnb	_TXBMT1,00104$
                           2984 ;	radio/radio.c:956: while ((SPI1CFG & 0x80) == 0x80);   // wait on SPIBSY
   0B65                    2985 00107$:
   0B65 74 80         [12] 2986 	mov	a,#0x80
   0B67 55 84         [12] 2987 	anl	a,_SPI1CFG
   0B69 FF            [12] 2988 	mov	r7,a
   0B6A BF 80 02      [24] 2989 	cjne	r7,#0x80,00129$
   0B6D 80 F6         [24] 2990 	sjmp	00107$
   0B6F                    2991 00129$:
                           2992 ;	radio/radio.c:958: SPIF1 = 0;                          // leave SPIF cleared
   0B6F C2 B7         [12] 2993 	clr	_SPIF1
                           2994 ;	radio/radio.c:959: NSS1 = 1;                           // drive NSS high
   0B71 D2 94         [12] 2995 	setb	_NSS1
                           2996 ;	radio/radio.c:961: EX0_RESTORE;
   0B73 A2*00         [12] 2997 	mov	c,b0
   0B75 92 A8         [24] 2998 	mov	_EX0,c
   0B77 22            [24] 2999 	ret
                           3000 ;------------------------------------------------------------
                           3001 ;Allocation info for local variables in function 'register_read'
                           3002 ;------------------------------------------------------------
                           3003 ;reg                       Allocated to registers r7 
                           3004 ;value                     Allocated to registers r7 
                           3005 ;EX0_saved                 Allocated to registers b0 
                           3006 ;------------------------------------------------------------
                           3007 ;	radio/radio.c:971: register_read(uint8_t reg) __reentrant
                           3008 ;	-----------------------------------------
                           3009 ;	 function register_read
                           3010 ;	-----------------------------------------
   0B78                    3011 _register_read:
   0B78 AF 82         [24] 3012 	mov	r7,dpl
                           3013 ;	radio/radio.c:974: EX0_SAVE_DISABLE;
   0B7A A2 A8         [12] 3014 	mov	c,_EX0
   0B7C 92*00         [24] 3015 	mov	b0,c
   0B7E C2 A8         [12] 3016 	clr	_EX0
                           3017 ;	radio/radio.c:976: NSS1 = 0;				// dsrive NSS low
   0B80 C2 94         [12] 3018 	clr	_NSS1
                           3019 ;	radio/radio.c:977: SPIF1 = 0;				// clear SPIF
   0B82 C2 B7         [12] 3020 	clr	_SPIF1
                           3021 ;	radio/radio.c:978: SPI1DAT = (reg);			// write reg address
   0B84 8F 86         [24] 3022 	mov	_SPI1DAT,r7
                           3023 ;	radio/radio.c:979: while (!TXBMT1);			// wait on TXBMT
   0B86                    3024 00101$:
   0B86 30 B1 FD      [24] 3025 	jnb	_TXBMT1,00101$
                           3026 ;	radio/radio.c:980: SPI1DAT = 0x00;				// write anything
   0B89 75 86 00      [24] 3027 	mov	_SPI1DAT,#0x00
                           3028 ;	radio/radio.c:981: while (!TXBMT1);			// wait on TXBMT
   0B8C                    3029 00104$:
   0B8C 30 B1 FD      [24] 3030 	jnb	_TXBMT1,00104$
                           3031 ;	radio/radio.c:982: while ((SPI1CFG & 0x80) == 0x80);	// wait on SPIBSY
   0B8F                    3032 00107$:
   0B8F 74 80         [12] 3033 	mov	a,#0x80
   0B91 55 84         [12] 3034 	anl	a,_SPI1CFG
   0B93 FF            [12] 3035 	mov	r7,a
   0B94 BF 80 02      [24] 3036 	cjne	r7,#0x80,00129$
   0B97 80 F6         [24] 3037 	sjmp	00107$
   0B99                    3038 00129$:
                           3039 ;	radio/radio.c:983: value = SPI1DAT;			// read value
   0B99 AF 86         [24] 3040 	mov	r7,_SPI1DAT
                           3041 ;	radio/radio.c:984: SPIF1 = 0;				// leave SPIF cleared
   0B9B C2 B7         [12] 3042 	clr	_SPIF1
                           3043 ;	radio/radio.c:985: NSS1 = 1;				// drive NSS high
   0B9D D2 94         [12] 3044 	setb	_NSS1
                           3045 ;	radio/radio.c:987: EX0_RESTORE;
   0B9F A2*00         [12] 3046 	mov	c,b0
   0BA1 92 A8         [24] 3047 	mov	_EX0,c
                           3048 ;	radio/radio.c:989: return value;
   0BA3 8F 82         [24] 3049 	mov	dpl,r7
   0BA5 22            [24] 3050 	ret
                           3051 ;------------------------------------------------------------
                           3052 ;Allocation info for local variables in function 'read_receive_fifo'
                           3053 ;------------------------------------------------------------
                           3054 ;buf                       Allocated to stack - sp -3
                           3055 ;n                         Allocated to registers r7 
                           3056 ;------------------------------------------------------------
                           3057 ;	radio/radio.c:996: read_receive_fifo(register uint8_t n, __xdata uint8_t * buf) __reentrant
                           3058 ;	-----------------------------------------
                           3059 ;	 function read_receive_fifo
                           3060 ;	-----------------------------------------
   0BA6                    3061 _read_receive_fifo:
   0BA6 AF 82         [24] 3062 	mov	r7,dpl
                           3063 ;	radio/radio.c:998: NSS1 = 0;				// drive NSS low
   0BA8 C2 94         [12] 3064 	clr	_NSS1
                           3065 ;	radio/radio.c:999: SPIF1 = 0;				// clear SPIF
   0BAA C2 B7         [12] 3066 	clr	_SPIF1
                           3067 ;	radio/radio.c:1000: SPI1DAT = EZRADIOPRO_FIFO_ACCESS;
   0BAC 75 86 7F      [24] 3068 	mov	_SPI1DAT,#0x7F
                           3069 ;	radio/radio.c:1001: while (!SPIF1);				// wait on SPIF
   0BAF                    3070 00101$:
   0BAF 30 B7 FD      [24] 3071 	jnb	_SPIF1,00101$
                           3072 ;	radio/radio.c:1002: ACC = SPI1DAT;				// discard first byte
   0BB2 85 86 E0      [24] 3073 	mov	_ACC,_SPI1DAT
                           3074 ;	radio/radio.c:1004: while (n--) {
   0BB5 E5 81         [12] 3075 	mov	a,sp
   0BB7 24 FD         [12] 3076 	add	a,#0xfd
   0BB9 F8            [12] 3077 	mov	r0,a
   0BBA 86 05         [24] 3078 	mov	ar5,@r0
   0BBC 08            [12] 3079 	inc	r0
   0BBD 86 06         [24] 3080 	mov	ar6,@r0
   0BBF                    3081 00107$:
   0BBF 8F 04         [24] 3082 	mov	ar4,r7
   0BC1 1F            [12] 3083 	dec	r7
   0BC2 EC            [12] 3084 	mov	a,r4
   0BC3 60 16         [24] 3085 	jz	00109$
                           3086 ;	radio/radio.c:1005: SPIF1 = 0;			// clear SPIF
   0BC5 C2 B7         [12] 3087 	clr	_SPIF1
                           3088 ;	radio/radio.c:1006: SPI1DAT = 0x00;			// write anything
   0BC7 75 86 00      [24] 3089 	mov	_SPI1DAT,#0x00
                           3090 ;	radio/radio.c:1007: while (!SPIF1);			// wait on SPIF
   0BCA                    3091 00104$:
   0BCA 30 B7 FD      [24] 3092 	jnb	_SPIF1,00104$
                           3093 ;	radio/radio.c:1008: *buf++ = SPI1DAT;		// copy to buffer
   0BCD 8D 82         [24] 3094 	mov	dpl,r5
   0BCF 8E 83         [24] 3095 	mov	dph,r6
   0BD1 E5 86         [12] 3096 	mov	a,_SPI1DAT
   0BD3 F0            [24] 3097 	movx	@dptr,a
   0BD4 A3            [24] 3098 	inc	dptr
   0BD5 AD 82         [24] 3099 	mov	r5,dpl
   0BD7 AE 83         [24] 3100 	mov	r6,dph
   0BD9 80 E4         [24] 3101 	sjmp	00107$
   0BDB                    3102 00109$:
                           3103 ;	radio/radio.c:1011: SPIF1 = 0;				// leave SPIF cleared
   0BDB C2 B7         [12] 3104 	clr	_SPIF1
                           3105 ;	radio/radio.c:1012: NSS1 = 1;				// drive NSS high
   0BDD D2 94         [12] 3106 	setb	_NSS1
   0BDF 22            [24] 3107 	ret
                           3108 ;------------------------------------------------------------
                           3109 ;Allocation info for local variables in function 'clear_status_registers'
                           3110 ;------------------------------------------------------------
                           3111 ;	radio/radio.c:1018: clear_status_registers(void)
                           3112 ;	-----------------------------------------
                           3113 ;	 function clear_status_registers
                           3114 ;	-----------------------------------------
   0BE0                    3115 _clear_status_registers:
                           3116 ;	radio/radio.c:1020: register_read(EZRADIOPRO_INTERRUPT_STATUS_1);
   0BE0 75 82 03      [24] 3117 	mov	dpl,#0x03
   0BE3 12r0Br78      [24] 3118 	lcall	_register_read
                           3119 ;	radio/radio.c:1021: register_read(EZRADIOPRO_INTERRUPT_STATUS_2);
   0BE6 75 82 04      [24] 3120 	mov	dpl,#0x04
   0BE9 02r0Br78      [24] 3121 	ljmp	_register_read
                           3122 ;------------------------------------------------------------
                           3123 ;Allocation info for local variables in function 'scale_uint32'
                           3124 ;------------------------------------------------------------
                           3125 ;	radio/radio.c:1031: scale_uint32(__pdata uint32_t value, __pdata uint32_t scale)
                           3126 ;	-----------------------------------------
                           3127 ;	 function scale_uint32
                           3128 ;	-----------------------------------------
   0BEC                    3129 _scale_uint32:
   0BEC AF 82         [24] 3130 	mov	r7,dpl
   0BEE AE 83         [24] 3131 	mov	r6,dph
   0BF0 AD F0         [24] 3132 	mov	r5,b
   0BF2 FC            [12] 3133 	mov	r4,a
   0BF3 78r25         [12] 3134 	mov	r0,#_scale_uint32_value_1_250
   0BF5 EF            [12] 3135 	mov	a,r7
   0BF6 F2            [24] 3136 	movx	@r0,a
   0BF7 08            [12] 3137 	inc	r0
   0BF8 EE            [12] 3138 	mov	a,r6
   0BF9 F2            [24] 3139 	movx	@r0,a
   0BFA 08            [12] 3140 	inc	r0
   0BFB ED            [12] 3141 	mov	a,r5
   0BFC F2            [24] 3142 	movx	@r0,a
   0BFD 08            [12] 3143 	inc	r0
   0BFE EC            [12] 3144 	mov	a,r4
   0BFF F2            [24] 3145 	movx	@r0,a
                           3146 ;	radio/radio.c:1033: return (value + (scale >> 1)) / scale;
   0C00 78r24         [12] 3147 	mov	r0,#(_scale_uint32_PARM_2 + 3)
   0C02 E2            [24] 3148 	movx	a,@r0
   0C03 C3            [12] 3149 	clr	c
   0C04 13            [12] 3150 	rrc	a
   0C05 FF            [12] 3151 	mov	r7,a
   0C06 18            [12] 3152 	dec	r0
   0C07 E2            [24] 3153 	movx	a,@r0
   0C08 13            [12] 3154 	rrc	a
   0C09 FE            [12] 3155 	mov	r6,a
   0C0A 18            [12] 3156 	dec	r0
   0C0B E2            [24] 3157 	movx	a,@r0
   0C0C 13            [12] 3158 	rrc	a
   0C0D FB            [12] 3159 	mov	r3,a
   0C0E 18            [12] 3160 	dec	r0
   0C0F E2            [24] 3161 	movx	a,@r0
   0C10 13            [12] 3162 	rrc	a
   0C11 FA            [12] 3163 	mov	r2,a
   0C12 78r25         [12] 3164 	mov	r0,#_scale_uint32_value_1_250
   0C14 E2            [24] 3165 	movx	a,@r0
   0C15 2A            [12] 3166 	add	a,r2
   0C16 FA            [12] 3167 	mov	r2,a
   0C17 08            [12] 3168 	inc	r0
   0C18 E2            [24] 3169 	movx	a,@r0
   0C19 3B            [12] 3170 	addc	a,r3
   0C1A FB            [12] 3171 	mov	r3,a
   0C1B 08            [12] 3172 	inc	r0
   0C1C E2            [24] 3173 	movx	a,@r0
   0C1D 3E            [12] 3174 	addc	a,r6
   0C1E FE            [12] 3175 	mov	r6,a
   0C1F 08            [12] 3176 	inc	r0
   0C20 E2            [24] 3177 	movx	a,@r0
   0C21 3F            [12] 3178 	addc	a,r7
   0C22 FF            [12] 3179 	mov	r7,a
   0C23 78r21         [12] 3180 	mov	r0,#_scale_uint32_PARM_2
   0C25 90r00r00      [24] 3181 	mov	dptr,#__divulong_PARM_2
   0C28 E2            [24] 3182 	movx	a,@r0
   0C29 F0            [24] 3183 	movx	@dptr,a
   0C2A 08            [12] 3184 	inc	r0
   0C2B E2            [24] 3185 	movx	a,@r0
   0C2C A3            [24] 3186 	inc	dptr
   0C2D F0            [24] 3187 	movx	@dptr,a
   0C2E 08            [12] 3188 	inc	r0
   0C2F E2            [24] 3189 	movx	a,@r0
   0C30 A3            [24] 3190 	inc	dptr
   0C31 F0            [24] 3191 	movx	@dptr,a
   0C32 08            [12] 3192 	inc	r0
   0C33 E2            [24] 3193 	movx	a,@r0
   0C34 A3            [24] 3194 	inc	dptr
   0C35 F0            [24] 3195 	movx	@dptr,a
   0C36 8A 82         [24] 3196 	mov	dpl,r2
   0C38 8B 83         [24] 3197 	mov	dph,r3
   0C3A 8E F0         [24] 3198 	mov	b,r6
   0C3C EF            [12] 3199 	mov	a,r7
   0C3D 02r00r00      [24] 3200 	ljmp	__divulong
                           3201 ;------------------------------------------------------------
                           3202 ;Allocation info for local variables in function 'software_reset'
                           3203 ;------------------------------------------------------------
                           3204 ;status                    Allocated with name '_software_reset_status_1_253'
                           3205 ;------------------------------------------------------------
                           3206 ;	radio/radio.c:1041: software_reset(void)
                           3207 ;	-----------------------------------------
                           3208 ;	 function software_reset
                           3209 ;	-----------------------------------------
   0C40                    3210 _software_reset:
                           3211 ;	radio/radio.c:1046: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, 0);
   0C40 E4            [12] 3212 	clr	a
   0C41 C0 E0         [24] 3213 	push	acc
   0C43 75 82 05      [24] 3214 	mov	dpl,#0x05
   0C46 12r0Br48      [24] 3215 	lcall	_register_write
   0C49 15 81         [12] 3216 	dec	sp
                           3217 ;	radio/radio.c:1047: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, 0);
   0C4B E4            [12] 3218 	clr	a
   0C4C C0 E0         [24] 3219 	push	acc
   0C4E 75 82 06      [24] 3220 	mov	dpl,#0x06
   0C51 12r0Br48      [24] 3221 	lcall	_register_write
   0C54 15 81         [12] 3222 	dec	sp
                           3223 ;	radio/radio.c:1049: clear_status_registers();
   0C56 12r0BrE0      [24] 3224 	lcall	_clear_status_registers
                           3225 ;	radio/radio.c:1052: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_1, (EZRADIOPRO_SWRES | EZRADIOPRO_XTON));
   0C59 74 81         [12] 3226 	mov	a,#0x81
   0C5B C0 E0         [24] 3227 	push	acc
   0C5D 75 82 07      [24] 3228 	mov	dpl,#0x07
   0C60 12r0Br48      [24] 3229 	lcall	_register_write
   0C63 15 81         [12] 3230 	dec	sp
                           3231 ;	radio/radio.c:1055: delay_set(2);
   0C65 90 00 02      [24] 3232 	mov	dptr,#0x0002
   0C68 12r00r00      [24] 3233 	lcall	_delay_set
                           3234 ;	radio/radio.c:1056: while (IRQ) {
   0C6B                    3235 00103$:
   0C6B 30 87 07      [24] 3236 	jnb	_IRQ,00105$
                           3237 ;	radio/radio.c:1057: if (delay_expired()) {
   0C6E 12r00r00      [24] 3238 	lcall	_delay_expired
   0C71 50 F8         [24] 3239 	jnc	00103$
                           3240 ;	radio/radio.c:1058: return false;
   0C73 C3            [12] 3241 	clr	c
   0C74 22            [24] 3242 	ret
   0C75                    3243 00105$:
                           3244 ;	radio/radio.c:1063: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, 0);
   0C75 E4            [12] 3245 	clr	a
   0C76 C0 E0         [24] 3246 	push	acc
   0C78 75 82 05      [24] 3247 	mov	dpl,#0x05
   0C7B 12r0Br48      [24] 3248 	lcall	_register_write
   0C7E 15 81         [12] 3249 	dec	sp
                           3250 ;	radio/radio.c:1064: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, EZRADIOPRO_ENCHIPRDY);
   0C80 74 02         [12] 3251 	mov	a,#0x02
   0C82 C0 E0         [24] 3252 	push	acc
   0C84 75 82 06      [24] 3253 	mov	dpl,#0x06
   0C87 12r0Br48      [24] 3254 	lcall	_register_write
   0C8A 15 81         [12] 3255 	dec	sp
                           3256 ;	radio/radio.c:1066: delay_set(20);
   0C8C 90 00 14      [24] 3257 	mov	dptr,#0x0014
   0C8F 12r00r00      [24] 3258 	lcall	_delay_set
                           3259 ;	radio/radio.c:1067: while (!delay_expired()) {
   0C92                    3260 00108$:
   0C92 12r00r00      [24] 3261 	lcall	_delay_expired
   0C95 40 13         [24] 3262 	jc	00110$
                           3263 ;	radio/radio.c:1068: status = register_read(EZRADIOPRO_INTERRUPT_STATUS_1);
   0C97 75 82 03      [24] 3264 	mov	dpl,#0x03
   0C9A 12r0Br78      [24] 3265 	lcall	_register_read
                           3266 ;	radio/radio.c:1069: status = register_read(EZRADIOPRO_INTERRUPT_STATUS_2);
   0C9D 75 82 04      [24] 3267 	mov	dpl,#0x04
   0CA0 12r0Br78      [24] 3268 	lcall	_register_read
   0CA3 E5 82         [12] 3269 	mov	a,dpl
                           3270 ;	radio/radio.c:1070: if (status & EZRADIOPRO_ICHIPRDY) {
   0CA5 30 E1 EA      [24] 3271 	jnb	acc.1,00108$
                           3272 ;	radio/radio.c:1071: return true;
   0CA8 D3            [12] 3273 	setb	c
   0CA9 22            [24] 3274 	ret
   0CAA                    3275 00110$:
                           3276 ;	radio/radio.c:1074: return false;
   0CAA C3            [12] 3277 	clr	c
   0CAB 22            [24] 3278 	ret
                           3279 ;------------------------------------------------------------
                           3280 ;Allocation info for local variables in function 'set_frequency_registers'
                           3281 ;------------------------------------------------------------
                           3282 ;band                      Allocated with name '_set_frequency_registers_band_1_259'
                           3283 ;------------------------------------------------------------
                           3284 ;	radio/radio.c:1081: set_frequency_registers(__pdata uint32_t frequency)
                           3285 ;	-----------------------------------------
                           3286 ;	 function set_frequency_registers
                           3287 ;	-----------------------------------------
   0CAC                    3288 _set_frequency_registers:
   0CAC AF 82         [24] 3289 	mov	r7,dpl
   0CAE AE 83         [24] 3290 	mov	r6,dph
   0CB0 AD F0         [24] 3291 	mov	r5,b
   0CB2 FC            [12] 3292 	mov	r4,a
   0CB3 78r29         [12] 3293 	mov	r0,#_set_frequency_registers_frequency_1_258
   0CB5 EF            [12] 3294 	mov	a,r7
   0CB6 F2            [24] 3295 	movx	@r0,a
   0CB7 08            [12] 3296 	inc	r0
   0CB8 EE            [12] 3297 	mov	a,r6
   0CB9 F2            [24] 3298 	movx	@r0,a
   0CBA 08            [12] 3299 	inc	r0
   0CBB ED            [12] 3300 	mov	a,r5
   0CBC F2            [24] 3301 	movx	@r0,a
   0CBD 08            [12] 3302 	inc	r0
   0CBE EC            [12] 3303 	mov	a,r4
   0CBF F2            [24] 3304 	movx	@r0,a
                           3305 ;	radio/radio.c:1086: if (frequency > 480000000UL) {
   0CC0 78r29         [12] 3306 	mov	r0,#_set_frequency_registers_frequency_1_258
   0CC2 C3            [12] 3307 	clr	c
   0CC3 E2            [24] 3308 	movx	a,@r0
   0CC4 F5 F0         [12] 3309 	mov	b,a
   0CC6 E4            [12] 3310 	clr	a
   0CC7 95 F0         [12] 3311 	subb	a,b
   0CC9 08            [12] 3312 	inc	r0
   0CCA E2            [24] 3313 	movx	a,@r0
   0CCB F5 F0         [12] 3314 	mov	b,a
   0CCD 74 38         [12] 3315 	mov	a,#0x38
   0CCF 95 F0         [12] 3316 	subb	a,b
   0CD1 08            [12] 3317 	inc	r0
   0CD2 E2            [24] 3318 	movx	a,@r0
   0CD3 F5 F0         [12] 3319 	mov	b,a
   0CD5 74 9C         [12] 3320 	mov	a,#0x9C
   0CD7 95 F0         [12] 3321 	subb	a,b
   0CD9 08            [12] 3322 	inc	r0
   0CDA E2            [24] 3323 	movx	a,@r0
   0CDB F5 F0         [12] 3324 	mov	b,a
   0CDD 74 1C         [12] 3325 	mov	a,#0x1C
   0CDF 95 F0         [12] 3326 	subb	a,b
   0CE1 40 03         [24] 3327 	jc	00109$
   0CE3 02r0DrA2      [24] 3328 	ljmp	00102$
   0CE6                    3329 00109$:
                           3330 ;	radio/radio.c:1087: frequency -= 480000000UL;
   0CE6 78r2A         [12] 3331 	mov	r0,#(_set_frequency_registers_frequency_1_258 + 1)
   0CE8 E2            [24] 3332 	movx	a,@r0
   0CE9 24 C8         [12] 3333 	add	a,#0xC8
   0CEB F2            [24] 3334 	movx	@r0,a
   0CEC 08            [12] 3335 	inc	r0
   0CED E2            [24] 3336 	movx	a,@r0
   0CEE 34 63         [12] 3337 	addc	a,#0x63
   0CF0 F2            [24] 3338 	movx	@r0,a
   0CF1 08            [12] 3339 	inc	r0
   0CF2 E2            [24] 3340 	movx	a,@r0
   0CF3 34 E3         [12] 3341 	addc	a,#0xE3
   0CF5 F2            [24] 3342 	movx	@r0,a
                           3343 ;	radio/radio.c:1088: band  = frequency / 20000000UL;
   0CF6 90r00r00      [24] 3344 	mov	dptr,#__divulong_PARM_2
   0CF9 E4            [12] 3345 	clr	a
   0CFA F0            [24] 3346 	movx	@dptr,a
   0CFB 74 2D         [12] 3347 	mov	a,#0x2D
   0CFD A3            [24] 3348 	inc	dptr
   0CFE F0            [24] 3349 	movx	@dptr,a
   0CFF 74 31         [12] 3350 	mov	a,#0x31
   0D01 A3            [24] 3351 	inc	dptr
   0D02 F0            [24] 3352 	movx	@dptr,a
   0D03 74 01         [12] 3353 	mov	a,#0x01
   0D05 A3            [24] 3354 	inc	dptr
   0D06 F0            [24] 3355 	movx	@dptr,a
   0D07 78r29         [12] 3356 	mov	r0,#_set_frequency_registers_frequency_1_258
   0D09 E2            [24] 3357 	movx	a,@r0
   0D0A F5 82         [12] 3358 	mov	dpl,a
   0D0C 08            [12] 3359 	inc	r0
   0D0D E2            [24] 3360 	movx	a,@r0
   0D0E F5 83         [12] 3361 	mov	dph,a
   0D10 08            [12] 3362 	inc	r0
   0D11 E2            [24] 3363 	movx	a,@r0
   0D12 F5 F0         [12] 3364 	mov	b,a
   0D14 08            [12] 3365 	inc	r0
   0D15 E2            [24] 3366 	movx	a,@r0
   0D16 12r00r00      [24] 3367 	lcall	__divulong
   0D19 AA 82         [24] 3368 	mov	r2,dpl
   0D1B 90r01r0B      [24] 3369 	mov	dptr,#_set_frequency_registers_band_1_259
   0D1E EA            [12] 3370 	mov	a,r2
   0D1F F0            [24] 3371 	movx	@dptr,a
                           3372 ;	radio/radio.c:1089: frequency -= (uint32_t)band * 20000000UL;
   0D20 90r00r00      [24] 3373 	mov	dptr,#__mullong_PARM_2
   0D23 EA            [12] 3374 	mov	a,r2
   0D24 F0            [24] 3375 	movx	@dptr,a
   0D25 E4            [12] 3376 	clr	a
   0D26 A3            [24] 3377 	inc	dptr
   0D27 F0            [24] 3378 	movx	@dptr,a
   0D28 E4            [12] 3379 	clr	a
   0D29 A3            [24] 3380 	inc	dptr
   0D2A F0            [24] 3381 	movx	@dptr,a
   0D2B E4            [12] 3382 	clr	a
   0D2C A3            [24] 3383 	inc	dptr
   0D2D F0            [24] 3384 	movx	@dptr,a
   0D2E 90 2D 00      [24] 3385 	mov	dptr,#0x2D00
   0D31 75 F0 31      [24] 3386 	mov	b,#0x31
   0D34 74 01         [12] 3387 	mov	a,#0x01
   0D36 12r00r00      [24] 3388 	lcall	__mullong
   0D39 AC 82         [24] 3389 	mov	r4,dpl
   0D3B AD 83         [24] 3390 	mov	r5,dph
   0D3D AE F0         [24] 3391 	mov	r6,b
   0D3F FF            [12] 3392 	mov	r7,a
   0D40 78r29         [12] 3393 	mov	r0,#_set_frequency_registers_frequency_1_258
   0D42 E2            [24] 3394 	movx	a,@r0
   0D43 C3            [12] 3395 	clr	c
   0D44 9C            [12] 3396 	subb	a,r4
   0D45 F2            [24] 3397 	movx	@r0,a
   0D46 08            [12] 3398 	inc	r0
   0D47 E2            [24] 3399 	movx	a,@r0
   0D48 9D            [12] 3400 	subb	a,r5
   0D49 F2            [24] 3401 	movx	@r0,a
   0D4A 08            [12] 3402 	inc	r0
   0D4B E2            [24] 3403 	movx	a,@r0
   0D4C 9E            [12] 3404 	subb	a,r6
   0D4D F2            [24] 3405 	movx	@r0,a
   0D4E 08            [12] 3406 	inc	r0
   0D4F E2            [24] 3407 	movx	a,@r0
   0D50 9F            [12] 3408 	subb	a,r7
   0D51 F2            [24] 3409 	movx	@r0,a
                           3410 ;	radio/radio.c:1090: frequency  = scale_uint32(frequency, 625);
   0D52 78r21         [12] 3411 	mov	r0,#_scale_uint32_PARM_2
   0D54 74 71         [12] 3412 	mov	a,#0x71
   0D56 F2            [24] 3413 	movx	@r0,a
   0D57 08            [12] 3414 	inc	r0
   0D58 74 02         [12] 3415 	mov	a,#0x02
   0D5A F2            [24] 3416 	movx	@r0,a
   0D5B 08            [12] 3417 	inc	r0
   0D5C E4            [12] 3418 	clr	a
   0D5D F2            [24] 3419 	movx	@r0,a
   0D5E 08            [12] 3420 	inc	r0
   0D5F F2            [24] 3421 	movx	@r0,a
   0D60 78r29         [12] 3422 	mov	r0,#_set_frequency_registers_frequency_1_258
   0D62 E2            [24] 3423 	movx	a,@r0
   0D63 F5 82         [12] 3424 	mov	dpl,a
   0D65 08            [12] 3425 	inc	r0
   0D66 E2            [24] 3426 	movx	a,@r0
   0D67 F5 83         [12] 3427 	mov	dph,a
   0D69 08            [12] 3428 	inc	r0
   0D6A E2            [24] 3429 	movx	a,@r0
   0D6B F5 F0         [12] 3430 	mov	b,a
   0D6D 08            [12] 3431 	inc	r0
   0D6E E2            [24] 3432 	movx	a,@r0
   0D6F 12r0BrEC      [24] 3433 	lcall	_scale_uint32
   0D72 78r29         [12] 3434 	mov	r0,#_set_frequency_registers_frequency_1_258
   0D74 C0 E0         [24] 3435 	push	acc
   0D76 E5 82         [12] 3436 	mov	a,dpl
   0D78 F2            [24] 3437 	movx	@r0,a
   0D79 08            [12] 3438 	inc	r0
   0D7A E5 83         [12] 3439 	mov	a,dph
   0D7C F2            [24] 3440 	movx	@r0,a
   0D7D 08            [12] 3441 	inc	r0
   0D7E E5 F0         [12] 3442 	mov	a,b
   0D80 F2            [24] 3443 	movx	@r0,a
   0D81 D0 E0         [24] 3444 	pop	acc
   0D83 08            [12] 3445 	inc	r0
   0D84 F2            [24] 3446 	movx	@r0,a
                           3447 ;	radio/radio.c:1091: frequency <<= 1;
   0D85 78r29         [12] 3448 	mov	r0,#_set_frequency_registers_frequency_1_258
   0D87 E2            [24] 3449 	movx	a,@r0
   0D88 25 E0         [12] 3450 	add	a,acc
   0D8A F2            [24] 3451 	movx	@r0,a
   0D8B 08            [12] 3452 	inc	r0
   0D8C E2            [24] 3453 	movx	a,@r0
   0D8D 33            [12] 3454 	rlc	a
   0D8E F2            [24] 3455 	movx	@r0,a
   0D8F 08            [12] 3456 	inc	r0
   0D90 E2            [24] 3457 	movx	a,@r0
   0D91 33            [12] 3458 	rlc	a
   0D92 F2            [24] 3459 	movx	@r0,a
   0D93 08            [12] 3460 	inc	r0
   0D94 E2            [24] 3461 	movx	a,@r0
   0D95 33            [12] 3462 	rlc	a
   0D96 F2            [24] 3463 	movx	@r0,a
                           3464 ;	radio/radio.c:1092: band |= EZRADIOPRO_HBSEL;
   0D97 90r01r0B      [24] 3465 	mov	dptr,#_set_frequency_registers_band_1_259
   0D9A E0            [24] 3466 	movx	a,@dptr
   0D9B FF            [12] 3467 	mov	r7,a
   0D9C 44 20         [12] 3468 	orl	a,#0x20
   0D9E F0            [24] 3469 	movx	@dptr,a
   0D9F 02r0Er65      [24] 3470 	ljmp	00103$
   0DA2                    3471 00102$:
                           3472 ;	radio/radio.c:1094: frequency -= 240000000UL;
   0DA2 78r2A         [12] 3473 	mov	r0,#(_set_frequency_registers_frequency_1_258 + 1)
   0DA4 E2            [24] 3474 	movx	a,@r0
   0DA5 24 E4         [12] 3475 	add	a,#0xE4
   0DA7 F2            [24] 3476 	movx	@r0,a
   0DA8 08            [12] 3477 	inc	r0
   0DA9 E2            [24] 3478 	movx	a,@r0
   0DAA 34 B1         [12] 3479 	addc	a,#0xB1
   0DAC F2            [24] 3480 	movx	@r0,a
   0DAD 08            [12] 3481 	inc	r0
   0DAE E2            [24] 3482 	movx	a,@r0
   0DAF 34 F1         [12] 3483 	addc	a,#0xF1
   0DB1 F2            [24] 3484 	movx	@r0,a
                           3485 ;	radio/radio.c:1095: band  = frequency / 10000000UL;
   0DB2 90r00r00      [24] 3486 	mov	dptr,#__divulong_PARM_2
   0DB5 74 80         [12] 3487 	mov	a,#0x80
   0DB7 F0            [24] 3488 	movx	@dptr,a
   0DB8 74 96         [12] 3489 	mov	a,#0x96
   0DBA A3            [24] 3490 	inc	dptr
   0DBB F0            [24] 3491 	movx	@dptr,a
   0DBC 74 98         [12] 3492 	mov	a,#0x98
   0DBE A3            [24] 3493 	inc	dptr
   0DBF F0            [24] 3494 	movx	@dptr,a
   0DC0 E4            [12] 3495 	clr	a
   0DC1 A3            [24] 3496 	inc	dptr
   0DC2 F0            [24] 3497 	movx	@dptr,a
   0DC3 78r29         [12] 3498 	mov	r0,#_set_frequency_registers_frequency_1_258
   0DC5 E2            [24] 3499 	movx	a,@r0
   0DC6 F5 82         [12] 3500 	mov	dpl,a
   0DC8 08            [12] 3501 	inc	r0
   0DC9 E2            [24] 3502 	movx	a,@r0
   0DCA F5 83         [12] 3503 	mov	dph,a
   0DCC 08            [12] 3504 	inc	r0
   0DCD E2            [24] 3505 	movx	a,@r0
   0DCE F5 F0         [12] 3506 	mov	b,a
   0DD0 08            [12] 3507 	inc	r0
   0DD1 E2            [24] 3508 	movx	a,@r0
   0DD2 12r00r00      [24] 3509 	lcall	__divulong
   0DD5 AC 82         [24] 3510 	mov	r4,dpl
   0DD7 90r01r0B      [24] 3511 	mov	dptr,#_set_frequency_registers_band_1_259
   0DDA EC            [12] 3512 	mov	a,r4
   0DDB F0            [24] 3513 	movx	@dptr,a
                           3514 ;	radio/radio.c:1096: frequency -= (uint32_t)band * 10000000UL;
   0DDC 90r00r00      [24] 3515 	mov	dptr,#__mullong_PARM_2
   0DDF EC            [12] 3516 	mov	a,r4
   0DE0 F0            [24] 3517 	movx	@dptr,a
   0DE1 E4            [12] 3518 	clr	a
   0DE2 A3            [24] 3519 	inc	dptr
   0DE3 F0            [24] 3520 	movx	@dptr,a
   0DE4 E4            [12] 3521 	clr	a
   0DE5 A3            [24] 3522 	inc	dptr
   0DE6 F0            [24] 3523 	movx	@dptr,a
   0DE7 E4            [12] 3524 	clr	a
   0DE8 A3            [24] 3525 	inc	dptr
   0DE9 F0            [24] 3526 	movx	@dptr,a
   0DEA 90 96 80      [24] 3527 	mov	dptr,#0x9680
   0DED 75 F0 98      [24] 3528 	mov	b,#0x98
   0DF0 E4            [12] 3529 	clr	a
   0DF1 12r00r00      [24] 3530 	lcall	__mullong
   0DF4 AC 82         [24] 3531 	mov	r4,dpl
   0DF6 AD 83         [24] 3532 	mov	r5,dph
   0DF8 AE F0         [24] 3533 	mov	r6,b
   0DFA FF            [12] 3534 	mov	r7,a
   0DFB 78r29         [12] 3535 	mov	r0,#_set_frequency_registers_frequency_1_258
   0DFD E2            [24] 3536 	movx	a,@r0
   0DFE C3            [12] 3537 	clr	c
   0DFF 9C            [12] 3538 	subb	a,r4
   0E00 F2            [24] 3539 	movx	@r0,a
   0E01 08            [12] 3540 	inc	r0
   0E02 E2            [24] 3541 	movx	a,@r0
   0E03 9D            [12] 3542 	subb	a,r5
   0E04 F2            [24] 3543 	movx	@r0,a
   0E05 08            [12] 3544 	inc	r0
   0E06 E2            [24] 3545 	movx	a,@r0
   0E07 9E            [12] 3546 	subb	a,r6
   0E08 F2            [24] 3547 	movx	@r0,a
   0E09 08            [12] 3548 	inc	r0
   0E0A E2            [24] 3549 	movx	a,@r0
   0E0B 9F            [12] 3550 	subb	a,r7
   0E0C F2            [24] 3551 	movx	@r0,a
                           3552 ;	radio/radio.c:1097: frequency  = scale_uint32(frequency, 625);
   0E0D 78r21         [12] 3553 	mov	r0,#_scale_uint32_PARM_2
   0E0F 74 71         [12] 3554 	mov	a,#0x71
   0E11 F2            [24] 3555 	movx	@r0,a
   0E12 08            [12] 3556 	inc	r0
   0E13 74 02         [12] 3557 	mov	a,#0x02
   0E15 F2            [24] 3558 	movx	@r0,a
   0E16 08            [12] 3559 	inc	r0
   0E17 E4            [12] 3560 	clr	a
   0E18 F2            [24] 3561 	movx	@r0,a
   0E19 08            [12] 3562 	inc	r0
   0E1A F2            [24] 3563 	movx	@r0,a
   0E1B 78r29         [12] 3564 	mov	r0,#_set_frequency_registers_frequency_1_258
   0E1D E2            [24] 3565 	movx	a,@r0
   0E1E F5 82         [12] 3566 	mov	dpl,a
   0E20 08            [12] 3567 	inc	r0
   0E21 E2            [24] 3568 	movx	a,@r0
   0E22 F5 83         [12] 3569 	mov	dph,a
   0E24 08            [12] 3570 	inc	r0
   0E25 E2            [24] 3571 	movx	a,@r0
   0E26 F5 F0         [12] 3572 	mov	b,a
   0E28 08            [12] 3573 	inc	r0
   0E29 E2            [24] 3574 	movx	a,@r0
   0E2A 12r0BrEC      [24] 3575 	lcall	_scale_uint32
   0E2D 78r29         [12] 3576 	mov	r0,#_set_frequency_registers_frequency_1_258
   0E2F C0 E0         [24] 3577 	push	acc
   0E31 E5 82         [12] 3578 	mov	a,dpl
   0E33 F2            [24] 3579 	movx	@r0,a
   0E34 08            [12] 3580 	inc	r0
   0E35 E5 83         [12] 3581 	mov	a,dph
   0E37 F2            [24] 3582 	movx	@r0,a
   0E38 08            [12] 3583 	inc	r0
   0E39 E5 F0         [12] 3584 	mov	a,b
   0E3B F2            [24] 3585 	movx	@r0,a
   0E3C D0 E0         [24] 3586 	pop	acc
   0E3E 08            [12] 3587 	inc	r0
   0E3F F2            [24] 3588 	movx	@r0,a
                           3589 ;	radio/radio.c:1098: frequency <<= 2;
   0E40 78r29         [12] 3590 	mov	r0,#_set_frequency_registers_frequency_1_258
   0E42 E2            [24] 3591 	movx	a,@r0
   0E43 25 E0         [12] 3592 	add	a,acc
   0E45 F2            [24] 3593 	movx	@r0,a
   0E46 08            [12] 3594 	inc	r0
   0E47 E2            [24] 3595 	movx	a,@r0
   0E48 33            [12] 3596 	rlc	a
   0E49 F2            [24] 3597 	movx	@r0,a
   0E4A 08            [12] 3598 	inc	r0
   0E4B E2            [24] 3599 	movx	a,@r0
   0E4C 33            [12] 3600 	rlc	a
   0E4D F2            [24] 3601 	movx	@r0,a
   0E4E 08            [12] 3602 	inc	r0
   0E4F E2            [24] 3603 	movx	a,@r0
   0E50 33            [12] 3604 	rlc	a
   0E51 F2            [24] 3605 	movx	@r0,a
   0E52 18            [12] 3606 	dec	r0
   0E53 18            [12] 3607 	dec	r0
   0E54 18            [12] 3608 	dec	r0
   0E55 E2            [24] 3609 	movx	a,@r0
   0E56 25 E0         [12] 3610 	add	a,acc
   0E58 F2            [24] 3611 	movx	@r0,a
   0E59 08            [12] 3612 	inc	r0
   0E5A E2            [24] 3613 	movx	a,@r0
   0E5B 33            [12] 3614 	rlc	a
   0E5C F2            [24] 3615 	movx	@r0,a
   0E5D 08            [12] 3616 	inc	r0
   0E5E E2            [24] 3617 	movx	a,@r0
   0E5F 33            [12] 3618 	rlc	a
   0E60 F2            [24] 3619 	movx	@r0,a
   0E61 08            [12] 3620 	inc	r0
   0E62 E2            [24] 3621 	movx	a,@r0
   0E63 33            [12] 3622 	rlc	a
   0E64 F2            [24] 3623 	movx	@r0,a
   0E65                    3624 00103$:
                           3625 ;	radio/radio.c:1101: band |= EZRADIOPRO_SBSEL;
   0E65 90r01r0B      [24] 3626 	mov	dptr,#_set_frequency_registers_band_1_259
   0E68 E0            [24] 3627 	movx	a,@dptr
   0E69 44 40         [12] 3628 	orl	a,#0x40
   0E6B F0            [24] 3629 	movx	@dptr,a
                           3630 ;	radio/radio.c:1102: carrier = (uint16_t)frequency;
   0E6C 78r29         [12] 3631 	mov	r0,#_set_frequency_registers_frequency_1_258
   0E6E E2            [24] 3632 	movx	a,@r0
   0E6F FC            [12] 3633 	mov	r4,a
   0E70 08            [12] 3634 	inc	r0
   0E71 E2            [24] 3635 	movx	a,@r0
   0E72 FD            [12] 3636 	mov	r5,a
                           3637 ;	radio/radio.c:1104: register_write(EZRADIOPRO_FREQUENCY_BAND_SELECT, band);
   0E73 C0 05         [24] 3638 	push	ar5
   0E75 C0 04         [24] 3639 	push	ar4
   0E77 90r01r0B      [24] 3640 	mov	dptr,#_set_frequency_registers_band_1_259
   0E7A E0            [24] 3641 	movx	a,@dptr
   0E7B C0 E0         [24] 3642 	push	acc
   0E7D 75 82 75      [24] 3643 	mov	dpl,#0x75
   0E80 12r0Br48      [24] 3644 	lcall	_register_write
   0E83 15 81         [12] 3645 	dec	sp
   0E85 D0 04         [24] 3646 	pop	ar4
   0E87 D0 05         [24] 3647 	pop	ar5
                           3648 ;	radio/radio.c:1105: register_write(EZRADIOPRO_NOMINAL_CARRIER_FREQUENCY_1, carrier >> 8);
   0E89 8D 07         [24] 3649 	mov	ar7,r5
   0E8B C0 05         [24] 3650 	push	ar5
   0E8D C0 04         [24] 3651 	push	ar4
   0E8F C0 07         [24] 3652 	push	ar7
   0E91 75 82 76      [24] 3653 	mov	dpl,#0x76
   0E94 12r0Br48      [24] 3654 	lcall	_register_write
   0E97 15 81         [12] 3655 	dec	sp
   0E99 D0 04         [24] 3656 	pop	ar4
   0E9B D0 05         [24] 3657 	pop	ar5
                           3658 ;	radio/radio.c:1106: register_write(EZRADIOPRO_NOMINAL_CARRIER_FREQUENCY_0, carrier & 0xFF);
   0E9D C0 04         [24] 3659 	push	ar4
   0E9F 75 82 77      [24] 3660 	mov	dpl,#0x77
   0EA2 12r0Br48      [24] 3661 	lcall	_register_write
   0EA5 15 81         [12] 3662 	dec	sp
   0EA7 22            [24] 3663 	ret
                           3664 ;------------------------------------------------------------
                           3665 ;Allocation info for local variables in function 'radio_temperature'
                           3666 ;------------------------------------------------------------
                           3667 ;temp_local                Allocated to registers r6 r7 
                           3668 ;------------------------------------------------------------
                           3669 ;	radio/radio.c:1115: radio_temperature(void)
                           3670 ;	-----------------------------------------
                           3671 ;	 function radio_temperature
                           3672 ;	-----------------------------------------
   0EA8                    3673 _radio_temperature:
                           3674 ;	radio/radio.c:1119: AD0BUSY = 1;		// Start ADC conversion
   0EA8 D2 EC         [12] 3675 	setb	_AD0BUSY
                           3676 ;	radio/radio.c:1120: while (AD0BUSY) ;  	// Wait for completion of conversion
   0EAA                    3677 00101$:
   0EAA 20 EC FD      [24] 3678 	jb	_AD0BUSY,00101$
                           3679 ;	radio/radio.c:1122: temp_local = (ADC0H << 8) | ADC0L;
   0EAD AF BE         [24] 3680 	mov	r7,_ADC0H
   0EAF 7E 00         [12] 3681 	mov	r6,#0x00
   0EB1 AC BD         [24] 3682 	mov	r4,_ADC0L
   0EB3 7D 00         [12] 3683 	mov	r5,#0x00
   0EB5 EC            [12] 3684 	mov	a,r4
   0EB6 42 06         [12] 3685 	orl	ar6,a
   0EB8 ED            [12] 3686 	mov	a,r5
   0EB9 42 07         [12] 3687 	orl	ar7,a
                           3688 ;	radio/radio.c:1123: temp_local *= 1.64060;  // convert reading into mV ( (val/1024) * 1680 )  vref=1680mV
   0EBB 8E 82         [24] 3689 	mov	dpl,r6
   0EBD 8F 83         [24] 3690 	mov	dph,r7
   0EBF 12r00r00      [24] 3691 	lcall	___sint2fs
   0EC2 AA 82         [24] 3692 	mov	r2,dpl
   0EC4 AB 83         [24] 3693 	mov	r3,dph
   0EC6 AC F0         [24] 3694 	mov	r4,b
   0EC8 FD            [12] 3695 	mov	r5,a
   0EC9 C0 02         [24] 3696 	push	ar2
   0ECB C0 03         [24] 3697 	push	ar3
   0ECD C0 04         [24] 3698 	push	ar4
   0ECF C0 05         [24] 3699 	push	ar5
   0ED1 90 FF 2E      [24] 3700 	mov	dptr,#0xFF2E
   0ED4 75 F0 D1      [24] 3701 	mov	b,#0xD1
   0ED7 74 3F         [12] 3702 	mov	a,#0x3F
   0ED9 12r00r00      [24] 3703 	lcall	___fsmul
   0EDC AA 82         [24] 3704 	mov	r2,dpl
   0EDE AB 83         [24] 3705 	mov	r3,dph
   0EE0 AC F0         [24] 3706 	mov	r4,b
   0EE2 FD            [12] 3707 	mov	r5,a
   0EE3 E5 81         [12] 3708 	mov	a,sp
   0EE5 24 FC         [12] 3709 	add	a,#0xfc
   0EE7 F5 81         [12] 3710 	mov	sp,a
   0EE9 8A 82         [24] 3711 	mov	dpl,r2
   0EEB 8B 83         [24] 3712 	mov	dph,r3
   0EED 8C F0         [24] 3713 	mov	b,r4
   0EEF ED            [12] 3714 	mov	a,r5
   0EF0 12r00r00      [24] 3715 	lcall	___fs2sint
   0EF3 AE 82         [24] 3716 	mov	r6,dpl
   0EF5 AF 83         [24] 3717 	mov	r7,dph
                           3718 ;	radio/radio.c:1124: temp_local = 25.0 + (temp_local - 1025) / 3.4; // convert mV reading into degC.
   0EF7 EE            [12] 3719 	mov	a,r6
   0EF8 24 FF         [12] 3720 	add	a,#0xFF
   0EFA FC            [12] 3721 	mov	r4,a
   0EFB EF            [12] 3722 	mov	a,r7
   0EFC 34 FB         [12] 3723 	addc	a,#0xFB
   0EFE FD            [12] 3724 	mov	r5,a
   0EFF 8C 82         [24] 3725 	mov	dpl,r4
   0F01 8D 83         [24] 3726 	mov	dph,r5
   0F03 12r00r00      [24] 3727 	lcall	___sint2fs
   0F06 AA 82         [24] 3728 	mov	r2,dpl
   0F08 AB 83         [24] 3729 	mov	r3,dph
   0F0A AC F0         [24] 3730 	mov	r4,b
   0F0C FD            [12] 3731 	mov	r5,a
   0F0D 74 9A         [12] 3732 	mov	a,#0x9A
   0F0F C0 E0         [24] 3733 	push	acc
   0F11 74 99         [12] 3734 	mov	a,#0x99
   0F13 C0 E0         [24] 3735 	push	acc
   0F15 74 59         [12] 3736 	mov	a,#0x59
   0F17 C0 E0         [24] 3737 	push	acc
   0F19 74 40         [12] 3738 	mov	a,#0x40
   0F1B C0 E0         [24] 3739 	push	acc
   0F1D 8A 82         [24] 3740 	mov	dpl,r2
   0F1F 8B 83         [24] 3741 	mov	dph,r3
   0F21 8C F0         [24] 3742 	mov	b,r4
   0F23 ED            [12] 3743 	mov	a,r5
   0F24 12r00r00      [24] 3744 	lcall	___fsdiv
   0F27 AA 82         [24] 3745 	mov	r2,dpl
   0F29 AB 83         [24] 3746 	mov	r3,dph
   0F2B AC F0         [24] 3747 	mov	r4,b
   0F2D FD            [12] 3748 	mov	r5,a
   0F2E E5 81         [12] 3749 	mov	a,sp
   0F30 24 FC         [12] 3750 	add	a,#0xfc
   0F32 F5 81         [12] 3751 	mov	sp,a
   0F34 E4            [12] 3752 	clr	a
   0F35 C0 E0         [24] 3753 	push	acc
   0F37 C0 E0         [24] 3754 	push	acc
   0F39 74 C8         [12] 3755 	mov	a,#0xC8
   0F3B C0 E0         [24] 3756 	push	acc
   0F3D 74 41         [12] 3757 	mov	a,#0x41
   0F3F C0 E0         [24] 3758 	push	acc
   0F41 8A 82         [24] 3759 	mov	dpl,r2
   0F43 8B 83         [24] 3760 	mov	dph,r3
   0F45 8C F0         [24] 3761 	mov	b,r4
   0F47 ED            [12] 3762 	mov	a,r5
   0F48 12r00r00      [24] 3763 	lcall	___fsadd
   0F4B AA 82         [24] 3764 	mov	r2,dpl
   0F4D AB 83         [24] 3765 	mov	r3,dph
   0F4F AC F0         [24] 3766 	mov	r4,b
   0F51 FD            [12] 3767 	mov	r5,a
   0F52 E5 81         [12] 3768 	mov	a,sp
   0F54 24 FC         [12] 3769 	add	a,#0xfc
   0F56 F5 81         [12] 3770 	mov	sp,a
   0F58 8A 82         [24] 3771 	mov	dpl,r2
   0F5A 8B 83         [24] 3772 	mov	dph,r3
   0F5C 8C F0         [24] 3773 	mov	b,r4
   0F5E ED            [12] 3774 	mov	a,r5
                           3775 ;	radio/radio.c:1126: return temp_local;
   0F5F 02r00r00      [24] 3776 	ljmp	___fs2sint
                           3777 ;------------------------------------------------------------
                           3778 ;Allocation info for local variables in function 'radio_set_diversity'
                           3779 ;------------------------------------------------------------
                           3780 ;	radio/radio.c:1132: radio_set_diversity(bool enable)
                           3781 ;	-----------------------------------------
                           3782 ;	 function radio_set_diversity
                           3783 ;	-----------------------------------------
   0F62                    3784 _radio_set_diversity:
                           3785 ;	radio/radio.c:1134: if (enable)
   0F62 30*08 25      [24] 3786 	jnb	_radio_set_diversity_PARM_1,00102$
                           3787 ;	radio/radio.c:1136: register_write(EZRADIOPRO_GPIO2_CONFIGURATION, 0x18);
   0F65 74 18         [12] 3788 	mov	a,#0x18
   0F67 C0 E0         [24] 3789 	push	acc
   0F69 75 82 0D      [24] 3790 	mov	dpl,#0x0D
   0F6C 12r0Br48      [24] 3791 	lcall	_register_write
   0F6F 15 81         [12] 3792 	dec	sp
                           3793 ;	radio/radio.c:1138: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, (register_read(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2) & ~EZRADIOPRO_ANTDIV_MASK) | 0x80);
   0F71 75 82 08      [24] 3794 	mov	dpl,#0x08
   0F74 12r0Br78      [24] 3795 	lcall	_register_read
   0F77 AF 82         [24] 3796 	mov	r7,dpl
   0F79 74 1F         [12] 3797 	mov	a,#0x1F
   0F7B 5F            [12] 3798 	anl	a,r7
   0F7C 44 80         [12] 3799 	orl	a,#0x80
   0F7E FF            [12] 3800 	mov	r7,a
   0F7F C0 07         [24] 3801 	push	ar7
   0F81 75 82 08      [24] 3802 	mov	dpl,#0x08
   0F84 12r0Br48      [24] 3803 	lcall	_register_write
   0F87 15 81         [12] 3804 	dec	sp
   0F89 22            [24] 3805 	ret
   0F8A                    3806 00102$:
                           3807 ;	radio/radio.c:1143: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, (register_read(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2) & ~EZRADIOPRO_ANTDIV_MASK));
   0F8A 75 82 08      [24] 3808 	mov	dpl,#0x08
   0F8D 12r0Br78      [24] 3809 	lcall	_register_read
   0F90 AF 82         [24] 3810 	mov	r7,dpl
   0F92 53 07 1F      [24] 3811 	anl	ar7,#0x1F
   0F95 C0 07         [24] 3812 	push	ar7
   0F97 75 82 08      [24] 3813 	mov	dpl,#0x08
   0F9A 12r0Br48      [24] 3814 	lcall	_register_write
   0F9D 15 81         [12] 3815 	dec	sp
                           3816 ;	radio/radio.c:1145: register_write(EZRADIOPRO_GPIO2_CONFIGURATION, 0x0A);	// GPIO2 (ANT1) output set high fixed
   0F9F 74 0A         [12] 3817 	mov	a,#0x0A
   0FA1 C0 E0         [24] 3818 	push	acc
   0FA3 75 82 0D      [24] 3819 	mov	dpl,#0x0D
   0FA6 12r0Br48      [24] 3820 	lcall	_register_write
   0FA9 15 81         [12] 3821 	dec	sp
                           3822 ;	radio/radio.c:1146: register_write(EZRADIOPRO_IO_PORT_CONFIGURATION, 0x04);	// GPIO2 output set high (fixed on ant 1)
   0FAB 74 04         [12] 3823 	mov	a,#0x04
   0FAD C0 E0         [24] 3824 	push	acc
   0FAF 75 82 0E      [24] 3825 	mov	dpl,#0x0E
   0FB2 12r0Br48      [24] 3826 	lcall	_register_write
   0FB5 15 81         [12] 3827 	dec	sp
   0FB7 22            [24] 3828 	ret
                           3829 ;------------------------------------------------------------
                           3830 ;Allocation info for local variables in function 'Receiver_ISR'
                           3831 ;------------------------------------------------------------
                           3832 ;status                    Allocated to registers r6 
                           3833 ;status2                   Allocated to registers r7 
                           3834 ;len                       Allocated to registers r7 
                           3835 ;------------------------------------------------------------
                           3836 ;	radio/radio.c:1158: INTERRUPT(Receiver_ISR, INTERRUPT_INT0)
                           3837 ;	-----------------------------------------
                           3838 ;	 function Receiver_ISR
                           3839 ;	-----------------------------------------
   0FB8                    3840 _Receiver_ISR:
   0FB8 C0*00         [24] 3841 	push	bits
   0FBA C0 E0         [24] 3842 	push	acc
   0FBC C0 F0         [24] 3843 	push	b
   0FBE C0 82         [24] 3844 	push	dpl
   0FC0 C0 83         [24] 3845 	push	dph
   0FC2 C0 07         [24] 3846 	push	(0+7)
   0FC4 C0 06         [24] 3847 	push	(0+6)
   0FC6 C0 05         [24] 3848 	push	(0+5)
   0FC8 C0 04         [24] 3849 	push	(0+4)
   0FCA C0 03         [24] 3850 	push	(0+3)
   0FCC C0 02         [24] 3851 	push	(0+2)
   0FCE C0 01         [24] 3852 	push	(0+1)
   0FD0 C0 00         [24] 3853 	push	(0+0)
   0FD2 C0 D0         [24] 3854 	push	psw
   0FD4 75 D0 00      [24] 3855 	mov	psw,#0x00
                           3856 ;	radio/radio.c:1162: status2 = register_read(EZRADIOPRO_INTERRUPT_STATUS_2);
   0FD7 75 82 04      [24] 3857 	mov	dpl,#0x04
   0FDA 12r0Br78      [24] 3858 	lcall	_register_read
   0FDD AF 82         [24] 3859 	mov	r7,dpl
                           3860 ;	radio/radio.c:1163: status  = register_read(EZRADIOPRO_INTERRUPT_STATUS_1);
   0FDF 75 82 03      [24] 3861 	mov	dpl,#0x03
   0FE2 C0 07         [24] 3862 	push	ar7
   0FE4 12r0Br78      [24] 3863 	lcall	_register_read
   0FE7 AE 82         [24] 3864 	mov	r6,dpl
   0FE9 D0 07         [24] 3865 	pop	ar7
                           3866 ;	radio/radio.c:1165: if (status & EZRADIOPRO_IRXFFAFULL) {
   0FEB EE            [12] 3867 	mov	a,r6
   0FEC 30 E4 49      [24] 3868 	jnb	acc.4,00104$
                           3869 ;	radio/radio.c:1166: if (RX_FIFO_THRESHOLD_HIGH + (uint16_t)partial_packet_length > MAX_PACKET_LENGTH) {
   0FEF 78r01         [12] 3870 	mov	r0,#_partial_packet_length
   0FF1 E2            [24] 3871 	movx	a,@r0
   0FF2 FC            [12] 3872 	mov	r4,a
   0FF3 7D 00         [12] 3873 	mov	r5,#0x00
   0FF5 74 32         [12] 3874 	mov	a,#0x32
   0FF7 2C            [12] 3875 	add	a,r4
   0FF8 FC            [12] 3876 	mov	r4,a
   0FF9 E4            [12] 3877 	clr	a
   0FFA 3D            [12] 3878 	addc	a,r5
   0FFB FD            [12] 3879 	mov	r5,a
   0FFC C3            [12] 3880 	clr	c
   0FFD 74 FC         [12] 3881 	mov	a,#0xFC
   0FFF 9C            [12] 3882 	subb	a,r4
   1000 E4            [12] 3883 	clr	a
   1001 9D            [12] 3884 	subb	a,r5
   1002 50 03         [24] 3885 	jnc	00150$
   1004 02r10rC3      [24] 3886 	ljmp	00117$
   1007                    3887 00150$:
                           3888 ;	radio/radio.c:1170: read_receive_fifo(RX_FIFO_THRESHOLD_HIGH, &radio_buffer[partial_packet_length]);
   1007 78r01         [12] 3889 	mov	r0,#_partial_packet_length
   1009 E2            [24] 3890 	movx	a,@r0
   100A 24r00         [12] 3891 	add	a,#_radio_buffer
   100C FC            [12] 3892 	mov	r4,a
   100D E4            [12] 3893 	clr	a
   100E 34s00         [12] 3894 	addc	a,#(_radio_buffer >> 8)
   1010 FD            [12] 3895 	mov	r5,a
   1011 C0 07         [24] 3896 	push	ar7
   1013 C0 06         [24] 3897 	push	ar6
   1015 C0 04         [24] 3898 	push	ar4
   1017 C0 05         [24] 3899 	push	ar5
   1019 75 82 32      [24] 3900 	mov	dpl,#0x32
   101C 12r0BrA6      [24] 3901 	lcall	_read_receive_fifo
   101F 15 81         [12] 3902 	dec	sp
   1021 15 81         [12] 3903 	dec	sp
                           3904 ;	radio/radio.c:1171: partial_packet_length += RX_FIFO_THRESHOLD_HIGH;
   1023 78r01         [12] 3905 	mov	r0,#_partial_packet_length
   1025 E2            [24] 3906 	movx	a,@r0
   1026 24 32         [12] 3907 	add	a,#0x32
   1028 F2            [24] 3908 	movx	@r0,a
                           3909 ;	radio/radio.c:1172: last_rssi = register_read(EZRADIOPRO_RECEIVED_SIGNAL_STRENGTH_INDICATOR);
   1029 75 82 26      [24] 3910 	mov	dpl,#0x26
   102C 12r0Br78      [24] 3911 	lcall	_register_read
   102F E5 82         [12] 3912 	mov	a,dpl
   1031 D0 06         [24] 3913 	pop	ar6
   1033 D0 07         [24] 3914 	pop	ar7
   1035 78r02         [12] 3915 	mov	r0,#_last_rssi
   1037 F2            [24] 3916 	movx	@r0,a
   1038                    3917 00104$:
                           3918 ;	radio/radio.c:1175: if (status2 & EZRADIOPRO_IPREAVAL) {
   1038 EF            [12] 3919 	mov	a,r7
   1039 30 E6 11      [24] 3920 	jnb	acc.6,00106$
                           3921 ;	radio/radio.c:1177: preamble_detected = true;
   103C D2*01         [12] 3922 	setb	_preamble_detected
                           3923 ;	radio/radio.c:1180: last_rssi = register_read(EZRADIOPRO_RECEIVED_SIGNAL_STRENGTH_INDICATOR);
   103E 75 82 26      [24] 3924 	mov	dpl,#0x26
   1041 C0 06         [24] 3925 	push	ar6
   1043 12r0Br78      [24] 3926 	lcall	_register_read
   1046 E5 82         [12] 3927 	mov	a,dpl
   1048 D0 06         [24] 3928 	pop	ar6
   104A 78r02         [12] 3929 	mov	r0,#_last_rssi
   104C F2            [24] 3930 	movx	@r0,a
   104D                    3931 00106$:
                           3932 ;	radio/radio.c:1183: if (feature_golay == false && (status & EZRADIOPRO_ICRCERROR)) {
   104D 20*00 04      [24] 3933 	jb	_feature_golay,00108$
   1050 EE            [12] 3934 	mov	a,r6
   1051 20 E0 6F      [24] 3935 	jb	acc.0,00117$
                           3936 ;	radio/radio.c:1184: goto rxfail;
   1054                    3937 00108$:
                           3938 ;	radio/radio.c:1187: if (status & EZRADIOPRO_IPKVALID) {
   1054 EE            [12] 3939 	mov	a,r6
   1055 30 E1 69      [24] 3940 	jnb	acc.1,00116$
                           3941 ;	radio/radio.c:1188: __data uint8_t len = register_read(EZRADIOPRO_RECEIVED_PACKET_LENGTH);
   1058 75 82 4B      [24] 3942 	mov	dpl,#0x4B
   105B 12r0Br78      [24] 3943 	lcall	_register_read
                           3944 ;	radio/radio.c:1189: if (len > MAX_PACKET_LENGTH || partial_packet_length > len) {
   105E E5 82         [12] 3945 	mov	a,dpl
   1060 FF            [12] 3946 	mov	r7,a
   1061 24 03         [12] 3947 	add	a,#0xff - 0xFC
   1063 40 5E         [24] 3948 	jc	00117$
   1065 78r01         [12] 3949 	mov	r0,#_partial_packet_length
   1067 C3            [12] 3950 	clr	c
   1068 E2            [24] 3951 	movx	a,@r0
   1069 F5 F0         [12] 3952 	mov	b,a
   106B EF            [12] 3953 	mov	a,r7
   106C 95 F0         [12] 3954 	subb	a,b
   106E 40 53         [24] 3955 	jc	00117$
                           3956 ;	radio/radio.c:1193: if (partial_packet_length < len) {
   1070 78r01         [12] 3957 	mov	r0,#_partial_packet_length
   1072 C3            [12] 3958 	clr	c
   1073 E2            [24] 3959 	movx	a,@r0
   1074 9F            [12] 3960 	subb	a,r7
   1075 50 22         [24] 3961 	jnc	00114$
                           3962 ;	radio/radio.c:1194: read_receive_fifo(len-partial_packet_length, &radio_buffer[partial_packet_length]);
   1077 78r01         [12] 3963 	mov	r0,#_partial_packet_length
   1079 E2            [24] 3964 	movx	a,@r0
   107A 24r00         [12] 3965 	add	a,#_radio_buffer
   107C FD            [12] 3966 	mov	r5,a
   107D E4            [12] 3967 	clr	a
   107E 34s00         [12] 3968 	addc	a,#(_radio_buffer >> 8)
   1080 FE            [12] 3969 	mov	r6,a
   1081 78r01         [12] 3970 	mov	r0,#_partial_packet_length
   1083 D3            [12] 3971 	setb	c
   1084 E2            [24] 3972 	movx	a,@r0
   1085 9F            [12] 3973 	subb	a,r7
   1086 F4            [12] 3974 	cpl	a
   1087 FC            [12] 3975 	mov	r4,a
   1088 C0 07         [24] 3976 	push	ar7
   108A C0 05         [24] 3977 	push	ar5
   108C C0 06         [24] 3978 	push	ar6
   108E 8C 82         [24] 3979 	mov	dpl,r4
   1090 12r0BrA6      [24] 3980 	lcall	_read_receive_fifo
   1093 15 81         [12] 3981 	dec	sp
   1095 15 81         [12] 3982 	dec	sp
   1097 D0 07         [24] 3983 	pop	ar7
   1099                    3984 00114$:
                           3985 ;	radio/radio.c:1196: receive_packet_length = len;
   1099 78r00         [12] 3986 	mov	r0,#_receive_packet_length
   109B EF            [12] 3987 	mov	a,r7
   109C F2            [24] 3988 	movx	@r0,a
                           3989 ;	radio/radio.c:1199: packet_received = true;
   109D D2*00         [12] 3990 	setb	_packet_received
                           3991 ;	radio/radio.c:1202: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, 0);
   109F E4            [12] 3992 	clr	a
   10A0 C0 E0         [24] 3993 	push	acc
   10A2 75 82 05      [24] 3994 	mov	dpl,#0x05
   10A5 12r0Br48      [24] 3995 	lcall	_register_write
   10A8 15 81         [12] 3996 	dec	sp
                           3997 ;	radio/radio.c:1203: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, 0);
   10AA E4            [12] 3998 	clr	a
   10AB C0 E0         [24] 3999 	push	acc
   10AD 75 82 06      [24] 4000 	mov	dpl,#0x06
   10B0 12r0Br48      [24] 4001 	lcall	_register_write
   10B3 15 81         [12] 4002 	dec	sp
                           4003 ;	radio/radio.c:1206: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_1, EZRADIOPRO_PLLON);
   10B5 74 02         [12] 4004 	mov	a,#0x02
   10B7 C0 E0         [24] 4005 	push	acc
   10B9 75 82 07      [24] 4006 	mov	dpl,#0x07
   10BC 12r0Br48      [24] 4007 	lcall	_register_write
   10BF 15 81         [12] 4008 	dec	sp
   10C1                    4009 00116$:
                           4010 ;	radio/radio.c:1208: return;
                           4011 ;	radio/radio.c:1210: rxfail:
   10C1 80 1E         [24] 4012 	sjmp	00120$
   10C3                    4013 00117$:
                           4014 ;	radio/radio.c:1211: if (errors.rx_errors != 0xFFFF) {
   10C3 78r00         [12] 4015 	mov	r0,#_errors
   10C5 E2            [24] 4016 	movx	a,@r0
   10C6 FE            [12] 4017 	mov	r6,a
   10C7 08            [12] 4018 	inc	r0
   10C8 E2            [24] 4019 	movx	a,@r0
   10C9 FF            [12] 4020 	mov	r7,a
   10CA BE FF 05      [24] 4021 	cjne	r6,#0xFF,00158$
   10CD BF FF 02      [24] 4022 	cjne	r7,#0xFF,00158$
   10D0 80 0C         [24] 4023 	sjmp	00119$
   10D2                    4024 00158$:
                           4025 ;	radio/radio.c:1212: errors.rx_errors++;
   10D2 0E            [12] 4026 	inc	r6
   10D3 BE 00 01      [24] 4027 	cjne	r6,#0x00,00159$
   10D6 0F            [12] 4028 	inc	r7
   10D7                    4029 00159$:
   10D7 78r00         [12] 4030 	mov	r0,#_errors
   10D9 EE            [12] 4031 	mov	a,r6
   10DA F2            [24] 4032 	movx	@r0,a
   10DB 08            [12] 4033 	inc	r0
   10DC EF            [12] 4034 	mov	a,r7
   10DD F2            [24] 4035 	movx	@r0,a
   10DE                    4036 00119$:
                           4037 ;	radio/radio.c:1214: radio_receiver_on();
   10DE 12r06r74      [24] 4038 	lcall	_radio_receiver_on
   10E1                    4039 00120$:
   10E1 D0 D0         [24] 4040 	pop	psw
   10E3 D0 00         [24] 4041 	pop	(0+0)
   10E5 D0 01         [24] 4042 	pop	(0+1)
   10E7 D0 02         [24] 4043 	pop	(0+2)
   10E9 D0 03         [24] 4044 	pop	(0+3)
   10EB D0 04         [24] 4045 	pop	(0+4)
   10ED D0 05         [24] 4046 	pop	(0+5)
   10EF D0 06         [24] 4047 	pop	(0+6)
   10F1 D0 07         [24] 4048 	pop	(0+7)
   10F3 D0 83         [24] 4049 	pop	dph
   10F5 D0 82         [24] 4050 	pop	dpl
   10F7 D0 F0         [24] 4051 	pop	b
   10F9 D0 E0         [24] 4052 	pop	acc
   10FB D0*00         [24] 4053 	pop	bits
   10FD 32            [24] 4054 	reti
                           4055 	.area CSEG    (CODE)
                           4056 	.area CONST   (CODE)
   0000                    4057 __str_0:
   0000 6F 76 65 72 73 69  4058 	.ascii "oversized packet"
        7A 65 64 20 70 61
        63 6B 65 74
   0010 00                 4059 	.db 0x00
   0011                    4060 __str_1:
   0011 6F 76 65 72 73 69  4061 	.ascii "oversized golay packet"
        7A 65 64 20 67 6F
        6C 61 79 20 70 61
        63 6B 65 74
   0027 00                 4062 	.db 0x00
   0028                    4063 _reg_index:
   0028 1C                 4064 	.db #0x1C	; 28
   0029 1F                 4065 	.db #0x1F	; 31
   002A 20                 4066 	.db #0x20	; 32
   002B 21                 4067 	.db #0x21	; 33
   002C 22                 4068 	.db #0x22	; 34
   002D 23                 4069 	.db #0x23	; 35
   002E 24                 4070 	.db #0x24	; 36
   002F 25                 4071 	.db #0x25	; 37
   0030 2A                 4072 	.db #0x2A	; 42
   0031 6E                 4073 	.db #0x6E	; 110	'n'
   0032 6F                 4074 	.db #0x6F	; 111	'o'
   0033 72                 4075 	.db #0x72	; 114	'r'
   0034                    4076 _air_data_rates:
   0034 02                 4077 	.db #0x02	; 2
   0035 04                 4078 	.db #0x04	; 4
   0036 08                 4079 	.db #0x08	; 8
   0037 10                 4080 	.db #0x10	; 16
   0038 13                 4081 	.db #0x13	; 19
   0039 18                 4082 	.db #0x18	; 24
   003A 20                 4083 	.db #0x20	; 32
   003B 30                 4084 	.db #0x30	; 48	'0'
   003C 40                 4085 	.db #0x40	; 64
   003D 60                 4086 	.db #0x60	; 96
   003E 80                 4087 	.db #0x80	; 128
   003F C0                 4088 	.db #0xC0	; 192
   0040 FA                 4089 	.db #0xFA	; 250
   0041                    4090 _reg_table_433:
   0041 27                 4091 	.db #0x27	; 39
   0042 27                 4092 	.db #0x27	; 39
   0043 27                 4093 	.db #0x27	; 39
   0044 2E                 4094 	.db #0x2E	; 46
   0045 16                 4095 	.db #0x16	; 22
   0046 01                 4096 	.db #0x01	; 1
   0047 05                 4097 	.db #0x05	; 5
   0048 0B                 4098 	.db #0x0B	; 11
   0049 9A                 4099 	.db #0x9A	; 154
   004A 88                 4100 	.db #0x88	; 136
   004B 8A                 4101 	.db #0x8A	; 138
   004C 8C                 4102 	.db #0x8C	; 140
   004D 8D                 4103 	.db #0x8D	; 141
   004E 03                 4104 	.db #0x03	; 3
   004F 03                 4105 	.db #0x03	; 3
   0050 03                 4106 	.db #0x03	; 3
   0051 03                 4107 	.db #0x03	; 3
   0052 03                 4108 	.db #0x03	; 3
   0053 03                 4109 	.db #0x03	; 3
   0054 03                 4110 	.db #0x03	; 3
   0055 03                 4111 	.db #0x03	; 3
   0056 03                 4112 	.db #0x03	; 3
   0057 03                 4113 	.db #0x03	; 3
   0058 03                 4114 	.db #0x03	; 3
   0059 03                 4115 	.db #0x03	; 3
   005A 03                 4116 	.db #0x03	; 3
   005B F4                 4117 	.db #0xF4	; 244
   005C FA                 4118 	.db #0xFA	; 250
   005D 7D                 4119 	.db #0x7D	; 125
   005E 3F                 4120 	.db #0x3F	; 63
   005F 69                 4121 	.db #0x69	; 105	'i'
   0060 A7                 4122 	.db #0xA7	; 167
   0061 7D                 4123 	.db #0x7D	; 125
   0062 53                 4124 	.db #0x53	; 83	'S'
   0063 5E                 4125 	.db #0x5E	; 94
   0064 7D                 4126 	.db #0x7D	; 125
   0065 5E                 4127 	.db #0x5E	; 94
   0066 3F                 4128 	.db #0x3F	; 63
   0067 30                 4129 	.db #0x30	; 48	'0'
   0068 20                 4130 	.db #0x20	; 32
   0069 00                 4131 	.db #0x00	; 0
   006A 01                 4132 	.db #0x01	; 1
   006B 02                 4133 	.db #0x02	; 2
   006C 01                 4134 	.db #0x01	; 1
   006D 00                 4135 	.db #0x00	; 0
   006E 01                 4136 	.db #0x01	; 1
   006F 01                 4137 	.db #0x01	; 1
   0070 01                 4138 	.db #0x01	; 1
   0071 01                 4139 	.db #0x01	; 1
   0072 01                 4140 	.db #0x01	; 1
   0073 02                 4141 	.db #0x02	; 2
   0074 02                 4142 	.db #0x02	; 2
   0075 41                 4143 	.db #0x41	; 65	'A'
   0076 83                 4144 	.db #0x83	; 131
   0077 06                 4145 	.db #0x06	; 6
   0078 0C                 4146 	.db #0x0C	; 12
   0079 37                 4147 	.db #0x37	; 55	'7'
   007A C4                 4148 	.db #0xC4	; 196
   007B 06                 4149 	.db #0x06	; 6
   007C 89                 4150 	.db #0x89	; 137
   007D 5D                 4151 	.db #0x5D	; 93
   007E 06                 4152 	.db #0x06	; 6
   007F 5D                 4153 	.db #0x5D	; 93
   0080 0C                 4154 	.db #0x0C	; 12
   0081 AA                 4155 	.db #0xAA	; 170
   0082 89                 4156 	.db #0x89	; 137
   0083 12                 4157 	.db #0x12	; 18
   0084 25                 4158 	.db #0x25	; 37
   0085 4A                 4159 	.db #0x4A	; 74	'J'
   0086 4C                 4160 	.db #0x4C	; 76	'L'
   0087 9C                 4161 	.db #0x9C	; 156
   0088 25                 4162 	.db #0x25	; 37
   0089 37                 4163 	.db #0x37	; 55	'7'
   008A 86                 4164 	.db #0x86	; 134
   008B 25                 4165 	.db #0x25	; 37
   008C 86                 4166 	.db #0x86	; 134
   008D 4A                 4167 	.db #0x4A	; 74	'J'
   008E AB                 4168 	.db #0xAB	; 171
   008F 00                 4169 	.db #0x00	; 0
   0090 01                 4170 	.db #0x01	; 1
   0091 02                 4171 	.db #0x02	; 2
   0092 04                 4172 	.db #0x04	; 4
   0093 02                 4173 	.db #0x02	; 2
   0094 01                 4174 	.db #0x01	; 1
   0095 02                 4175 	.db #0x02	; 2
   0096 03                 4176 	.db #0x03	; 3
   0097 02                 4177 	.db #0x02	; 2
   0098 02                 4178 	.db #0x02	; 2
   0099 02                 4179 	.db #0x02	; 2
   009A 04                 4180 	.db #0x04	; 4
   009B 07                 4181 	.db #0x07	; 7
   009C 85                 4182 	.db #0x85	; 133
   009D 08                 4183 	.db #0x08	; 8
   009E 0E                 4184 	.db #0x0E	; 14
   009F 12                 4185 	.db #0x12	; 18
   00A0 72                 4186 	.db #0x72	; 114	'r'
   00A1 8A                 4187 	.db #0x8A	; 138
   00A2 0E                 4188 	.db #0x0E	; 14
   00A3 18                 4189 	.db #0x18	; 24
   00A4 BB                 4190 	.db #0xBB	; 187
   00A5 0E                 4191 	.db #0x0E	; 14
   00A6 BB                 4192 	.db #0xBB	; 187
   00A7 EA                 4193 	.db #0xEA	; 234
   00A8 FF                 4194 	.db #0xFF	; 255
   00A9 1D                 4195 	.db #0x1D	; 29
   00AA 1D                 4196 	.db #0x1D	; 29
   00AB 1D                 4197 	.db #0x1D	; 29
   00AC 1E                 4198 	.db #0x1E	; 30
   00AD 1E                 4199 	.db #0x1E	; 30
   00AE 1E                 4200 	.db #0x1E	; 30
   00AF 20                 4201 	.db #0x20	; 32
   00B0 30                 4202 	.db #0x30	; 48	'0'
   00B1 41                 4203 	.db #0x41	; 65	'A'
   00B2 50                 4204 	.db #0x50	; 80	'P'
   00B3 50                 4205 	.db #0x50	; 80	'P'
   00B4 50                 4206 	.db #0x50	; 80	'P'
   00B5 50                 4207 	.db #0x50	; 80	'P'
   00B6 10                 4208 	.db #0x10	; 16
   00B7 20                 4209 	.db #0x20	; 32
   00B8 41                 4210 	.db #0x41	; 65	'A'
   00B9 83                 4211 	.db #0x83	; 131
   00BA 9B                 4212 	.db #0x9B	; 155
   00BB C4                 4213 	.db #0xC4	; 196
   00BC 08                 4214 	.db #0x08	; 8
   00BD 0C                 4215 	.db #0x0C	; 12
   00BE 10                 4216 	.db #0x10	; 16
   00BF 18                 4217 	.db #0x18	; 24
   00C0 20                 4218 	.db #0x20	; 32
   00C1 31                 4219 	.db #0x31	; 49	'1'
   00C2 40                 4220 	.db #0x40	; 64
   00C3 62                 4221 	.db #0x62	; 98	'b'
   00C4 C5                 4222 	.db #0xC5	; 197
   00C5 89                 4223 	.db #0x89	; 137
   00C6 12                 4224 	.db #0x12	; 18
   00C7 A6                 4225 	.db #0xA6	; 166
   00C8 9C                 4226 	.db #0x9C	; 156
   00C9 31                 4227 	.db #0x31	; 49	'1'
   00CA 4A                 4228 	.db #0x4A	; 74	'J'
   00CB 62                 4229 	.db #0x62	; 98	'b'
   00CC 93                 4230 	.db #0x93	; 147
   00CD C5                 4231 	.db #0xC5	; 197
   00CE 27                 4232 	.db #0x27	; 39
   00CF 00                 4233 	.db #0x00	; 0
   00D0 03                 4234 	.db #0x03	; 3
   00D1 06                 4235 	.db #0x06	; 6
   00D2 0D                 4236 	.db #0x0D	; 13
   00D3 1A                 4237 	.db #0x1A	; 26
   00D4 1E                 4238 	.db #0x1E	; 30
   00D5 26                 4239 	.db #0x26	; 38
   00D6 33                 4240 	.db #0x33	; 51	'3'
   00D7 4D                 4241 	.db #0x4D	; 77	'M'
   00D8 66                 4242 	.db #0x66	; 102	'f'
   00D9 9A                 4243 	.db #0x9A	; 154
   00DA CD                 4244 	.db #0xCD	; 205
   00DB FE                 4245 	.db #0xFE	; 254
   00DC FE                 4246 	.db #0xFE	; 254
   00DD                    4247 _reg_table_470:
   00DD 2B                 4248 	.db #0x2B	; 43
   00DE 2B                 4249 	.db #0x2B	; 43
   00DF 2B                 4250 	.db #0x2B	; 43
   00E0 2E                 4251 	.db #0x2E	; 46
   00E1 16                 4252 	.db #0x16	; 22
   00E2 01                 4253 	.db #0x01	; 1
   00E3 05                 4254 	.db #0x05	; 5
   00E4 0B                 4255 	.db #0x0B	; 11
   00E5 9A                 4256 	.db #0x9A	; 154
   00E6 88                 4257 	.db #0x88	; 136
   00E7 8A                 4258 	.db #0x8A	; 138
   00E8 8C                 4259 	.db #0x8C	; 140
   00E9 8D                 4260 	.db #0x8D	; 141
   00EA 03                 4261 	.db #0x03	; 3
   00EB 03                 4262 	.db #0x03	; 3
   00EC 03                 4263 	.db #0x03	; 3
   00ED 03                 4264 	.db #0x03	; 3
   00EE 03                 4265 	.db #0x03	; 3
   00EF 03                 4266 	.db #0x03	; 3
   00F0 03                 4267 	.db #0x03	; 3
   00F1 03                 4268 	.db #0x03	; 3
   00F2 03                 4269 	.db #0x03	; 3
   00F3 03                 4270 	.db #0x03	; 3
   00F4 03                 4271 	.db #0x03	; 3
   00F5 03                 4272 	.db #0x03	; 3
   00F6 03                 4273 	.db #0x03	; 3
   00F7 F4                 4274 	.db #0xF4	; 244
   00F8 FA                 4275 	.db #0xFA	; 250
   00F9 7D                 4276 	.db #0x7D	; 125
   00FA 3F                 4277 	.db #0x3F	; 63
   00FB 69                 4278 	.db #0x69	; 105	'i'
   00FC A7                 4279 	.db #0xA7	; 167
   00FD 7D                 4280 	.db #0x7D	; 125
   00FE 53                 4281 	.db #0x53	; 83	'S'
   00FF 5E                 4282 	.db #0x5E	; 94
   0100 7D                 4283 	.db #0x7D	; 125
   0101 5E                 4284 	.db #0x5E	; 94
   0102 3F                 4285 	.db #0x3F	; 63
   0103 30                 4286 	.db #0x30	; 48	'0'
   0104 20                 4287 	.db #0x20	; 32
   0105 00                 4288 	.db #0x00	; 0
   0106 01                 4289 	.db #0x01	; 1
   0107 02                 4290 	.db #0x02	; 2
   0108 01                 4291 	.db #0x01	; 1
   0109 00                 4292 	.db #0x00	; 0
   010A 01                 4293 	.db #0x01	; 1
   010B 01                 4294 	.db #0x01	; 1
   010C 01                 4295 	.db #0x01	; 1
   010D 01                 4296 	.db #0x01	; 1
   010E 01                 4297 	.db #0x01	; 1
   010F 02                 4298 	.db #0x02	; 2
   0110 02                 4299 	.db #0x02	; 2
   0111 41                 4300 	.db #0x41	; 65	'A'
   0112 83                 4301 	.db #0x83	; 131
   0113 06                 4302 	.db #0x06	; 6
   0114 0C                 4303 	.db #0x0C	; 12
   0115 37                 4304 	.db #0x37	; 55	'7'
   0116 C4                 4305 	.db #0xC4	; 196
   0117 06                 4306 	.db #0x06	; 6
   0118 89                 4307 	.db #0x89	; 137
   0119 5D                 4308 	.db #0x5D	; 93
   011A 06                 4309 	.db #0x06	; 6
   011B 5D                 4310 	.db #0x5D	; 93
   011C 0C                 4311 	.db #0x0C	; 12
   011D AA                 4312 	.db #0xAA	; 170
   011E 89                 4313 	.db #0x89	; 137
   011F 12                 4314 	.db #0x12	; 18
   0120 25                 4315 	.db #0x25	; 37
   0121 4A                 4316 	.db #0x4A	; 74	'J'
   0122 4C                 4317 	.db #0x4C	; 76	'L'
   0123 9C                 4318 	.db #0x9C	; 156
   0124 25                 4319 	.db #0x25	; 37
   0125 37                 4320 	.db #0x37	; 55	'7'
   0126 86                 4321 	.db #0x86	; 134
   0127 25                 4322 	.db #0x25	; 37
   0128 86                 4323 	.db #0x86	; 134
   0129 4A                 4324 	.db #0x4A	; 74	'J'
   012A AB                 4325 	.db #0xAB	; 171
   012B 00                 4326 	.db #0x00	; 0
   012C 01                 4327 	.db #0x01	; 1
   012D 02                 4328 	.db #0x02	; 2
   012E 04                 4329 	.db #0x04	; 4
   012F 02                 4330 	.db #0x02	; 2
   0130 01                 4331 	.db #0x01	; 1
   0131 02                 4332 	.db #0x02	; 2
   0132 03                 4333 	.db #0x03	; 3
   0133 02                 4334 	.db #0x02	; 2
   0134 02                 4335 	.db #0x02	; 2
   0135 02                 4336 	.db #0x02	; 2
   0136 04                 4337 	.db #0x04	; 4
   0137 07                 4338 	.db #0x07	; 7
   0138 85                 4339 	.db #0x85	; 133
   0139 08                 4340 	.db #0x08	; 8
   013A 0E                 4341 	.db #0x0E	; 14
   013B 12                 4342 	.db #0x12	; 18
   013C 72                 4343 	.db #0x72	; 114	'r'
   013D 8A                 4344 	.db #0x8A	; 138
   013E 0E                 4345 	.db #0x0E	; 14
   013F 18                 4346 	.db #0x18	; 24
   0140 BB                 4347 	.db #0xBB	; 187
   0141 0E                 4348 	.db #0x0E	; 14
   0142 BB                 4349 	.db #0xBB	; 187
   0143 EA                 4350 	.db #0xEA	; 234
   0144 FF                 4351 	.db #0xFF	; 255
   0145 1E                 4352 	.db #0x1E	; 30
   0146 1E                 4353 	.db #0x1E	; 30
   0147 1E                 4354 	.db #0x1E	; 30
   0148 21                 4355 	.db #0x21	; 33
   0149 21                 4356 	.db #0x21	; 33
   014A 21                 4357 	.db #0x21	; 33
   014B 21                 4358 	.db #0x21	; 33
   014C 30                 4359 	.db #0x30	; 48	'0'
   014D 41                 4360 	.db #0x41	; 65	'A'
   014E 50                 4361 	.db #0x50	; 80	'P'
   014F 50                 4362 	.db #0x50	; 80	'P'
   0150 50                 4363 	.db #0x50	; 80	'P'
   0151 50                 4364 	.db #0x50	; 80	'P'
   0152 10                 4365 	.db #0x10	; 16
   0153 20                 4366 	.db #0x20	; 32
   0154 41                 4367 	.db #0x41	; 65	'A'
   0155 83                 4368 	.db #0x83	; 131
   0156 9B                 4369 	.db #0x9B	; 155
   0157 C4                 4370 	.db #0xC4	; 196
   0158 08                 4371 	.db #0x08	; 8
   0159 0C                 4372 	.db #0x0C	; 12
   015A 10                 4373 	.db #0x10	; 16
   015B 18                 4374 	.db #0x18	; 24
   015C 20                 4375 	.db #0x20	; 32
   015D 31                 4376 	.db #0x31	; 49	'1'
   015E 40                 4377 	.db #0x40	; 64
   015F 62                 4378 	.db #0x62	; 98	'b'
   0160 C5                 4379 	.db #0xC5	; 197
   0161 89                 4380 	.db #0x89	; 137
   0162 12                 4381 	.db #0x12	; 18
   0163 A6                 4382 	.db #0xA6	; 166
   0164 9C                 4383 	.db #0x9C	; 156
   0165 31                 4384 	.db #0x31	; 49	'1'
   0166 4A                 4385 	.db #0x4A	; 74	'J'
   0167 62                 4386 	.db #0x62	; 98	'b'
   0168 93                 4387 	.db #0x93	; 147
   0169 C5                 4388 	.db #0xC5	; 197
   016A 27                 4389 	.db #0x27	; 39
   016B 00                 4390 	.db #0x00	; 0
   016C 03                 4391 	.db #0x03	; 3
   016D 06                 4392 	.db #0x06	; 6
   016E 0D                 4393 	.db #0x0D	; 13
   016F 1A                 4394 	.db #0x1A	; 26
   0170 1E                 4395 	.db #0x1E	; 30
   0171 26                 4396 	.db #0x26	; 38
   0172 33                 4397 	.db #0x33	; 51	'3'
   0173 4D                 4398 	.db #0x4D	; 77	'M'
   0174 66                 4399 	.db #0x66	; 102	'f'
   0175 9A                 4400 	.db #0x9A	; 154
   0176 CD                 4401 	.db #0xCD	; 205
   0177 FE                 4402 	.db #0xFE	; 254
   0178 FE                 4403 	.db #0xFE	; 254
   0179                    4404 _reg_table_868:
   0179 01                 4405 	.db #0x01	; 1
   017A 01                 4406 	.db #0x01	; 1
   017B 01                 4407 	.db #0x01	; 1
   017C 01                 4408 	.db #0x01	; 1
   017D 01                 4409 	.db #0x01	; 1
   017E 01                 4410 	.db #0x01	; 1
   017F 05                 4411 	.db #0x05	; 5
   0180 0B                 4412 	.db #0x0B	; 11
   0181 9A                 4413 	.db #0x9A	; 154
   0182 88                 4414 	.db #0x88	; 136
   0183 8A                 4415 	.db #0x8A	; 138
   0184 8C                 4416 	.db #0x8C	; 140
   0185 8D                 4417 	.db #0x8D	; 141
   0186 03                 4418 	.db #0x03	; 3
   0187 03                 4419 	.db #0x03	; 3
   0188 03                 4420 	.db #0x03	; 3
   0189 03                 4421 	.db #0x03	; 3
   018A 03                 4422 	.db #0x03	; 3
   018B 03                 4423 	.db #0x03	; 3
   018C 03                 4424 	.db #0x03	; 3
   018D 03                 4425 	.db #0x03	; 3
   018E 03                 4426 	.db #0x03	; 3
   018F 03                 4427 	.db #0x03	; 3
   0190 03                 4428 	.db #0x03	; 3
   0191 03                 4429 	.db #0x03	; 3
   0192 03                 4430 	.db #0x03	; 3
   0193 D0                 4431 	.db #0xD0	; 208
   0194 E8                 4432 	.db #0xE8	; 232
   0195 F4                 4433 	.db #0xF4	; 244
   0196 FA                 4434 	.db #0xFA	; 250
   0197 D3                 4435 	.db #0xD3	; 211
   0198 A7                 4436 	.db #0xA7	; 167
   0199 7D                 4437 	.db #0x7D	; 125
   019A 53                 4438 	.db #0x53	; 83	'S'
   019B 5E                 4439 	.db #0x5E	; 94
   019C 7D                 4440 	.db #0x7D	; 125
   019D 5E                 4441 	.db #0x5E	; 94
   019E 3F                 4442 	.db #0x3F	; 63
   019F 30                 4443 	.db #0x30	; 48	'0'
   01A0 E0                 4444 	.db #0xE0	; 224
   01A1 60                 4445 	.db #0x60	; 96
   01A2 20                 4446 	.db #0x20	; 32
   01A3 00                 4447 	.db #0x00	; 0
   01A4 00                 4448 	.db #0x00	; 0
   01A5 00                 4449 	.db #0x00	; 0
   01A6 01                 4450 	.db #0x01	; 1
   01A7 01                 4451 	.db #0x01	; 1
   01A8 01                 4452 	.db #0x01	; 1
   01A9 01                 4453 	.db #0x01	; 1
   01AA 01                 4454 	.db #0x01	; 1
   01AB 02                 4455 	.db #0x02	; 2
   01AC 02                 4456 	.db #0x02	; 2
   01AD 10                 4457 	.db #0x10	; 16
   01AE 20                 4458 	.db #0x20	; 32
   01AF 41                 4459 	.db #0x41	; 65	'A'
   01B0 83                 4460 	.db #0x83	; 131
   01B1 9B                 4461 	.db #0x9B	; 155
   01B2 C4                 4462 	.db #0xC4	; 196
   01B3 06                 4463 	.db #0x06	; 6
   01B4 89                 4464 	.db #0x89	; 137
   01B5 5D                 4465 	.db #0x5D	; 93
   01B6 06                 4466 	.db #0x06	; 6
   01B7 5D                 4467 	.db #0x5D	; 93
   01B8 0C                 4468 	.db #0x0C	; 12
   01B9 AA                 4469 	.db #0xAA	; 170
   01BA 62                 4470 	.db #0x62	; 98	'b'
   01BB C5                 4471 	.db #0xC5	; 197
   01BC 89                 4472 	.db #0x89	; 137
   01BD 12                 4473 	.db #0x12	; 18
   01BE A6                 4474 	.db #0xA6	; 166
   01BF 9C                 4475 	.db #0x9C	; 156
   01C0 25                 4476 	.db #0x25	; 37
   01C1 37                 4477 	.db #0x37	; 55	'7'
   01C2 86                 4478 	.db #0x86	; 134
   01C3 25                 4479 	.db #0x25	; 37
   01C4 86                 4480 	.db #0x86	; 134
   01C5 4A                 4481 	.db #0x4A	; 74	'J'
   01C6 AB                 4482 	.db #0xAB	; 171
   01C7 00                 4483 	.db #0x00	; 0
   01C8 00                 4484 	.db #0x00	; 0
   01C9 00                 4485 	.db #0x00	; 0
   01CA 01                 4486 	.db #0x01	; 1
   01CB 01                 4487 	.db #0x01	; 1
   01CC 01                 4488 	.db #0x01	; 1
   01CD 02                 4489 	.db #0x02	; 2
   01CE 03                 4490 	.db #0x03	; 3
   01CF 02                 4491 	.db #0x02	; 2
   01D0 02                 4492 	.db #0x02	; 2
   01D1 02                 4493 	.db #0x02	; 2
   01D2 04                 4494 	.db #0x04	; 4
   01D3 07                 4495 	.db #0x07	; 7
   01D4 23                 4496 	.db #0x23	; 35
   01D5 44                 4497 	.db #0x44	; 68	'D'
   01D6 85                 4498 	.db #0x85	; 133
   01D7 08                 4499 	.db #0x08	; 8
   01D8 39                 4500 	.db #0x39	; 57	'9'
   01D9 8A                 4501 	.db #0x8A	; 138
   01DA 0E                 4502 	.db #0x0E	; 14
   01DB 18                 4503 	.db #0x18	; 24
   01DC BB                 4504 	.db #0xBB	; 187
   01DD 0E                 4505 	.db #0x0E	; 14
   01DE BB                 4506 	.db #0xBB	; 187
   01DF EA                 4507 	.db #0xEA	; 234
   01E0 FF                 4508 	.db #0xFF	; 255
   01E1 1C                 4509 	.db #0x1C	; 28
   01E2 1C                 4510 	.db #0x1C	; 28
   01E3 1C                 4511 	.db #0x1C	; 28
   01E4 1C                 4512 	.db #0x1C	; 28
   01E5 1C                 4513 	.db #0x1C	; 28
   01E6 1E                 4514 	.db #0x1E	; 30
   01E7 20                 4515 	.db #0x20	; 32
   01E8 30                 4516 	.db #0x30	; 48	'0'
   01E9 41                 4517 	.db #0x41	; 65	'A'
   01EA 50                 4518 	.db #0x50	; 80	'P'
   01EB 50                 4519 	.db #0x50	; 80	'P'
   01EC 50                 4520 	.db #0x50	; 80	'P'
   01ED 50                 4521 	.db #0x50	; 80	'P'
   01EE 10                 4522 	.db #0x10	; 16
   01EF 20                 4523 	.db #0x20	; 32
   01F0 41                 4524 	.db #0x41	; 65	'A'
   01F1 83                 4525 	.db #0x83	; 131
   01F2 9B                 4526 	.db #0x9B	; 155
   01F3 C4                 4527 	.db #0xC4	; 196
   01F4 08                 4528 	.db #0x08	; 8
   01F5 0C                 4529 	.db #0x0C	; 12
   01F6 10                 4530 	.db #0x10	; 16
   01F7 18                 4531 	.db #0x18	; 24
   01F8 20                 4532 	.db #0x20	; 32
   01F9 31                 4533 	.db #0x31	; 49	'1'
   01FA 40                 4534 	.db #0x40	; 64
   01FB 62                 4535 	.db #0x62	; 98	'b'
   01FC C5                 4536 	.db #0xC5	; 197
   01FD 89                 4537 	.db #0x89	; 137
   01FE 12                 4538 	.db #0x12	; 18
   01FF A6                 4539 	.db #0xA6	; 166
   0200 9C                 4540 	.db #0x9C	; 156
   0201 31                 4541 	.db #0x31	; 49	'1'
   0202 4A                 4542 	.db #0x4A	; 74	'J'
   0203 62                 4543 	.db #0x62	; 98	'b'
   0204 93                 4544 	.db #0x93	; 147
   0205 C5                 4545 	.db #0xC5	; 197
   0206 27                 4546 	.db #0x27	; 39
   0207 00                 4547 	.db #0x00	; 0
   0208 03                 4548 	.db #0x03	; 3
   0209 06                 4549 	.db #0x06	; 6
   020A 0D                 4550 	.db #0x0D	; 13
   020B 1A                 4551 	.db #0x1A	; 26
   020C 1E                 4552 	.db #0x1E	; 30
   020D 26                 4553 	.db #0x26	; 38
   020E 33                 4554 	.db #0x33	; 51	'3'
   020F 4D                 4555 	.db #0x4D	; 77	'M'
   0210 66                 4556 	.db #0x66	; 102	'f'
   0211 9A                 4557 	.db #0x9A	; 154
   0212 CD                 4558 	.db #0xCD	; 205
   0213 FE                 4559 	.db #0xFE	; 254
   0214 FE                 4560 	.db #0xFE	; 254
   0215                    4561 _reg_table_915:
   0215 01                 4562 	.db #0x01	; 1
   0216 01                 4563 	.db #0x01	; 1
   0217 01                 4564 	.db #0x01	; 1
   0218 01                 4565 	.db #0x01	; 1
   0219 01                 4566 	.db #0x01	; 1
   021A 01                 4567 	.db #0x01	; 1
   021B 05                 4568 	.db #0x05	; 5
   021C 0B                 4569 	.db #0x0B	; 11
   021D 9A                 4570 	.db #0x9A	; 154
   021E 88                 4571 	.db #0x88	; 136
   021F 8A                 4572 	.db #0x8A	; 138
   0220 8C                 4573 	.db #0x8C	; 140
   0221 8D                 4574 	.db #0x8D	; 141
   0222 03                 4575 	.db #0x03	; 3
   0223 03                 4576 	.db #0x03	; 3
   0224 03                 4577 	.db #0x03	; 3
   0225 03                 4578 	.db #0x03	; 3
   0226 03                 4579 	.db #0x03	; 3
   0227 03                 4580 	.db #0x03	; 3
   0228 03                 4581 	.db #0x03	; 3
   0229 03                 4582 	.db #0x03	; 3
   022A 03                 4583 	.db #0x03	; 3
   022B 03                 4584 	.db #0x03	; 3
   022C 03                 4585 	.db #0x03	; 3
   022D 03                 4586 	.db #0x03	; 3
   022E 03                 4587 	.db #0x03	; 3
   022F D0                 4588 	.db #0xD0	; 208
   0230 E8                 4589 	.db #0xE8	; 232
   0231 F4                 4590 	.db #0xF4	; 244
   0232 FA                 4591 	.db #0xFA	; 250
   0233 D3                 4592 	.db #0xD3	; 211
   0234 A7                 4593 	.db #0xA7	; 167
   0235 7D                 4594 	.db #0x7D	; 125
   0236 53                 4595 	.db #0x53	; 83	'S'
   0237 5E                 4596 	.db #0x5E	; 94
   0238 7D                 4597 	.db #0x7D	; 125
   0239 5E                 4598 	.db #0x5E	; 94
   023A 3F                 4599 	.db #0x3F	; 63
   023B 30                 4600 	.db #0x30	; 48	'0'
   023C E0                 4601 	.db #0xE0	; 224
   023D 60                 4602 	.db #0x60	; 96
   023E 20                 4603 	.db #0x20	; 32
   023F 00                 4604 	.db #0x00	; 0
   0240 00                 4605 	.db #0x00	; 0
   0241 00                 4606 	.db #0x00	; 0
   0242 01                 4607 	.db #0x01	; 1
   0243 01                 4608 	.db #0x01	; 1
   0244 01                 4609 	.db #0x01	; 1
   0245 01                 4610 	.db #0x01	; 1
   0246 01                 4611 	.db #0x01	; 1
   0247 02                 4612 	.db #0x02	; 2
   0248 02                 4613 	.db #0x02	; 2
   0249 10                 4614 	.db #0x10	; 16
   024A 20                 4615 	.db #0x20	; 32
   024B 41                 4616 	.db #0x41	; 65	'A'
   024C 83                 4617 	.db #0x83	; 131
   024D 9B                 4618 	.db #0x9B	; 155
   024E C4                 4619 	.db #0xC4	; 196
   024F 06                 4620 	.db #0x06	; 6
   0250 89                 4621 	.db #0x89	; 137
   0251 5D                 4622 	.db #0x5D	; 93
   0252 06                 4623 	.db #0x06	; 6
   0253 5D                 4624 	.db #0x5D	; 93
   0254 0C                 4625 	.db #0x0C	; 12
   0255 AA                 4626 	.db #0xAA	; 170
   0256 62                 4627 	.db #0x62	; 98	'b'
   0257 C5                 4628 	.db #0xC5	; 197
   0258 89                 4629 	.db #0x89	; 137
   0259 12                 4630 	.db #0x12	; 18
   025A A6                 4631 	.db #0xA6	; 166
   025B 9C                 4632 	.db #0x9C	; 156
   025C 25                 4633 	.db #0x25	; 37
   025D 37                 4634 	.db #0x37	; 55	'7'
   025E 86                 4635 	.db #0x86	; 134
   025F 25                 4636 	.db #0x25	; 37
   0260 86                 4637 	.db #0x86	; 134
   0261 4A                 4638 	.db #0x4A	; 74	'J'
   0262 AB                 4639 	.db #0xAB	; 171
   0263 00                 4640 	.db #0x00	; 0
   0264 00                 4641 	.db #0x00	; 0
   0265 00                 4642 	.db #0x00	; 0
   0266 01                 4643 	.db #0x01	; 1
   0267 01                 4644 	.db #0x01	; 1
   0268 01                 4645 	.db #0x01	; 1
   0269 02                 4646 	.db #0x02	; 2
   026A 03                 4647 	.db #0x03	; 3
   026B 02                 4648 	.db #0x02	; 2
   026C 02                 4649 	.db #0x02	; 2
   026D 02                 4650 	.db #0x02	; 2
   026E 04                 4651 	.db #0x04	; 4
   026F 07                 4652 	.db #0x07	; 7
   0270 23                 4653 	.db #0x23	; 35
   0271 44                 4654 	.db #0x44	; 68	'D'
   0272 85                 4655 	.db #0x85	; 133
   0273 08                 4656 	.db #0x08	; 8
   0274 39                 4657 	.db #0x39	; 57	'9'
   0275 8A                 4658 	.db #0x8A	; 138
   0276 0E                 4659 	.db #0x0E	; 14
   0277 18                 4660 	.db #0x18	; 24
   0278 BB                 4661 	.db #0xBB	; 187
   0279 0E                 4662 	.db #0x0E	; 14
   027A BB                 4663 	.db #0xBB	; 187
   027B EA                 4664 	.db #0xEA	; 234
   027C FF                 4665 	.db #0xFF	; 255
   027D 1E                 4666 	.db #0x1E	; 30
   027E 1E                 4667 	.db #0x1E	; 30
   027F 1E                 4668 	.db #0x1E	; 30
   0280 1E                 4669 	.db #0x1E	; 30
   0281 1E                 4670 	.db #0x1E	; 30
   0282 1E                 4671 	.db #0x1E	; 30
   0283 20                 4672 	.db #0x20	; 32
   0284 30                 4673 	.db #0x30	; 48	'0'
   0285 41                 4674 	.db #0x41	; 65	'A'
   0286 50                 4675 	.db #0x50	; 80	'P'
   0287 50                 4676 	.db #0x50	; 80	'P'
   0288 50                 4677 	.db #0x50	; 80	'P'
   0289 50                 4678 	.db #0x50	; 80	'P'
   028A 10                 4679 	.db #0x10	; 16
   028B 20                 4680 	.db #0x20	; 32
   028C 41                 4681 	.db #0x41	; 65	'A'
   028D 83                 4682 	.db #0x83	; 131
   028E 9B                 4683 	.db #0x9B	; 155
   028F C4                 4684 	.db #0xC4	; 196
   0290 08                 4685 	.db #0x08	; 8
   0291 0C                 4686 	.db #0x0C	; 12
   0292 10                 4687 	.db #0x10	; 16
   0293 18                 4688 	.db #0x18	; 24
   0294 20                 4689 	.db #0x20	; 32
   0295 31                 4690 	.db #0x31	; 49	'1'
   0296 40                 4691 	.db #0x40	; 64
   0297 62                 4692 	.db #0x62	; 98	'b'
   0298 C5                 4693 	.db #0xC5	; 197
   0299 89                 4694 	.db #0x89	; 137
   029A 12                 4695 	.db #0x12	; 18
   029B A6                 4696 	.db #0xA6	; 166
   029C 9C                 4697 	.db #0x9C	; 156
   029D 31                 4698 	.db #0x31	; 49	'1'
   029E 4A                 4699 	.db #0x4A	; 74	'J'
   029F 62                 4700 	.db #0x62	; 98	'b'
   02A0 93                 4701 	.db #0x93	; 147
   02A1 C5                 4702 	.db #0xC5	; 197
   02A2 27                 4703 	.db #0x27	; 39
   02A3 00                 4704 	.db #0x00	; 0
   02A4 03                 4705 	.db #0x03	; 3
   02A5 06                 4706 	.db #0x06	; 6
   02A6 0D                 4707 	.db #0x0D	; 13
   02A7 1A                 4708 	.db #0x1A	; 26
   02A8 1E                 4709 	.db #0x1E	; 30
   02A9 26                 4710 	.db #0x26	; 38
   02AA 33                 4711 	.db #0x33	; 51	'3'
   02AB 4D                 4712 	.db #0x4D	; 77	'M'
   02AC 66                 4713 	.db #0x66	; 102	'f'
   02AD 9A                 4714 	.db #0x9A	; 154
   02AE CD                 4715 	.db #0xCD	; 205
   02AF FE                 4716 	.db #0xFE	; 254
   02B0 FE                 4717 	.db #0xFE	; 254
   02B1                    4718 _power_levels:
   02B1 EB                 4719 	.db #0xEB	; 235
   02B2 E6                 4720 	.db #0xE6	; 230
   02B3 E0                 4721 	.db #0xE0	; 224
   02B4 DA                 4722 	.db #0xDA	; 218
   02B5 D3                 4723 	.db #0xD3	; 211
   02B6 CE                 4724 	.db #0xCE	; 206
   02B7 C9                 4725 	.db #0xC9	; 201
   02B8 C4                 4726 	.db #0xC4	; 196
   02B9 BE                 4727 	.db #0xBE	; 190
   02BA B8                 4728 	.db #0xB8	; 184
   02BB B2                 4729 	.db #0xB2	; 178
   02BC AB                 4730 	.db #0xAB	; 171
   02BD A4                 4731 	.db #0xA4	; 164
   02BE 96                 4732 	.db #0x96	; 150
   02BF 88                 4733 	.db #0x88	; 136
   02C0 50                 4734 	.db #0x50	; 80	'P'
                           4735 	.area XINIT   (CODE)
                           4736 	.area CABS    (ABS,CODE)
