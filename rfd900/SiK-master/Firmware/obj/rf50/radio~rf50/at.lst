                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.3.0 #8604 (May 11 2013) (Linux)
                              4 ; This file was generated Sun Nov 24 17:43:05 2013
                              5 ;--------------------------------------------------------
                              6 	.module at
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _tdm_show_rssi
                             13 	.globl _tdm_change_phase
                             14 	.globl _tdm_remote_at
                             15 	.globl _tdm_report_timing
                             16 	.globl _printfl
                             17 	.globl _param_default
                             18 	.globl _param_save
                             19 	.globl _param_name
                             20 	.globl _param_get
                             21 	.globl _param_set
                             22 	.globl _strcmp
                             23 	.globl _putchar
                             24 	.globl _isprint
                             25 	.globl _islower
                             26 	.globl _isdigit
                             27 	.globl _TDM_SYNC_PIN
                             28 	.globl _SDN
                             29 	.globl _NSS1
                             30 	.globl _IRQ
                             31 	.globl _BUTTON_DOWN
                             32 	.globl _BUTTON_UP
                             33 	.globl _BUTTON_ENTER
                             34 	.globl _LED_GREEN
                             35 	.globl _LED_RED
                             36 	.globl _SPI0EN
                             37 	.globl _TXBMT0
                             38 	.globl _NSS0MD0
                             39 	.globl _NSS0MD1
                             40 	.globl _RXOVRN0
                             41 	.globl _MODF0
                             42 	.globl _WCOL0
                             43 	.globl _SPIF0
                             44 	.globl _AD0CM0
                             45 	.globl _AD0CM1
                             46 	.globl _AD0CM2
                             47 	.globl _AD0WINT
                             48 	.globl _AD0BUSY
                             49 	.globl _AD0INT
                             50 	.globl _BURSTEN
                             51 	.globl _AD0EN
                             52 	.globl _CCF0
                             53 	.globl _CCF1
                             54 	.globl _CCF2
                             55 	.globl _CCF3
                             56 	.globl _CCF4
                             57 	.globl _CCF5
                             58 	.globl _CR
                             59 	.globl _CF
                             60 	.globl _P
                             61 	.globl _F1
                             62 	.globl _OV
                             63 	.globl _RS0
                             64 	.globl _RS1
                             65 	.globl _F0
                             66 	.globl _AC
                             67 	.globl _CY
                             68 	.globl _T2XCLK
                             69 	.globl _T2RCLK
                             70 	.globl _TR2
                             71 	.globl _T2SPLIT
                             72 	.globl _TF2CEN
                             73 	.globl _TF2LEN
                             74 	.globl _TF2L
                             75 	.globl _TF2H
                             76 	.globl _SI
                             77 	.globl _ACK
                             78 	.globl _ARBLOST
                             79 	.globl _ACKRQ
                             80 	.globl _STO
                             81 	.globl _STA
                             82 	.globl _TXMODE
                             83 	.globl _MASTER
                             84 	.globl _PX0
                             85 	.globl _PT0
                             86 	.globl _PX1
                             87 	.globl _PT1
                             88 	.globl _PS0
                             89 	.globl _PT2
                             90 	.globl _PSPI0
                             91 	.globl _SPI1EN
                             92 	.globl _TXBMT1
                             93 	.globl _NSS1MD0
                             94 	.globl _NSS1MD1
                             95 	.globl _RXOVRN1
                             96 	.globl _MODF1
                             97 	.globl _WCOL1
                             98 	.globl _SPIF1
                             99 	.globl _EX0
                            100 	.globl _ET0
                            101 	.globl _EX1
                            102 	.globl _ET1
                            103 	.globl _ES0
                            104 	.globl _ET2
                            105 	.globl _ESPI0
                            106 	.globl _EA
                            107 	.globl _RI0
                            108 	.globl _TI0
                            109 	.globl _RB80
                            110 	.globl _TB80
                            111 	.globl _REN0
                            112 	.globl _MCE0
                            113 	.globl _S0MODE
                            114 	.globl _CRC0VAL
                            115 	.globl _CRC0INIT
                            116 	.globl _CRC0SEL
                            117 	.globl _IT0
                            118 	.globl _IE0
                            119 	.globl _IT1
                            120 	.globl _IE1
                            121 	.globl _TR0
                            122 	.globl _TF0
                            123 	.globl _TR1
                            124 	.globl _TF1
                            125 	.globl _PCA0CP4
                            126 	.globl _PCA0CP0
                            127 	.globl _PCA0
                            128 	.globl _PCA0CP3
                            129 	.globl _PCA0CP2
                            130 	.globl _PCA0CP1
                            131 	.globl _PCA0CP5
                            132 	.globl _TMR2
                            133 	.globl _TMR2RL
                            134 	.globl _ADC0LT
                            135 	.globl _ADC0GT
                            136 	.globl _ADC0
                            137 	.globl _TMR3
                            138 	.globl _TMR3RL
                            139 	.globl _TOFF
                            140 	.globl _DP
                            141 	.globl _VDM0CN
                            142 	.globl _PCA0CPH4
                            143 	.globl _PCA0CPL4
                            144 	.globl _PCA0CPH0
                            145 	.globl _PCA0CPL0
                            146 	.globl _PCA0H
                            147 	.globl _PCA0L
                            148 	.globl _SPI0CN
                            149 	.globl _EIP2
                            150 	.globl _EIP1
                            151 	.globl _SMB0ADM
                            152 	.globl _SMB0ADR
                            153 	.globl _P2MDIN
                            154 	.globl _P1MDIN
                            155 	.globl _P0MDIN
                            156 	.globl _B
                            157 	.globl _RSTSRC
                            158 	.globl _PCA0CPH3
                            159 	.globl _PCA0CPL3
                            160 	.globl _PCA0CPH2
                            161 	.globl _PCA0CPL2
                            162 	.globl _PCA0CPH1
                            163 	.globl _PCA0CPL1
                            164 	.globl _ADC0CN
                            165 	.globl _EIE2
                            166 	.globl _EIE1
                            167 	.globl _FLWR
                            168 	.globl _IT01CF
                            169 	.globl _XBR2
                            170 	.globl _XBR1
                            171 	.globl _XBR0
                            172 	.globl _ACC
                            173 	.globl _PCA0PWM
                            174 	.globl _PCA0CPM4
                            175 	.globl _PCA0CPM3
                            176 	.globl _PCA0CPM2
                            177 	.globl _PCA0CPM1
                            178 	.globl _PCA0CPM0
                            179 	.globl _PCA0MD
                            180 	.globl _PCA0CN
                            181 	.globl _P0MAT
                            182 	.globl _P2SKIP
                            183 	.globl _P1SKIP
                            184 	.globl _P0SKIP
                            185 	.globl _PCA0CPH5
                            186 	.globl _PCA0CPL5
                            187 	.globl _REF0CN
                            188 	.globl _PSW
                            189 	.globl _P1MAT
                            190 	.globl _PCA0CPM5
                            191 	.globl _TMR2H
                            192 	.globl _TMR2L
                            193 	.globl _TMR2RLH
                            194 	.globl _TMR2RLL
                            195 	.globl _REG0CN
                            196 	.globl _TMR2CN
                            197 	.globl _P0MASK
                            198 	.globl _ADC0LTH
                            199 	.globl _ADC0LTL
                            200 	.globl _ADC0GTH
                            201 	.globl _ADC0GTL
                            202 	.globl _SMB0DAT
                            203 	.globl _SMB0CF
                            204 	.globl _SMB0CN
                            205 	.globl _P1MASK
                            206 	.globl _ADC0H
                            207 	.globl _ADC0L
                            208 	.globl _ADC0TK
                            209 	.globl _ADC0CF
                            210 	.globl _ADC0MX
                            211 	.globl _ADC0PWR
                            212 	.globl _ADC0AC
                            213 	.globl _IREF0CN
                            214 	.globl _IP
                            215 	.globl _FLKEY
                            216 	.globl _FLSCL
                            217 	.globl _PMU0CF
                            218 	.globl _OSCICL
                            219 	.globl _OSCICN
                            220 	.globl _OSCXCN
                            221 	.globl _SPI1CN
                            222 	.globl _ONESHOT
                            223 	.globl _EMI0TC
                            224 	.globl _RTC0KEY
                            225 	.globl _RTC0DAT
                            226 	.globl _RTC0ADR
                            227 	.globl _EMI0CF
                            228 	.globl _EMI0CN
                            229 	.globl _CLKSEL
                            230 	.globl _IE
                            231 	.globl _SFRPAGE
                            232 	.globl _P2DRV
                            233 	.globl _P2MDOUT
                            234 	.globl _P1DRV
                            235 	.globl _P1MDOUT
                            236 	.globl _P0DRV
                            237 	.globl _P0MDOUT
                            238 	.globl _SPI0DAT
                            239 	.globl _SPI0CKR
                            240 	.globl _SPI0CFG
                            241 	.globl _P2
                            242 	.globl _CPT0MX
                            243 	.globl _CPT1MX
                            244 	.globl _CPT0MD
                            245 	.globl _CPT1MD
                            246 	.globl _CPT0CN
                            247 	.globl _CPT1CN
                            248 	.globl _SBUF0
                            249 	.globl _SCON0
                            250 	.globl _CRC0CNT
                            251 	.globl _DC0CN
                            252 	.globl _CRC0AUTO
                            253 	.globl _DC0CF
                            254 	.globl _TMR3H
                            255 	.globl _CRC0FLIP
                            256 	.globl _TMR3L
                            257 	.globl _CRC0IN
                            258 	.globl _TMR3RLH
                            259 	.globl _CRC0CN
                            260 	.globl _TMR3RLL
                            261 	.globl _CRC0DAT
                            262 	.globl _TMR3CN
                            263 	.globl _P1
                            264 	.globl _PSCTL
                            265 	.globl _CKCON
                            266 	.globl _TH1
                            267 	.globl _TH0
                            268 	.globl _TL1
                            269 	.globl _TL0
                            270 	.globl _TMOD
                            271 	.globl _TCON
                            272 	.globl _PCON
                            273 	.globl _TOFFH
                            274 	.globl _SPI1DAT
                            275 	.globl _TOFFL
                            276 	.globl _SPI1CKR
                            277 	.globl _SPI1CFG
                            278 	.globl _DPH
                            279 	.globl _DPL
                            280 	.globl _SP
                            281 	.globl _P0
                            282 	.globl _idx
                            283 	.globl _at_testmode
                            284 	.globl _at_cmd_len
                            285 	.globl _at_cmd
                            286 	.globl _pdata_canary
                            287 	.globl _at_cmd_ready
                            288 	.globl _at_mode_active
                            289 	.globl _at_input
                            290 	.globl _at_plus_detector
                            291 	.globl _at_timer
                            292 	.globl _at_command
                            293 ;--------------------------------------------------------
                            294 ; special function registers
                            295 ;--------------------------------------------------------
                            296 	.area RSEG    (ABS,DATA)
   0000                     297 	.org 0x0000
                     0080   298 _P0	=	0x0080
                     0081   299 _SP	=	0x0081
                     0082   300 _DPL	=	0x0082
                     0083   301 _DPH	=	0x0083
                     0084   302 _SPI1CFG	=	0x0084
                     0085   303 _SPI1CKR	=	0x0085
                     0085   304 _TOFFL	=	0x0085
                     0086   305 _SPI1DAT	=	0x0086
                     0086   306 _TOFFH	=	0x0086
                     0087   307 _PCON	=	0x0087
                     0088   308 _TCON	=	0x0088
                     0089   309 _TMOD	=	0x0089
                     008A   310 _TL0	=	0x008a
                     008B   311 _TL1	=	0x008b
                     008C   312 _TH0	=	0x008c
                     008D   313 _TH1	=	0x008d
                     008E   314 _CKCON	=	0x008e
                     008F   315 _PSCTL	=	0x008f
                     0090   316 _P1	=	0x0090
                     0091   317 _TMR3CN	=	0x0091
                     0091   318 _CRC0DAT	=	0x0091
                     0092   319 _TMR3RLL	=	0x0092
                     0092   320 _CRC0CN	=	0x0092
                     0093   321 _TMR3RLH	=	0x0093
                     0093   322 _CRC0IN	=	0x0093
                     0094   323 _TMR3L	=	0x0094
                     0095   324 _CRC0FLIP	=	0x0095
                     0095   325 _TMR3H	=	0x0095
                     0096   326 _DC0CF	=	0x0096
                     0096   327 _CRC0AUTO	=	0x0096
                     0097   328 _DC0CN	=	0x0097
                     0097   329 _CRC0CNT	=	0x0097
                     0098   330 _SCON0	=	0x0098
                     0099   331 _SBUF0	=	0x0099
                     009A   332 _CPT1CN	=	0x009a
                     009B   333 _CPT0CN	=	0x009b
                     009C   334 _CPT1MD	=	0x009c
                     009D   335 _CPT0MD	=	0x009d
                     009E   336 _CPT1MX	=	0x009e
                     009F   337 _CPT0MX	=	0x009f
                     00A0   338 _P2	=	0x00a0
                     00A1   339 _SPI0CFG	=	0x00a1
                     00A2   340 _SPI0CKR	=	0x00a2
                     00A3   341 _SPI0DAT	=	0x00a3
                     00A4   342 _P0MDOUT	=	0x00a4
                     00A4   343 _P0DRV	=	0x00a4
                     00A5   344 _P1MDOUT	=	0x00a5
                     00A5   345 _P1DRV	=	0x00a5
                     00A6   346 _P2MDOUT	=	0x00a6
                     00A6   347 _P2DRV	=	0x00a6
                     00A7   348 _SFRPAGE	=	0x00a7
                     00A8   349 _IE	=	0x00a8
                     00A9   350 _CLKSEL	=	0x00a9
                     00AA   351 _EMI0CN	=	0x00aa
                     00AB   352 _EMI0CF	=	0x00ab
                     00AC   353 _RTC0ADR	=	0x00ac
                     00AD   354 _RTC0DAT	=	0x00ad
                     00AE   355 _RTC0KEY	=	0x00ae
                     00AF   356 _EMI0TC	=	0x00af
                     00AF   357 _ONESHOT	=	0x00af
                     00B0   358 _SPI1CN	=	0x00b0
                     00B1   359 _OSCXCN	=	0x00b1
                     00B2   360 _OSCICN	=	0x00b2
                     00B3   361 _OSCICL	=	0x00b3
                     00B5   362 _PMU0CF	=	0x00b5
                     00B6   363 _FLSCL	=	0x00b6
                     00B7   364 _FLKEY	=	0x00b7
                     00B8   365 _IP	=	0x00b8
                     00B9   366 _IREF0CN	=	0x00b9
                     00BA   367 _ADC0AC	=	0x00ba
                     00BA   368 _ADC0PWR	=	0x00ba
                     00BB   369 _ADC0MX	=	0x00bb
                     00BC   370 _ADC0CF	=	0x00bc
                     00BD   371 _ADC0TK	=	0x00bd
                     00BD   372 _ADC0L	=	0x00bd
                     00BE   373 _ADC0H	=	0x00be
                     00BF   374 _P1MASK	=	0x00bf
                     00C0   375 _SMB0CN	=	0x00c0
                     00C1   376 _SMB0CF	=	0x00c1
                     00C2   377 _SMB0DAT	=	0x00c2
                     00C3   378 _ADC0GTL	=	0x00c3
                     00C4   379 _ADC0GTH	=	0x00c4
                     00C5   380 _ADC0LTL	=	0x00c5
                     00C6   381 _ADC0LTH	=	0x00c6
                     00C7   382 _P0MASK	=	0x00c7
                     00C8   383 _TMR2CN	=	0x00c8
                     00C9   384 _REG0CN	=	0x00c9
                     00CA   385 _TMR2RLL	=	0x00ca
                     00CB   386 _TMR2RLH	=	0x00cb
                     00CC   387 _TMR2L	=	0x00cc
                     00CD   388 _TMR2H	=	0x00cd
                     00CE   389 _PCA0CPM5	=	0x00ce
                     00CF   390 _P1MAT	=	0x00cf
                     00D0   391 _PSW	=	0x00d0
                     00D1   392 _REF0CN	=	0x00d1
                     00D2   393 _PCA0CPL5	=	0x00d2
                     00D3   394 _PCA0CPH5	=	0x00d3
                     00D4   395 _P0SKIP	=	0x00d4
                     00D5   396 _P1SKIP	=	0x00d5
                     00D6   397 _P2SKIP	=	0x00d6
                     00D7   398 _P0MAT	=	0x00d7
                     00D8   399 _PCA0CN	=	0x00d8
                     00D9   400 _PCA0MD	=	0x00d9
                     00DA   401 _PCA0CPM0	=	0x00da
                     00DB   402 _PCA0CPM1	=	0x00db
                     00DC   403 _PCA0CPM2	=	0x00dc
                     00DD   404 _PCA0CPM3	=	0x00dd
                     00DE   405 _PCA0CPM4	=	0x00de
                     00DF   406 _PCA0PWM	=	0x00df
                     00E0   407 _ACC	=	0x00e0
                     00E1   408 _XBR0	=	0x00e1
                     00E2   409 _XBR1	=	0x00e2
                     00E3   410 _XBR2	=	0x00e3
                     00E4   411 _IT01CF	=	0x00e4
                     00E5   412 _FLWR	=	0x00e5
                     00E6   413 _EIE1	=	0x00e6
                     00E7   414 _EIE2	=	0x00e7
                     00E8   415 _ADC0CN	=	0x00e8
                     00E9   416 _PCA0CPL1	=	0x00e9
                     00EA   417 _PCA0CPH1	=	0x00ea
                     00EB   418 _PCA0CPL2	=	0x00eb
                     00EC   419 _PCA0CPH2	=	0x00ec
                     00ED   420 _PCA0CPL3	=	0x00ed
                     00EE   421 _PCA0CPH3	=	0x00ee
                     00EF   422 _RSTSRC	=	0x00ef
                     00F0   423 _B	=	0x00f0
                     00F1   424 _P0MDIN	=	0x00f1
                     00F2   425 _P1MDIN	=	0x00f2
                     00F3   426 _P2MDIN	=	0x00f3
                     00F4   427 _SMB0ADR	=	0x00f4
                     00F5   428 _SMB0ADM	=	0x00f5
                     00F6   429 _EIP1	=	0x00f6
                     00F7   430 _EIP2	=	0x00f7
                     00F8   431 _SPI0CN	=	0x00f8
                     00F9   432 _PCA0L	=	0x00f9
                     00FA   433 _PCA0H	=	0x00fa
                     00FB   434 _PCA0CPL0	=	0x00fb
                     00FC   435 _PCA0CPH0	=	0x00fc
                     00FD   436 _PCA0CPL4	=	0x00fd
                     00FE   437 _PCA0CPH4	=	0x00fe
                     00FF   438 _VDM0CN	=	0x00ff
                     8382   439 _DP	=	0x8382
                     8685   440 _TOFF	=	0x8685
                     9392   441 _TMR3RL	=	0x9392
                     9594   442 _TMR3	=	0x9594
                     BEBD   443 _ADC0	=	0xbebd
                     C4C3   444 _ADC0GT	=	0xc4c3
                     C6C5   445 _ADC0LT	=	0xc6c5
                     CBCA   446 _TMR2RL	=	0xcbca
                     CDCC   447 _TMR2	=	0xcdcc
                     D3D2   448 _PCA0CP5	=	0xd3d2
                     EAE9   449 _PCA0CP1	=	0xeae9
                     ECEB   450 _PCA0CP2	=	0xeceb
                     EEED   451 _PCA0CP3	=	0xeeed
                     FAF9   452 _PCA0	=	0xfaf9
                     FCFB   453 _PCA0CP0	=	0xfcfb
                     FEFD   454 _PCA0CP4	=	0xfefd
                            455 ;--------------------------------------------------------
                            456 ; special function bits
                            457 ;--------------------------------------------------------
                            458 	.area RSEG    (ABS,DATA)
   0000                     459 	.org 0x0000
                     008F   460 _TF1	=	0x008f
                     008E   461 _TR1	=	0x008e
                     008D   462 _TF0	=	0x008d
                     008C   463 _TR0	=	0x008c
                     008B   464 _IE1	=	0x008b
                     008A   465 _IT1	=	0x008a
                     0089   466 _IE0	=	0x0089
                     0088   467 _IT0	=	0x0088
                     0096   468 _CRC0SEL	=	0x0096
                     0095   469 _CRC0INIT	=	0x0095
                     0094   470 _CRC0VAL	=	0x0094
                     009F   471 _S0MODE	=	0x009f
                     009D   472 _MCE0	=	0x009d
                     009C   473 _REN0	=	0x009c
                     009B   474 _TB80	=	0x009b
                     009A   475 _RB80	=	0x009a
                     0099   476 _TI0	=	0x0099
                     0098   477 _RI0	=	0x0098
                     00AF   478 _EA	=	0x00af
                     00AE   479 _ESPI0	=	0x00ae
                     00AD   480 _ET2	=	0x00ad
                     00AC   481 _ES0	=	0x00ac
                     00AB   482 _ET1	=	0x00ab
                     00AA   483 _EX1	=	0x00aa
                     00A9   484 _ET0	=	0x00a9
                     00A8   485 _EX0	=	0x00a8
                     00B7   486 _SPIF1	=	0x00b7
                     00B6   487 _WCOL1	=	0x00b6
                     00B5   488 _MODF1	=	0x00b5
                     00B4   489 _RXOVRN1	=	0x00b4
                     00B3   490 _NSS1MD1	=	0x00b3
                     00B2   491 _NSS1MD0	=	0x00b2
                     00B1   492 _TXBMT1	=	0x00b1
                     00B0   493 _SPI1EN	=	0x00b0
                     00BE   494 _PSPI0	=	0x00be
                     00BD   495 _PT2	=	0x00bd
                     00BC   496 _PS0	=	0x00bc
                     00BB   497 _PT1	=	0x00bb
                     00BA   498 _PX1	=	0x00ba
                     00B9   499 _PT0	=	0x00b9
                     00B8   500 _PX0	=	0x00b8
                     00C7   501 _MASTER	=	0x00c7
                     00C6   502 _TXMODE	=	0x00c6
                     00C5   503 _STA	=	0x00c5
                     00C4   504 _STO	=	0x00c4
                     00C3   505 _ACKRQ	=	0x00c3
                     00C2   506 _ARBLOST	=	0x00c2
                     00C1   507 _ACK	=	0x00c1
                     00C0   508 _SI	=	0x00c0
                     00CF   509 _TF2H	=	0x00cf
                     00CE   510 _TF2L	=	0x00ce
                     00CD   511 _TF2LEN	=	0x00cd
                     00CC   512 _TF2CEN	=	0x00cc
                     00CB   513 _T2SPLIT	=	0x00cb
                     00CA   514 _TR2	=	0x00ca
                     00C9   515 _T2RCLK	=	0x00c9
                     00C8   516 _T2XCLK	=	0x00c8
                     00D7   517 _CY	=	0x00d7
                     00D6   518 _AC	=	0x00d6
                     00D5   519 _F0	=	0x00d5
                     00D4   520 _RS1	=	0x00d4
                     00D3   521 _RS0	=	0x00d3
                     00D2   522 _OV	=	0x00d2
                     00D1   523 _F1	=	0x00d1
                     00D0   524 _P	=	0x00d0
                     00DF   525 _CF	=	0x00df
                     00DE   526 _CR	=	0x00de
                     00DD   527 _CCF5	=	0x00dd
                     00DC   528 _CCF4	=	0x00dc
                     00DB   529 _CCF3	=	0x00db
                     00DA   530 _CCF2	=	0x00da
                     00D9   531 _CCF1	=	0x00d9
                     00D8   532 _CCF0	=	0x00d8
                     00EF   533 _AD0EN	=	0x00ef
                     00EE   534 _BURSTEN	=	0x00ee
                     00ED   535 _AD0INT	=	0x00ed
                     00EC   536 _AD0BUSY	=	0x00ec
                     00EB   537 _AD0WINT	=	0x00eb
                     00EA   538 _AD0CM2	=	0x00ea
                     00E9   539 _AD0CM1	=	0x00e9
                     00E8   540 _AD0CM0	=	0x00e8
                     00FF   541 _SPIF0	=	0x00ff
                     00FE   542 _WCOL0	=	0x00fe
                     00FD   543 _MODF0	=	0x00fd
                     00FC   544 _RXOVRN0	=	0x00fc
                     00FB   545 _NSS0MD1	=	0x00fb
                     00FA   546 _NSS0MD0	=	0x00fa
                     00F9   547 _TXBMT0	=	0x00f9
                     00F8   548 _SPI0EN	=	0x00f8
                     00A0   549 _LED_RED	=	0x00a0
                     00A5   550 _LED_GREEN	=	0x00a5
                     0086   551 _BUTTON_ENTER	=	0x0086
                     0095   552 _BUTTON_UP	=	0x0095
                     0096   553 _BUTTON_DOWN	=	0x0096
                     0087   554 _IRQ	=	0x0087
                     0094   555 _NSS1	=	0x0094
                     00A6   556 _SDN	=	0x00a6
                     00A6   557 _TDM_SYNC_PIN	=	0x00a6
                            558 ;--------------------------------------------------------
                            559 ; overlayable register banks
                            560 ;--------------------------------------------------------
                            561 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     562 	.ds 8
                            563 ;--------------------------------------------------------
                            564 ; internal ram data
                            565 ;--------------------------------------------------------
                            566 	.area DSEG    (DATA)
   0000                     567 _at_i_sloc0_1_0:
   0000                     568 	.ds 4
                            569 ;--------------------------------------------------------
                            570 ; overlayable items in internal ram 
                            571 ;--------------------------------------------------------
                            572 ;--------------------------------------------------------
                            573 ; indirectly addressable internal ram data
                            574 ;--------------------------------------------------------
                            575 	.area ISEG    (DATA)
                            576 ;--------------------------------------------------------
                            577 ; absolute internal ram data
                            578 ;--------------------------------------------------------
                            579 	.area IABS    (ABS,DATA)
                            580 	.area IABS    (ABS,DATA)
                            581 ;--------------------------------------------------------
                            582 ; bit data
                            583 ;--------------------------------------------------------
                            584 	.area BSEG    (BIT)
   0000                     585 _at_mode_active::
   0000                     586 	.ds 1
   0001                     587 _at_cmd_ready::
   0001                     588 	.ds 1
                            589 ;--------------------------------------------------------
                            590 ; paged external ram data
                            591 ;--------------------------------------------------------
                            592 	.area PSEG    (PAG,XDATA)
   0000                     593 _pdata_canary::
   0000                     594 	.ds 1
   0001                     595 _at_cmd::
   0001                     596 	.ds 17
   0012                     597 _at_cmd_len::
   0012                     598 	.ds 1
   0013                     599 _at_testmode::
   0013                     600 	.ds 1
   0014                     601 _at_plus_state:
   0014                     602 	.ds 1
   0015                     603 _at_plus_counter:
   0015                     604 	.ds 1
   0016                     605 _idx::
   0016                     606 	.ds 1
                            607 ;--------------------------------------------------------
                            608 ; external ram data
                            609 ;--------------------------------------------------------
                            610 	.area XSEG    (XDATA)
   0000                     611 _at_ampersand_x_3_168:
   0000                     612 	.ds 1
                            613 ;--------------------------------------------------------
                            614 ; absolute external ram data
                            615 ;--------------------------------------------------------
                            616 	.area XABS    (ABS,XDATA)
                            617 ;--------------------------------------------------------
                            618 ; external initialized ram data
                            619 ;--------------------------------------------------------
                            620 	.area XISEG   (XDATA)
                            621 	.area HOME    (CODE)
                            622 	.area GSINIT0 (CODE)
                            623 	.area GSINIT1 (CODE)
                            624 	.area GSINIT2 (CODE)
                            625 	.area GSINIT3 (CODE)
                            626 	.area GSINIT4 (CODE)
                            627 	.area GSINIT5 (CODE)
                            628 	.area GSINIT  (CODE)
                            629 	.area GSFINAL (CODE)
                            630 	.area CSEG    (CODE)
                            631 ;--------------------------------------------------------
                            632 ; global & static initialisations
                            633 ;--------------------------------------------------------
                            634 	.area HOME    (CODE)
                            635 	.area GSINIT  (CODE)
                            636 	.area GSFINAL (CODE)
                            637 	.area GSINIT  (CODE)
                            638 ;	radio/at.c:42: __pdata uint8_t pdata_canary = 0x41;
   0000 78r00         [12]  639 	mov	r0,#_pdata_canary
   0002 74 41         [12]  640 	mov	a,#0x41
   0004 F2            [24]  641 	movx	@r0,a
                            642 ;	radio/at.c:133: static __pdata uint8_t	at_plus_counter = ATP_COUNT_1S;
   0005 78r15         [12]  643 	mov	r0,#_at_plus_counter
   0007 74 64         [12]  644 	mov	a,#0x64
   0009 F2            [24]  645 	movx	@r0,a
                            646 ;--------------------------------------------------------
                            647 ; Home
                            648 ;--------------------------------------------------------
                            649 	.area HOME    (CODE)
                            650 	.area HOME    (CODE)
                            651 ;--------------------------------------------------------
                            652 ; code
                            653 ;--------------------------------------------------------
                            654 	.area CSEG    (CODE)
                            655 ;------------------------------------------------------------
                            656 ;Allocation info for local variables in function 'at_input'
                            657 ;------------------------------------------------------------
                            658 ;c                         Allocated to registers r7 
                            659 ;------------------------------------------------------------
                            660 ;	radio/at.c:66: at_input(register uint8_t c)
                            661 ;	-----------------------------------------
                            662 ;	 function at_input
                            663 ;	-----------------------------------------
   0000                     664 _at_input:
                     0007   665 	ar7 = 0x07
                     0006   666 	ar6 = 0x06
                     0005   667 	ar5 = 0x05
                     0004   668 	ar4 = 0x04
                     0003   669 	ar3 = 0x03
                     0002   670 	ar2 = 0x02
                     0001   671 	ar1 = 0x01
                     0000   672 	ar0 = 0x00
   0000 AF 82         [24]  673 	mov	r7,dpl
                            674 ;	radio/at.c:69: switch (c) {
   0002 8F 06         [24]  675 	mov	ar6,r7
   0004 BE 08 02      [24]  676 	cjne	r6,#0x08,00137$
   0007 80 1B         [24]  677 	sjmp	00103$
   0009                     678 00137$:
   0009 BE 0D 02      [24]  679 	cjne	r6,#0x0D,00138$
   000C 80 05         [24]  680 	sjmp	00101$
   000E                     681 00138$:
                            682 ;	radio/at.c:71: case '\r':
   000E BE 7F 30      [24]  683 	cjne	r6,#0x7F,00106$
   0011 80 11         [24]  684 	sjmp	00103$
   0013                     685 00101$:
                            686 ;	radio/at.c:72: putchar('\n');
   0013 75 82 0A      [24]  687 	mov	dpl,#0x0A
   0016 12r00r00      [24]  688 	lcall	_putchar
                            689 ;	radio/at.c:73: at_cmd[at_cmd_len] = 0;
   0019 78r12         [12]  690 	mov	r0,#_at_cmd_len
   001B E2            [24]  691 	movx	a,@r0
   001C 24r01         [12]  692 	add	a,#_at_cmd
   001E F8            [12]  693 	mov	r0,a
   001F E4            [12]  694 	clr	a
   0020 F2            [24]  695 	movx	@r0,a
                            696 ;	radio/at.c:74: at_cmd_ready = true;
   0021 D2*01         [12]  697 	setb	_at_cmd_ready
                            698 ;	radio/at.c:75: break;
                            699 ;	radio/at.c:80: case '\x7f':
   0023 22            [24]  700 	ret
   0024                     701 00103$:
                            702 ;	radio/at.c:81: if (at_cmd_len > 0) {
   0024 78r12         [12]  703 	mov	r0,#_at_cmd_len
   0026 E2            [24]  704 	movx	a,@r0
   0027 60 64         [24]  705 	jz	00112$
                            706 ;	radio/at.c:82: putchar('\b');
   0029 75 82 08      [24]  707 	mov	dpl,#0x08
   002C 12r00r00      [24]  708 	lcall	_putchar
                            709 ;	radio/at.c:83: putchar(' ');
   002F 75 82 20      [24]  710 	mov	dpl,#0x20
   0032 12r00r00      [24]  711 	lcall	_putchar
                            712 ;	radio/at.c:84: putchar('\b');
   0035 75 82 08      [24]  713 	mov	dpl,#0x08
   0038 12r00r00      [24]  714 	lcall	_putchar
                            715 ;	radio/at.c:85: at_cmd_len--;
   003B 78r12         [12]  716 	mov	r0,#_at_cmd_len
   003D E2            [24]  717 	movx	a,@r0
   003E 14            [12]  718 	dec	a
   003F F2            [24]  719 	movx	@r0,a
                            720 ;	radio/at.c:87: break;
                            721 ;	radio/at.c:90: default:
   0040 22            [24]  722 	ret
   0041                     723 00106$:
                            724 ;	radio/at.c:91: if (at_cmd_len < AT_CMD_MAXLEN) {
   0041 78r12         [12]  725 	mov	r0,#_at_cmd_len
   0043 E2            [24]  726 	movx	a,@r0
   0044 B4 10 00      [24]  727 	cjne	a,#0x10,00141$
   0047                     728 00141$:
   0047 50 3E         [24]  729 	jnc	00110$
                            730 ;	radio/at.c:92: if (isprint(c)) {
   0049 8F 82         [24]  731 	mov	dpl,r7
   004B C0 07         [24]  732 	push	ar7
   004D C0 06         [24]  733 	push	ar6
   004F 12r00r00      [24]  734 	lcall	_isprint
   0052 E5 82         [12]  735 	mov	a,dpl
   0054 D0 06         [24]  736 	pop	ar6
   0056 D0 07         [24]  737 	pop	ar7
   0058 60 33         [24]  738 	jz	00112$
                            739 ;	radio/at.c:93: c = toupper(c);
   005A 8F 82         [24]  740 	mov	dpl,r7
   005C C0 07         [24]  741 	push	ar7
   005E C0 06         [24]  742 	push	ar6
   0060 12r00r00      [24]  743 	lcall	_islower
   0063 E5 82         [12]  744 	mov	a,dpl
   0065 D0 06         [24]  745 	pop	ar6
   0067 D0 07         [24]  746 	pop	ar7
   0069 60 05         [24]  747 	jz	00114$
   006B 53 06 DF      [24]  748 	anl	ar6,#0xDF
   006E 80 02         [24]  749 	sjmp	00115$
   0070                     750 00114$:
   0070 8F 06         [24]  751 	mov	ar6,r7
   0072                     752 00115$:
   0072 8E 07         [24]  753 	mov	ar7,r6
                            754 ;	radio/at.c:94: at_cmd[at_cmd_len++] = c;
   0074 78r12         [12]  755 	mov	r0,#_at_cmd_len
   0076 E2            [24]  756 	movx	a,@r0
   0077 FE            [12]  757 	mov	r6,a
   0078 78r12         [12]  758 	mov	r0,#_at_cmd_len
   007A 04            [12]  759 	inc	a
   007B F2            [24]  760 	movx	@r0,a
   007C EE            [12]  761 	mov	a,r6
   007D 24r01         [12]  762 	add	a,#_at_cmd
   007F F8            [12]  763 	mov	r0,a
   0080 EF            [12]  764 	mov	a,r7
   0081 F2            [24]  765 	movx	@r0,a
                            766 ;	radio/at.c:95: putchar(c);
   0082 8F 82         [24]  767 	mov	dpl,r7
                            768 ;	radio/at.c:97: break;
   0084 02r00r00      [24]  769 	ljmp	_putchar
   0087                     770 00110$:
                            771 ;	radio/at.c:105: at_mode_active = 0;
   0087 C2*00         [12]  772 	clr	_at_mode_active
                            773 ;	radio/at.c:106: at_cmd_len = 0;
   0089 78r12         [12]  774 	mov	r0,#_at_cmd_len
   008B E4            [12]  775 	clr	a
   008C F2            [24]  776 	movx	@r0,a
                            777 ;	radio/at.c:108: }
   008D                     778 00112$:
   008D 22            [24]  779 	ret
                            780 ;------------------------------------------------------------
                            781 ;Allocation info for local variables in function 'at_plus_detector'
                            782 ;------------------------------------------------------------
                            783 ;c                         Allocated to registers r7 
                            784 ;------------------------------------------------------------
                            785 ;	radio/at.c:138: at_plus_detector(register uint8_t c)
                            786 ;	-----------------------------------------
                            787 ;	 function at_plus_detector
                            788 ;	-----------------------------------------
   008E                     789 _at_plus_detector:
   008E AF 82         [24]  790 	mov	r7,dpl
                            791 ;	radio/at.c:144: if (c != (uint8_t)'+')
   0090 BF 2B 02      [24]  792 	cjne	r7,#0x2B,00118$
   0093 80 04         [24]  793 	sjmp	00102$
   0095                     794 00118$:
                            795 ;	radio/at.c:145: at_plus_state = ATP_WAIT_FOR_IDLE;
   0095 78r14         [12]  796 	mov	r0,#_at_plus_state
   0097 E4            [12]  797 	clr	a
   0098 F2            [24]  798 	movx	@r0,a
   0099                     799 00102$:
                            800 ;	radio/at.c:149: switch (at_plus_state) {
   0099 78r14         [12]  801 	mov	r0,#_at_plus_state
   009B C3            [12]  802 	clr	c
   009C E2            [24]  803 	movx	a,@r0
   009D F5 F0         [12]  804 	mov	b,a
   009F 74 04         [12]  805 	mov	a,#0x04
   00A1 95 F0         [12]  806 	subb	a,b
   00A3 40 2C         [24]  807 	jc	00106$
   00A5 78r14         [12]  808 	mov	r0,#_at_plus_state
   00A7 E2            [24]  809 	movx	a,@r0
   00A8 75 F0 03      [24]  810 	mov	b,#0x03
   00AB A4            [48]  811 	mul	ab
   00AC 90r00rB0      [24]  812 	mov	dptr,#00120$
   00AF 73            [24]  813 	jmp	@a+dptr
   00B0                     814 00120$:
   00B0 02r00rD5      [24]  815 	ljmp	00107$
   00B3 02r00rBF      [24]  816 	ljmp	00103$
   00B6 02r00rBF      [24]  817 	ljmp	00104$
   00B9 02r00rC6      [24]  818 	ljmp	00105$
   00BC 02r00rD5      [24]  819 	ljmp	00108$
                            820 ;	radio/at.c:151: case ATP_WAIT_FOR_PLUS1:
   00BF                     821 00103$:
                            822 ;	radio/at.c:152: case ATP_WAIT_FOR_PLUS2:
   00BF                     823 00104$:
                            824 ;	radio/at.c:153: at_plus_state++;
   00BF 78r14         [12]  825 	mov	r0,#_at_plus_state
   00C1 E2            [24]  826 	movx	a,@r0
   00C2 24 01         [12]  827 	add	a,#0x01
   00C4 F2            [24]  828 	movx	@r0,a
                            829 ;	radio/at.c:154: break;
                            830 ;	radio/at.c:156: case ATP_WAIT_FOR_PLUS3:
   00C5 22            [24]  831 	ret
   00C6                     832 00105$:
                            833 ;	radio/at.c:157: at_plus_state = ATP_WAIT_FOR_ENABLE;
   00C6 78r14         [12]  834 	mov	r0,#_at_plus_state
   00C8 74 04         [12]  835 	mov	a,#0x04
   00CA F2            [24]  836 	movx	@r0,a
                            837 ;	radio/at.c:158: at_plus_counter = ATP_COUNT_1S;
   00CB 78r15         [12]  838 	mov	r0,#_at_plus_counter
   00CD 74 64         [12]  839 	mov	a,#0x64
   00CF F2            [24]  840 	movx	@r0,a
                            841 ;	radio/at.c:159: break;
                            842 ;	radio/at.c:161: default:
   00D0 22            [24]  843 	ret
   00D1                     844 00106$:
                            845 ;	radio/at.c:162: at_plus_state = ATP_WAIT_FOR_IDLE;
   00D1 78r14         [12]  846 	mov	r0,#_at_plus_state
   00D3 E4            [12]  847 	clr	a
   00D4 F2            [24]  848 	movx	@r0,a
                            849 ;	radio/at.c:164: case ATP_WAIT_FOR_IDLE:
   00D5                     850 00107$:
                            851 ;	radio/at.c:165: case ATP_WAIT_FOR_ENABLE:
   00D5                     852 00108$:
                            853 ;	radio/at.c:166: at_plus_counter = ATP_COUNT_1S;
   00D5 78r15         [12]  854 	mov	r0,#_at_plus_counter
   00D7 74 64         [12]  855 	mov	a,#0x64
   00D9 F2            [24]  856 	movx	@r0,a
                            857 ;	radio/at.c:168: }
   00DA 22            [24]  858 	ret
                            859 ;------------------------------------------------------------
                            860 ;Allocation info for local variables in function 'at_timer'
                            861 ;------------------------------------------------------------
                            862 ;	radio/at.c:175: at_timer(void)
                            863 ;	-----------------------------------------
                            864 ;	 function at_timer
                            865 ;	-----------------------------------------
   00DB                     866 _at_timer:
                            867 ;	radio/at.c:178: if (at_plus_counter > 0) {
   00DB 78r15         [12]  868 	mov	r0,#_at_plus_counter
   00DD E2            [24]  869 	movx	a,@r0
   00DE 60 38         [24]  870 	jz	00109$
                            871 ;	radio/at.c:181: if (--at_plus_counter == 0) {
   00E0 78r15         [12]  872 	mov	r0,#_at_plus_counter
   00E2 E2            [24]  873 	movx	a,@r0
   00E3 14            [12]  874 	dec	a
   00E4 F2            [24]  875 	movx	@r0,a
   00E5 78r15         [12]  876 	mov	r0,#_at_plus_counter
   00E7 E2            [24]  877 	movx	a,@r0
   00E8 70 2E         [24]  878 	jnz	00109$
                            879 ;	radio/at.c:184: switch (at_plus_state) {
   00EA 78r14         [12]  880 	mov	r0,#_at_plus_state
   00EC E2            [24]  881 	movx	a,@r0
   00ED 60 08         [24]  882 	jz	00101$
   00EF 78r14         [12]  883 	mov	r0,#_at_plus_state
   00F1 E2            [24]  884 	movx	a,@r0
                            885 ;	radio/at.c:185: case ATP_WAIT_FOR_IDLE:
   00F2 B4 04 23      [24]  886 	cjne	a,#0x04,00109$
   00F5 80 06         [24]  887 	sjmp	00102$
   00F7                     888 00101$:
                            889 ;	radio/at.c:186: at_plus_state = ATP_WAIT_FOR_PLUS1;
   00F7 78r14         [12]  890 	mov	r0,#_at_plus_state
   00F9 74 01         [12]  891 	mov	a,#0x01
   00FB F2            [24]  892 	movx	@r0,a
                            893 ;	radio/at.c:187: break;
                            894 ;	radio/at.c:189: case ATP_WAIT_FOR_ENABLE:
   00FC 22            [24]  895 	ret
   00FD                     896 00102$:
                            897 ;	radio/at.c:190: at_mode_active = true;
   00FD D2*00         [12]  898 	setb	_at_mode_active
                            899 ;	radio/at.c:191: at_plus_state = ATP_WAIT_FOR_IDLE;
   00FF 78r14         [12]  900 	mov	r0,#_at_plus_state
   0101 E4            [12]  901 	clr	a
   0102 F2            [24]  902 	movx	@r0,a
                            903 ;	radio/at.c:194: at_cmd[0] = 'A';
   0103 78r01         [12]  904 	mov	r0,#_at_cmd
   0105 74 41         [12]  905 	mov	a,#0x41
   0107 F2            [24]  906 	movx	@r0,a
                            907 ;	radio/at.c:195: at_cmd[1] = 'T';
   0108 78r02         [12]  908 	mov	r0,#(_at_cmd + 0x0001)
   010A 74 54         [12]  909 	mov	a,#0x54
   010C F2            [24]  910 	movx	@r0,a
                            911 ;	radio/at.c:196: at_cmd[2] = '\0';
   010D 78r03         [12]  912 	mov	r0,#(_at_cmd + 0x0002)
   010F E4            [12]  913 	clr	a
   0110 F2            [24]  914 	movx	@r0,a
                            915 ;	radio/at.c:197: at_cmd_len = 2;
   0111 78r12         [12]  916 	mov	r0,#_at_cmd_len
   0113 74 02         [12]  917 	mov	a,#0x02
   0115 F2            [24]  918 	movx	@r0,a
                            919 ;	radio/at.c:198: at_cmd_ready = true;
   0116 D2*01         [12]  920 	setb	_at_cmd_ready
                            921 ;	radio/at.c:202: }
   0118                     922 00109$:
   0118 22            [24]  923 	ret
                            924 ;------------------------------------------------------------
                            925 ;Allocation info for local variables in function 'at_command'
                            926 ;------------------------------------------------------------
                            927 ;	radio/at.c:209: at_command(void)
                            928 ;	-----------------------------------------
                            929 ;	 function at_command
                            930 ;	-----------------------------------------
   0119                     931 _at_command:
                            932 ;	radio/at.c:212: if (at_cmd_ready) {
   0119 20*01 01      [24]  933 	jb	_at_cmd_ready,00170$
   011C 22            [24]  934 	ret
   011D                     935 00170$:
                            936 ;	radio/at.c:213: if ((at_cmd_len >= 2) && (at_cmd[0] == 'R') && (at_cmd[1] == 'T')) {
   011D 78r12         [12]  937 	mov	r0,#_at_cmd_len
   011F E2            [24]  938 	movx	a,@r0
   0120 B4 02 00      [24]  939 	cjne	a,#0x02,00171$
   0123                     940 00171$:
   0123 E4            [12]  941 	clr	a
   0124 33            [12]  942 	rlc	a
   0125 FF            [12]  943 	mov	r7,a
   0126 70 18         [24]  944 	jnz	00102$
   0128 78r01         [12]  945 	mov	r0,#_at_cmd
   012A E2            [24]  946 	movx	a,@r0
   012B FE            [12]  947 	mov	r6,a
   012C BE 52 11      [24]  948 	cjne	r6,#0x52,00102$
   012F 78r02         [12]  949 	mov	r0,#(_at_cmd + 0x0001)
   0131 E2            [24]  950 	movx	a,@r0
   0132 FE            [12]  951 	mov	r6,a
   0133 BE 54 0A      [24]  952 	cjne	r6,#0x54,00102$
                            953 ;	radio/at.c:216: tdm_remote_at();
   0136 12r00r00      [24]  954 	lcall	_tdm_remote_at
                            955 ;	radio/at.c:217: at_cmd_len = 0;
   0139 78r12         [12]  956 	mov	r0,#_at_cmd_len
   013B E4            [12]  957 	clr	a
   013C F2            [24]  958 	movx	@r0,a
                            959 ;	radio/at.c:218: at_cmd_ready = false;
   013D C2*01         [12]  960 	clr	_at_cmd_ready
                            961 ;	radio/at.c:219: return;
   013F 22            [24]  962 	ret
   0140                     963 00102$:
                            964 ;	radio/at.c:222: if ((at_cmd_len >= 2) && (at_cmd[0] == 'A') && (at_cmd[1] == 'T')) {
   0140 EF            [12]  965 	mov	a,r7
   0141 70 5C         [24]  966 	jnz	00116$
   0143 78r01         [12]  967 	mov	r0,#_at_cmd
   0145 E2            [24]  968 	movx	a,@r0
   0146 FF            [12]  969 	mov	r7,a
   0147 BF 41 55      [24]  970 	cjne	r7,#0x41,00116$
   014A 78r02         [12]  971 	mov	r0,#(_at_cmd + 0x0001)
   014C E2            [24]  972 	movx	a,@r0
   014D FF            [12]  973 	mov	r7,a
   014E BF 54 4E      [24]  974 	cjne	r7,#0x54,00116$
                            975 ;	radio/at.c:225: switch (at_cmd[2]) {
   0151 78r03         [12]  976 	mov	r0,#(_at_cmd + 0x0002)
   0153 E2            [24]  977 	movx	a,@r0
   0154 FF            [12]  978 	mov	r7,a
   0155 60 1E         [24]  979 	jz	00105$
   0157 BF 26 02      [24]  980 	cjne	r7,#0x26,00183$
   015A 80 1E         [24]  981 	sjmp	00106$
   015C                     982 00183$:
   015C BF 2B 02      [24]  983 	cjne	r7,#0x2B,00184$
   015F 80 1E         [24]  984 	sjmp	00107$
   0161                     985 00184$:
   0161 BF 49 02      [24]  986 	cjne	r7,#0x49,00185$
   0164 80 1E         [24]  987 	sjmp	00108$
   0166                     988 00185$:
   0166 BF 4F 02      [24]  989 	cjne	r7,#0x4F,00186$
   0169 80 1E         [24]  990 	sjmp	00109$
   016B                     991 00186$:
   016B BF 53 02      [24]  992 	cjne	r7,#0x53,00187$
   016E 80 22         [24]  993 	sjmp	00110$
   0170                     994 00187$:
                            995 ;	radio/at.c:226: case '\0':		// no command -> OK
   0170 BF 5A 29      [24]  996 	cjne	r7,#0x5A,00113$
   0173 80 22         [24]  997 	sjmp	00111$
   0175                     998 00105$:
                            999 ;	radio/at.c:227: at_ok();
   0175 12r01rA6      [24] 1000 	lcall	_at_ok
                           1001 ;	radio/at.c:228: break;
                           1002 ;	radio/at.c:229: case '&':
   0178 80 25         [24] 1003 	sjmp	00116$
   017A                    1004 00106$:
                           1005 ;	radio/at.c:230: at_ampersand();
   017A 12r04r57      [24] 1006 	lcall	_at_ampersand
                           1007 ;	radio/at.c:231: break;
                           1008 ;	radio/at.c:232: case '+':
   017D 80 20         [24] 1009 	sjmp	00116$
   017F                    1010 00107$:
                           1011 ;	radio/at.c:233: at_plus();
   017F 12r05r2E      [24] 1012 	lcall	_at_plus
                           1013 ;	radio/at.c:234: break;
                           1014 ;	radio/at.c:235: case 'I':
   0182 80 1B         [24] 1015 	sjmp	00116$
   0184                    1016 00108$:
                           1017 ;	radio/at.c:236: at_i();
   0184 12r02r9A      [24] 1018 	lcall	_at_i
                           1019 ;	radio/at.c:237: break;
                           1020 ;	radio/at.c:238: case 'O':		// O -> go online (exit command mode)
   0187 80 16         [24] 1021 	sjmp	00116$
   0189                    1022 00109$:
                           1023 ;	radio/at.c:239: at_plus_counter = ATP_COUNT_1S;
   0189 78r15         [12] 1024 	mov	r0,#_at_plus_counter
   018B 74 64         [12] 1025 	mov	a,#0x64
   018D F2            [24] 1026 	movx	@r0,a
                           1027 ;	radio/at.c:240: at_mode_active = 0;
   018E C2*00         [12] 1028 	clr	_at_mode_active
                           1029 ;	radio/at.c:241: break;
                           1030 ;	radio/at.c:242: case 'S':
   0190 80 0D         [24] 1031 	sjmp	00116$
   0192                    1032 00110$:
                           1033 ;	radio/at.c:243: at_s();
   0192 12r03rD5      [24] 1034 	lcall	_at_s
                           1035 ;	radio/at.c:244: break;
                           1036 ;	radio/at.c:246: case 'Z':
   0195 80 08         [24] 1037 	sjmp	00116$
   0197                    1038 00111$:
                           1039 ;	radio/at.c:248: RSTSRC |= (1 << 4);
   0197 43 EF 10      [24] 1040 	orl	_RSTSRC,#0x10
   019A                    1041 00122$:
                           1042 ;	radio/at.c:252: default:
   019A 80 FE         [24] 1043 	sjmp	00122$
   019C                    1044 00113$:
                           1045 ;	radio/at.c:253: at_error();
   019C 12r01rC8      [24] 1046 	lcall	_at_error
                           1047 ;	radio/at.c:254: }
   019F                    1048 00116$:
                           1049 ;	radio/at.c:258: at_cmd_len = 0;
   019F 78r12         [12] 1050 	mov	r0,#_at_cmd_len
   01A1 E4            [12] 1051 	clr	a
   01A2 F2            [24] 1052 	movx	@r0,a
                           1053 ;	radio/at.c:259: at_cmd_ready = false;
   01A3 C2*01         [12] 1054 	clr	_at_cmd_ready
   01A5 22            [24] 1055 	ret
                           1056 ;------------------------------------------------------------
                           1057 ;Allocation info for local variables in function 'at_ok'
                           1058 ;------------------------------------------------------------
                           1059 ;	radio/at.c:264: at_ok(void)
                           1060 ;	-----------------------------------------
                           1061 ;	 function at_ok
                           1062 ;	-----------------------------------------
   01A6                    1063 _at_ok:
                           1064 ;	radio/at.c:266: printf("%s\n", "OK");
   01A6 74r04         [12] 1065 	mov	a,#__str_1
   01A8 C0 E0         [24] 1066 	push	acc
   01AA 74s00         [12] 1067 	mov	a,#(__str_1 >> 8)
   01AC C0 E0         [24] 1068 	push	acc
   01AE 74 80         [12] 1069 	mov	a,#0x80
   01B0 C0 E0         [24] 1070 	push	acc
   01B2 74r00         [12] 1071 	mov	a,#__str_0
   01B4 C0 E0         [24] 1072 	push	acc
   01B6 74s00         [12] 1073 	mov	a,#(__str_0 >> 8)
   01B8 C0 E0         [24] 1074 	push	acc
   01BA 74 80         [12] 1075 	mov	a,#0x80
   01BC C0 E0         [24] 1076 	push	acc
   01BE 12r00r00      [24] 1077 	lcall	_printfl
   01C1 E5 81         [12] 1078 	mov	a,sp
   01C3 24 FA         [12] 1079 	add	a,#0xfa
   01C5 F5 81         [12] 1080 	mov	sp,a
   01C7 22            [24] 1081 	ret
                           1082 ;------------------------------------------------------------
                           1083 ;Allocation info for local variables in function 'at_error'
                           1084 ;------------------------------------------------------------
                           1085 ;	radio/at.c:270: at_error(void)
                           1086 ;	-----------------------------------------
                           1087 ;	 function at_error
                           1088 ;	-----------------------------------------
   01C8                    1089 _at_error:
                           1090 ;	radio/at.c:272: printf("%s\n", "ERROR");
   01C8 74r07         [12] 1091 	mov	a,#__str_2
   01CA C0 E0         [24] 1092 	push	acc
   01CC 74s00         [12] 1093 	mov	a,#(__str_2 >> 8)
   01CE C0 E0         [24] 1094 	push	acc
   01D0 74 80         [12] 1095 	mov	a,#0x80
   01D2 C0 E0         [24] 1096 	push	acc
   01D4 74r00         [12] 1097 	mov	a,#__str_0
   01D6 C0 E0         [24] 1098 	push	acc
   01D8 74s00         [12] 1099 	mov	a,#(__str_0 >> 8)
   01DA C0 E0         [24] 1100 	push	acc
   01DC 74 80         [12] 1101 	mov	a,#0x80
   01DE C0 E0         [24] 1102 	push	acc
   01E0 12r00r00      [24] 1103 	lcall	_printfl
   01E3 E5 81         [12] 1104 	mov	a,sp
   01E5 24 FA         [12] 1105 	add	a,#0xfa
   01E7 F5 81         [12] 1106 	mov	sp,a
   01E9 22            [24] 1107 	ret
                           1108 ;------------------------------------------------------------
                           1109 ;Allocation info for local variables in function 'at_parse_number'
                           1110 ;------------------------------------------------------------
                           1111 ;reg                       Allocated to registers r4 r5 r6 r7 
                           1112 ;c                         Allocated to registers r3 
                           1113 ;sloc0                     Allocated to stack - sp +2
                           1114 ;sloc1                     Allocated to stack - sp -3
                           1115 ;------------------------------------------------------------
                           1116 ;	radio/at.c:278: at_parse_number() __reentrant
                           1117 ;	-----------------------------------------
                           1118 ;	 function at_parse_number
                           1119 ;	-----------------------------------------
   01EA                    1120 _at_parse_number:
   01EA E5 81         [12] 1121 	mov	a,sp
   01EC 24 04         [12] 1122 	add	a,#0x04
   01EE F5 81         [12] 1123 	mov	sp,a
                           1124 ;	radio/at.c:283: reg = 0;
   01F0 7C 00         [12] 1125 	mov	r4,#0x00
   01F2 7D 00         [12] 1126 	mov	r5,#0x00
   01F4 7E 00         [12] 1127 	mov	r6,#0x00
   01F6 7F 00         [12] 1128 	mov	r7,#0x00
   01F8                    1129 00104$:
                           1130 ;	radio/at.c:285: c = at_cmd[idx];
   01F8 78r16         [12] 1131 	mov	r0,#_idx
   01FA E2            [24] 1132 	movx	a,@r0
   01FB 24r01         [12] 1133 	add	a,#_at_cmd
   01FD F9            [12] 1134 	mov	r1,a
   01FE E3            [24] 1135 	movx	a,@r1
                           1136 ;	radio/at.c:286: if (!isdigit(c))
   01FF FB            [12] 1137 	mov	r3,a
   0200 F5 82         [12] 1138 	mov	dpl,a
   0202 C0 07         [24] 1139 	push	ar7
   0204 C0 06         [24] 1140 	push	ar6
   0206 C0 05         [24] 1141 	push	ar5
   0208 C0 04         [24] 1142 	push	ar4
   020A C0 03         [24] 1143 	push	ar3
   020C 12r00r00      [24] 1144 	lcall	_isdigit
   020F E5 82         [12] 1145 	mov	a,dpl
   0211 D0 03         [24] 1146 	pop	ar3
   0213 D0 04         [24] 1147 	pop	ar4
   0215 D0 05         [24] 1148 	pop	ar5
   0217 D0 06         [24] 1149 	pop	ar6
   0219 D0 07         [24] 1150 	pop	ar7
   021B 60 6D         [24] 1151 	jz	00103$
                           1152 ;	radio/at.c:288: reg = (reg * 10) + (c - '0');
   021D 90r00r00      [24] 1153 	mov	dptr,#__mullong_PARM_2
   0220 EC            [12] 1154 	mov	a,r4
   0221 F0            [24] 1155 	movx	@dptr,a
   0222 ED            [12] 1156 	mov	a,r5
   0223 A3            [24] 1157 	inc	dptr
   0224 F0            [24] 1158 	movx	@dptr,a
   0225 EE            [12] 1159 	mov	a,r6
   0226 A3            [24] 1160 	inc	dptr
   0227 F0            [24] 1161 	movx	@dptr,a
   0228 EF            [12] 1162 	mov	a,r7
   0229 A3            [24] 1163 	inc	dptr
   022A F0            [24] 1164 	movx	@dptr,a
   022B 90 00 0A      [24] 1165 	mov	dptr,#(0x0A&0x00ff)
   022E E4            [12] 1166 	clr	a
   022F F5 F0         [12] 1167 	mov	b,a
   0231 C0 03         [24] 1168 	push	ar3
   0233 12r00r00      [24] 1169 	lcall	__mullong
   0236 AF 82         [24] 1170 	mov	r7,dpl
   0238 AE 83         [24] 1171 	mov	r6,dph
   023A AD F0         [24] 1172 	mov	r5,b
   023C FC            [12] 1173 	mov	r4,a
   023D D0 03         [24] 1174 	pop	ar3
   023F 8B 02         [24] 1175 	mov	ar2,r3
   0241 7B 00         [12] 1176 	mov	r3,#0x00
   0243 EA            [12] 1177 	mov	a,r2
   0244 24 D0         [12] 1178 	add	a,#0xD0
   0246 FA            [12] 1179 	mov	r2,a
   0247 EB            [12] 1180 	mov	a,r3
   0248 34 FF         [12] 1181 	addc	a,#0xFF
   024A FB            [12] 1182 	mov	r3,a
   024B E5 81         [12] 1183 	mov	a,sp
   024D 24 FD         [12] 1184 	add	a,#0xfd
   024F F8            [12] 1185 	mov	r0,a
   0250 A6 02         [24] 1186 	mov	@r0,ar2
   0252 08            [12] 1187 	inc	r0
   0253 A6 03         [24] 1188 	mov	@r0,ar3
   0255 EB            [12] 1189 	mov	a,r3
   0256 33            [12] 1190 	rlc	a
   0257 95 E0         [12] 1191 	subb	a,acc
   0259 08            [12] 1192 	inc	r0
   025A F6            [12] 1193 	mov	@r0,a
   025B 08            [12] 1194 	inc	r0
   025C F6            [12] 1195 	mov	@r0,a
   025D E5 81         [12] 1196 	mov	a,sp
   025F 24 FD         [12] 1197 	add	a,#0xfd
   0261 F8            [12] 1198 	mov	r0,a
   0262 E6            [12] 1199 	mov	a,@r0
   0263 2F            [12] 1200 	add	a,r7
   0264 F6            [12] 1201 	mov	@r0,a
   0265 08            [12] 1202 	inc	r0
   0266 E6            [12] 1203 	mov	a,@r0
   0267 3E            [12] 1204 	addc	a,r6
   0268 F6            [12] 1205 	mov	@r0,a
   0269 08            [12] 1206 	inc	r0
   026A E6            [12] 1207 	mov	a,@r0
   026B 3D            [12] 1208 	addc	a,r5
   026C F6            [12] 1209 	mov	@r0,a
   026D 08            [12] 1210 	inc	r0
   026E E6            [12] 1211 	mov	a,@r0
   026F 3C            [12] 1212 	addc	a,r4
   0270 F6            [12] 1213 	mov	@r0,a
   0271 E5 81         [12] 1214 	mov	a,sp
   0273 24 FD         [12] 1215 	add	a,#0xfd
   0275 F8            [12] 1216 	mov	r0,a
   0276 86 04         [24] 1217 	mov	ar4,@r0
   0278 08            [12] 1218 	inc	r0
   0279 86 05         [24] 1219 	mov	ar5,@r0
   027B 08            [12] 1220 	inc	r0
   027C 86 06         [24] 1221 	mov	ar6,@r0
   027E 08            [12] 1222 	inc	r0
   027F 86 07         [24] 1223 	mov	ar7,@r0
                           1224 ;	radio/at.c:289: idx++;
   0281 78r16         [12] 1225 	mov	r0,#_idx
   0283 E2            [24] 1226 	movx	a,@r0
   0284 24 01         [12] 1227 	add	a,#0x01
   0286 F2            [24] 1228 	movx	@r0,a
   0287 02r01rF8      [24] 1229 	ljmp	00104$
   028A                    1230 00103$:
                           1231 ;	radio/at.c:291: return reg;
   028A 8C 82         [24] 1232 	mov	dpl,r4
   028C 8D 83         [24] 1233 	mov	dph,r5
   028E 8E F0         [24] 1234 	mov	b,r6
   0290 EF            [12] 1235 	mov	a,r7
   0291 C8            [12] 1236 	xch	a,r0
   0292 E5 81         [12] 1237 	mov	a,sp
   0294 24 FC         [12] 1238 	add	a,#0xFC
   0296 F5 81         [12] 1239 	mov	sp,a
   0298 C8            [12] 1240 	xch	a,r0
   0299 22            [24] 1241 	ret
                           1242 ;------------------------------------------------------------
                           1243 ;Allocation info for local variables in function 'at_i'
                           1244 ;------------------------------------------------------------
                           1245 ;sloc0                     Allocated with name '_at_i_sloc0_1_0'
                           1246 ;id                        Allocated with name '_at_i_id_3_157'
                           1247 ;------------------------------------------------------------
                           1248 ;	radio/at.c:295: at_i(void)
                           1249 ;	-----------------------------------------
                           1250 ;	 function at_i
                           1251 ;	-----------------------------------------
   029A                    1252 _at_i:
                           1253 ;	radio/at.c:297: switch (at_cmd[3]) {
   029A 78r04         [12] 1254 	mov	r0,#(_at_cmd + 0x0003)
   029C E2            [24] 1255 	movx	a,@r0
   029D FF            [12] 1256 	mov	r7,a
   029E 60 30         [24] 1257 	jz	00102$
   02A0 BF 30 02      [24] 1258 	cjne	r7,#0x30,00152$
   02A3 80 2B         [24] 1259 	sjmp	00102$
   02A5                    1260 00152$:
   02A5 BF 31 02      [24] 1261 	cjne	r7,#0x31,00153$
   02A8 80 48         [24] 1262 	sjmp	00103$
   02AA                    1263 00153$:
   02AA BF 32 02      [24] 1264 	cjne	r7,#0x32,00154$
   02AD 80 65         [24] 1265 	sjmp	00104$
   02AF                    1266 00154$:
   02AF BF 33 03      [24] 1267 	cjne	r7,#0x33,00155$
   02B2 02r03r31      [24] 1268 	ljmp	00105$
   02B5                    1269 00155$:
   02B5 BF 34 03      [24] 1270 	cjne	r7,#0x34,00156$
   02B8 02r03r51      [24] 1271 	ljmp	00106$
   02BB                    1272 00156$:
   02BB BF 35 03      [24] 1273 	cjne	r7,#0x35,00157$
   02BE 02r03r71      [24] 1274 	ljmp	00126$
   02C1                    1275 00157$:
   02C1 BF 36 03      [24] 1276 	cjne	r7,#0x36,00158$
   02C4 02r03rCC      [24] 1277 	ljmp	00109$
   02C7                    1278 00158$:
   02C7 BF 37 03      [24] 1279 	cjne	r7,#0x37,00159$
   02CA 02r03rCF      [24] 1280 	ljmp	00110$
   02CD                    1281 00159$:
   02CD 02r03rD2      [24] 1282 	ljmp	00111$
                           1283 ;	radio/at.c:299: case '0':
   02D0                    1284 00102$:
                           1285 ;	radio/at.c:300: printf("%s\n", g_banner_string);
   02D0 74r00         [12] 1286 	mov	a,#_g_banner_string
   02D2 C0 E0         [24] 1287 	push	acc
   02D4 74s00         [12] 1288 	mov	a,#(_g_banner_string >> 8)
   02D6 C0 E0         [24] 1289 	push	acc
   02D8 74 80         [12] 1290 	mov	a,#0x80
   02DA C0 E0         [24] 1291 	push	acc
   02DC 74r00         [12] 1292 	mov	a,#__str_0
   02DE C0 E0         [24] 1293 	push	acc
   02E0 74s00         [12] 1294 	mov	a,#(__str_0 >> 8)
   02E2 C0 E0         [24] 1295 	push	acc
   02E4 74 80         [12] 1296 	mov	a,#0x80
   02E6 C0 E0         [24] 1297 	push	acc
   02E8 12r00r00      [24] 1298 	lcall	_printfl
   02EB E5 81         [12] 1299 	mov	a,sp
   02ED 24 FA         [12] 1300 	add	a,#0xfa
   02EF F5 81         [12] 1301 	mov	sp,a
                           1302 ;	radio/at.c:301: return;
   02F1 22            [24] 1303 	ret
                           1304 ;	radio/at.c:302: case '1':
   02F2                    1305 00103$:
                           1306 ;	radio/at.c:303: printf("%s\n", g_version_string);
   02F2 74r00         [12] 1307 	mov	a,#_g_version_string
   02F4 C0 E0         [24] 1308 	push	acc
   02F6 74s00         [12] 1309 	mov	a,#(_g_version_string >> 8)
   02F8 C0 E0         [24] 1310 	push	acc
   02FA 74 80         [12] 1311 	mov	a,#0x80
   02FC C0 E0         [24] 1312 	push	acc
   02FE 74r00         [12] 1313 	mov	a,#__str_0
   0300 C0 E0         [24] 1314 	push	acc
   0302 74s00         [12] 1315 	mov	a,#(__str_0 >> 8)
   0304 C0 E0         [24] 1316 	push	acc
   0306 74 80         [12] 1317 	mov	a,#0x80
   0308 C0 E0         [24] 1318 	push	acc
   030A 12r00r00      [24] 1319 	lcall	_printfl
   030D E5 81         [12] 1320 	mov	a,sp
   030F 24 FA         [12] 1321 	add	a,#0xfa
   0311 F5 81         [12] 1322 	mov	sp,a
                           1323 ;	radio/at.c:304: return;
   0313 22            [24] 1324 	ret
                           1325 ;	radio/at.c:305: case '2':
   0314                    1326 00104$:
                           1327 ;	radio/at.c:306: printf("%u\n", BOARD_ID);
   0314 74 4D         [12] 1328 	mov	a,#0x4D
   0316 C0 E0         [24] 1329 	push	acc
   0318 E4            [12] 1330 	clr	a
   0319 C0 E0         [24] 1331 	push	acc
   031B 74r0D         [12] 1332 	mov	a,#__str_3
   031D C0 E0         [24] 1333 	push	acc
   031F 74s00         [12] 1334 	mov	a,#(__str_3 >> 8)
   0321 C0 E0         [24] 1335 	push	acc
   0323 74 80         [12] 1336 	mov	a,#0x80
   0325 C0 E0         [24] 1337 	push	acc
   0327 12r00r00      [24] 1338 	lcall	_printfl
   032A E5 81         [12] 1339 	mov	a,sp
   032C 24 FB         [12] 1340 	add	a,#0xfb
   032E F5 81         [12] 1341 	mov	sp,a
                           1342 ;	radio/at.c:307: break;
   0330 22            [24] 1343 	ret
                           1344 ;	radio/at.c:308: case '3':
   0331                    1345 00105$:
                           1346 ;	radio/at.c:309: printf("%u\n", g_board_frequency);
   0331 78r00         [12] 1347 	mov	r0,#_g_board_frequency
   0333 E2            [24] 1348 	movx	a,@r0
   0334 FE            [12] 1349 	mov	r6,a
   0335 7F 00         [12] 1350 	mov	r7,#0x00
   0337 C0 06         [24] 1351 	push	ar6
   0339 C0 07         [24] 1352 	push	ar7
   033B 74r0D         [12] 1353 	mov	a,#__str_3
   033D C0 E0         [24] 1354 	push	acc
   033F 74s00         [12] 1355 	mov	a,#(__str_3 >> 8)
   0341 C0 E0         [24] 1356 	push	acc
   0343 74 80         [12] 1357 	mov	a,#0x80
   0345 C0 E0         [24] 1358 	push	acc
   0347 12r00r00      [24] 1359 	lcall	_printfl
   034A E5 81         [12] 1360 	mov	a,sp
   034C 24 FB         [12] 1361 	add	a,#0xfb
   034E F5 81         [12] 1362 	mov	sp,a
                           1363 ;	radio/at.c:310: break;
   0350 22            [24] 1364 	ret
                           1365 ;	radio/at.c:311: case '4':
   0351                    1366 00106$:
                           1367 ;	radio/at.c:312: printf("%u\n", g_board_bl_version);
   0351 78r00         [12] 1368 	mov	r0,#_g_board_bl_version
   0353 E2            [24] 1369 	movx	a,@r0
   0354 FE            [12] 1370 	mov	r6,a
   0355 7F 00         [12] 1371 	mov	r7,#0x00
   0357 C0 06         [24] 1372 	push	ar6
   0359 C0 07         [24] 1373 	push	ar7
   035B 74r0D         [12] 1374 	mov	a,#__str_3
   035D C0 E0         [24] 1375 	push	acc
   035F 74s00         [12] 1376 	mov	a,#(__str_3 >> 8)
   0361 C0 E0         [24] 1377 	push	acc
   0363 74 80         [12] 1378 	mov	a,#0x80
   0365 C0 E0         [24] 1379 	push	acc
   0367 12r00r00      [24] 1380 	lcall	_printfl
   036A E5 81         [12] 1381 	mov	a,sp
   036C 24 FB         [12] 1382 	add	a,#0xfb
   036E F5 81         [12] 1383 	mov	sp,a
                           1384 ;	radio/at.c:313: return;
                           1385 ;	radio/at.c:317: for (id = 0; id < PARAM_MAX; id++) {
   0370 22            [24] 1386 	ret
   0371                    1387 00126$:
   0371 7F 00         [12] 1388 	mov	r7,#0x00
   0373                    1389 00113$:
                           1390 ;	radio/at.c:318: printf("S%u: %s=%lu\n", 
   0373 8F 82         [24] 1391 	mov	dpl,r7
   0375 C0 07         [24] 1392 	push	ar7
   0377 12r00r00      [24] 1393 	lcall	_param_get
   037A 85 82*00      [24] 1394 	mov	_at_i_sloc0_1_0,dpl
   037D 85 83*01      [24] 1395 	mov	(_at_i_sloc0_1_0 + 1),dph
   0380 85 F0*02      [24] 1396 	mov	(_at_i_sloc0_1_0 + 2),b
   0383 F5*03         [12] 1397 	mov	(_at_i_sloc0_1_0 + 3),a
   0385 D0 07         [24] 1398 	pop	ar7
   0387 8F 82         [24] 1399 	mov	dpl,r7
   0389 C0 07         [24] 1400 	push	ar7
   038B 12r00r00      [24] 1401 	lcall	_param_name
   038E AA 82         [24] 1402 	mov	r2,dpl
   0390 AD 83         [24] 1403 	mov	r5,dph
   0392 AE F0         [24] 1404 	mov	r6,b
   0394 D0 07         [24] 1405 	pop	ar7
   0396 8F 03         [24] 1406 	mov	ar3,r7
   0398 7C 00         [12] 1407 	mov	r4,#0x00
   039A C0 07         [24] 1408 	push	ar7
   039C C0*00         [24] 1409 	push	_at_i_sloc0_1_0
   039E C0*01         [24] 1410 	push	(_at_i_sloc0_1_0 + 1)
   03A0 C0*02         [24] 1411 	push	(_at_i_sloc0_1_0 + 2)
   03A2 C0*03         [24] 1412 	push	(_at_i_sloc0_1_0 + 3)
   03A4 C0 02         [24] 1413 	push	ar2
   03A6 C0 05         [24] 1414 	push	ar5
   03A8 C0 06         [24] 1415 	push	ar6
   03AA C0 03         [24] 1416 	push	ar3
   03AC C0 04         [24] 1417 	push	ar4
   03AE 74r11         [12] 1418 	mov	a,#__str_4
   03B0 C0 E0         [24] 1419 	push	acc
   03B2 74s00         [12] 1420 	mov	a,#(__str_4 >> 8)
   03B4 C0 E0         [24] 1421 	push	acc
   03B6 74 80         [12] 1422 	mov	a,#0x80
   03B8 C0 E0         [24] 1423 	push	acc
   03BA 12r00r00      [24] 1424 	lcall	_printfl
   03BD E5 81         [12] 1425 	mov	a,sp
   03BF 24 F4         [12] 1426 	add	a,#0xf4
   03C1 F5 81         [12] 1427 	mov	sp,a
   03C3 D0 07         [24] 1428 	pop	ar7
                           1429 ;	radio/at.c:317: for (id = 0; id < PARAM_MAX; id++) {
   03C5 0F            [12] 1430 	inc	r7
   03C6 BF 0F 00      [24] 1431 	cjne	r7,#0x0F,00160$
   03C9                    1432 00160$:
   03C9 40 A8         [24] 1433 	jc	00113$
                           1434 ;	radio/at.c:323: return;
                           1435 ;	radio/at.c:325: case '6':
   03CB 22            [24] 1436 	ret
   03CC                    1437 00109$:
                           1438 ;	radio/at.c:326: tdm_report_timing();
                           1439 ;	radio/at.c:327: return;
                           1440 ;	radio/at.c:328: case '7':
   03CC 02r00r00      [24] 1441 	ljmp	_tdm_report_timing
   03CF                    1442 00110$:
                           1443 ;	radio/at.c:329: tdm_show_rssi();
                           1444 ;	radio/at.c:330: return;
                           1445 ;	radio/at.c:331: default:
   03CF 02r00r00      [24] 1446 	ljmp	_tdm_show_rssi
   03D2                    1447 00111$:
                           1448 ;	radio/at.c:332: at_error();
                           1449 ;	radio/at.c:333: return;
                           1450 ;	radio/at.c:334: }
   03D2 02r01rC8      [24] 1451 	ljmp	_at_error
                           1452 ;------------------------------------------------------------
                           1453 ;Allocation info for local variables in function 'at_s'
                           1454 ;------------------------------------------------------------
                           1455 ;	radio/at.c:338: at_s(void)
                           1456 ;	-----------------------------------------
                           1457 ;	 function at_s
                           1458 ;	-----------------------------------------
   03D5                    1459 _at_s:
                           1460 ;	radio/at.c:344: idx = 3;
   03D5 78r16         [12] 1461 	mov	r0,#_idx
   03D7 74 03         [12] 1462 	mov	a,#0x03
   03D9 F2            [24] 1463 	movx	@r0,a
                           1464 ;	radio/at.c:345: sreg = at_parse_number();
   03DA 12r01rEA      [24] 1465 	lcall	_at_parse_number
   03DD AC 82         [24] 1466 	mov	r4,dpl
   03DF AD 83         [24] 1467 	mov	r5,dph
   03E1 AE F0         [24] 1468 	mov	r6,b
   03E3 FF            [12] 1469 	mov	r7,a
                           1470 ;	radio/at.c:347: if (sreg >= PARAM_MAX) {
   03E4 BC 0F 00      [24] 1471 	cjne	r4,#0x0F,00127$
   03E7                    1472 00127$:
   03E7 40 03         [24] 1473 	jc	00102$
                           1474 ;	radio/at.c:348: at_error();
                           1475 ;	radio/at.c:349: return;
   03E9 02r01rC8      [24] 1476 	ljmp	_at_error
   03EC                    1477 00102$:
                           1478 ;	radio/at.c:352: switch (at_cmd[idx]) {
   03EC 78r16         [12] 1479 	mov	r0,#_idx
   03EE E2            [24] 1480 	movx	a,@r0
   03EF 24r01         [12] 1481 	add	a,#_at_cmd
   03F1 F9            [12] 1482 	mov	r1,a
   03F2 E3            [24] 1483 	movx	a,@r1
   03F3 FF            [12] 1484 	mov	r7,a
   03F4 BF 3D 02      [24] 1485 	cjne	r7,#0x3D,00129$
   03F7 80 2D         [24] 1486 	sjmp	00104$
   03F9                    1487 00129$:
   03F9 BF 3F 58      [24] 1488 	cjne	r7,#0x3F,00109$
                           1489 ;	radio/at.c:354: val = param_get(sreg);
   03FC 8C 82         [24] 1490 	mov	dpl,r4
   03FE 12r00r00      [24] 1491 	lcall	_param_get
   0401 AB 82         [24] 1492 	mov	r3,dpl
   0403 AD 83         [24] 1493 	mov	r5,dph
   0405 AE F0         [24] 1494 	mov	r6,b
   0407 FF            [12] 1495 	mov	r7,a
                           1496 ;	radio/at.c:355: printf("%lu\n", val);
   0408 C0 03         [24] 1497 	push	ar3
   040A C0 05         [24] 1498 	push	ar5
   040C C0 06         [24] 1499 	push	ar6
   040E C0 07         [24] 1500 	push	ar7
   0410 74r1E         [12] 1501 	mov	a,#__str_5
   0412 C0 E0         [24] 1502 	push	acc
   0414 74s00         [12] 1503 	mov	a,#(__str_5 >> 8)
   0416 C0 E0         [24] 1504 	push	acc
   0418 74 80         [12] 1505 	mov	a,#0x80
   041A C0 E0         [24] 1506 	push	acc
   041C 12r00r00      [24] 1507 	lcall	_printfl
   041F E5 81         [12] 1508 	mov	a,sp
   0421 24 F9         [12] 1509 	add	a,#0xf9
   0423 F5 81         [12] 1510 	mov	sp,a
                           1511 ;	radio/at.c:356: return;
                           1512 ;	radio/at.c:358: case '=':
   0425 22            [24] 1513 	ret
   0426                    1514 00104$:
                           1515 ;	radio/at.c:359: if (sreg > 0) {
   0426 EC            [12] 1516 	mov	a,r4
   0427 60 2B         [24] 1517 	jz	00109$
                           1518 ;	radio/at.c:360: idx++;
   0429 78r16         [12] 1519 	mov	r0,#_idx
   042B E2            [24] 1520 	movx	a,@r0
   042C 24 01         [12] 1521 	add	a,#0x01
   042E F2            [24] 1522 	movx	@r0,a
                           1523 ;	radio/at.c:361: val = at_parse_number();
   042F C0 04         [24] 1524 	push	ar4
   0431 12r01rEA      [24] 1525 	lcall	_at_parse_number
   0434 AB 82         [24] 1526 	mov	r3,dpl
   0436 AD 83         [24] 1527 	mov	r5,dph
   0438 AE F0         [24] 1528 	mov	r6,b
   043A FF            [12] 1529 	mov	r7,a
   043B D0 04         [24] 1530 	pop	ar4
                           1531 ;	radio/at.c:362: if (param_set(sreg, val)) {
   043D 78r00         [12] 1532 	mov	r0,#_param_set_PARM_2
   043F EB            [12] 1533 	mov	a,r3
   0440 F2            [24] 1534 	movx	@r0,a
   0441 08            [12] 1535 	inc	r0
   0442 ED            [12] 1536 	mov	a,r5
   0443 F2            [24] 1537 	movx	@r0,a
   0444 08            [12] 1538 	inc	r0
   0445 EE            [12] 1539 	mov	a,r6
   0446 F2            [24] 1540 	movx	@r0,a
   0447 08            [12] 1541 	inc	r0
   0448 EF            [12] 1542 	mov	a,r7
   0449 F2            [24] 1543 	movx	@r0,a
   044A 8C 82         [24] 1544 	mov	dpl,r4
   044C 12r00r00      [24] 1545 	lcall	_param_set
   044F 50 03         [24] 1546 	jnc	00109$
                           1547 ;	radio/at.c:363: at_ok();
                           1548 ;	radio/at.c:364: return;
                           1549 ;	radio/at.c:368: }
   0451 02r01rA6      [24] 1550 	ljmp	_at_ok
   0454                    1551 00109$:
                           1552 ;	radio/at.c:369: at_error();
   0454 02r01rC8      [24] 1553 	ljmp	_at_error
                           1554 ;------------------------------------------------------------
                           1555 ;Allocation info for local variables in function 'at_ampersand'
                           1556 ;------------------------------------------------------------
                           1557 ;x                         Allocated with name '_at_ampersand_x_3_168'
                           1558 ;------------------------------------------------------------
                           1559 ;	radio/at.c:373: at_ampersand(void)
                           1560 ;	-----------------------------------------
                           1561 ;	 function at_ampersand
                           1562 ;	-----------------------------------------
   0457                    1563 _at_ampersand:
                           1564 ;	radio/at.c:375: switch (at_cmd[3]) {
   0457 78r04         [12] 1565 	mov	r0,#(_at_cmd + 0x0003)
   0459 E2            [24] 1566 	movx	a,@r0
   045A FF            [12] 1567 	mov	r7,a
   045B BF 46 02      [24] 1568 	cjne	r7,#0x46,00154$
   045E 80 17         [24] 1569 	sjmp	00101$
   0460                    1570 00154$:
   0460 BF 50 02      [24] 1571 	cjne	r7,#0x50,00155$
   0463 80 4D         [24] 1572 	sjmp	00107$
   0465                    1573 00155$:
   0465 BF 54 02      [24] 1574 	cjne	r7,#0x54,00156$
   0468 80 4B         [24] 1575 	sjmp	00108$
   046A                    1576 00156$:
   046A BF 55 02      [24] 1577 	cjne	r7,#0x55,00157$
   046D 80 14         [24] 1578 	sjmp	00103$
   046F                    1579 00157$:
   046F BF 57 02      [24] 1580 	cjne	r7,#0x57,00158$
   0472 80 09         [24] 1581 	sjmp	00102$
   0474                    1582 00158$:
   0474 02r05r2B      [24] 1583 	ljmp	00118$
                           1584 ;	radio/at.c:376: case 'F':
   0477                    1585 00101$:
                           1586 ;	radio/at.c:377: param_default();
   0477 12r00r00      [24] 1587 	lcall	_param_default
                           1588 ;	radio/at.c:378: at_ok();
                           1589 ;	radio/at.c:379: break;
   047A 02r01rA6      [24] 1590 	ljmp	_at_ok
                           1591 ;	radio/at.c:380: case 'W':
   047D                    1592 00102$:
                           1593 ;	radio/at.c:381: param_save();
   047D 12r00r00      [24] 1594 	lcall	_param_save
                           1595 ;	radio/at.c:382: at_ok();
                           1596 ;	radio/at.c:383: break;
   0480 02r01rA6      [24] 1597 	ljmp	_at_ok
                           1598 ;	radio/at.c:385: case 'U':
   0483                    1599 00103$:
                           1600 ;	radio/at.c:386: if (!strcmp(at_cmd + 4, "PDATE")) {
   0483 90r00r00      [24] 1601 	mov	dptr,#_strcmp_PARM_2
   0486 74r23         [12] 1602 	mov	a,#__str_6
   0488 F0            [24] 1603 	movx	@dptr,a
   0489 74s00         [12] 1604 	mov	a,#(__str_6 >> 8)
   048B A3            [24] 1605 	inc	dptr
   048C F0            [24] 1606 	movx	@dptr,a
   048D 74 80         [12] 1607 	mov	a,#0x80
   048F A3            [24] 1608 	inc	dptr
   0490 F0            [24] 1609 	movx	@dptr,a
   0491 90r00r05      [24] 1610 	mov	dptr,#(_at_cmd + 0x0004)
   0494 75 F0 60      [24] 1611 	mov	b,#0x60
   0497 12r00r00      [24] 1612 	lcall	_strcmp
   049A E5 82         [12] 1613 	mov	a,dpl
   049C 85 83 F0      [24] 1614 	mov	b,dph
   049F 45 F0         [12] 1615 	orl	a,b
   04A1 70 0C         [24] 1616 	jnz	00106$
                           1617 ;	radio/at.c:388: volatile char x = *(__code volatile char *)0xfc00;
   04A3 90 FC 00      [24] 1618 	mov	dptr,#0xFC00
   04A6 E4            [12] 1619 	clr	a
   04A7 93            [24] 1620 	movc	a,@a+dptr
   04A8 FF            [12] 1621 	mov	r7,a
   04A9 90r00r00      [24] 1622 	mov	dptr,#_at_ampersand_x_3_168
   04AC F0            [24] 1623 	movx	@dptr,a
   04AD                    1624 00121$:
   04AD 80 FE         [24] 1625 	sjmp	00121$
   04AF                    1626 00106$:
                           1627 ;	radio/at.c:392: at_error();
                           1628 ;	radio/at.c:393: break;
   04AF 02r01rC8      [24] 1629 	ljmp	_at_error
                           1630 ;	radio/at.c:395: case 'P':
   04B2                    1631 00107$:
                           1632 ;	radio/at.c:396: tdm_change_phase();
                           1633 ;	radio/at.c:397: break;
   04B2 02r00r00      [24] 1634 	ljmp	_tdm_change_phase
                           1635 ;	radio/at.c:399: case 'T':
   04B5                    1636 00108$:
                           1637 ;	radio/at.c:401: if (!strcmp(at_cmd + 4, "")) {
   04B5 90r00r00      [24] 1638 	mov	dptr,#_strcmp_PARM_2
   04B8 74r29         [12] 1639 	mov	a,#__str_7
   04BA F0            [24] 1640 	movx	@dptr,a
   04BB 74s00         [12] 1641 	mov	a,#(__str_7 >> 8)
   04BD A3            [24] 1642 	inc	dptr
   04BE F0            [24] 1643 	movx	@dptr,a
   04BF 74 80         [12] 1644 	mov	a,#0x80
   04C1 A3            [24] 1645 	inc	dptr
   04C2 F0            [24] 1646 	movx	@dptr,a
   04C3 90r00r05      [24] 1647 	mov	dptr,#(_at_cmd + 0x0004)
   04C6 75 F0 60      [24] 1648 	mov	b,#0x60
   04C9 12r00r00      [24] 1649 	lcall	_strcmp
   04CC E5 82         [12] 1650 	mov	a,dpl
   04CE 85 83 F0      [24] 1651 	mov	b,dph
   04D1 45 F0         [12] 1652 	orl	a,b
   04D3 70 05         [24] 1653 	jnz	00116$
                           1654 ;	radio/at.c:403: at_testmode = 0;
   04D5 78r13         [12] 1655 	mov	r0,#_at_testmode
   04D7 E4            [12] 1656 	clr	a
   04D8 F2            [24] 1657 	movx	@r0,a
   04D9 22            [24] 1658 	ret
   04DA                    1659 00116$:
                           1660 ;	radio/at.c:404: } else if (!strcmp(at_cmd + 4, "=RSSI")) {
   04DA 90r00r00      [24] 1661 	mov	dptr,#_strcmp_PARM_2
   04DD 74r2A         [12] 1662 	mov	a,#__str_8
   04DF F0            [24] 1663 	movx	@dptr,a
   04E0 74s00         [12] 1664 	mov	a,#(__str_8 >> 8)
   04E2 A3            [24] 1665 	inc	dptr
   04E3 F0            [24] 1666 	movx	@dptr,a
   04E4 74 80         [12] 1667 	mov	a,#0x80
   04E6 A3            [24] 1668 	inc	dptr
   04E7 F0            [24] 1669 	movx	@dptr,a
   04E8 90r00r05      [24] 1670 	mov	dptr,#(_at_cmd + 0x0004)
   04EB 75 F0 60      [24] 1671 	mov	b,#0x60
   04EE 12r00r00      [24] 1672 	lcall	_strcmp
   04F1 E5 82         [12] 1673 	mov	a,dpl
   04F3 85 83 F0      [24] 1674 	mov	b,dph
   04F6 45 F0         [12] 1675 	orl	a,b
   04F8 70 07         [24] 1676 	jnz	00113$
                           1677 ;	radio/at.c:406: at_testmode ^= AT_TEST_RSSI;
   04FA 78r13         [12] 1678 	mov	r0,#_at_testmode
   04FC E2            [24] 1679 	movx	a,@r0
   04FD 64 01         [12] 1680 	xrl	a,#0x01
   04FF F2            [24] 1681 	movx	@r0,a
   0500 22            [24] 1682 	ret
   0501                    1683 00113$:
                           1684 ;	radio/at.c:407: } else if (!strcmp(at_cmd + 4, "=TDM")) {
   0501 90r00r00      [24] 1685 	mov	dptr,#_strcmp_PARM_2
   0504 74r30         [12] 1686 	mov	a,#__str_9
   0506 F0            [24] 1687 	movx	@dptr,a
   0507 74s00         [12] 1688 	mov	a,#(__str_9 >> 8)
   0509 A3            [24] 1689 	inc	dptr
   050A F0            [24] 1690 	movx	@dptr,a
   050B 74 80         [12] 1691 	mov	a,#0x80
   050D A3            [24] 1692 	inc	dptr
   050E F0            [24] 1693 	movx	@dptr,a
   050F 90r00r05      [24] 1694 	mov	dptr,#(_at_cmd + 0x0004)
   0512 75 F0 60      [24] 1695 	mov	b,#0x60
   0515 12r00r00      [24] 1696 	lcall	_strcmp
   0518 E5 82         [12] 1697 	mov	a,dpl
   051A 85 83 F0      [24] 1698 	mov	b,dph
   051D 45 F0         [12] 1699 	orl	a,b
   051F 70 07         [24] 1700 	jnz	00110$
                           1701 ;	radio/at.c:409: at_testmode ^= AT_TEST_TDM;
   0521 78r13         [12] 1702 	mov	r0,#_at_testmode
   0523 E2            [24] 1703 	movx	a,@r0
   0524 64 02         [12] 1704 	xrl	a,#0x02
   0526 F2            [24] 1705 	movx	@r0,a
   0527 22            [24] 1706 	ret
   0528                    1707 00110$:
                           1708 ;	radio/at.c:411: at_error();
                           1709 ;	radio/at.c:413: break;
                           1710 ;	radio/at.c:415: default:
   0528 02r01rC8      [24] 1711 	ljmp	_at_error
   052B                    1712 00118$:
                           1713 ;	radio/at.c:416: at_error();
                           1714 ;	radio/at.c:418: }
   052B 02r01rC8      [24] 1715 	ljmp	_at_error
                           1716 ;------------------------------------------------------------
                           1717 ;Allocation info for local variables in function 'at_plus'
                           1718 ;------------------------------------------------------------
                           1719 ;	radio/at.c:422: at_plus(void)
                           1720 ;	-----------------------------------------
                           1721 ;	 function at_plus
                           1722 ;	-----------------------------------------
   052E                    1723 _at_plus:
                           1724 ;	radio/at.c:474: at_error();
   052E 02r01rC8      [24] 1725 	ljmp	_at_error
                           1726 	.area CSEG    (CODE)
                           1727 	.area CONST   (CODE)
   0000                    1728 __str_0:
   0000 25 73              1729 	.ascii "%s"
   0002 0A                 1730 	.db 0x0A
   0003 00                 1731 	.db 0x00
   0004                    1732 __str_1:
   0004 4F 4B              1733 	.ascii "OK"
   0006 00                 1734 	.db 0x00
   0007                    1735 __str_2:
   0007 45 52 52 4F 52     1736 	.ascii "ERROR"
   000C 00                 1737 	.db 0x00
   000D                    1738 __str_3:
   000D 25 75              1739 	.ascii "%u"
   000F 0A                 1740 	.db 0x0A
   0010 00                 1741 	.db 0x00
   0011                    1742 __str_4:
   0011 53 25 75 3A 20 25  1743 	.ascii "S%u: %s=%lu"
        73 3D 25 6C 75
   001C 0A                 1744 	.db 0x0A
   001D 00                 1745 	.db 0x00
   001E                    1746 __str_5:
   001E 25 6C 75           1747 	.ascii "%lu"
   0021 0A                 1748 	.db 0x0A
   0022 00                 1749 	.db 0x00
   0023                    1750 __str_6:
   0023 50 44 41 54 45     1751 	.ascii "PDATE"
   0028 00                 1752 	.db 0x00
   0029                    1753 __str_7:
   0029 00                 1754 	.db 0x00
   002A                    1755 __str_8:
   002A 3D 52 53 53 49     1756 	.ascii "=RSSI"
   002F 00                 1757 	.db 0x00
   0030                    1758 __str_9:
   0030 3D 54 44 4D        1759 	.ascii "=TDM"
   0034 00                 1760 	.db 0x00
                           1761 	.area XINIT   (CODE)
                           1762 	.area CABS    (ABS,CODE)
