                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.3.0 #8604 (May 11 2013) (Linux)
                              4 ; This file was generated Sun Nov 24 17:43:08 2013
                              5 ;--------------------------------------------------------
                              6 	.module tdm
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _fhop_set_locked
                             13 	.globl _fhop_window_change
                             14 	.globl _fhop_receive_channel
                             15 	.globl _fhop_transmit_channel
                             16 	.globl _packet_inject
                             17 	.globl _packet_set_max_xmit
                             18 	.globl _packet_force_resend
                             19 	.globl _packet_is_duplicate
                             20 	.globl _packet_is_injected
                             21 	.globl _packet_is_resend
                             22 	.globl _packet_get_next
                             23 	.globl _timer_entropy
                             24 	.globl _delay_msec
                             25 	.globl _timer2_tick
                             26 	.globl _radio_temperature
                             27 	.globl _MAVLink_report
                             28 	.globl _radio_receive_in_progress
                             29 	.globl _radio_get_transmit_power
                             30 	.globl _radio_air_rate
                             31 	.globl _radio_current_rssi
                             32 	.globl _radio_last_rssi
                             33 	.globl _radio_set_channel
                             34 	.globl _radio_receiver_on
                             35 	.globl _radio_transmit
                             36 	.globl _radio_preamble_detected
                             37 	.globl _radio_receive_packet
                             38 	.globl _printf_end_capture
                             39 	.globl _printf_start_capture
                             40 	.globl _printfl
                             41 	.globl _panic
                             42 	.globl _at_command
                             43 	.globl _constrain
                             44 	.globl _serial_write_buf
                             45 	.globl _strlen
                             46 	.globl _memset
                             47 	.globl _memcpy
                             48 	.globl _rand
                             49 	.globl _putchar
                             50 	.globl _TDM_SYNC_PIN
                             51 	.globl _SDN
                             52 	.globl _NSS1
                             53 	.globl _IRQ
                             54 	.globl _BUTTON_DOWN
                             55 	.globl _BUTTON_UP
                             56 	.globl _BUTTON_ENTER
                             57 	.globl _LED_GREEN
                             58 	.globl _LED_RED
                             59 	.globl _SPI0EN
                             60 	.globl _TXBMT0
                             61 	.globl _NSS0MD0
                             62 	.globl _NSS0MD1
                             63 	.globl _RXOVRN0
                             64 	.globl _MODF0
                             65 	.globl _WCOL0
                             66 	.globl _SPIF0
                             67 	.globl _AD0CM0
                             68 	.globl _AD0CM1
                             69 	.globl _AD0CM2
                             70 	.globl _AD0WINT
                             71 	.globl _AD0BUSY
                             72 	.globl _AD0INT
                             73 	.globl _BURSTEN
                             74 	.globl _AD0EN
                             75 	.globl _CCF0
                             76 	.globl _CCF1
                             77 	.globl _CCF2
                             78 	.globl _CCF3
                             79 	.globl _CCF4
                             80 	.globl _CCF5
                             81 	.globl _CR
                             82 	.globl _CF
                             83 	.globl _P
                             84 	.globl _F1
                             85 	.globl _OV
                             86 	.globl _RS0
                             87 	.globl _RS1
                             88 	.globl _F0
                             89 	.globl _AC
                             90 	.globl _CY
                             91 	.globl _T2XCLK
                             92 	.globl _T2RCLK
                             93 	.globl _TR2
                             94 	.globl _T2SPLIT
                             95 	.globl _TF2CEN
                             96 	.globl _TF2LEN
                             97 	.globl _TF2L
                             98 	.globl _TF2H
                             99 	.globl _SI
                            100 	.globl _ACK
                            101 	.globl _ARBLOST
                            102 	.globl _ACKRQ
                            103 	.globl _STO
                            104 	.globl _STA
                            105 	.globl _TXMODE
                            106 	.globl _MASTER
                            107 	.globl _PX0
                            108 	.globl _PT0
                            109 	.globl _PX1
                            110 	.globl _PT1
                            111 	.globl _PS0
                            112 	.globl _PT2
                            113 	.globl _PSPI0
                            114 	.globl _SPI1EN
                            115 	.globl _TXBMT1
                            116 	.globl _NSS1MD0
                            117 	.globl _NSS1MD1
                            118 	.globl _RXOVRN1
                            119 	.globl _MODF1
                            120 	.globl _WCOL1
                            121 	.globl _SPIF1
                            122 	.globl _EX0
                            123 	.globl _ET0
                            124 	.globl _EX1
                            125 	.globl _ET1
                            126 	.globl _ES0
                            127 	.globl _ET2
                            128 	.globl _ESPI0
                            129 	.globl _EA
                            130 	.globl _RI0
                            131 	.globl _TI0
                            132 	.globl _RB80
                            133 	.globl _TB80
                            134 	.globl _REN0
                            135 	.globl _MCE0
                            136 	.globl _S0MODE
                            137 	.globl _CRC0VAL
                            138 	.globl _CRC0INIT
                            139 	.globl _CRC0SEL
                            140 	.globl _IT0
                            141 	.globl _IE0
                            142 	.globl _IT1
                            143 	.globl _IE1
                            144 	.globl _TR0
                            145 	.globl _TF0
                            146 	.globl _TR1
                            147 	.globl _TF1
                            148 	.globl _PCA0CP4
                            149 	.globl _PCA0CP0
                            150 	.globl _PCA0
                            151 	.globl _PCA0CP3
                            152 	.globl _PCA0CP2
                            153 	.globl _PCA0CP1
                            154 	.globl _PCA0CP5
                            155 	.globl _TMR2
                            156 	.globl _TMR2RL
                            157 	.globl _ADC0LT
                            158 	.globl _ADC0GT
                            159 	.globl _ADC0
                            160 	.globl _TMR3
                            161 	.globl _TMR3RL
                            162 	.globl _TOFF
                            163 	.globl _DP
                            164 	.globl _VDM0CN
                            165 	.globl _PCA0CPH4
                            166 	.globl _PCA0CPL4
                            167 	.globl _PCA0CPH0
                            168 	.globl _PCA0CPL0
                            169 	.globl _PCA0H
                            170 	.globl _PCA0L
                            171 	.globl _SPI0CN
                            172 	.globl _EIP2
                            173 	.globl _EIP1
                            174 	.globl _SMB0ADM
                            175 	.globl _SMB0ADR
                            176 	.globl _P2MDIN
                            177 	.globl _P1MDIN
                            178 	.globl _P0MDIN
                            179 	.globl _B
                            180 	.globl _RSTSRC
                            181 	.globl _PCA0CPH3
                            182 	.globl _PCA0CPL3
                            183 	.globl _PCA0CPH2
                            184 	.globl _PCA0CPL2
                            185 	.globl _PCA0CPH1
                            186 	.globl _PCA0CPL1
                            187 	.globl _ADC0CN
                            188 	.globl _EIE2
                            189 	.globl _EIE1
                            190 	.globl _FLWR
                            191 	.globl _IT01CF
                            192 	.globl _XBR2
                            193 	.globl _XBR1
                            194 	.globl _XBR0
                            195 	.globl _ACC
                            196 	.globl _PCA0PWM
                            197 	.globl _PCA0CPM4
                            198 	.globl _PCA0CPM3
                            199 	.globl _PCA0CPM2
                            200 	.globl _PCA0CPM1
                            201 	.globl _PCA0CPM0
                            202 	.globl _PCA0MD
                            203 	.globl _PCA0CN
                            204 	.globl _P0MAT
                            205 	.globl _P2SKIP
                            206 	.globl _P1SKIP
                            207 	.globl _P0SKIP
                            208 	.globl _PCA0CPH5
                            209 	.globl _PCA0CPL5
                            210 	.globl _REF0CN
                            211 	.globl _PSW
                            212 	.globl _P1MAT
                            213 	.globl _PCA0CPM5
                            214 	.globl _TMR2H
                            215 	.globl _TMR2L
                            216 	.globl _TMR2RLH
                            217 	.globl _TMR2RLL
                            218 	.globl _REG0CN
                            219 	.globl _TMR2CN
                            220 	.globl _P0MASK
                            221 	.globl _ADC0LTH
                            222 	.globl _ADC0LTL
                            223 	.globl _ADC0GTH
                            224 	.globl _ADC0GTL
                            225 	.globl _SMB0DAT
                            226 	.globl _SMB0CF
                            227 	.globl _SMB0CN
                            228 	.globl _P1MASK
                            229 	.globl _ADC0H
                            230 	.globl _ADC0L
                            231 	.globl _ADC0TK
                            232 	.globl _ADC0CF
                            233 	.globl _ADC0MX
                            234 	.globl _ADC0PWR
                            235 	.globl _ADC0AC
                            236 	.globl _IREF0CN
                            237 	.globl _IP
                            238 	.globl _FLKEY
                            239 	.globl _FLSCL
                            240 	.globl _PMU0CF
                            241 	.globl _OSCICL
                            242 	.globl _OSCICN
                            243 	.globl _OSCXCN
                            244 	.globl _SPI1CN
                            245 	.globl _ONESHOT
                            246 	.globl _EMI0TC
                            247 	.globl _RTC0KEY
                            248 	.globl _RTC0DAT
                            249 	.globl _RTC0ADR
                            250 	.globl _EMI0CF
                            251 	.globl _EMI0CN
                            252 	.globl _CLKSEL
                            253 	.globl _IE
                            254 	.globl _SFRPAGE
                            255 	.globl _P2DRV
                            256 	.globl _P2MDOUT
                            257 	.globl _P1DRV
                            258 	.globl _P1MDOUT
                            259 	.globl _P0DRV
                            260 	.globl _P0MDOUT
                            261 	.globl _SPI0DAT
                            262 	.globl _SPI0CKR
                            263 	.globl _SPI0CFG
                            264 	.globl _P2
                            265 	.globl _CPT0MX
                            266 	.globl _CPT1MX
                            267 	.globl _CPT0MD
                            268 	.globl _CPT1MD
                            269 	.globl _CPT0CN
                            270 	.globl _CPT1CN
                            271 	.globl _SBUF0
                            272 	.globl _SCON0
                            273 	.globl _CRC0CNT
                            274 	.globl _DC0CN
                            275 	.globl _CRC0AUTO
                            276 	.globl _DC0CF
                            277 	.globl _TMR3H
                            278 	.globl _CRC0FLIP
                            279 	.globl _TMR3L
                            280 	.globl _CRC0IN
                            281 	.globl _TMR3RLH
                            282 	.globl _CRC0CN
                            283 	.globl _TMR3RLL
                            284 	.globl _CRC0DAT
                            285 	.globl _TMR3CN
                            286 	.globl _P1
                            287 	.globl _PSCTL
                            288 	.globl _CKCON
                            289 	.globl _TH1
                            290 	.globl _TH0
                            291 	.globl _TL1
                            292 	.globl _TL0
                            293 	.globl _TMOD
                            294 	.globl _TCON
                            295 	.globl _PCON
                            296 	.globl _TOFFH
                            297 	.globl _SPI1DAT
                            298 	.globl _TOFFL
                            299 	.globl _SPI1CKR
                            300 	.globl _SPI1CFG
                            301 	.globl _DPH
                            302 	.globl _DPL
                            303 	.globl _SP
                            304 	.globl _P0
                            305 	.globl _pbuf
                            306 	.globl _trailer
                            307 	.globl _test_display
                            308 	.globl _lbt_rssi
                            309 	.globl _duty_cycle_offset
                            310 	.globl _duty_cycle
                            311 	.globl _transmit_wait
                            312 	.globl __canary
                            313 	.globl _tdm_show_rssi
                            314 	.globl _tdm_change_phase
                            315 	.globl _tdm_remote_at
                            316 	.globl _tdm_serial_loop
                            317 	.globl _tdm_init
                            318 	.globl _tdm_report_timing
                            319 ;--------------------------------------------------------
                            320 ; special function registers
                            321 ;--------------------------------------------------------
                            322 	.area RSEG    (ABS,DATA)
   0000                     323 	.org 0x0000
                     0080   324 _P0	=	0x0080
                     0081   325 _SP	=	0x0081
                     0082   326 _DPL	=	0x0082
                     0083   327 _DPH	=	0x0083
                     0084   328 _SPI1CFG	=	0x0084
                     0085   329 _SPI1CKR	=	0x0085
                     0085   330 _TOFFL	=	0x0085
                     0086   331 _SPI1DAT	=	0x0086
                     0086   332 _TOFFH	=	0x0086
                     0087   333 _PCON	=	0x0087
                     0088   334 _TCON	=	0x0088
                     0089   335 _TMOD	=	0x0089
                     008A   336 _TL0	=	0x008a
                     008B   337 _TL1	=	0x008b
                     008C   338 _TH0	=	0x008c
                     008D   339 _TH1	=	0x008d
                     008E   340 _CKCON	=	0x008e
                     008F   341 _PSCTL	=	0x008f
                     0090   342 _P1	=	0x0090
                     0091   343 _TMR3CN	=	0x0091
                     0091   344 _CRC0DAT	=	0x0091
                     0092   345 _TMR3RLL	=	0x0092
                     0092   346 _CRC0CN	=	0x0092
                     0093   347 _TMR3RLH	=	0x0093
                     0093   348 _CRC0IN	=	0x0093
                     0094   349 _TMR3L	=	0x0094
                     0095   350 _CRC0FLIP	=	0x0095
                     0095   351 _TMR3H	=	0x0095
                     0096   352 _DC0CF	=	0x0096
                     0096   353 _CRC0AUTO	=	0x0096
                     0097   354 _DC0CN	=	0x0097
                     0097   355 _CRC0CNT	=	0x0097
                     0098   356 _SCON0	=	0x0098
                     0099   357 _SBUF0	=	0x0099
                     009A   358 _CPT1CN	=	0x009a
                     009B   359 _CPT0CN	=	0x009b
                     009C   360 _CPT1MD	=	0x009c
                     009D   361 _CPT0MD	=	0x009d
                     009E   362 _CPT1MX	=	0x009e
                     009F   363 _CPT0MX	=	0x009f
                     00A0   364 _P2	=	0x00a0
                     00A1   365 _SPI0CFG	=	0x00a1
                     00A2   366 _SPI0CKR	=	0x00a2
                     00A3   367 _SPI0DAT	=	0x00a3
                     00A4   368 _P0MDOUT	=	0x00a4
                     00A4   369 _P0DRV	=	0x00a4
                     00A5   370 _P1MDOUT	=	0x00a5
                     00A5   371 _P1DRV	=	0x00a5
                     00A6   372 _P2MDOUT	=	0x00a6
                     00A6   373 _P2DRV	=	0x00a6
                     00A7   374 _SFRPAGE	=	0x00a7
                     00A8   375 _IE	=	0x00a8
                     00A9   376 _CLKSEL	=	0x00a9
                     00AA   377 _EMI0CN	=	0x00aa
                     00AB   378 _EMI0CF	=	0x00ab
                     00AC   379 _RTC0ADR	=	0x00ac
                     00AD   380 _RTC0DAT	=	0x00ad
                     00AE   381 _RTC0KEY	=	0x00ae
                     00AF   382 _EMI0TC	=	0x00af
                     00AF   383 _ONESHOT	=	0x00af
                     00B0   384 _SPI1CN	=	0x00b0
                     00B1   385 _OSCXCN	=	0x00b1
                     00B2   386 _OSCICN	=	0x00b2
                     00B3   387 _OSCICL	=	0x00b3
                     00B5   388 _PMU0CF	=	0x00b5
                     00B6   389 _FLSCL	=	0x00b6
                     00B7   390 _FLKEY	=	0x00b7
                     00B8   391 _IP	=	0x00b8
                     00B9   392 _IREF0CN	=	0x00b9
                     00BA   393 _ADC0AC	=	0x00ba
                     00BA   394 _ADC0PWR	=	0x00ba
                     00BB   395 _ADC0MX	=	0x00bb
                     00BC   396 _ADC0CF	=	0x00bc
                     00BD   397 _ADC0TK	=	0x00bd
                     00BD   398 _ADC0L	=	0x00bd
                     00BE   399 _ADC0H	=	0x00be
                     00BF   400 _P1MASK	=	0x00bf
                     00C0   401 _SMB0CN	=	0x00c0
                     00C1   402 _SMB0CF	=	0x00c1
                     00C2   403 _SMB0DAT	=	0x00c2
                     00C3   404 _ADC0GTL	=	0x00c3
                     00C4   405 _ADC0GTH	=	0x00c4
                     00C5   406 _ADC0LTL	=	0x00c5
                     00C6   407 _ADC0LTH	=	0x00c6
                     00C7   408 _P0MASK	=	0x00c7
                     00C8   409 _TMR2CN	=	0x00c8
                     00C9   410 _REG0CN	=	0x00c9
                     00CA   411 _TMR2RLL	=	0x00ca
                     00CB   412 _TMR2RLH	=	0x00cb
                     00CC   413 _TMR2L	=	0x00cc
                     00CD   414 _TMR2H	=	0x00cd
                     00CE   415 _PCA0CPM5	=	0x00ce
                     00CF   416 _P1MAT	=	0x00cf
                     00D0   417 _PSW	=	0x00d0
                     00D1   418 _REF0CN	=	0x00d1
                     00D2   419 _PCA0CPL5	=	0x00d2
                     00D3   420 _PCA0CPH5	=	0x00d3
                     00D4   421 _P0SKIP	=	0x00d4
                     00D5   422 _P1SKIP	=	0x00d5
                     00D6   423 _P2SKIP	=	0x00d6
                     00D7   424 _P0MAT	=	0x00d7
                     00D8   425 _PCA0CN	=	0x00d8
                     00D9   426 _PCA0MD	=	0x00d9
                     00DA   427 _PCA0CPM0	=	0x00da
                     00DB   428 _PCA0CPM1	=	0x00db
                     00DC   429 _PCA0CPM2	=	0x00dc
                     00DD   430 _PCA0CPM3	=	0x00dd
                     00DE   431 _PCA0CPM4	=	0x00de
                     00DF   432 _PCA0PWM	=	0x00df
                     00E0   433 _ACC	=	0x00e0
                     00E1   434 _XBR0	=	0x00e1
                     00E2   435 _XBR1	=	0x00e2
                     00E3   436 _XBR2	=	0x00e3
                     00E4   437 _IT01CF	=	0x00e4
                     00E5   438 _FLWR	=	0x00e5
                     00E6   439 _EIE1	=	0x00e6
                     00E7   440 _EIE2	=	0x00e7
                     00E8   441 _ADC0CN	=	0x00e8
                     00E9   442 _PCA0CPL1	=	0x00e9
                     00EA   443 _PCA0CPH1	=	0x00ea
                     00EB   444 _PCA0CPL2	=	0x00eb
                     00EC   445 _PCA0CPH2	=	0x00ec
                     00ED   446 _PCA0CPL3	=	0x00ed
                     00EE   447 _PCA0CPH3	=	0x00ee
                     00EF   448 _RSTSRC	=	0x00ef
                     00F0   449 _B	=	0x00f0
                     00F1   450 _P0MDIN	=	0x00f1
                     00F2   451 _P1MDIN	=	0x00f2
                     00F3   452 _P2MDIN	=	0x00f3
                     00F4   453 _SMB0ADR	=	0x00f4
                     00F5   454 _SMB0ADM	=	0x00f5
                     00F6   455 _EIP1	=	0x00f6
                     00F7   456 _EIP2	=	0x00f7
                     00F8   457 _SPI0CN	=	0x00f8
                     00F9   458 _PCA0L	=	0x00f9
                     00FA   459 _PCA0H	=	0x00fa
                     00FB   460 _PCA0CPL0	=	0x00fb
                     00FC   461 _PCA0CPH0	=	0x00fc
                     00FD   462 _PCA0CPL4	=	0x00fd
                     00FE   463 _PCA0CPH4	=	0x00fe
                     00FF   464 _VDM0CN	=	0x00ff
                     8382   465 _DP	=	0x8382
                     8685   466 _TOFF	=	0x8685
                     9392   467 _TMR3RL	=	0x9392
                     9594   468 _TMR3	=	0x9594
                     BEBD   469 _ADC0	=	0xbebd
                     C4C3   470 _ADC0GT	=	0xc4c3
                     C6C5   471 _ADC0LT	=	0xc6c5
                     CBCA   472 _TMR2RL	=	0xcbca
                     CDCC   473 _TMR2	=	0xcdcc
                     D3D2   474 _PCA0CP5	=	0xd3d2
                     EAE9   475 _PCA0CP1	=	0xeae9
                     ECEB   476 _PCA0CP2	=	0xeceb
                     EEED   477 _PCA0CP3	=	0xeeed
                     FAF9   478 _PCA0	=	0xfaf9
                     FCFB   479 _PCA0CP0	=	0xfcfb
                     FEFD   480 _PCA0CP4	=	0xfefd
                            481 ;--------------------------------------------------------
                            482 ; special function bits
                            483 ;--------------------------------------------------------
                            484 	.area RSEG    (ABS,DATA)
   0000                     485 	.org 0x0000
                     008F   486 _TF1	=	0x008f
                     008E   487 _TR1	=	0x008e
                     008D   488 _TF0	=	0x008d
                     008C   489 _TR0	=	0x008c
                     008B   490 _IE1	=	0x008b
                     008A   491 _IT1	=	0x008a
                     0089   492 _IE0	=	0x0089
                     0088   493 _IT0	=	0x0088
                     0096   494 _CRC0SEL	=	0x0096
                     0095   495 _CRC0INIT	=	0x0095
                     0094   496 _CRC0VAL	=	0x0094
                     009F   497 _S0MODE	=	0x009f
                     009D   498 _MCE0	=	0x009d
                     009C   499 _REN0	=	0x009c
                     009B   500 _TB80	=	0x009b
                     009A   501 _RB80	=	0x009a
                     0099   502 _TI0	=	0x0099
                     0098   503 _RI0	=	0x0098
                     00AF   504 _EA	=	0x00af
                     00AE   505 _ESPI0	=	0x00ae
                     00AD   506 _ET2	=	0x00ad
                     00AC   507 _ES0	=	0x00ac
                     00AB   508 _ET1	=	0x00ab
                     00AA   509 _EX1	=	0x00aa
                     00A9   510 _ET0	=	0x00a9
                     00A8   511 _EX0	=	0x00a8
                     00B7   512 _SPIF1	=	0x00b7
                     00B6   513 _WCOL1	=	0x00b6
                     00B5   514 _MODF1	=	0x00b5
                     00B4   515 _RXOVRN1	=	0x00b4
                     00B3   516 _NSS1MD1	=	0x00b3
                     00B2   517 _NSS1MD0	=	0x00b2
                     00B1   518 _TXBMT1	=	0x00b1
                     00B0   519 _SPI1EN	=	0x00b0
                     00BE   520 _PSPI0	=	0x00be
                     00BD   521 _PT2	=	0x00bd
                     00BC   522 _PS0	=	0x00bc
                     00BB   523 _PT1	=	0x00bb
                     00BA   524 _PX1	=	0x00ba
                     00B9   525 _PT0	=	0x00b9
                     00B8   526 _PX0	=	0x00b8
                     00C7   527 _MASTER	=	0x00c7
                     00C6   528 _TXMODE	=	0x00c6
                     00C5   529 _STA	=	0x00c5
                     00C4   530 _STO	=	0x00c4
                     00C3   531 _ACKRQ	=	0x00c3
                     00C2   532 _ARBLOST	=	0x00c2
                     00C1   533 _ACK	=	0x00c1
                     00C0   534 _SI	=	0x00c0
                     00CF   535 _TF2H	=	0x00cf
                     00CE   536 _TF2L	=	0x00ce
                     00CD   537 _TF2LEN	=	0x00cd
                     00CC   538 _TF2CEN	=	0x00cc
                     00CB   539 _T2SPLIT	=	0x00cb
                     00CA   540 _TR2	=	0x00ca
                     00C9   541 _T2RCLK	=	0x00c9
                     00C8   542 _T2XCLK	=	0x00c8
                     00D7   543 _CY	=	0x00d7
                     00D6   544 _AC	=	0x00d6
                     00D5   545 _F0	=	0x00d5
                     00D4   546 _RS1	=	0x00d4
                     00D3   547 _RS0	=	0x00d3
                     00D2   548 _OV	=	0x00d2
                     00D1   549 _F1	=	0x00d1
                     00D0   550 _P	=	0x00d0
                     00DF   551 _CF	=	0x00df
                     00DE   552 _CR	=	0x00de
                     00DD   553 _CCF5	=	0x00dd
                     00DC   554 _CCF4	=	0x00dc
                     00DB   555 _CCF3	=	0x00db
                     00DA   556 _CCF2	=	0x00da
                     00D9   557 _CCF1	=	0x00d9
                     00D8   558 _CCF0	=	0x00d8
                     00EF   559 _AD0EN	=	0x00ef
                     00EE   560 _BURSTEN	=	0x00ee
                     00ED   561 _AD0INT	=	0x00ed
                     00EC   562 _AD0BUSY	=	0x00ec
                     00EB   563 _AD0WINT	=	0x00eb
                     00EA   564 _AD0CM2	=	0x00ea
                     00E9   565 _AD0CM1	=	0x00e9
                     00E8   566 _AD0CM0	=	0x00e8
                     00FF   567 _SPIF0	=	0x00ff
                     00FE   568 _WCOL0	=	0x00fe
                     00FD   569 _MODF0	=	0x00fd
                     00FC   570 _RXOVRN0	=	0x00fc
                     00FB   571 _NSS0MD1	=	0x00fb
                     00FA   572 _NSS0MD0	=	0x00fa
                     00F9   573 _TXBMT0	=	0x00f9
                     00F8   574 _SPI0EN	=	0x00f8
                     00A0   575 _LED_RED	=	0x00a0
                     00A5   576 _LED_GREEN	=	0x00a5
                     0086   577 _BUTTON_ENTER	=	0x0086
                     0095   578 _BUTTON_UP	=	0x0095
                     0096   579 _BUTTON_DOWN	=	0x0096
                     0087   580 _IRQ	=	0x0087
                     0094   581 _NSS1	=	0x0094
                     00A6   582 _SDN	=	0x00a6
                     00A6   583 _TDM_SYNC_PIN	=	0x00a6
                            584 ;--------------------------------------------------------
                            585 ; overlayable register banks
                            586 ;--------------------------------------------------------
                            587 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     588 	.ds 8
                            589 ;--------------------------------------------------------
                            590 ; internal ram data
                            591 ;--------------------------------------------------------
                            592 	.area DSEG    (DATA)
   0000                     593 _average_duty_cycle:
   0000                     594 	.ds 4
   0004                     595 _tdm_show_rssi_sloc0_1_0:
   0004                     596 	.ds 2
   0006                     597 _tdm_show_rssi_sloc1_1_0:
   0006                     598 	.ds 2
   0008                     599 _tdm_show_rssi_sloc2_1_0:
   0008                     600 	.ds 2
   000A                     601 _tdm_show_rssi_sloc3_1_0:
   000A                     602 	.ds 2
   000C                     603 _tdm_show_rssi_sloc4_1_0:
   000C                     604 	.ds 2
   000E                     605 _sync_tx_windows_old_state_1_155:
   000E                     606 	.ds 1
   000F                     607 _tdm_state_update_sloc0_1_0:
   000F                     608 	.ds 2
   0011                     609 _tdm_state_update_sloc1_1_0:
   0011                     610 	.ds 4
   0015                     611 _tdm_state_update_sloc2_1_0:
   0015                     612 	.ds 4
   0019                     613 _tdm_init_sloc0_1_0:
   0019                     614 	.ds 4
                            615 ;--------------------------------------------------------
                            616 ; overlayable items in internal ram 
                            617 ;--------------------------------------------------------
                            618 ;--------------------------------------------------------
                            619 ; indirectly addressable internal ram data
                            620 ;--------------------------------------------------------
                            621 	.area ISEG    (DATA)
                     00FF   622 __canary	=	0x00ff
                            623 ;--------------------------------------------------------
                            624 ; absolute internal ram data
                            625 ;--------------------------------------------------------
                            626 	.area IABS    (ABS,DATA)
                            627 	.area IABS    (ABS,DATA)
                            628 ;--------------------------------------------------------
                            629 ; bit data
                            630 ;--------------------------------------------------------
                            631 	.area BSEG    (BIT)
   0000                     632 _bonus_transmit:
   0000                     633 	.ds 1
   0001                     634 _transmit_yield:
   0001                     635 	.ds 1
   0002                     636 _blink_state:
   0002                     637 	.ds 1
   0003                     638 _received_packet:
   0003                     639 	.ds 1
   0004                     640 _duty_cycle_wait:
   0004                     641 	.ds 1
   0005                     642 _send_statistics:
   0005                     643 	.ds 1
   0006                     644 _send_at_command:
   0006                     645 	.ds 1
   0007                     646 _sync_tx_windows_sloc0_1_0:
   0007                     647 	.ds 1
   0008                     648 _tdm_state_update_sloc3_1_0:
   0008                     649 	.ds 1
   0009                     650 _tdm_serial_loop_sloc0_1_0:
   0009                     651 	.ds 1
                            652 ;--------------------------------------------------------
                            653 ; paged external ram data
                            654 ;--------------------------------------------------------
                            655 	.area PSEG    (PAG,XDATA)
   0000                     656 _tdm_state:
   0000                     657 	.ds 1
   0001                     658 _tdm_state_remaining:
   0001                     659 	.ds 2
   0003                     660 _tx_window_width:
   0003                     661 	.ds 2
   0005                     662 _max_data_packet_length:
   0005                     663 	.ds 1
   0006                     664 _silence_period:
   0006                     665 	.ds 2
   0008                     666 _packet_latency:
   0008                     667 	.ds 2
   000A                     668 _ticks_per_byte:
   000A                     669 	.ds 2
   000C                     670 _transmit_wait::
   000C                     671 	.ds 2
   000E                     672 _duty_cycle::
   000E                     673 	.ds 1
   000F                     674 _duty_cycle_offset::
   000F                     675 	.ds 1
   0010                     676 _transmitted_ticks:
   0010                     677 	.ds 2
   0012                     678 _lbt_rssi::
   0012                     679 	.ds 1
   0013                     680 _lbt_listen_time:
   0013                     681 	.ds 2
   0015                     682 _lbt_min_time:
   0015                     683 	.ds 2
   0017                     684 _lbt_rand:
   0017                     685 	.ds 2
   0019                     686 _test_display::
   0019                     687 	.ds 1
   001A                     688 _trailer::
   001A                     689 	.ds 2
   001C                     690 _remote_at_cmd:
   001C                     691 	.ds 17
   002D                     692 _sync_tx_windows_delta_2_162:
   002D                     693 	.ds 2
   002F                     694 _tdm_serial_loop_last_t_1_207:
   002F                     695 	.ds 2
   0031                     696 _tdm_serial_loop_last_link_update_1_207:
   0031                     697 	.ds 2
   0033                     698 _tdm_serial_loop_len_2_208:
   0033                     699 	.ds 1
   0034                     700 _tdm_serial_loop_tdelta_2_208:
   0034                     701 	.ds 2
                            702 ;--------------------------------------------------------
                            703 ; external ram data
                            704 ;--------------------------------------------------------
                            705 	.area XSEG    (XDATA)
   0000                     706 _pbuf::
   0000                     707 	.ds 252
   00FC                     708 _link_update_unlock_count_1_185:
   00FC                     709 	.ds 1
   00FD                     710 _link_update_temperature_count_1_185:
   00FD                     711 	.ds 1
                            712 ;--------------------------------------------------------
                            713 ; absolute external ram data
                            714 ;--------------------------------------------------------
                            715 	.area XABS    (ABS,XDATA)
                            716 ;--------------------------------------------------------
                            717 ; external initialized ram data
                            718 ;--------------------------------------------------------
                            719 	.area XISEG   (XDATA)
                            720 	.area HOME    (CODE)
                            721 	.area GSINIT0 (CODE)
                            722 	.area GSINIT1 (CODE)
                            723 	.area GSINIT2 (CODE)
                            724 	.area GSINIT3 (CODE)
                            725 	.area GSINIT4 (CODE)
                            726 	.area GSINIT5 (CODE)
                            727 	.area GSINIT  (CODE)
                            728 	.area GSFINAL (CODE)
                            729 	.area CSEG    (CODE)
                            730 ;--------------------------------------------------------
                            731 ; global & static initialisations
                            732 ;--------------------------------------------------------
                            733 	.area HOME    (CODE)
                            734 	.area GSINIT  (CODE)
                            735 	.area GSFINAL (CODE)
                            736 	.area GSINIT  (CODE)
                            737 ;--------------------------------------------------------
                            738 ; Home
                            739 ;--------------------------------------------------------
                            740 	.area HOME    (CODE)
                            741 	.area HOME    (CODE)
                            742 ;--------------------------------------------------------
                            743 ; code
                            744 ;--------------------------------------------------------
                            745 	.area CSEG    (CODE)
                            746 ;------------------------------------------------------------
                            747 ;Allocation info for local variables in function 'tdm_show_rssi'
                            748 ;------------------------------------------------------------
                            749 ;sloc0                     Allocated with name '_tdm_show_rssi_sloc0_1_0'
                            750 ;sloc1                     Allocated with name '_tdm_show_rssi_sloc1_1_0'
                            751 ;sloc2                     Allocated with name '_tdm_show_rssi_sloc2_1_0'
                            752 ;sloc3                     Allocated with name '_tdm_show_rssi_sloc3_1_0'
                            753 ;sloc4                     Allocated with name '_tdm_show_rssi_sloc4_1_0'
                            754 ;------------------------------------------------------------
                            755 ;	radio/tdm.c:152: tdm_show_rssi(void)
                            756 ;	-----------------------------------------
                            757 ;	 function tdm_show_rssi
                            758 ;	-----------------------------------------
   0000                     759 _tdm_show_rssi:
                     0007   760 	ar7 = 0x07
                     0006   761 	ar6 = 0x06
                     0005   762 	ar5 = 0x05
                     0004   763 	ar4 = 0x04
                     0003   764 	ar3 = 0x03
                     0002   765 	ar2 = 0x02
                     0001   766 	ar1 = 0x01
                     0000   767 	ar0 = 0x00
                            768 ;	radio/tdm.c:154: printf("L/R RSSI: %u/%u  L/R noise: %u/%u pkts: %u ",
   0000 78r02         [12]  769 	mov	r0,#(_statistics + 0x0002)
   0002 E2            [24]  770 	movx	a,@r0
   0003 FE            [12]  771 	mov	r6,a
   0004 08            [12]  772 	inc	r0
   0005 E2            [24]  773 	movx	a,@r0
   0006 FF            [12]  774 	mov	r7,a
   0007 78r01         [12]  775 	mov	r0,#(_remote_statistics + 0x0001)
   0009 E2            [24]  776 	movx	a,@r0
   000A FD            [12]  777 	mov	r5,a
   000B 7C 00         [12]  778 	mov	r4,#0x00
   000D 78r01         [12]  779 	mov	r0,#(_statistics + 0x0001)
   000F E2            [24]  780 	movx	a,@r0
   0010 FB            [12]  781 	mov	r3,a
   0011 8B*04         [24]  782 	mov	_tdm_show_rssi_sloc0_1_0,r3
   0013 75*05 00      [24]  783 	mov	(_tdm_show_rssi_sloc0_1_0 + 1),#0x00
   0016 78r00         [12]  784 	mov	r0,#_remote_statistics
   0018 E2            [24]  785 	movx	a,@r0
   0019 FB            [12]  786 	mov	r3,a
   001A 8B*06         [24]  787 	mov	_tdm_show_rssi_sloc1_1_0,r3
   001C 75*07 00      [24]  788 	mov	(_tdm_show_rssi_sloc1_1_0 + 1),#0x00
   001F 78r00         [12]  789 	mov	r0,#_statistics
   0021 E2            [24]  790 	movx	a,@r0
   0022 FB            [12]  791 	mov	r3,a
   0023 7A 00         [12]  792 	mov	r2,#0x00
   0025 C0 06         [24]  793 	push	ar6
   0027 C0 07         [24]  794 	push	ar7
   0029 C0 05         [24]  795 	push	ar5
   002B C0 04         [24]  796 	push	ar4
   002D C0*04         [24]  797 	push	_tdm_show_rssi_sloc0_1_0
   002F C0*05         [24]  798 	push	(_tdm_show_rssi_sloc0_1_0 + 1)
   0031 C0*06         [24]  799 	push	_tdm_show_rssi_sloc1_1_0
   0033 C0*07         [24]  800 	push	(_tdm_show_rssi_sloc1_1_0 + 1)
   0035 C0 03         [24]  801 	push	ar3
   0037 C0 02         [24]  802 	push	ar2
   0039 74r00         [12]  803 	mov	a,#__str_0
   003B C0 E0         [24]  804 	push	acc
   003D 74s00         [12]  805 	mov	a,#(__str_0 >> 8)
   003F C0 E0         [24]  806 	push	acc
   0041 74 80         [12]  807 	mov	a,#0x80
   0043 C0 E0         [24]  808 	push	acc
   0045 12r00r00      [24]  809 	lcall	_printfl
   0048 E5 81         [12]  810 	mov	a,sp
   004A 24 F3         [12]  811 	add	a,#0xf3
   004C F5 81         [12]  812 	mov	sp,a
                            813 ;	radio/tdm.c:160: printf(" txe=%u rxe=%u stx=%u srx=%u ecc=%u/%u temp=%d dco=%u\n",
   004E 78r0F         [12]  814 	mov	r0,#_duty_cycle_offset
   0050 E2            [24]  815 	movx	a,@r0
   0051 FE            [12]  816 	mov	r6,a
   0052 7F 00         [12]  817 	mov	r7,#0x00
   0054 C0 07         [24]  818 	push	ar7
   0056 C0 06         [24]  819 	push	ar6
   0058 12r00r00      [24]  820 	lcall	_radio_temperature
   005B AC 82         [24]  821 	mov	r4,dpl
   005D AD 83         [24]  822 	mov	r5,dph
   005F D0 06         [24]  823 	pop	ar6
   0061 D0 07         [24]  824 	pop	ar7
   0063 78r0A         [12]  825 	mov	r0,#(_errors + 0x000a)
   0065 E2            [24]  826 	movx	a,@r0
   0066 F5*06         [12]  827 	mov	_tdm_show_rssi_sloc1_1_0,a
   0068 08            [12]  828 	inc	r0
   0069 E2            [24]  829 	movx	a,@r0
   006A F5*07         [12]  830 	mov	(_tdm_show_rssi_sloc1_1_0 + 1),a
   006C 78r08         [12]  831 	mov	r0,#(_errors + 0x0008)
   006E E2            [24]  832 	movx	a,@r0
   006F F5*04         [12]  833 	mov	_tdm_show_rssi_sloc0_1_0,a
   0071 08            [12]  834 	inc	r0
   0072 E2            [24]  835 	movx	a,@r0
   0073 F5*05         [12]  836 	mov	(_tdm_show_rssi_sloc0_1_0 + 1),a
   0075 78r06         [12]  837 	mov	r0,#(_errors + 0x0006)
   0077 E2            [24]  838 	movx	a,@r0
   0078 F5*08         [12]  839 	mov	_tdm_show_rssi_sloc2_1_0,a
   007A 08            [12]  840 	inc	r0
   007B E2            [24]  841 	movx	a,@r0
   007C F5*09         [12]  842 	mov	(_tdm_show_rssi_sloc2_1_0 + 1),a
   007E 78r04         [12]  843 	mov	r0,#(_errors + 0x0004)
   0080 E2            [24]  844 	movx	a,@r0
   0081 F5*0A         [12]  845 	mov	_tdm_show_rssi_sloc3_1_0,a
   0083 08            [12]  846 	inc	r0
   0084 E2            [24]  847 	movx	a,@r0
   0085 F5*0B         [12]  848 	mov	(_tdm_show_rssi_sloc3_1_0 + 1),a
   0087 78r00         [12]  849 	mov	r0,#_errors
   0089 E2            [24]  850 	movx	a,@r0
   008A F5*0C         [12]  851 	mov	_tdm_show_rssi_sloc4_1_0,a
   008C 08            [12]  852 	inc	r0
   008D E2            [24]  853 	movx	a,@r0
   008E F5*0D         [12]  854 	mov	(_tdm_show_rssi_sloc4_1_0 + 1),a
   0090 78r02         [12]  855 	mov	r0,#(_errors + 0x0002)
   0092 E2            [24]  856 	movx	a,@r0
   0093 FA            [12]  857 	mov	r2,a
   0094 08            [12]  858 	inc	r0
   0095 E2            [24]  859 	movx	a,@r0
   0096 FB            [12]  860 	mov	r3,a
   0097 C0 06         [24]  861 	push	ar6
   0099 C0 07         [24]  862 	push	ar7
   009B C0 04         [24]  863 	push	ar4
   009D C0 05         [24]  864 	push	ar5
   009F C0*06         [24]  865 	push	_tdm_show_rssi_sloc1_1_0
   00A1 C0*07         [24]  866 	push	(_tdm_show_rssi_sloc1_1_0 + 1)
   00A3 C0*04         [24]  867 	push	_tdm_show_rssi_sloc0_1_0
   00A5 C0*05         [24]  868 	push	(_tdm_show_rssi_sloc0_1_0 + 1)
   00A7 C0*08         [24]  869 	push	_tdm_show_rssi_sloc2_1_0
   00A9 C0*09         [24]  870 	push	(_tdm_show_rssi_sloc2_1_0 + 1)
   00AB C0*0A         [24]  871 	push	_tdm_show_rssi_sloc3_1_0
   00AD C0*0B         [24]  872 	push	(_tdm_show_rssi_sloc3_1_0 + 1)
   00AF C0*0C         [24]  873 	push	_tdm_show_rssi_sloc4_1_0
   00B1 C0*0D         [24]  874 	push	(_tdm_show_rssi_sloc4_1_0 + 1)
   00B3 C0 02         [24]  875 	push	ar2
   00B5 C0 03         [24]  876 	push	ar3
   00B7 74r2C         [12]  877 	mov	a,#__str_1
   00B9 C0 E0         [24]  878 	push	acc
   00BB 74s00         [12]  879 	mov	a,#(__str_1 >> 8)
   00BD C0 E0         [24]  880 	push	acc
   00BF 74 80         [12]  881 	mov	a,#0x80
   00C1 C0 E0         [24]  882 	push	acc
   00C3 12r00r00      [24]  883 	lcall	_printfl
   00C6 E5 81         [12]  884 	mov	a,sp
   00C8 24 ED         [12]  885 	add	a,#0xed
   00CA F5 81         [12]  886 	mov	sp,a
                            887 ;	radio/tdm.c:169: statistics.receive_count = 0;
   00CC 78r02         [12]  888 	mov	r0,#(_statistics + 0x0002)
   00CE E4            [12]  889 	clr	a
   00CF F2            [24]  890 	movx	@r0,a
   00D0 08            [12]  891 	inc	r0
   00D1 F2            [24]  892 	movx	@r0,a
   00D2 22            [24]  893 	ret
                            894 ;------------------------------------------------------------
                            895 ;Allocation info for local variables in function 'display_test_output'
                            896 ;------------------------------------------------------------
                            897 ;	radio/tdm.c:175: display_test_output(void)
                            898 ;	-----------------------------------------
                            899 ;	 function display_test_output
                            900 ;	-----------------------------------------
   00D3                     901 _display_test_output:
                            902 ;	radio/tdm.c:177: if (test_display & AT_TEST_RSSI) {
   00D3 78r19         [12]  903 	mov	r0,#_test_display
   00D5 E2            [24]  904 	movx	a,@r0
   00D6 54 01         [12]  905 	anl	a,#0x01
   00D8 60 03         [24]  906 	jz	00103$
                            907 ;	radio/tdm.c:178: tdm_show_rssi();
   00DA 02r00r00      [24]  908 	ljmp	_tdm_show_rssi
   00DD                     909 00103$:
   00DD 22            [24]  910 	ret
                            911 ;------------------------------------------------------------
                            912 ;Allocation info for local variables in function 'flight_time_estimate'
                            913 ;------------------------------------------------------------
                            914 ;	radio/tdm.c:188: static uint16_t flight_time_estimate(__pdata uint8_t packet_len)
                            915 ;	-----------------------------------------
                            916 ;	 function flight_time_estimate
                            917 ;	-----------------------------------------
   00DE                     918 _flight_time_estimate:
   00DE AF 82         [24]  919 	mov	r7,dpl
                            920 ;	radio/tdm.c:190: return packet_latency + (packet_len * ticks_per_byte);
   00E0 7E 00         [12]  921 	mov	r6,#0x00
   00E2 78r0A         [12]  922 	mov	r0,#_ticks_per_byte
   00E4 90r00r00      [24]  923 	mov	dptr,#__mulint_PARM_2
   00E7 E2            [24]  924 	movx	a,@r0
   00E8 F0            [24]  925 	movx	@dptr,a
   00E9 08            [12]  926 	inc	r0
   00EA E2            [24]  927 	movx	a,@r0
   00EB A3            [24]  928 	inc	dptr
   00EC F0            [24]  929 	movx	@dptr,a
   00ED 8F 82         [24]  930 	mov	dpl,r7
   00EF 8E 83         [24]  931 	mov	dph,r6
   00F1 12r00r00      [24]  932 	lcall	__mulint
   00F4 AE 82         [24]  933 	mov	r6,dpl
   00F6 AF 83         [24]  934 	mov	r7,dph
   00F8 78r08         [12]  935 	mov	r0,#_packet_latency
   00FA E2            [24]  936 	movx	a,@r0
   00FB 2E            [12]  937 	add	a,r6
   00FC FE            [12]  938 	mov	r6,a
   00FD 08            [12]  939 	inc	r0
   00FE E2            [24]  940 	movx	a,@r0
   00FF 3F            [12]  941 	addc	a,r7
   0100 8E 82         [24]  942 	mov	dpl,r6
   0102 F5 83         [12]  943 	mov	dph,a
   0104 22            [24]  944 	ret
                            945 ;------------------------------------------------------------
                            946 ;Allocation info for local variables in function 'sync_tx_windows'
                            947 ;------------------------------------------------------------
                            948 ;old_state                 Allocated with name '_sync_tx_windows_old_state_1_155'
                            949 ;------------------------------------------------------------
                            950 ;	radio/tdm.c:204: sync_tx_windows(__pdata uint8_t packet_length)
                            951 ;	-----------------------------------------
                            952 ;	 function sync_tx_windows
                            953 ;	-----------------------------------------
   0105                     954 _sync_tx_windows:
   0105 AF 82         [24]  955 	mov	r7,dpl
                            956 ;	radio/tdm.c:206: __data enum tdm_state old_state = tdm_state;
   0107 78r00         [12]  957 	mov	r0,#_tdm_state
   0109 E2            [24]  958 	movx	a,@r0
   010A F5*0E         [12]  959 	mov	_sync_tx_windows_old_state_1_155,a
                            960 ;	radio/tdm.c:207: __pdata uint16_t old_remaining = tdm_state_remaining;
   010C 78r01         [12]  961 	mov	r0,#_tdm_state_remaining
   010E E2            [24]  962 	movx	a,@r0
   010F FC            [12]  963 	mov	r4,a
   0110 08            [12]  964 	inc	r0
   0111 E2            [24]  965 	movx	a,@r0
   0112 FD            [12]  966 	mov	r5,a
                            967 ;	radio/tdm.c:209: if (trailer.bonus) {
   0113 78r1B         [12]  968 	mov	r0,#(_trailer + 0x0001)
   0115 E2            [24]  969 	movx	a,@r0
   0116 30 E6 46      [24]  970 	jnb	acc.6,00109$
                            971 ;	radio/tdm.c:212: if (old_state == TDM_SILENCE1) {
   0119 74 01         [12]  972 	mov	a,#0x01
   011B B5*0E 10      [24]  973 	cjne	a,_sync_tx_windows_old_state_1_155,00106$
                            974 ;	radio/tdm.c:218: tdm_state_remaining = silence_period;
   011E 78r06         [12]  975 	mov	r0,#_silence_period
   0120 E2            [24]  976 	movx	a,@r0
   0121 FA            [12]  977 	mov	r2,a
   0122 08            [12]  978 	inc	r0
   0123 E2            [24]  979 	movx	a,@r0
   0124 FB            [12]  980 	mov	r3,a
   0125 78r01         [12]  981 	mov	r0,#_tdm_state_remaining
   0127 EA            [12]  982 	mov	a,r2
   0128 F2            [24]  983 	movx	@r0,a
   0129 08            [12]  984 	inc	r0
   012A EB            [12]  985 	mov	a,r3
   012B F2            [24]  986 	movx	@r0,a
   012C 80 46         [24]  987 	sjmp	00110$
   012E                     988 00106$:
                            989 ;	radio/tdm.c:219: } else if (old_state == TDM_RECEIVE || old_state == TDM_SILENCE2) {
   012E 74 02         [12]  990 	mov	a,#0x02
   0130 B5*0E 02      [24]  991 	cjne	a,_sync_tx_windows_old_state_1_155,00151$
   0133 80 05         [24]  992 	sjmp	00101$
   0135                     993 00151$:
   0135 74 03         [12]  994 	mov	a,#0x03
   0137 B5*0E 0F      [24]  995 	cjne	a,_sync_tx_windows_old_state_1_155,00102$
   013A                     996 00101$:
                            997 ;	radio/tdm.c:224: tdm_state = TDM_SILENCE2;
   013A 78r00         [12]  998 	mov	r0,#_tdm_state
   013C 74 03         [12]  999 	mov	a,#0x03
   013E F2            [24] 1000 	movx	@r0,a
                           1001 ;	radio/tdm.c:225: tdm_state_remaining = 1;
   013F 78r01         [12] 1002 	mov	r0,#_tdm_state_remaining
   0141 74 01         [12] 1003 	mov	a,#0x01
   0143 F2            [24] 1004 	movx	@r0,a
   0144 08            [12] 1005 	inc	r0
   0145 E4            [12] 1006 	clr	a
   0146 F2            [24] 1007 	movx	@r0,a
   0147 80 2B         [24] 1008 	sjmp	00110$
   0149                    1009 00102$:
                           1010 ;	radio/tdm.c:227: tdm_state = TDM_TRANSMIT;
   0149 78r00         [12] 1011 	mov	r0,#_tdm_state
   014B E4            [12] 1012 	clr	a
   014C F2            [24] 1013 	movx	@r0,a
                           1014 ;	radio/tdm.c:228: tdm_state_remaining = trailer.window;
   014D 78r1A         [12] 1015 	mov	r0,#_trailer
   014F E2            [24] 1016 	movx	a,@r0
   0150 FA            [12] 1017 	mov	r2,a
   0151 08            [12] 1018 	inc	r0
   0152 E2            [24] 1019 	movx	a,@r0
   0153 54 1F         [12] 1020 	anl	a,#0x1F
   0155 FB            [12] 1021 	mov	r3,a
   0156 78r01         [12] 1022 	mov	r0,#_tdm_state_remaining
   0158 EA            [12] 1023 	mov	a,r2
   0159 F2            [24] 1024 	movx	@r0,a
   015A 08            [12] 1025 	inc	r0
   015B EB            [12] 1026 	mov	a,r3
   015C F2            [24] 1027 	movx	@r0,a
   015D 80 15         [24] 1028 	sjmp	00110$
   015F                    1029 00109$:
                           1030 ;	radio/tdm.c:233: tdm_state = TDM_RECEIVE;
   015F 78r00         [12] 1031 	mov	r0,#_tdm_state
   0161 74 02         [12] 1032 	mov	a,#0x02
   0163 F2            [24] 1033 	movx	@r0,a
                           1034 ;	radio/tdm.c:234: tdm_state_remaining = trailer.window;
   0164 78r1A         [12] 1035 	mov	r0,#_trailer
   0166 E2            [24] 1036 	movx	a,@r0
   0167 FA            [12] 1037 	mov	r2,a
   0168 08            [12] 1038 	inc	r0
   0169 E2            [24] 1039 	movx	a,@r0
   016A 54 1F         [12] 1040 	anl	a,#0x1F
   016C FB            [12] 1041 	mov	r3,a
   016D 78r01         [12] 1042 	mov	r0,#_tdm_state_remaining
   016F EA            [12] 1043 	mov	a,r2
   0170 F2            [24] 1044 	movx	@r0,a
   0171 08            [12] 1045 	inc	r0
   0172 EB            [12] 1046 	mov	a,r3
   0173 F2            [24] 1047 	movx	@r0,a
   0174                    1048 00110$:
                           1049 ;	radio/tdm.c:239: bonus_transmit = (tdm_state == TDM_RECEIVE && packet_length==0);
   0174 78r00         [12] 1050 	mov	r0,#_tdm_state
   0176 E2            [24] 1051 	movx	a,@r0
   0177 B4 02 08      [24] 1052 	cjne	a,#0x02,00121$
   017A EF            [12] 1053 	mov	a,r7
   017B B4 01 00      [24] 1054 	cjne	a,#0x01,00156$
   017E                    1055 00156$:
   017E 92*07         [24] 1056 	mov	_sync_tx_windows_sloc0_1_0,c
   0180 40 04         [24] 1057 	jc	00122$
   0182                    1058 00121$:
   0182 C2*07         [12] 1059 	clr	_sync_tx_windows_sloc0_1_0
   0184 80 02         [24] 1060 	sjmp	00123$
   0186                    1061 00122$:
   0186 D2*07         [12] 1062 	setb	_sync_tx_windows_sloc0_1_0
   0188                    1063 00123$:
   0188 A2*07         [12] 1064 	mov	c,_sync_tx_windows_sloc0_1_0
   018A 92*00         [24] 1065 	mov	_bonus_transmit,c
                           1066 ;	radio/tdm.c:242: if (tdm_state != TDM_TRANSMIT) {
   018C 78r00         [12] 1067 	mov	r0,#_tdm_state
   018E E2            [24] 1068 	movx	a,@r0
   018F 60 02         [24] 1069 	jz	00112$
                           1070 ;	radio/tdm.c:243: transmit_yield = 0;
   0191 C2*01         [12] 1071 	clr	_transmit_yield
   0193                    1072 00112$:
                           1073 ;	radio/tdm.c:246: if (at_testmode & AT_TEST_TDM) {
   0193 78r00         [12] 1074 	mov	r0,#_at_testmode
   0195 E2            [24] 1075 	movx	a,@r0
   0196 54 02         [12] 1076 	anl	a,#0x02
   0198 70 01         [24] 1077 	jnz	00159$
   019A 22            [24] 1078 	ret
   019B                    1079 00159$:
                           1080 ;	radio/tdm.c:248: delta = old_remaining - tdm_state_remaining;
   019B 78r01         [12] 1081 	mov	r0,#_tdm_state_remaining
   019D 79r2D         [12] 1082 	mov	r1,#_sync_tx_windows_delta_2_162
   019F D3            [12] 1083 	setb	c
   01A0 E2            [24] 1084 	movx	a,@r0
   01A1 9C            [12] 1085 	subb	a,r4
   01A2 F4            [12] 1086 	cpl	a
   01A3 B3            [12] 1087 	cpl	c
   01A4 F3            [24] 1088 	movx	@r1,a
   01A5 B3            [12] 1089 	cpl	c
   01A6 08            [12] 1090 	inc	r0
   01A7 E2            [24] 1091 	movx	a,@r0
   01A8 9D            [12] 1092 	subb	a,r5
   01A9 F4            [12] 1093 	cpl	a
   01AA 09            [12] 1094 	inc	r1
   01AB F3            [24] 1095 	movx	@r1,a
                           1096 ;	radio/tdm.c:249: if (old_state != tdm_state ||
   01AC 78r00         [12] 1097 	mov	r0,#_tdm_state
   01AE E2            [24] 1098 	movx	a,@r0
   01AF B5*0E 6E      [24] 1099 	cjne	a,_sync_tx_windows_old_state_1_155,00113$
                           1100 ;	radio/tdm.c:250: delta > (int16_t)packet_latency/2 ||
   01B2 C0 07         [24] 1101 	push	ar7
   01B4 78r08         [12] 1102 	mov	r0,#_packet_latency
   01B6 E2            [24] 1103 	movx	a,@r0
   01B7 FA            [12] 1104 	mov	r2,a
   01B8 08            [12] 1105 	inc	r0
   01B9 E2            [24] 1106 	movx	a,@r0
   01BA FB            [12] 1107 	mov	r3,a
   01BB 90r00r00      [24] 1108 	mov	dptr,#__divsint_PARM_2
   01BE 74 02         [12] 1109 	mov	a,#0x02
   01C0 F0            [24] 1110 	movx	@dptr,a
   01C1 E4            [12] 1111 	clr	a
   01C2 A3            [24] 1112 	inc	dptr
   01C3 F0            [24] 1113 	movx	@dptr,a
   01C4 8A 82         [24] 1114 	mov	dpl,r2
   01C6 8B 83         [24] 1115 	mov	dph,r3
   01C8 C0 03         [24] 1116 	push	ar3
   01CA C0 02         [24] 1117 	push	ar2
   01CC 12r00r00      [24] 1118 	lcall	__divsint
   01CF AE 82         [24] 1119 	mov	r6,dpl
   01D1 AF 83         [24] 1120 	mov	r7,dph
   01D3 D0 02         [24] 1121 	pop	ar2
   01D5 D0 03         [24] 1122 	pop	ar3
   01D7 78r2D         [12] 1123 	mov	r0,#_sync_tx_windows_delta_2_162
   01D9 C3            [12] 1124 	clr	c
   01DA E2            [24] 1125 	movx	a,@r0
   01DB F5 F0         [12] 1126 	mov	b,a
   01DD EE            [12] 1127 	mov	a,r6
   01DE 95 F0         [12] 1128 	subb	a,b
   01E0 08            [12] 1129 	inc	r0
   01E1 E2            [24] 1130 	movx	a,@r0
   01E2 F5 F0         [12] 1131 	mov	b,a
   01E4 EF            [12] 1132 	mov	a,r7
   01E5 64 80         [12] 1133 	xrl	a,#0x80
   01E7 63 F0 80      [24] 1134 	xrl	b,#0x80
   01EA 95 F0         [12] 1135 	subb	a,b
   01EC D0 07         [24] 1136 	pop	ar7
                           1137 ;	radio/tdm.c:251: delta < -(int16_t)packet_latency/2) {
   01EE 40 30         [24] 1138 	jc	00113$
   01F0 E4            [12] 1139 	clr	a
   01F1 9A            [12] 1140 	subb	a,r2
   01F2 FA            [12] 1141 	mov	r2,a
   01F3 E4            [12] 1142 	clr	a
   01F4 9B            [12] 1143 	subb	a,r3
   01F5 FB            [12] 1144 	mov	r3,a
   01F6 90r00r00      [24] 1145 	mov	dptr,#__divsint_PARM_2
   01F9 74 02         [12] 1146 	mov	a,#0x02
   01FB F0            [24] 1147 	movx	@dptr,a
   01FC E4            [12] 1148 	clr	a
   01FD A3            [24] 1149 	inc	dptr
   01FE F0            [24] 1150 	movx	@dptr,a
   01FF 8A 82         [24] 1151 	mov	dpl,r2
   0201 8B 83         [24] 1152 	mov	dph,r3
   0203 C0 07         [24] 1153 	push	ar7
   0205 12r00r00      [24] 1154 	lcall	__divsint
   0208 AB 82         [24] 1155 	mov	r3,dpl
   020A AE 83         [24] 1156 	mov	r6,dph
   020C D0 07         [24] 1157 	pop	ar7
   020E 78r2D         [12] 1158 	mov	r0,#_sync_tx_windows_delta_2_162
   0210 C3            [12] 1159 	clr	c
   0211 E2            [24] 1160 	movx	a,@r0
   0212 9B            [12] 1161 	subb	a,r3
   0213 08            [12] 1162 	inc	r0
   0214 E2            [24] 1163 	movx	a,@r0
   0215 64 80         [12] 1164 	xrl	a,#0x80
   0217 8E F0         [24] 1165 	mov	b,r6
   0219 63 F0 80      [24] 1166 	xrl	b,#0x80
   021C 95 F0         [12] 1167 	subb	a,b
   021E 50 4B         [24] 1168 	jnc	00119$
   0220                    1169 00113$:
                           1170 ;	radio/tdm.c:252: printf("TDM: %u/%u len=%u ",
   0220 7E 00         [12] 1171 	mov	r6,#0x00
   0222 78r00         [12] 1172 	mov	r0,#_tdm_state
   0224 E2            [24] 1173 	movx	a,@r0
   0225 FA            [12] 1174 	mov	r2,a
   0226 7B 00         [12] 1175 	mov	r3,#0x00
   0228 AC*0E         [24] 1176 	mov	r4,_sync_tx_windows_old_state_1_155
   022A 7D 00         [12] 1177 	mov	r5,#0x00
   022C C0 07         [24] 1178 	push	ar7
   022E C0 06         [24] 1179 	push	ar6
   0230 C0 02         [24] 1180 	push	ar2
   0232 C0 03         [24] 1181 	push	ar3
   0234 C0 04         [24] 1182 	push	ar4
   0236 C0 05         [24] 1183 	push	ar5
   0238 74r63         [12] 1184 	mov	a,#__str_2
   023A C0 E0         [24] 1185 	push	acc
   023C 74s00         [12] 1186 	mov	a,#(__str_2 >> 8)
   023E C0 E0         [24] 1187 	push	acc
   0240 74 80         [12] 1188 	mov	a,#0x80
   0242 C0 E0         [24] 1189 	push	acc
   0244 12r00r00      [24] 1190 	lcall	_printfl
   0247 E5 81         [12] 1191 	mov	a,sp
   0249 24 F7         [12] 1192 	add	a,#0xf7
   024B F5 81         [12] 1193 	mov	sp,a
                           1194 ;	radio/tdm.c:256: printf(" delta: %d\n",
   024D 78r2D         [12] 1195 	mov	r0,#_sync_tx_windows_delta_2_162
   024F E2            [24] 1196 	movx	a,@r0
   0250 C0 E0         [24] 1197 	push	acc
   0252 08            [12] 1198 	inc	r0
   0253 E2            [24] 1199 	movx	a,@r0
   0254 C0 E0         [24] 1200 	push	acc
   0256 74r76         [12] 1201 	mov	a,#__str_3
   0258 C0 E0         [24] 1202 	push	acc
   025A 74s00         [12] 1203 	mov	a,#(__str_3 >> 8)
   025C C0 E0         [24] 1204 	push	acc
   025E 74 80         [12] 1205 	mov	a,#0x80
   0260 C0 E0         [24] 1206 	push	acc
   0262 12r00r00      [24] 1207 	lcall	_printfl
   0265 E5 81         [12] 1208 	mov	a,sp
   0267 24 FB         [12] 1209 	add	a,#0xfb
   0269 F5 81         [12] 1210 	mov	sp,a
   026B                    1211 00119$:
   026B 22            [24] 1212 	ret
                           1213 ;------------------------------------------------------------
                           1214 ;Allocation info for local variables in function 'tdm_state_update'
                           1215 ;------------------------------------------------------------
                           1216 ;sloc0                     Allocated with name '_tdm_state_update_sloc0_1_0'
                           1217 ;sloc1                     Allocated with name '_tdm_state_update_sloc1_1_0'
                           1218 ;sloc2                     Allocated with name '_tdm_state_update_sloc2_1_0'
                           1219 ;------------------------------------------------------------
                           1220 ;	radio/tdm.c:265: tdm_state_update(__pdata uint16_t tdelta)
                           1221 ;	-----------------------------------------
                           1222 ;	 function tdm_state_update
                           1223 ;	-----------------------------------------
   026C                    1224 _tdm_state_update:
   026C AE 82         [24] 1225 	mov	r6,dpl
   026E AF 83         [24] 1226 	mov	r7,dph
                           1227 ;	radio/tdm.c:269: if (tdelta > transmit_wait) {
   0270 78r0C         [12] 1228 	mov	r0,#_transmit_wait
   0272 C3            [12] 1229 	clr	c
   0273 E2            [24] 1230 	movx	a,@r0
   0274 9E            [12] 1231 	subb	a,r6
   0275 08            [12] 1232 	inc	r0
   0276 E2            [24] 1233 	movx	a,@r0
   0277 9F            [12] 1234 	subb	a,r7
   0278 50 08         [24] 1235 	jnc	00102$
                           1236 ;	radio/tdm.c:270: transmit_wait = 0;
   027A 78r0C         [12] 1237 	mov	r0,#_transmit_wait
   027C E4            [12] 1238 	clr	a
   027D F2            [24] 1239 	movx	@r0,a
   027E 08            [12] 1240 	inc	r0
   027F F2            [24] 1241 	movx	@r0,a
   0280 80 0A         [24] 1242 	sjmp	00116$
   0282                    1243 00102$:
                           1244 ;	radio/tdm.c:272: transmit_wait -= tdelta;
   0282 78r0C         [12] 1245 	mov	r0,#_transmit_wait
   0284 E2            [24] 1246 	movx	a,@r0
   0285 C3            [12] 1247 	clr	c
   0286 9E            [12] 1248 	subb	a,r6
   0287 F2            [24] 1249 	movx	@r0,a
   0288 08            [12] 1250 	inc	r0
   0289 E2            [24] 1251 	movx	a,@r0
   028A 9F            [12] 1252 	subb	a,r7
   028B F2            [24] 1253 	movx	@r0,a
                           1254 ;	radio/tdm.c:276: while (tdelta >= tdm_state_remaining) {
   028C                    1255 00116$:
   028C 78r01         [12] 1256 	mov	r0,#_tdm_state_remaining
   028E C3            [12] 1257 	clr	c
   028F E2            [24] 1258 	movx	a,@r0
   0290 F5 F0         [12] 1259 	mov	b,a
   0292 EE            [12] 1260 	mov	a,r6
   0293 95 F0         [12] 1261 	subb	a,b
   0295 08            [12] 1262 	inc	r0
   0296 E2            [24] 1263 	movx	a,@r0
   0297 F5 F0         [12] 1264 	mov	b,a
   0299 EF            [12] 1265 	mov	a,r7
   029A 95 F0         [12] 1266 	subb	a,b
   029C 50 03         [24] 1267 	jnc	00146$
   029E 02r04rD3      [24] 1268 	ljmp	00118$
   02A1                    1269 00146$:
                           1270 ;	radio/tdm.c:278: tdm_state = (tdm_state+1) % 4;
   02A1 78r00         [12] 1271 	mov	r0,#_tdm_state
   02A3 E2            [24] 1272 	movx	a,@r0
   02A4 FC            [12] 1273 	mov	r4,a
   02A5 7D 00         [12] 1274 	mov	r5,#0x00
   02A7 0C            [12] 1275 	inc	r4
   02A8 BC 00 01      [24] 1276 	cjne	r4,#0x00,00147$
   02AB 0D            [12] 1277 	inc	r5
   02AC                    1278 00147$:
   02AC 90r00r00      [24] 1279 	mov	dptr,#__modsint_PARM_2
   02AF 74 04         [12] 1280 	mov	a,#0x04
   02B1 F0            [24] 1281 	movx	@dptr,a
   02B2 E4            [12] 1282 	clr	a
   02B3 A3            [24] 1283 	inc	dptr
   02B4 F0            [24] 1284 	movx	@dptr,a
   02B5 8C 82         [24] 1285 	mov	dpl,r4
   02B7 8D 83         [24] 1286 	mov	dph,r5
   02B9 C0 07         [24] 1287 	push	ar7
   02BB C0 06         [24] 1288 	push	ar6
   02BD 12r00r00      [24] 1289 	lcall	__modsint
   02C0 AC 82         [24] 1290 	mov	r4,dpl
   02C2 AD 83         [24] 1291 	mov	r5,dph
   02C4 D0 06         [24] 1292 	pop	ar6
   02C6 D0 07         [24] 1293 	pop	ar7
   02C8 78r00         [12] 1294 	mov	r0,#_tdm_state
   02CA EC            [12] 1295 	mov	a,r4
   02CB F2            [24] 1296 	movx	@r0,a
                           1297 ;	radio/tdm.c:281: tdelta -= tdm_state_remaining;
   02CC 78r01         [12] 1298 	mov	r0,#_tdm_state_remaining
   02CE D3            [12] 1299 	setb	c
   02CF E2            [24] 1300 	movx	a,@r0
   02D0 9E            [12] 1301 	subb	a,r6
   02D1 F4            [12] 1302 	cpl	a
   02D2 B3            [12] 1303 	cpl	c
   02D3 FE            [12] 1304 	mov	r6,a
   02D4 B3            [12] 1305 	cpl	c
   02D5 08            [12] 1306 	inc	r0
   02D6 E2            [24] 1307 	movx	a,@r0
   02D7 9F            [12] 1308 	subb	a,r7
   02D8 F4            [12] 1309 	cpl	a
   02D9 FF            [12] 1310 	mov	r7,a
                           1311 ;	radio/tdm.c:283: if (tdm_state == TDM_TRANSMIT || tdm_state == TDM_RECEIVE) {
   02DA 78r00         [12] 1312 	mov	r0,#_tdm_state
   02DC E2            [24] 1313 	movx	a,@r0
   02DD 60 06         [24] 1314 	jz	00104$
   02DF 78r00         [12] 1315 	mov	r0,#_tdm_state
   02E1 E2            [24] 1316 	movx	a,@r0
   02E2 B4 02 10      [24] 1317 	cjne	a,#0x02,00105$
   02E5                    1318 00104$:
                           1319 ;	radio/tdm.c:284: tdm_state_remaining = tx_window_width;
   02E5 78r03         [12] 1320 	mov	r0,#_tx_window_width
   02E7 E2            [24] 1321 	movx	a,@r0
   02E8 FC            [12] 1322 	mov	r4,a
   02E9 08            [12] 1323 	inc	r0
   02EA E2            [24] 1324 	movx	a,@r0
   02EB FD            [12] 1325 	mov	r5,a
   02EC 78r01         [12] 1326 	mov	r0,#_tdm_state_remaining
   02EE EC            [12] 1327 	mov	a,r4
   02EF F2            [24] 1328 	movx	@r0,a
   02F0 08            [12] 1329 	inc	r0
   02F1 ED            [12] 1330 	mov	a,r5
   02F2 F2            [24] 1331 	movx	@r0,a
   02F3 80 0E         [24] 1332 	sjmp	00106$
   02F5                    1333 00105$:
                           1334 ;	radio/tdm.c:286: tdm_state_remaining = silence_period;
   02F5 78r06         [12] 1335 	mov	r0,#_silence_period
   02F7 E2            [24] 1336 	movx	a,@r0
   02F8 FC            [12] 1337 	mov	r4,a
   02F9 08            [12] 1338 	inc	r0
   02FA E2            [24] 1339 	movx	a,@r0
   02FB FD            [12] 1340 	mov	r5,a
   02FC 78r01         [12] 1341 	mov	r0,#_tdm_state_remaining
   02FE EC            [12] 1342 	mov	a,r4
   02FF F2            [24] 1343 	movx	@r0,a
   0300 08            [12] 1344 	inc	r0
   0301 ED            [12] 1345 	mov	a,r5
   0302 F2            [24] 1346 	movx	@r0,a
   0303                    1347 00106$:
                           1348 ;	radio/tdm.c:292: if (tdm_state == TDM_TRANSMIT || tdm_state == TDM_SILENCE1) {
   0303 78r00         [12] 1349 	mov	r0,#_tdm_state
   0305 E2            [24] 1350 	movx	a,@r0
   0306 60 06         [24] 1351 	jz	00110$
   0308 78r00         [12] 1352 	mov	r0,#_tdm_state
   030A E2            [24] 1353 	movx	a,@r0
   030B B4 01 26      [24] 1354 	cjne	a,#0x01,00111$
   030E                    1355 00110$:
                           1356 ;	radio/tdm.c:293: fhop_window_change();
   030E C0 07         [24] 1357 	push	ar7
   0310 C0 06         [24] 1358 	push	ar6
   0312 12r00r00      [24] 1359 	lcall	_fhop_window_change
                           1360 ;	radio/tdm.c:294: radio_receiver_on();
   0315 12r00r00      [24] 1361 	lcall	_radio_receiver_on
   0318 D0 06         [24] 1362 	pop	ar6
   031A D0 07         [24] 1363 	pop	ar7
                           1364 ;	radio/tdm.c:296: if (num_fh_channels > 1) {
   031C 78r00         [12] 1365 	mov	r0,#_num_fh_channels
   031E C3            [12] 1366 	clr	c
   031F E2            [24] 1367 	movx	a,@r0
   0320 F5 F0         [12] 1368 	mov	b,a
   0322 74 01         [12] 1369 	mov	a,#0x01
   0324 95 F0         [12] 1370 	subb	a,b
   0326 50 0C         [24] 1371 	jnc	00111$
                           1372 ;	radio/tdm.c:298: lbt_listen_time = 0;
   0328 78r13         [12] 1373 	mov	r0,#_lbt_listen_time
   032A E4            [12] 1374 	clr	a
   032B F2            [24] 1375 	movx	@r0,a
   032C 08            [12] 1376 	inc	r0
   032D F2            [24] 1377 	movx	@r0,a
                           1378 ;	radio/tdm.c:299: lbt_rand = 0;
   032E 78r17         [12] 1379 	mov	r0,#_lbt_rand
   0330 E4            [12] 1380 	clr	a
   0331 F2            [24] 1381 	movx	@r0,a
   0332 08            [12] 1382 	inc	r0
   0333 F2            [24] 1383 	movx	@r0,a
   0334                    1384 00111$:
                           1385 ;	radio/tdm.c:303: if (tdm_state == TDM_TRANSMIT && (duty_cycle - duty_cycle_offset) != 100) {
   0334 78r00         [12] 1386 	mov	r0,#_tdm_state
   0336 E2            [24] 1387 	movx	a,@r0
   0337 60 03         [24] 1388 	jz	00155$
   0339 02r04rC6      [24] 1389 	ljmp	00114$
   033C                    1390 00155$:
   033C C0 06         [24] 1391 	push	ar6
   033E C0 07         [24] 1392 	push	ar7
   0340 78r0E         [12] 1393 	mov	r0,#_duty_cycle
   0342 E2            [24] 1394 	movx	a,@r0
   0343 FC            [12] 1395 	mov	r4,a
   0344 7D 00         [12] 1396 	mov	r5,#0x00
   0346 78r0F         [12] 1397 	mov	r0,#_duty_cycle_offset
   0348 E2            [24] 1398 	movx	a,@r0
   0349 F5*0F         [12] 1399 	mov	_tdm_state_update_sloc0_1_0,a
   034B 75*10 00      [24] 1400 	mov	(_tdm_state_update_sloc0_1_0 + 1),#0x00
   034E EC            [12] 1401 	mov	a,r4
   034F C3            [12] 1402 	clr	c
   0350 95*0F         [12] 1403 	subb	a,_tdm_state_update_sloc0_1_0
   0352 FE            [12] 1404 	mov	r6,a
   0353 ED            [12] 1405 	mov	a,r5
   0354 95*10         [12] 1406 	subb	a,(_tdm_state_update_sloc0_1_0 + 1)
   0356 FF            [12] 1407 	mov	r7,a
   0357 BE 64 0A      [24] 1408 	cjne	r6,#0x64,00156$
   035A BF 00 07      [24] 1409 	cjne	r7,#0x00,00156$
   035D D0 07         [24] 1410 	pop	ar7
   035F D0 06         [24] 1411 	pop	ar6
   0361 02r04rC6      [24] 1412 	ljmp	00114$
   0364                    1413 00156$:
   0364 D0 07         [24] 1414 	pop	ar7
   0366 D0 06         [24] 1415 	pop	ar6
                           1416 ;	radio/tdm.c:305: average_duty_cycle = (0.95*average_duty_cycle) + (0.05*(100.0*transmitted_ticks)/(2*(silence_period+tx_window_width)));
   0368 C0 06         [24] 1417 	push	ar6
   036A C0 07         [24] 1418 	push	ar7
   036C C0 07         [24] 1419 	push	ar7
   036E C0 06         [24] 1420 	push	ar6
   0370 C0 05         [24] 1421 	push	ar5
   0372 C0 04         [24] 1422 	push	ar4
   0374 C0*00         [24] 1423 	push	_average_duty_cycle
   0376 C0*01         [24] 1424 	push	(_average_duty_cycle + 1)
   0378 C0*02         [24] 1425 	push	(_average_duty_cycle + 2)
   037A C0*03         [24] 1426 	push	(_average_duty_cycle + 3)
   037C 90 33 33      [24] 1427 	mov	dptr,#0x3333
   037F 75 F0 73      [24] 1428 	mov	b,#0x73
   0382 74 3F         [12] 1429 	mov	a,#0x3F
   0384 12r00r00      [24] 1430 	lcall	___fsmul
   0387 85 82*11      [24] 1431 	mov	_tdm_state_update_sloc1_1_0,dpl
   038A 85 83*12      [24] 1432 	mov	(_tdm_state_update_sloc1_1_0 + 1),dph
   038D 85 F0*13      [24] 1433 	mov	(_tdm_state_update_sloc1_1_0 + 2),b
   0390 F5*14         [12] 1434 	mov	(_tdm_state_update_sloc1_1_0 + 3),a
   0392 E5 81         [12] 1435 	mov	a,sp
   0394 24 FC         [12] 1436 	add	a,#0xfc
   0396 F5 81         [12] 1437 	mov	sp,a
   0398 D0 04         [24] 1438 	pop	ar4
   039A D0 05         [24] 1439 	pop	ar5
   039C D0 06         [24] 1440 	pop	ar6
   039E D0 07         [24] 1441 	pop	ar7
   03A0 78r10         [12] 1442 	mov	r0,#_transmitted_ticks
   03A2 E2            [24] 1443 	movx	a,@r0
   03A3 F5 82         [12] 1444 	mov	dpl,a
   03A5 08            [12] 1445 	inc	r0
   03A6 E2            [24] 1446 	movx	a,@r0
   03A7 F5 83         [12] 1447 	mov	dph,a
   03A9 C0 05         [24] 1448 	push	ar5
   03AB C0 04         [24] 1449 	push	ar4
   03AD 12r00r00      [24] 1450 	lcall	___uint2fs
   03B0 AA 82         [24] 1451 	mov	r2,dpl
   03B2 AB 83         [24] 1452 	mov	r3,dph
   03B4 AE F0         [24] 1453 	mov	r6,b
   03B6 FF            [12] 1454 	mov	r7,a
   03B7 D0 04         [24] 1455 	pop	ar4
   03B9 D0 05         [24] 1456 	pop	ar5
   03BB C0 07         [24] 1457 	push	ar7
   03BD C0 06         [24] 1458 	push	ar6
   03BF C0 05         [24] 1459 	push	ar5
   03C1 C0 04         [24] 1460 	push	ar4
   03C3 C0 02         [24] 1461 	push	ar2
   03C5 C0 03         [24] 1462 	push	ar3
   03C7 C0 06         [24] 1463 	push	ar6
   03C9 C0 07         [24] 1464 	push	ar7
   03CB 90 00 00      [24] 1465 	mov	dptr,#0x0000
   03CE 75 F0 A0      [24] 1466 	mov	b,#0xA0
   03D1 74 40         [12] 1467 	mov	a,#0x40
   03D3 12r00r00      [24] 1468 	lcall	___fsmul
   03D6 85 82*15      [24] 1469 	mov	_tdm_state_update_sloc2_1_0,dpl
   03D9 85 83*16      [24] 1470 	mov	(_tdm_state_update_sloc2_1_0 + 1),dph
   03DC 85 F0*17      [24] 1471 	mov	(_tdm_state_update_sloc2_1_0 + 2),b
   03DF F5*18         [12] 1472 	mov	(_tdm_state_update_sloc2_1_0 + 3),a
   03E1 E5 81         [12] 1473 	mov	a,sp
   03E3 24 FC         [12] 1474 	add	a,#0xfc
   03E5 F5 81         [12] 1475 	mov	sp,a
   03E7 D0 04         [24] 1476 	pop	ar4
   03E9 D0 05         [24] 1477 	pop	ar5
   03EB D0 06         [24] 1478 	pop	ar6
   03ED D0 07         [24] 1479 	pop	ar7
   03EF 78r06         [12] 1480 	mov	r0,#_silence_period
   03F1 79r03         [12] 1481 	mov	r1,#_tx_window_width
   03F3 E3            [24] 1482 	movx	a,@r1
   03F4 C5 F0         [12] 1483 	xch	a,b
   03F6 E2            [24] 1484 	movx	a,@r0
   03F7 25 F0         [12] 1485 	add	a,b
   03F9 FE            [12] 1486 	mov	r6,a
   03FA 09            [12] 1487 	inc	r1
   03FB E3            [24] 1488 	movx	a,@r1
   03FC C5 F0         [12] 1489 	xch	a,b
   03FE 08            [12] 1490 	inc	r0
   03FF E2            [24] 1491 	movx	a,@r0
   0400 35 F0         [12] 1492 	addc	a,b
   0402 CE            [12] 1493 	xch	a,r6
   0403 25 E0         [12] 1494 	add	a,acc
   0405 CE            [12] 1495 	xch	a,r6
   0406 33            [12] 1496 	rlc	a
   0407 FF            [12] 1497 	mov	r7,a
   0408 8E 82         [24] 1498 	mov	dpl,r6
   040A 8F 83         [24] 1499 	mov	dph,r7
   040C C0 05         [24] 1500 	push	ar5
   040E C0 04         [24] 1501 	push	ar4
   0410 12r00r00      [24] 1502 	lcall	___uint2fs
   0413 AA 82         [24] 1503 	mov	r2,dpl
   0415 AB 83         [24] 1504 	mov	r3,dph
   0417 AE F0         [24] 1505 	mov	r6,b
   0419 FF            [12] 1506 	mov	r7,a
   041A C0 02         [24] 1507 	push	ar2
   041C C0 03         [24] 1508 	push	ar3
   041E C0 06         [24] 1509 	push	ar6
   0420 C0 07         [24] 1510 	push	ar7
   0422 85*15 82      [24] 1511 	mov	dpl,_tdm_state_update_sloc2_1_0
   0425 85*16 83      [24] 1512 	mov	dph,(_tdm_state_update_sloc2_1_0 + 1)
   0428 85*17 F0      [24] 1513 	mov	b,(_tdm_state_update_sloc2_1_0 + 2)
   042B E5*18         [12] 1514 	mov	a,(_tdm_state_update_sloc2_1_0 + 3)
   042D 12r00r00      [24] 1515 	lcall	___fsdiv
   0430 AA 82         [24] 1516 	mov	r2,dpl
   0432 AB 83         [24] 1517 	mov	r3,dph
   0434 AE F0         [24] 1518 	mov	r6,b
   0436 FF            [12] 1519 	mov	r7,a
   0437 E5 81         [12] 1520 	mov	a,sp
   0439 24 FC         [12] 1521 	add	a,#0xfc
   043B F5 81         [12] 1522 	mov	sp,a
   043D D0 04         [24] 1523 	pop	ar4
   043F D0 05         [24] 1524 	pop	ar5
   0441 C0 07         [24] 1525 	push	ar7
   0443 C0 06         [24] 1526 	push	ar6
   0445 C0 05         [24] 1527 	push	ar5
   0447 C0 04         [24] 1528 	push	ar4
   0449 C0 02         [24] 1529 	push	ar2
   044B C0 03         [24] 1530 	push	ar3
   044D C0 06         [24] 1531 	push	ar6
   044F C0 07         [24] 1532 	push	ar7
   0451 85*11 82      [24] 1533 	mov	dpl,_tdm_state_update_sloc1_1_0
   0454 85*12 83      [24] 1534 	mov	dph,(_tdm_state_update_sloc1_1_0 + 1)
   0457 85*13 F0      [24] 1535 	mov	b,(_tdm_state_update_sloc1_1_0 + 2)
   045A E5*14         [12] 1536 	mov	a,(_tdm_state_update_sloc1_1_0 + 3)
   045C 12r00r00      [24] 1537 	lcall	___fsadd
   045F 85 82*00      [24] 1538 	mov	_average_duty_cycle,dpl
   0462 85 83*01      [24] 1539 	mov	(_average_duty_cycle + 1),dph
   0465 85 F0*02      [24] 1540 	mov	(_average_duty_cycle + 2),b
   0468 F5*03         [12] 1541 	mov	(_average_duty_cycle + 3),a
   046A E5 81         [12] 1542 	mov	a,sp
   046C 24 FC         [12] 1543 	add	a,#0xfc
   046E F5 81         [12] 1544 	mov	sp,a
   0470 D0 04         [24] 1545 	pop	ar4
   0472 D0 05         [24] 1546 	pop	ar5
   0474 D0 06         [24] 1547 	pop	ar6
   0476 D0 07         [24] 1548 	pop	ar7
                           1549 ;	radio/tdm.c:306: transmitted_ticks = 0;
   0478 78r10         [12] 1550 	mov	r0,#_transmitted_ticks
   047A E4            [12] 1551 	clr	a
   047B F2            [24] 1552 	movx	@r0,a
   047C 08            [12] 1553 	inc	r0
   047D F2            [24] 1554 	movx	@r0,a
                           1555 ;	radio/tdm.c:307: duty_cycle_wait = (average_duty_cycle >= (duty_cycle - duty_cycle_offset));
   047E EC            [12] 1556 	mov	a,r4
   047F C3            [12] 1557 	clr	c
   0480 95*0F         [12] 1558 	subb	a,_tdm_state_update_sloc0_1_0
   0482 FC            [12] 1559 	mov	r4,a
   0483 ED            [12] 1560 	mov	a,r5
   0484 95*10         [12] 1561 	subb	a,(_tdm_state_update_sloc0_1_0 + 1)
   0486 FD            [12] 1562 	mov	r5,a
   0487 8C 82         [24] 1563 	mov	dpl,r4
   0489 8D 83         [24] 1564 	mov	dph,r5
   048B 12r00r00      [24] 1565 	lcall	___sint2fs
   048E AC 82         [24] 1566 	mov	r4,dpl
   0490 AD 83         [24] 1567 	mov	r5,dph
   0492 AE F0         [24] 1568 	mov	r6,b
   0494 FF            [12] 1569 	mov	r7,a
   0495 C0 07         [24] 1570 	push	ar7
   0497 C0 06         [24] 1571 	push	ar6
   0499 C0 04         [24] 1572 	push	ar4
   049B C0 05         [24] 1573 	push	ar5
   049D C0 06         [24] 1574 	push	ar6
   049F C0 07         [24] 1575 	push	ar7
   04A1 85*00 82      [24] 1576 	mov	dpl,_average_duty_cycle
   04A4 85*01 83      [24] 1577 	mov	dph,(_average_duty_cycle + 1)
   04A7 85*02 F0      [24] 1578 	mov	b,(_average_duty_cycle + 2)
   04AA E5*03         [12] 1579 	mov	a,(_average_duty_cycle + 3)
   04AC 12r00r00      [24] 1580 	lcall	___fslt
   04AF E5 81         [12] 1581 	mov	a,sp
   04B1 24 FC         [12] 1582 	add	a,#0xfc
   04B3 F5 81         [12] 1583 	mov	sp,a
   04B5 D0 06         [24] 1584 	pop	ar6
   04B7 D0 07         [24] 1585 	pop	ar7
   04B9 E5 82         [12] 1586 	mov	a,dpl
   04BB 24 FF         [12] 1587 	add	a,#0xFF
   04BD 92*08         [24] 1588 	mov  _tdm_state_update_sloc3_1_0,c
   04BF B3            [12] 1589 	cpl	c
   04C0 92*04         [24] 1590 	mov	_duty_cycle_wait,c
                           1591 ;	radio/tdm.c:320: tdm_state_remaining -= tdelta;
   04C2 D0 07         [24] 1592 	pop	ar7
   04C4 D0 06         [24] 1593 	pop	ar6
                           1594 ;	radio/tdm.c:307: duty_cycle_wait = (average_duty_cycle >= (duty_cycle - duty_cycle_offset));
   04C6                    1595 00114$:
                           1596 ;	radio/tdm.c:311: bonus_transmit = 0;
   04C6 C2*00         [12] 1597 	clr	_bonus_transmit
                           1598 ;	radio/tdm.c:314: transmit_yield = 0;
   04C8 C2*01         [12] 1599 	clr	_transmit_yield
                           1600 ;	radio/tdm.c:317: transmit_wait = 0;
   04CA 78r0C         [12] 1601 	mov	r0,#_transmit_wait
   04CC E4            [12] 1602 	clr	a
   04CD F2            [24] 1603 	movx	@r0,a
   04CE 08            [12] 1604 	inc	r0
   04CF F2            [24] 1605 	movx	@r0,a
   04D0 02r02r8C      [24] 1606 	ljmp	00116$
   04D3                    1607 00118$:
                           1608 ;	radio/tdm.c:320: tdm_state_remaining -= tdelta;
   04D3 78r01         [12] 1609 	mov	r0,#_tdm_state_remaining
   04D5 E2            [24] 1610 	movx	a,@r0
   04D6 C3            [12] 1611 	clr	c
   04D7 9E            [12] 1612 	subb	a,r6
   04D8 F2            [24] 1613 	movx	@r0,a
   04D9 08            [12] 1614 	inc	r0
   04DA E2            [24] 1615 	movx	a,@r0
   04DB 9F            [12] 1616 	subb	a,r7
   04DC F2            [24] 1617 	movx	@r0,a
   04DD 22            [24] 1618 	ret
                           1619 ;------------------------------------------------------------
                           1620 ;Allocation info for local variables in function 'tdm_change_phase'
                           1621 ;------------------------------------------------------------
                           1622 ;	radio/tdm.c:326: tdm_change_phase(void)
                           1623 ;	-----------------------------------------
                           1624 ;	 function tdm_change_phase
                           1625 ;	-----------------------------------------
   04DE                    1626 _tdm_change_phase:
                           1627 ;	radio/tdm.c:328: tdm_state = (tdm_state+2) % 4;
   04DE 78r00         [12] 1628 	mov	r0,#_tdm_state
   04E0 E2            [24] 1629 	movx	a,@r0
   04E1 FE            [12] 1630 	mov	r6,a
   04E2 7F 00         [12] 1631 	mov	r7,#0x00
   04E4 74 02         [12] 1632 	mov	a,#0x02
   04E6 2E            [12] 1633 	add	a,r6
   04E7 FE            [12] 1634 	mov	r6,a
   04E8 E4            [12] 1635 	clr	a
   04E9 3F            [12] 1636 	addc	a,r7
   04EA FF            [12] 1637 	mov	r7,a
   04EB 90r00r00      [24] 1638 	mov	dptr,#__modsint_PARM_2
   04EE 74 04         [12] 1639 	mov	a,#0x04
   04F0 F0            [24] 1640 	movx	@dptr,a
   04F1 E4            [12] 1641 	clr	a
   04F2 A3            [24] 1642 	inc	dptr
   04F3 F0            [24] 1643 	movx	@dptr,a
   04F4 8E 82         [24] 1644 	mov	dpl,r6
   04F6 8F 83         [24] 1645 	mov	dph,r7
   04F8 12r00r00      [24] 1646 	lcall	__modsint
   04FB AE 82         [24] 1647 	mov	r6,dpl
   04FD 78r00         [12] 1648 	mov	r0,#_tdm_state
   04FF EE            [12] 1649 	mov	a,r6
   0500 F2            [24] 1650 	movx	@r0,a
   0501 22            [24] 1651 	ret
                           1652 ;------------------------------------------------------------
                           1653 ;Allocation info for local variables in function 'temperature_update'
                           1654 ;------------------------------------------------------------
                           1655 ;diff                      Allocated to registers r6 r7 
                           1656 ;------------------------------------------------------------
                           1657 ;	radio/tdm.c:333: static void temperature_update(void)
                           1658 ;	-----------------------------------------
                           1659 ;	 function temperature_update
                           1660 ;	-----------------------------------------
   0502                    1661 _temperature_update:
                           1662 ;	radio/tdm.c:336: if (radio_get_transmit_power() <= 20) {
   0502 12r00r00      [24] 1663 	lcall	_radio_get_transmit_power
   0505 E5 82         [12] 1664 	mov	a,dpl
   0507 FF            [12] 1665 	mov	r7,a
   0508 24 EB         [12] 1666 	add	a,#0xff - 0x14
   050A 40 05         [24] 1667 	jc	00102$
                           1668 ;	radio/tdm.c:337: duty_cycle_offset = 0;
   050C 78r0F         [12] 1669 	mov	r0,#_duty_cycle_offset
   050E E4            [12] 1670 	clr	a
   050F F2            [24] 1671 	movx	@r0,a
                           1672 ;	radio/tdm.c:338: return;
   0510 22            [24] 1673 	ret
   0511                    1674 00102$:
                           1675 ;	radio/tdm.c:341: diff = radio_temperature() - MAX_PA_TEMPERATURE;
   0511 12r00r00      [24] 1676 	lcall	_radio_temperature
   0514 E5 82         [12] 1677 	mov	a,dpl
   0516 85 83 F0      [24] 1678 	mov	b,dph
   0519 24 9C         [12] 1679 	add	a,#0x9C
   051B FE            [12] 1680 	mov	r6,a
   051C E5 F0         [12] 1681 	mov	a,b
   051E 34 FF         [12] 1682 	addc	a,#0xFF
   0520 FF            [12] 1683 	mov	r7,a
                           1684 ;	radio/tdm.c:342: if (diff <= 0 && duty_cycle_offset > 0) {
   0521 C3            [12] 1685 	clr	c
   0522 E4            [12] 1686 	clr	a
   0523 9E            [12] 1687 	subb	a,r6
   0524 E4            [12] 1688 	clr	a
   0525 64 80         [12] 1689 	xrl	a,#0x80
   0527 8F F0         [24] 1690 	mov	b,r7
   0529 63 F0 80      [24] 1691 	xrl	b,#0x80
   052C 95 F0         [12] 1692 	subb	a,b
   052E E4            [12] 1693 	clr	a
   052F 33            [12] 1694 	rlc	a
   0530 FD            [12] 1695 	mov	r5,a
   0531 70 0C         [24] 1696 	jnz	00112$
   0533 78r0F         [12] 1697 	mov	r0,#_duty_cycle_offset
   0535 E2            [24] 1698 	movx	a,@r0
   0536 60 07         [24] 1699 	jz	00112$
                           1700 ;	radio/tdm.c:344: duty_cycle_offset -= 1;
   0538 78r0F         [12] 1701 	mov	r0,#_duty_cycle_offset
   053A E2            [24] 1702 	movx	a,@r0
   053B 14            [12] 1703 	dec	a
   053C F2            [24] 1704 	movx	@r0,a
   053D 80 39         [24] 1705 	sjmp	00113$
   053F                    1706 00112$:
                           1707 ;	radio/tdm.c:345: } else if (diff > 10) {
   053F C3            [12] 1708 	clr	c
   0540 74 0A         [12] 1709 	mov	a,#0x0A
   0542 9E            [12] 1710 	subb	a,r6
   0543 E4            [12] 1711 	clr	a
   0544 64 80         [12] 1712 	xrl	a,#0x80
   0546 8F F0         [24] 1713 	mov	b,r7
   0548 63 F0 80      [24] 1714 	xrl	b,#0x80
   054B 95 F0         [12] 1715 	subb	a,b
   054D 50 08         [24] 1716 	jnc	00109$
                           1717 ;	radio/tdm.c:347: duty_cycle_offset += 10;
   054F 78r0F         [12] 1718 	mov	r0,#_duty_cycle_offset
   0551 E2            [24] 1719 	movx	a,@r0
   0552 24 0A         [12] 1720 	add	a,#0x0A
   0554 F2            [24] 1721 	movx	@r0,a
   0555 80 21         [24] 1722 	sjmp	00113$
   0557                    1723 00109$:
                           1724 ;	radio/tdm.c:348: } else if (diff > 5) {
   0557 C3            [12] 1725 	clr	c
   0558 74 05         [12] 1726 	mov	a,#0x05
   055A 9E            [12] 1727 	subb	a,r6
   055B E4            [12] 1728 	clr	a
   055C 64 80         [12] 1729 	xrl	a,#0x80
   055E 8F F0         [24] 1730 	mov	b,r7
   0560 63 F0 80      [24] 1731 	xrl	b,#0x80
   0563 95 F0         [12] 1732 	subb	a,b
   0565 50 08         [24] 1733 	jnc	00106$
                           1734 ;	radio/tdm.c:350: duty_cycle_offset += 5;
   0567 78r0F         [12] 1735 	mov	r0,#_duty_cycle_offset
   0569 E2            [24] 1736 	movx	a,@r0
   056A 24 05         [12] 1737 	add	a,#0x05
   056C F2            [24] 1738 	movx	@r0,a
   056D 80 09         [24] 1739 	sjmp	00113$
   056F                    1740 00106$:
                           1741 ;	radio/tdm.c:351: } else if (diff > 0) {
   056F ED            [12] 1742 	mov	a,r5
   0570 60 06         [24] 1743 	jz	00113$
                           1744 ;	radio/tdm.c:353: duty_cycle_offset += 1;				
   0572 78r0F         [12] 1745 	mov	r0,#_duty_cycle_offset
   0574 E2            [24] 1746 	movx	a,@r0
   0575 24 01         [12] 1747 	add	a,#0x01
   0577 F2            [24] 1748 	movx	@r0,a
   0578                    1749 00113$:
                           1750 ;	radio/tdm.c:356: if ((duty_cycle-duty_cycle_offset) < 20) {
   0578 78r0E         [12] 1751 	mov	r0,#_duty_cycle
   057A E2            [24] 1752 	movx	a,@r0
   057B FE            [12] 1753 	mov	r6,a
   057C 7F 00         [12] 1754 	mov	r7,#0x00
   057E 78r0F         [12] 1755 	mov	r0,#_duty_cycle_offset
   0580 E2            [24] 1756 	movx	a,@r0
   0581 FC            [12] 1757 	mov	r4,a
   0582 7D 00         [12] 1758 	mov	r5,#0x00
   0584 EE            [12] 1759 	mov	a,r6
   0585 C3            [12] 1760 	clr	c
   0586 9C            [12] 1761 	subb	a,r4
   0587 FE            [12] 1762 	mov	r6,a
   0588 EF            [12] 1763 	mov	a,r7
   0589 9D            [12] 1764 	subb	a,r5
   058A FF            [12] 1765 	mov	r7,a
   058B C3            [12] 1766 	clr	c
   058C EE            [12] 1767 	mov	a,r6
   058D 94 14         [12] 1768 	subb	a,#0x14
   058F EF            [12] 1769 	mov	a,r7
   0590 64 80         [12] 1770 	xrl	a,#0x80
   0592 94 80         [12] 1771 	subb	a,#0x80
   0594 50 08         [24] 1772 	jnc	00117$
                           1773 ;	radio/tdm.c:357: duty_cycle_offset = duty_cycle - 20;
   0596 78r0E         [12] 1774 	mov	r0,#_duty_cycle
   0598 79r0F         [12] 1775 	mov	r1,#_duty_cycle_offset
   059A E2            [24] 1776 	movx	a,@r0
   059B 24 EC         [12] 1777 	add	a,#0xEC
   059D F3            [24] 1778 	movx	@r1,a
   059E                    1779 00117$:
   059E 22            [24] 1780 	ret
                           1781 ;------------------------------------------------------------
                           1782 ;Allocation info for local variables in function 'link_update'
                           1783 ;------------------------------------------------------------
                           1784 ;old_remaining             Allocated to registers r6 r7 
                           1785 ;unlock_count              Allocated with name '_link_update_unlock_count_1_185'
                           1786 ;temperature_count         Allocated with name '_link_update_temperature_count_1_185'
                           1787 ;------------------------------------------------------------
                           1788 ;	radio/tdm.c:365: link_update(void)
                           1789 ;	-----------------------------------------
                           1790 ;	 function link_update
                           1791 ;	-----------------------------------------
   059F                    1792 _link_update:
                           1793 ;	radio/tdm.c:368: if (received_packet) {
   059F 30*03 0B      [24] 1794 	jnb	_received_packet,00102$
                           1795 ;	radio/tdm.c:369: unlock_count = 0;
   05A2 90r00rFC      [24] 1796 	mov	dptr,#_link_update_unlock_count_1_185
   05A5 E4            [12] 1797 	clr	a
   05A6 F0            [24] 1798 	movx	@dptr,a
                           1799 ;	radio/tdm.c:370: received_packet = false;
   05A7 C2*03         [12] 1800 	clr	_received_packet
                           1801 ;	radio/tdm.c:372: TDM_SYNC_PIN = true;
   05A9 D2 A6         [12] 1802 	setb	_TDM_SYNC_PIN
   05AB 80 07         [24] 1803 	sjmp	00103$
   05AD                    1804 00102$:
                           1805 ;	radio/tdm.c:375: unlock_count++;
   05AD 90r00rFC      [24] 1806 	mov	dptr,#_link_update_unlock_count_1_185
   05B0 E0            [24] 1807 	movx	a,@dptr
   05B1 24 01         [12] 1808 	add	a,#0x01
   05B3 F0            [24] 1809 	movx	@dptr,a
   05B4                    1810 00103$:
                           1811 ;	radio/tdm.c:377: if (unlock_count < 6) {
   05B4 90r00rFC      [24] 1812 	mov	dptr,#_link_update_unlock_count_1_185
   05B7 E0            [24] 1813 	movx	a,@dptr
   05B8 FF            [12] 1814 	mov	r7,a
   05B9 BF 06 00      [24] 1815 	cjne	r7,#0x06,00157$
   05BC                    1816 00157$:
   05BC 50 04         [24] 1817 	jnc	00105$
                           1818 ;	radio/tdm.c:378: LED_RADIO = LED_ON;
   05BE C2 A5         [12] 1819 	clr	_LED_GREEN
   05C0 80 08         [24] 1820 	sjmp	00106$
   05C2                    1821 00105$:
                           1822 ;	radio/tdm.c:381: TDM_SYNC_PIN = false;
   05C2 C2 A6         [12] 1823 	clr	_TDM_SYNC_PIN
                           1824 ;	radio/tdm.c:384: LED_RADIO = blink_state;
   05C4 A2*02         [12] 1825 	mov	c,_blink_state
   05C6 92 A5         [24] 1826 	mov	_LED_GREEN,c
                           1827 ;	radio/tdm.c:385: blink_state = !blink_state;
   05C8 B2*02         [12] 1828 	cpl	_blink_state
   05CA                    1829 00106$:
                           1830 ;	radio/tdm.c:387: if (unlock_count > 40) {
   05CA EF            [12] 1831 	mov	a,r7
   05CB 24 D7         [12] 1832 	add	a,#0xff - 0x28
   05CD 40 03         [24] 1833 	jc	00159$
   05CF 02r06r5A      [24] 1834 	ljmp	00117$
   05D2                    1835 00159$:
                           1836 ;	radio/tdm.c:391: unlock_count = 5;
   05D2 90r00rFC      [24] 1837 	mov	dptr,#_link_update_unlock_count_1_185
   05D5 74 05         [12] 1838 	mov	a,#0x05
   05D7 F0            [24] 1839 	movx	@dptr,a
                           1840 ;	radio/tdm.c:395: if (timer_entropy() & 1) {
   05D8 12r00r00      [24] 1841 	lcall	_timer_entropy
   05DB E5 82         [12] 1842 	mov	a,dpl
   05DD 30 E0 59      [24] 1843 	jnb	acc.0,00113$
                           1844 ;	radio/tdm.c:396: register uint16_t old_remaining = tdm_state_remaining;
   05E0 78r01         [12] 1845 	mov	r0,#_tdm_state_remaining
   05E2 E2            [24] 1846 	movx	a,@r0
   05E3 FE            [12] 1847 	mov	r6,a
   05E4 08            [12] 1848 	inc	r0
   05E5 E2            [24] 1849 	movx	a,@r0
   05E6 FF            [12] 1850 	mov	r7,a
                           1851 ;	radio/tdm.c:397: if (tdm_state_remaining > silence_period) {
   05E7 78r06         [12] 1852 	mov	r0,#_silence_period
   05E9 C3            [12] 1853 	clr	c
   05EA E2            [24] 1854 	movx	a,@r0
   05EB 9E            [12] 1855 	subb	a,r6
   05EC 08            [12] 1856 	inc	r0
   05ED E2            [24] 1857 	movx	a,@r0
   05EE 9F            [12] 1858 	subb	a,r7
   05EF 50 17         [24] 1859 	jnc	00108$
                           1860 ;	radio/tdm.c:398: tdm_state_remaining -= packet_latency;
   05F1 78r08         [12] 1861 	mov	r0,#_packet_latency
   05F3 D3            [12] 1862 	setb	c
   05F4 E2            [24] 1863 	movx	a,@r0
   05F5 9E            [12] 1864 	subb	a,r6
   05F6 F4            [12] 1865 	cpl	a
   05F7 B3            [12] 1866 	cpl	c
   05F8 FC            [12] 1867 	mov	r4,a
   05F9 B3            [12] 1868 	cpl	c
   05FA 08            [12] 1869 	inc	r0
   05FB E2            [24] 1870 	movx	a,@r0
   05FC 9F            [12] 1871 	subb	a,r7
   05FD F4            [12] 1872 	cpl	a
   05FE FD            [12] 1873 	mov	r5,a
   05FF 78r01         [12] 1874 	mov	r0,#_tdm_state_remaining
   0601 EC            [12] 1875 	mov	a,r4
   0602 F2            [24] 1876 	movx	@r0,a
   0603 08            [12] 1877 	inc	r0
   0604 ED            [12] 1878 	mov	a,r5
   0605 F2            [24] 1879 	movx	@r0,a
   0606 80 08         [24] 1880 	sjmp	00109$
   0608                    1881 00108$:
                           1882 ;	radio/tdm.c:400: tdm_state_remaining = 1;
   0608 78r01         [12] 1883 	mov	r0,#_tdm_state_remaining
   060A 74 01         [12] 1884 	mov	a,#0x01
   060C F2            [24] 1885 	movx	@r0,a
   060D 08            [12] 1886 	inc	r0
   060E E4            [12] 1887 	clr	a
   060F F2            [24] 1888 	movx	@r0,a
   0610                    1889 00109$:
                           1890 ;	radio/tdm.c:402: if (at_testmode & AT_TEST_TDM) {
   0610 78r00         [12] 1891 	mov	r0,#_at_testmode
   0612 E2            [24] 1892 	movx	a,@r0
   0613 54 02         [12] 1893 	anl	a,#0x02
   0615 60 22         [24] 1894 	jz	00113$
                           1895 ;	radio/tdm.c:403: printf("TDM: change timing %u/%u\n",
   0617 78r01         [12] 1896 	mov	r0,#_tdm_state_remaining
   0619 E2            [24] 1897 	movx	a,@r0
   061A C0 E0         [24] 1898 	push	acc
   061C 08            [12] 1899 	inc	r0
   061D E2            [24] 1900 	movx	a,@r0
   061E C0 E0         [24] 1901 	push	acc
   0620 C0 06         [24] 1902 	push	ar6
   0622 C0 07         [24] 1903 	push	ar7
   0624 74r82         [12] 1904 	mov	a,#__str_4
   0626 C0 E0         [24] 1905 	push	acc
   0628 74s00         [12] 1906 	mov	a,#(__str_4 >> 8)
   062A C0 E0         [24] 1907 	push	acc
   062C 74 80         [12] 1908 	mov	a,#0x80
   062E C0 E0         [24] 1909 	push	acc
   0630 12r00r00      [24] 1910 	lcall	_printfl
   0633 E5 81         [12] 1911 	mov	a,sp
   0635 24 F9         [12] 1912 	add	a,#0xf9
   0637 F5 81         [12] 1913 	mov	sp,a
   0639                    1914 00113$:
                           1915 ;	radio/tdm.c:408: if (at_testmode & AT_TEST_TDM) {
   0639 78r00         [12] 1916 	mov	r0,#_at_testmode
   063B E2            [24] 1917 	movx	a,@r0
   063C 54 02         [12] 1918 	anl	a,#0x02
   063E 60 15         [24] 1919 	jz	00115$
                           1920 ;	radio/tdm.c:409: printf("TDM: scanning\n");
   0640 74r9C         [12] 1921 	mov	a,#__str_5
   0642 C0 E0         [24] 1922 	push	acc
   0644 74s00         [12] 1923 	mov	a,#(__str_5 >> 8)
   0646 C0 E0         [24] 1924 	push	acc
   0648 74 80         [12] 1925 	mov	a,#0x80
   064A C0 E0         [24] 1926 	push	acc
   064C 12r00r00      [24] 1927 	lcall	_printfl
   064F 15 81         [12] 1928 	dec	sp
   0651 15 81         [12] 1929 	dec	sp
   0653 15 81         [12] 1930 	dec	sp
   0655                    1931 00115$:
                           1932 ;	radio/tdm.c:411: fhop_set_locked(false);
   0655 C2*00         [12] 1933 	clr	_fhop_set_locked_PARM_1
   0657 12r00r00      [24] 1934 	lcall	_fhop_set_locked
   065A                    1935 00117$:
                           1936 ;	radio/tdm.c:414: if (unlock_count != 0) {
   065A 90r00rFC      [24] 1937 	mov	dptr,#_link_update_unlock_count_1_185
   065D E0            [24] 1938 	movx	a,@dptr
   065E FF            [12] 1939 	mov	r7,a
   065F 60 3D         [24] 1940 	jz	00119$
                           1941 ;	radio/tdm.c:415: statistics.average_rssi = (radio_last_rssi() + 3*(uint16_t)statistics.average_rssi)/4;
   0661 12r00r00      [24] 1942 	lcall	_radio_last_rssi
   0664 AF 82         [24] 1943 	mov	r7,dpl
   0666 7E 00         [12] 1944 	mov	r6,#0x00
   0668 78r00         [12] 1945 	mov	r0,#_statistics
   066A E2            [24] 1946 	movx	a,@r0
   066B 90r00r00      [24] 1947 	mov	dptr,#__mulint_PARM_2
   066E F0            [24] 1948 	movx	@dptr,a
   066F E4            [12] 1949 	clr	a
   0670 A3            [24] 1950 	inc	dptr
   0671 F0            [24] 1951 	movx	@dptr,a
   0672 90 00 03      [24] 1952 	mov	dptr,#0x0003
   0675 C0 07         [24] 1953 	push	ar7
   0677 C0 06         [24] 1954 	push	ar6
   0679 12r00r00      [24] 1955 	lcall	__mulint
   067C AC 82         [24] 1956 	mov	r4,dpl
   067E AD 83         [24] 1957 	mov	r5,dph
   0680 D0 06         [24] 1958 	pop	ar6
   0682 D0 07         [24] 1959 	pop	ar7
   0684 EC            [12] 1960 	mov	a,r4
   0685 2F            [12] 1961 	add	a,r7
   0686 FC            [12] 1962 	mov	r4,a
   0687 ED            [12] 1963 	mov	a,r5
   0688 3E            [12] 1964 	addc	a,r6
   0689 C3            [12] 1965 	clr	c
   068A 13            [12] 1966 	rrc	a
   068B CC            [12] 1967 	xch	a,r4
   068C 13            [12] 1968 	rrc	a
   068D CC            [12] 1969 	xch	a,r4
   068E C3            [12] 1970 	clr	c
   068F 13            [12] 1971 	rrc	a
   0690 CC            [12] 1972 	xch	a,r4
   0691 13            [12] 1973 	rrc	a
   0692 CC            [12] 1974 	xch	a,r4
   0693 FD            [12] 1975 	mov	r5,a
   0694 78r00         [12] 1976 	mov	r0,#_statistics
   0696 EC            [12] 1977 	mov	a,r4
   0697 F2            [24] 1978 	movx	@r0,a
                           1979 ;	radio/tdm.c:418: statistics.receive_count = 0;
   0698 78r02         [12] 1980 	mov	r0,#(_statistics + 0x0002)
   069A E4            [12] 1981 	clr	a
   069B F2            [24] 1982 	movx	@r0,a
   069C 08            [12] 1983 	inc	r0
   069D F2            [24] 1984 	movx	@r0,a
   069E                    1985 00119$:
                           1986 ;	radio/tdm.c:420: if (unlock_count > 5) {
   069E 90r00rFC      [24] 1987 	mov	dptr,#_link_update_unlock_count_1_185
   06A1 E0            [24] 1988 	movx	a,@dptr
   06A2 FF            [12] 1989 	mov  r7,a
   06A3 24 FA         [12] 1990 	add	a,#0xff - 0x05
   06A5 50 17         [24] 1991 	jnc	00121$
                           1992 ;	radio/tdm.c:421: memset(&remote_statistics, 0, sizeof(remote_statistics));
   06A7 90r00r00      [24] 1993 	mov	dptr,#_memset_PARM_2
   06AA E4            [12] 1994 	clr	a
   06AB F0            [24] 1995 	movx	@dptr,a
   06AC 90r00r00      [24] 1996 	mov	dptr,#_memset_PARM_3
   06AF 74 04         [12] 1997 	mov	a,#0x04
   06B1 F0            [24] 1998 	movx	@dptr,a
   06B2 E4            [12] 1999 	clr	a
   06B3 A3            [24] 2000 	inc	dptr
   06B4 F0            [24] 2001 	movx	@dptr,a
   06B5 90r00r00      [24] 2002 	mov	dptr,#_remote_statistics
   06B8 75 F0 60      [24] 2003 	mov	b,#0x60
   06BB 12r00r00      [24] 2004 	lcall	_memset
   06BE                    2005 00121$:
                           2006 ;	radio/tdm.c:424: test_display = at_testmode;
   06BE 78r00         [12] 2007 	mov	r0,#_at_testmode
   06C0 E2            [24] 2008 	movx	a,@r0
   06C1 78r19         [12] 2009 	mov	r0,#_test_display
   06C3 F2            [24] 2010 	movx	@r0,a
                           2011 ;	radio/tdm.c:425: send_statistics = 1;
   06C4 D2*05         [12] 2012 	setb	_send_statistics
                           2013 ;	radio/tdm.c:427: temperature_count++;
   06C6 90r00rFD      [24] 2014 	mov	dptr,#_link_update_temperature_count_1_185
   06C9 E0            [24] 2015 	movx	a,@dptr
   06CA 24 01         [12] 2016 	add	a,#0x01
   06CC F0            [24] 2017 	movx	@dptr,a
                           2018 ;	radio/tdm.c:428: if (temperature_count == 4) {
   06CD 90r00rFD      [24] 2019 	mov	dptr,#_link_update_temperature_count_1_185
   06D0 E0            [24] 2020 	movx	a,@dptr
   06D1 FF            [12] 2021 	mov	r7,a
   06D2 BF 04 08      [24] 2022 	cjne	r7,#0x04,00124$
                           2023 ;	radio/tdm.c:430: temperature_update();
   06D5 12r05r02      [24] 2024 	lcall	_temperature_update
                           2025 ;	radio/tdm.c:431: temperature_count = 0;
   06D8 90r00rFD      [24] 2026 	mov	dptr,#_link_update_temperature_count_1_185
   06DB E4            [12] 2027 	clr	a
   06DC F0            [24] 2028 	movx	@dptr,a
   06DD                    2029 00124$:
   06DD 22            [24] 2030 	ret
                           2031 ;------------------------------------------------------------
                           2032 ;Allocation info for local variables in function 'tdm_remote_at'
                           2033 ;------------------------------------------------------------
                           2034 ;	radio/tdm.c:437: tdm_remote_at(void)
                           2035 ;	-----------------------------------------
                           2036 ;	 function tdm_remote_at
                           2037 ;	-----------------------------------------
   06DE                    2038 _tdm_remote_at:
                           2039 ;	radio/tdm.c:439: memcpy(remote_at_cmd, at_cmd, strlen(at_cmd)+1);
   06DE 90r00r00      [24] 2040 	mov	dptr,#_at_cmd
   06E1 75 F0 60      [24] 2041 	mov	b,#0x60
   06E4 12r00r00      [24] 2042 	lcall	_strlen
   06E7 E5 82         [12] 2043 	mov	a,dpl
   06E9 85 83 F0      [24] 2044 	mov	b,dph
   06EC 24 01         [12] 2045 	add	a,#0x01
   06EE FE            [12] 2046 	mov	r6,a
   06EF E4            [12] 2047 	clr	a
   06F0 35 F0         [12] 2048 	addc	a,b
   06F2 FF            [12] 2049 	mov	r7,a
   06F3 90r00r00      [24] 2050 	mov	dptr,#_memcpy_PARM_2
   06F6 74r00         [12] 2051 	mov	a,#_at_cmd
   06F8 F0            [24] 2052 	movx	@dptr,a
   06F9 74s00         [12] 2053 	mov	a,#(_at_cmd >> 8)
   06FB A3            [24] 2054 	inc	dptr
   06FC F0            [24] 2055 	movx	@dptr,a
   06FD 74 60         [12] 2056 	mov	a,#0x60
   06FF A3            [24] 2057 	inc	dptr
   0700 F0            [24] 2058 	movx	@dptr,a
   0701 90r00r00      [24] 2059 	mov	dptr,#_memcpy_PARM_3
   0704 EE            [12] 2060 	mov	a,r6
   0705 F0            [24] 2061 	movx	@dptr,a
   0706 EF            [12] 2062 	mov	a,r7
   0707 A3            [24] 2063 	inc	dptr
   0708 F0            [24] 2064 	movx	@dptr,a
   0709 90r00r1C      [24] 2065 	mov	dptr,#_remote_at_cmd
   070C 75 F0 60      [24] 2066 	mov	b,#0x60
   070F 12r00r00      [24] 2067 	lcall	_memcpy
                           2068 ;	radio/tdm.c:440: send_at_command = true;
   0712 D2*06         [12] 2069 	setb	_send_at_command
   0714 22            [24] 2070 	ret
                           2071 ;------------------------------------------------------------
                           2072 ;Allocation info for local variables in function 'handle_at_command'
                           2073 ;------------------------------------------------------------
                           2074 ;i                         Allocated to registers r6 
                           2075 ;------------------------------------------------------------
                           2076 ;	radio/tdm.c:445: handle_at_command(__pdata uint8_t len)
                           2077 ;	-----------------------------------------
                           2078 ;	 function handle_at_command
                           2079 ;	-----------------------------------------
   0715                    2080 _handle_at_command:
   0715 AF 82         [24] 2081 	mov	r7,dpl
                           2082 ;	radio/tdm.c:447: if (len < 2 || len > AT_CMD_MAXLEN || 
   0717 BF 02 00      [24] 2083 	cjne	r7,#0x02,00133$
   071A                    2084 00133$:
   071A 40 17         [24] 2085 	jc	00118$
   071C EF            [12] 2086 	mov	a,r7
   071D 24 EF         [12] 2087 	add	a,#0xff - 0x10
   071F 40 12         [24] 2088 	jc	00118$
                           2089 ;	radio/tdm.c:448: pbuf[0] != (uint8_t)'R' || 
   0721 90r00r00      [24] 2090 	mov	dptr,#_pbuf
   0724 E0            [24] 2091 	movx	a,@dptr
   0725 FE            [12] 2092 	mov	r6,a
   0726 BE 52 0A      [24] 2093 	cjne	r6,#0x52,00118$
                           2094 ;	radio/tdm.c:449: pbuf[1] != (uint8_t)'T') {
   0729 90r00r01      [24] 2095 	mov	dptr,#(_pbuf + 0x0001)
   072C E0            [24] 2096 	movx	a,@dptr
   072D FE            [12] 2097 	mov	r6,a
   072E BE 54 02      [24] 2098 	cjne	r6,#0x54,00138$
   0731 80 23         [24] 2099 	sjmp	00103$
   0733                    2100 00138$:
                           2101 ;	radio/tdm.c:452: for (i=0; i<len; i++) {
   0733                    2102 00118$:
   0733 7E 00         [12] 2103 	mov	r6,#0x00
   0735                    2104 00110$:
   0735 C3            [12] 2105 	clr	c
   0736 EE            [12] 2106 	mov	a,r6
   0737 9F            [12] 2107 	subb	a,r7
   0738 50 1B         [24] 2108 	jnc	00101$
                           2109 ;	radio/tdm.c:453: putchar(pbuf[i]);
   073A EE            [12] 2110 	mov	a,r6
   073B 24r00         [12] 2111 	add	a,#_pbuf
   073D F5 82         [12] 2112 	mov	dpl,a
   073F E4            [12] 2113 	clr	a
   0740 34s00         [12] 2114 	addc	a,#(_pbuf >> 8)
   0742 F5 83         [12] 2115 	mov	dph,a
   0744 E0            [24] 2116 	movx	a,@dptr
   0745 F5 82         [12] 2117 	mov	dpl,a
   0747 C0 07         [24] 2118 	push	ar7
   0749 C0 06         [24] 2119 	push	ar6
   074B 12r00r00      [24] 2120 	lcall	_putchar
   074E D0 06         [24] 2121 	pop	ar6
   0750 D0 07         [24] 2122 	pop	ar7
                           2123 ;	radio/tdm.c:452: for (i=0; i<len; i++) {
   0752 0E            [12] 2124 	inc	r6
   0753 80 E0         [24] 2125 	sjmp	00110$
   0755                    2126 00101$:
                           2127 ;	radio/tdm.c:455: return;
   0755 22            [24] 2128 	ret
   0756                    2129 00103$:
                           2130 ;	radio/tdm.c:459: memcpy(at_cmd, pbuf, len);
   0756 90r00r00      [24] 2131 	mov	dptr,#_memcpy_PARM_2
   0759 74r00         [12] 2132 	mov	a,#_pbuf
   075B F0            [24] 2133 	movx	@dptr,a
   075C 74s00         [12] 2134 	mov	a,#(_pbuf >> 8)
   075E A3            [24] 2135 	inc	dptr
   075F F0            [24] 2136 	movx	@dptr,a
   0760 E4            [12] 2137 	clr	a
   0761 A3            [24] 2138 	inc	dptr
   0762 F0            [24] 2139 	movx	@dptr,a
   0763 90r00r00      [24] 2140 	mov	dptr,#_memcpy_PARM_3
   0766 EF            [12] 2141 	mov	a,r7
   0767 F0            [24] 2142 	movx	@dptr,a
   0768 E4            [12] 2143 	clr	a
   0769 A3            [24] 2144 	inc	dptr
   076A F0            [24] 2145 	movx	@dptr,a
   076B 90r00r00      [24] 2146 	mov	dptr,#_at_cmd
   076E 75 F0 60      [24] 2147 	mov	b,#0x60
   0771 C0 07         [24] 2148 	push	ar7
   0773 12r00r00      [24] 2149 	lcall	_memcpy
   0776 D0 07         [24] 2150 	pop	ar7
                           2151 ;	radio/tdm.c:460: at_cmd[len] = 0;
   0778 EF            [12] 2152 	mov	a,r7
   0779 24r00         [12] 2153 	add	a,#_at_cmd
   077B F8            [12] 2154 	mov	r0,a
   077C E4            [12] 2155 	clr	a
   077D F2            [24] 2156 	movx	@r0,a
                           2157 ;	radio/tdm.c:461: at_cmd[0] = 'A'; // replace 'R'
   077E 78r00         [12] 2158 	mov	r0,#_at_cmd
   0780 74 41         [12] 2159 	mov	a,#0x41
   0782 F2            [24] 2160 	movx	@r0,a
                           2161 ;	radio/tdm.c:462: at_cmd_len = len;
   0783 78r00         [12] 2162 	mov	r0,#_at_cmd_len
   0785 EF            [12] 2163 	mov	a,r7
   0786 F2            [24] 2164 	movx	@r0,a
                           2165 ;	radio/tdm.c:463: at_cmd_ready = true;
   0787 D2*00         [12] 2166 	setb	_at_cmd_ready
                           2167 ;	radio/tdm.c:468: printf_start_capture(pbuf, sizeof(pbuf));
   0789 90r00r00      [24] 2168 	mov	dptr,#_printf_start_capture_PARM_2
   078C 74 FC         [12] 2169 	mov	a,#0xFC
   078E F0            [24] 2170 	movx	@dptr,a
   078F 90r00r00      [24] 2171 	mov	dptr,#_pbuf
   0792 12r00r00      [24] 2172 	lcall	_printf_start_capture
                           2173 ;	radio/tdm.c:469: at_command();
   0795 12r00r00      [24] 2174 	lcall	_at_command
                           2175 ;	radio/tdm.c:470: len = printf_end_capture();
   0798 12r00r00      [24] 2176 	lcall	_printf_end_capture
                           2177 ;	radio/tdm.c:471: if (len > 0) {
   079B E5 82         [12] 2178 	mov	a,dpl
   079D FF            [12] 2179 	mov	r7,a
   079E 60 0A         [24] 2180 	jz	00112$
                           2181 ;	radio/tdm.c:472: packet_inject(pbuf, len);
   07A0 78r00         [12] 2182 	mov	r0,#_packet_inject_PARM_2
   07A2 EF            [12] 2183 	mov	a,r7
   07A3 F2            [24] 2184 	movx	@r0,a
   07A4 90r00r00      [24] 2185 	mov	dptr,#_pbuf
   07A7 02r00r00      [24] 2186 	ljmp	_packet_inject
   07AA                    2187 00112$:
   07AA 22            [24] 2188 	ret
                           2189 ;------------------------------------------------------------
                           2190 ;Allocation info for local variables in function 'tdm_serial_loop'
                           2191 ;------------------------------------------------------------
                           2192 ;	radio/tdm.c:482: tdm_serial_loop(void)
                           2193 ;	-----------------------------------------
                           2194 ;	 function tdm_serial_loop
                           2195 ;	-----------------------------------------
   07AB                    2196 _tdm_serial_loop:
                           2197 ;	radio/tdm.c:484: __pdata uint16_t last_t = timer2_tick();
   07AB 12r00r00      [24] 2198 	lcall	_timer2_tick
   07AE 78r2F         [12] 2199 	mov	r0,#_tdm_serial_loop_last_t_1_207
   07B0 E5 82         [12] 2200 	mov	a,dpl
   07B2 F2            [24] 2201 	movx	@r0,a
   07B3 08            [12] 2202 	inc	r0
   07B4 E5 83         [12] 2203 	mov	a,dph
   07B6 F2            [24] 2204 	movx	@r0,a
                           2205 ;	radio/tdm.c:485: __pdata uint16_t last_link_update = last_t;
   07B7 78r2F         [12] 2206 	mov	r0,#_tdm_serial_loop_last_t_1_207
   07B9 79r31         [12] 2207 	mov	r1,#_tdm_serial_loop_last_link_update_1_207
   07BB E2            [24] 2208 	movx	a,@r0
   07BC F3            [24] 2209 	movx	@r1,a
   07BD 08            [12] 2210 	inc	r0
   07BE E2            [24] 2211 	movx	a,@r0
   07BF 09            [12] 2212 	inc	r1
   07C0 F3            [24] 2213 	movx	@r1,a
                           2214 ;	radio/tdm.c:487: _canary = 42;
   07C1 78 FF         [12] 2215 	mov	r0,#__canary
   07C3 76 2A         [12] 2216 	mov	@r0,#0x2A
   07C5                    2217 00192$:
                           2218 ;	radio/tdm.c:494: if (_canary != 42) {
   07C5 78 FF         [12] 2219 	mov	r0,#__canary
   07C7 B6 2A 02      [24] 2220 	cjne	@r0,#0x2A,00339$
   07CA 80 15         [24] 2221 	sjmp	00102$
   07CC                    2222 00339$:
                           2223 ;	radio/tdm.c:495: panic("stack blown\n");
   07CC 74rAB         [12] 2224 	mov	a,#__str_6
   07CE C0 E0         [24] 2225 	push	acc
   07D0 74s00         [12] 2226 	mov	a,#(__str_6 >> 8)
   07D2 C0 E0         [24] 2227 	push	acc
   07D4 74 80         [12] 2228 	mov	a,#0x80
   07D6 C0 E0         [24] 2229 	push	acc
   07D8 12r00r00      [24] 2230 	lcall	_panic
   07DB 15 81         [12] 2231 	dec	sp
   07DD 15 81         [12] 2232 	dec	sp
   07DF 15 81         [12] 2233 	dec	sp
   07E1                    2234 00102$:
                           2235 ;	radio/tdm.c:498: if (pdata_canary != 0x41) {
   07E1 78r00         [12] 2236 	mov	r0,#_pdata_canary
   07E3 E2            [24] 2237 	movx	a,@r0
   07E4 B4 41 02      [24] 2238 	cjne	a,#0x41,00340$
   07E7 80 15         [24] 2239 	sjmp	00104$
   07E9                    2240 00340$:
                           2241 ;	radio/tdm.c:499: panic("pdata canary changed\n");
   07E9 74rB8         [12] 2242 	mov	a,#__str_7
   07EB C0 E0         [24] 2243 	push	acc
   07ED 74s00         [12] 2244 	mov	a,#(__str_7 >> 8)
   07EF C0 E0         [24] 2245 	push	acc
   07F1 74 80         [12] 2246 	mov	a,#0x80
   07F3 C0 E0         [24] 2247 	push	acc
   07F5 12r00r00      [24] 2248 	lcall	_panic
   07F8 15 81         [12] 2249 	dec	sp
   07FA 15 81         [12] 2250 	dec	sp
   07FC 15 81         [12] 2251 	dec	sp
   07FE                    2252 00104$:
                           2253 ;	radio/tdm.c:503: at_command();
   07FE 12r00r00      [24] 2254 	lcall	_at_command
                           2255 ;	radio/tdm.c:506: if (test_display) {
   0801 78r19         [12] 2256 	mov	r0,#_test_display
   0803 E2            [24] 2257 	movx	a,@r0
   0804 60 07         [24] 2258 	jz	00106$
                           2259 ;	radio/tdm.c:507: display_test_output();
   0806 12r00rD3      [24] 2260 	lcall	_display_test_output
                           2261 ;	radio/tdm.c:508: test_display = 0;
   0809 78r19         [12] 2262 	mov	r0,#_test_display
   080B E4            [12] 2263 	clr	a
   080C F2            [24] 2264 	movx	@r0,a
   080D                    2265 00106$:
                           2266 ;	radio/tdm.c:511: if (seen_mavlink && feature_mavlink_framing && !at_mode_active) {
   080D 30*00 0B      [24] 2267 	jnb	_seen_mavlink,00108$
   0810 30*00 08      [24] 2268 	jnb	_feature_mavlink_framing,00108$
   0813 20*00 05      [24] 2269 	jb	_at_mode_active,00108$
                           2270 ;	radio/tdm.c:512: seen_mavlink = false;
   0816 C2*00         [12] 2271 	clr	_seen_mavlink
                           2272 ;	radio/tdm.c:513: MAVLink_report();
   0818 12r00r00      [24] 2273 	lcall	_MAVLink_report
   081B                    2274 00108$:
                           2275 ;	radio/tdm.c:517: radio_set_channel(fhop_receive_channel());
   081B 12r00r00      [24] 2276 	lcall	_fhop_receive_channel
   081E 12r00r00      [24] 2277 	lcall	_radio_set_channel
                           2278 ;	radio/tdm.c:520: tnow = timer2_tick();
   0821 12r00r00      [24] 2279 	lcall	_timer2_tick
   0824 AA 82         [24] 2280 	mov	r2,dpl
   0826 AB 83         [24] 2281 	mov	r3,dph
                           2282 ;	radio/tdm.c:523: if (radio_receive_packet(&len, pbuf)) {
   0828 78r00         [12] 2283 	mov	r0,#_radio_receive_packet_PARM_2
   082A 74r00         [12] 2284 	mov	a,#_pbuf
   082C F2            [24] 2285 	movx	@r0,a
   082D 08            [12] 2286 	inc	r0
   082E 74s00         [12] 2287 	mov	a,#(_pbuf >> 8)
   0830 F2            [24] 2288 	movx	@r0,a
   0831 90r00r33      [24] 2289 	mov	dptr,#_tdm_serial_loop_len_2_208
   0834 75 F0 60      [24] 2290 	mov	b,#0x60
   0837 C0 03         [24] 2291 	push	ar3
   0839 C0 02         [24] 2292 	push	ar2
   083B 12r00r00      [24] 2293 	lcall	_radio_receive_packet
   083E D0 02         [24] 2294 	pop	ar2
   0840 D0 03         [24] 2295 	pop	ar3
   0842 40 03         [24] 2296 	jc	00345$
   0844 02r09rBD      [24] 2297 	ljmp	00129$
   0847                    2298 00345$:
                           2299 ;	radio/tdm.c:526: received_packet = true;
   0847 D2*03         [12] 2300 	setb	_received_packet
                           2301 ;	radio/tdm.c:527: fhop_set_locked(true);
   0849 D2*00         [12] 2302 	setb	_fhop_set_locked_PARM_1
   084B C0 03         [24] 2303 	push	ar3
   084D C0 02         [24] 2304 	push	ar2
   084F 12r00r00      [24] 2305 	lcall	_fhop_set_locked
                           2306 ;	radio/tdm.c:530: statistics.average_rssi = (radio_last_rssi() + 7*(uint16_t)statistics.average_rssi)/8;
   0852 12r00r00      [24] 2307 	lcall	_radio_last_rssi
   0855 AD 82         [24] 2308 	mov	r5,dpl
   0857 D0 02         [24] 2309 	pop	ar2
   0859 D0 03         [24] 2310 	pop	ar3
   085B 7C 00         [12] 2311 	mov	r4,#0x00
   085D 78r00         [12] 2312 	mov	r0,#_statistics
   085F E2            [24] 2313 	movx	a,@r0
   0860 90r00r00      [24] 2314 	mov	dptr,#__mulint_PARM_2
   0863 F0            [24] 2315 	movx	@dptr,a
   0864 E4            [12] 2316 	clr	a
   0865 A3            [24] 2317 	inc	dptr
   0866 F0            [24] 2318 	movx	@dptr,a
   0867 90 00 07      [24] 2319 	mov	dptr,#0x0007
   086A C0 05         [24] 2320 	push	ar5
   086C C0 04         [24] 2321 	push	ar4
   086E C0 03         [24] 2322 	push	ar3
   0870 C0 02         [24] 2323 	push	ar2
   0872 12r00r00      [24] 2324 	lcall	__mulint
   0875 AE 82         [24] 2325 	mov	r6,dpl
   0877 AF 83         [24] 2326 	mov	r7,dph
   0879 D0 02         [24] 2327 	pop	ar2
   087B D0 03         [24] 2328 	pop	ar3
   087D D0 04         [24] 2329 	pop	ar4
   087F D0 05         [24] 2330 	pop	ar5
   0881 EE            [12] 2331 	mov	a,r6
   0882 2D            [12] 2332 	add	a,r5
   0883 FE            [12] 2333 	mov	r6,a
   0884 EF            [12] 2334 	mov	a,r7
   0885 3C            [12] 2335 	addc	a,r4
   0886 C4            [12] 2336 	swap	a
   0887 23            [12] 2337 	rl	a
   0888 CE            [12] 2338 	xch	a,r6
   0889 C4            [12] 2339 	swap	a
   088A 23            [12] 2340 	rl	a
   088B 54 1F         [12] 2341 	anl	a,#0x1F
   088D 6E            [12] 2342 	xrl	a,r6
   088E CE            [12] 2343 	xch	a,r6
   088F 54 1F         [12] 2344 	anl	a,#0x1F
   0891 CE            [12] 2345 	xch	a,r6
   0892 6E            [12] 2346 	xrl	a,r6
   0893 CE            [12] 2347 	xch	a,r6
   0894 78r00         [12] 2348 	mov	r0,#_statistics
   0896 EE            [12] 2349 	mov	a,r6
   0897 F2            [24] 2350 	movx	@r0,a
                           2351 ;	radio/tdm.c:531: statistics.receive_count++;
   0898 78r02         [12] 2352 	mov	r0,#(_statistics + 0x0002)
   089A E2            [24] 2353 	movx	a,@r0
   089B FE            [12] 2354 	mov	r6,a
   089C 08            [12] 2355 	inc	r0
   089D E2            [24] 2356 	movx	a,@r0
   089E FF            [12] 2357 	mov	r7,a
   089F 0E            [12] 2358 	inc	r6
   08A0 BE 00 01      [24] 2359 	cjne	r6,#0x00,00346$
   08A3 0F            [12] 2360 	inc	r7
   08A4                    2361 00346$:
   08A4 78r02         [12] 2362 	mov	r0,#(_statistics + 0x0002)
   08A6 EE            [12] 2363 	mov	a,r6
   08A7 F2            [24] 2364 	movx	@r0,a
   08A8 08            [12] 2365 	inc	r0
   08A9 EF            [12] 2366 	mov	a,r7
   08AA F2            [24] 2367 	movx	@r0,a
                           2368 ;	radio/tdm.c:535: transmit_wait = 0;
   08AB 78r0C         [12] 2369 	mov	r0,#_transmit_wait
   08AD E4            [12] 2370 	clr	a
   08AE F2            [24] 2371 	movx	@r0,a
   08AF 08            [12] 2372 	inc	r0
   08B0 F2            [24] 2373 	movx	@r0,a
                           2374 ;	radio/tdm.c:537: if (len < 2) {
   08B1 78r33         [12] 2375 	mov	r0,#_tdm_serial_loop_len_2_208
   08B3 E2            [24] 2376 	movx	a,@r0
   08B4 B4 02 00      [24] 2377 	cjne	a,#0x02,00347$
   08B7                    2378 00347$:
   08B7 50 03         [24] 2379 	jnc	00348$
   08B9 02r07rC5      [24] 2380 	ljmp	00192$
   08BC                    2381 00348$:
                           2382 ;	radio/tdm.c:544: memcpy(&trailer, &pbuf[len-sizeof(trailer)], sizeof(trailer));
   08BC 78r33         [12] 2383 	mov	r0,#_tdm_serial_loop_len_2_208
   08BE E2            [24] 2384 	movx	a,@r0
   08BF 24 FE         [12] 2385 	add	a,#0xFE
   08C1 24r00         [12] 2386 	add	a,#_pbuf
   08C3 FE            [12] 2387 	mov	r6,a
   08C4 E4            [12] 2388 	clr	a
   08C5 34s00         [12] 2389 	addc	a,#(_pbuf >> 8)
   08C7 FF            [12] 2390 	mov	r7,a
   08C8 90r00r00      [24] 2391 	mov	dptr,#_memcpy_PARM_2
   08CB EE            [12] 2392 	mov	a,r6
   08CC F0            [24] 2393 	movx	@dptr,a
   08CD EF            [12] 2394 	mov	a,r7
   08CE A3            [24] 2395 	inc	dptr
   08CF F0            [24] 2396 	movx	@dptr,a
   08D0 E4            [12] 2397 	clr	a
   08D1 A3            [24] 2398 	inc	dptr
   08D2 F0            [24] 2399 	movx	@dptr,a
   08D3 90r00r00      [24] 2400 	mov	dptr,#_memcpy_PARM_3
   08D6 74 02         [12] 2401 	mov	a,#0x02
   08D8 F0            [24] 2402 	movx	@dptr,a
   08D9 E4            [12] 2403 	clr	a
   08DA A3            [24] 2404 	inc	dptr
   08DB F0            [24] 2405 	movx	@dptr,a
   08DC 90r00r1A      [24] 2406 	mov	dptr,#_trailer
   08DF 75 F0 60      [24] 2407 	mov	b,#0x60
   08E2 C0 03         [24] 2408 	push	ar3
   08E4 C0 02         [24] 2409 	push	ar2
   08E6 12r00r00      [24] 2410 	lcall	_memcpy
   08E9 D0 02         [24] 2411 	pop	ar2
   08EB D0 03         [24] 2412 	pop	ar3
                           2413 ;	radio/tdm.c:545: len -= sizeof(trailer);
   08ED 78r33         [12] 2414 	mov	r0,#_tdm_serial_loop_len_2_208
   08EF E2            [24] 2415 	movx	a,@r0
   08F0 14            [12] 2416 	dec	a
   08F1 14            [12] 2417 	dec	a
   08F2 F2            [24] 2418 	movx	@r0,a
                           2419 ;	radio/tdm.c:547: if (trailer.window == 0 && len != 0) {
   08F3 78r1A         [12] 2420 	mov	r0,#_trailer
   08F5 E2            [24] 2421 	movx	a,@r0
   08F6 FE            [12] 2422 	mov	r6,a
   08F7 08            [12] 2423 	inc	r0
   08F8 E2            [24] 2424 	movx	a,@r0
   08F9 54 1F         [12] 2425 	anl	a,#0x1F
   08FB FF            [12] 2426 	mov	r7,a
   08FC 4E            [12] 2427 	orl	a,r6
   08FD 70 41         [24] 2428 	jnz	00125$
   08FF 78r33         [12] 2429 	mov	r0,#_tdm_serial_loop_len_2_208
   0901 E2            [24] 2430 	movx	a,@r0
   0902 60 3C         [24] 2431 	jz	00125$
                           2432 ;	radio/tdm.c:549: if (len == sizeof(struct statistics)) {
   0904 78r33         [12] 2433 	mov	r0,#_tdm_serial_loop_len_2_208
   0906 E2            [24] 2434 	movx	a,@r0
   0907 B4 04 20      [24] 2435 	cjne	a,#0x04,00114$
                           2436 ;	radio/tdm.c:550: memcpy(&remote_statistics, pbuf, len);
   090A 90r00r00      [24] 2437 	mov	dptr,#_memcpy_PARM_2
   090D 74r00         [12] 2438 	mov	a,#_pbuf
   090F F0            [24] 2439 	movx	@dptr,a
   0910 74s00         [12] 2440 	mov	a,#(_pbuf >> 8)
   0912 A3            [24] 2441 	inc	dptr
   0913 F0            [24] 2442 	movx	@dptr,a
   0914 E4            [12] 2443 	clr	a
   0915 A3            [24] 2444 	inc	dptr
   0916 F0            [24] 2445 	movx	@dptr,a
   0917 78r33         [12] 2446 	mov	r0,#_tdm_serial_loop_len_2_208
   0919 90r00r00      [24] 2447 	mov	dptr,#_memcpy_PARM_3
   091C E2            [24] 2448 	movx	a,@r0
   091D F0            [24] 2449 	movx	@dptr,a
   091E E4            [12] 2450 	clr	a
   091F A3            [24] 2451 	inc	dptr
   0920 F0            [24] 2452 	movx	@dptr,a
   0921 90r00r00      [24] 2453 	mov	dptr,#_remote_statistics
   0924 75 F0 60      [24] 2454 	mov	b,#0x60
   0927 12r00r00      [24] 2455 	lcall	_memcpy
   092A                    2456 00114$:
                           2457 ;	radio/tdm.c:554: statistics.receive_count--;
   092A 78r02         [12] 2458 	mov	r0,#(_statistics + 0x0002)
   092C E2            [24] 2459 	movx	a,@r0
   092D FE            [12] 2460 	mov	r6,a
   092E 08            [12] 2461 	inc	r0
   092F E2            [24] 2462 	movx	a,@r0
   0930 FF            [12] 2463 	mov	r7,a
   0931 1E            [12] 2464 	dec	r6
   0932 BE FF 01      [24] 2465 	cjne	r6,#0xFF,00353$
   0935 1F            [12] 2466 	dec	r7
   0936                    2467 00353$:
   0936 78r02         [12] 2468 	mov	r0,#(_statistics + 0x0002)
   0938 EE            [12] 2469 	mov	a,r6
   0939 F2            [24] 2470 	movx	@r0,a
   093A 08            [12] 2471 	inc	r0
   093B EF            [12] 2472 	mov	a,r7
   093C F2            [24] 2473 	movx	@r0,a
   093D 02r07rC5      [24] 2474 	ljmp	00192$
   0940                    2475 00125$:
                           2476 ;	radio/tdm.c:555: } else if (trailer.window != 0) {
   0940 78r1A         [12] 2477 	mov	r0,#_trailer
   0942 E2            [24] 2478 	movx	a,@r0
   0943 FE            [12] 2479 	mov	r6,a
   0944 08            [12] 2480 	inc	r0
   0945 E2            [24] 2481 	movx	a,@r0
   0946 54 1F         [12] 2482 	anl	a,#0x1F
   0948 FF            [12] 2483 	mov	r7,a
   0949 4E            [12] 2484 	orl	a,r6
   094A 70 03         [24] 2485 	jnz	00354$
   094C 02r07rC5      [24] 2486 	ljmp	00192$
   094F                    2487 00354$:
                           2488 ;	radio/tdm.c:558: sync_tx_windows(len);
   094F 78r33         [12] 2489 	mov	r0,#_tdm_serial_loop_len_2_208
   0951 E2            [24] 2490 	movx	a,@r0
   0952 F5 82         [12] 2491 	mov	dpl,a
   0954 C0 03         [24] 2492 	push	ar3
   0956 C0 02         [24] 2493 	push	ar2
   0958 12r01r05      [24] 2494 	lcall	_sync_tx_windows
   095B D0 02         [24] 2495 	pop	ar2
   095D D0 03         [24] 2496 	pop	ar3
                           2497 ;	radio/tdm.c:559: last_t = tnow;
   095F 78r2F         [12] 2498 	mov	r0,#_tdm_serial_loop_last_t_1_207
   0961 EA            [12] 2499 	mov	a,r2
   0962 F2            [24] 2500 	movx	@r0,a
   0963 08            [12] 2501 	inc	r0
   0964 EB            [12] 2502 	mov	a,r3
   0965 F2            [24] 2503 	movx	@r0,a
                           2504 ;	radio/tdm.c:561: if (trailer.command == 1) {
   0966 78r1B         [12] 2505 	mov	r0,#(_trailer + 0x0001)
   0968 E2            [24] 2506 	movx	a,@r0
   0969 C4            [12] 2507 	swap	a
   096A 03            [12] 2508 	rr	a
   096B 54 01         [12] 2509 	anl	a,#0x01
   096D FF            [12] 2510 	mov	r7,a
   096E BF 01 0B      [24] 2511 	cjne	r7,#0x01,00120$
                           2512 ;	radio/tdm.c:562: handle_at_command(len);
   0971 78r33         [12] 2513 	mov	r0,#_tdm_serial_loop_len_2_208
   0973 E2            [24] 2514 	movx	a,@r0
   0974 F5 82         [12] 2515 	mov	dpl,a
   0976 12r07r15      [24] 2516 	lcall	_handle_at_command
   0979 02r07rC5      [24] 2517 	ljmp	00192$
   097C                    2518 00120$:
                           2519 ;	radio/tdm.c:563: } else if (len != 0 && 
   097C 78r33         [12] 2520 	mov	r0,#_tdm_serial_loop_len_2_208
   097E E2            [24] 2521 	movx	a,@r0
   097F 70 03         [24] 2522 	jnz	00357$
   0981 02r07rC5      [24] 2523 	ljmp	00192$
   0984                    2524 00357$:
                           2525 ;	radio/tdm.c:564: !packet_is_duplicate(len, pbuf, trailer.resend) &&
   0984 78r1B         [12] 2526 	mov	r0,#(_trailer + 0x0001)
   0986 E2            [24] 2527 	movx	a,@r0
   0987 23            [12] 2528 	rl	a
   0988 54 01         [12] 2529 	anl	a,#0x01
   098A 24 FF         [12] 2530 	add	a,#0xff
   098C 92*00         [24] 2531 	mov	_packet_is_duplicate_PARM_3,c
   098E 78r00         [12] 2532 	mov	r0,#_packet_is_duplicate_PARM_2
   0990 74r00         [12] 2533 	mov	a,#_pbuf
   0992 F2            [24] 2534 	movx	@r0,a
   0993 08            [12] 2535 	inc	r0
   0994 74s00         [12] 2536 	mov	a,#(_pbuf >> 8)
   0996 F2            [24] 2537 	movx	@r0,a
   0997 78r33         [12] 2538 	mov	r0,#_tdm_serial_loop_len_2_208
   0999 E2            [24] 2539 	movx	a,@r0
   099A F5 82         [12] 2540 	mov	dpl,a
   099C 12r00r00      [24] 2541 	lcall	_packet_is_duplicate
   099F 50 03         [24] 2542 	jnc	00358$
   09A1 02r07rC5      [24] 2543 	ljmp	00192$
   09A4                    2544 00358$:
                           2545 ;	radio/tdm.c:565: !at_mode_active) {
   09A4 30*00 03      [24] 2546 	jnb	_at_mode_active,00359$
   09A7 02r07rC5      [24] 2547 	ljmp	00192$
   09AA                    2548 00359$:
                           2549 ;	radio/tdm.c:569: LED_ACTIVITY = LED_ON;
   09AA C2 A0         [12] 2550 	clr	_LED_RED
                           2551 ;	radio/tdm.c:570: serial_write_buf(pbuf, len);
   09AC 78r33         [12] 2552 	mov	r0,#_tdm_serial_loop_len_2_208
   09AE 79r00         [12] 2553 	mov	r1,#_serial_write_buf_PARM_2
   09B0 E2            [24] 2554 	movx	a,@r0
   09B1 F3            [24] 2555 	movx	@r1,a
   09B2 90r00r00      [24] 2556 	mov	dptr,#_pbuf
   09B5 12r00r00      [24] 2557 	lcall	_serial_write_buf
                           2558 ;	radio/tdm.c:571: LED_ACTIVITY = LED_OFF;
   09B8 D2 A0         [12] 2559 	setb	_LED_RED
                           2560 ;	radio/tdm.c:575: continue;
   09BA 02r07rC5      [24] 2561 	ljmp	00192$
   09BD                    2562 00129$:
                           2563 ;	radio/tdm.c:581: tnow = timer2_tick();
   09BD 12r00r00      [24] 2564 	lcall	_timer2_tick
   09C0 AA 82         [24] 2565 	mov	r2,dpl
   09C2 AB 83         [24] 2566 	mov	r3,dph
                           2567 ;	radio/tdm.c:582: tdelta = tnow - last_t;
   09C4 78r2F         [12] 2568 	mov	r0,#_tdm_serial_loop_last_t_1_207
   09C6 79r34         [12] 2569 	mov	r1,#_tdm_serial_loop_tdelta_2_208
   09C8 D3            [12] 2570 	setb	c
   09C9 E2            [24] 2571 	movx	a,@r0
   09CA 9A            [12] 2572 	subb	a,r2
   09CB F4            [12] 2573 	cpl	a
   09CC B3            [12] 2574 	cpl	c
   09CD F3            [24] 2575 	movx	@r1,a
   09CE B3            [12] 2576 	cpl	c
   09CF 08            [12] 2577 	inc	r0
   09D0 E2            [24] 2578 	movx	a,@r0
   09D1 9B            [12] 2579 	subb	a,r3
   09D2 F4            [12] 2580 	cpl	a
   09D3 09            [12] 2581 	inc	r1
   09D4 F3            [24] 2582 	movx	@r1,a
                           2583 ;	radio/tdm.c:583: tdm_state_update(tdelta);
   09D5 78r34         [12] 2584 	mov	r0,#_tdm_serial_loop_tdelta_2_208
   09D7 E2            [24] 2585 	movx	a,@r0
   09D8 F5 82         [12] 2586 	mov	dpl,a
   09DA 08            [12] 2587 	inc	r0
   09DB E2            [24] 2588 	movx	a,@r0
   09DC F5 83         [12] 2589 	mov	dph,a
   09DE C0 03         [24] 2590 	push	ar3
   09E0 C0 02         [24] 2591 	push	ar2
   09E2 12r02r6C      [24] 2592 	lcall	_tdm_state_update
   09E5 D0 02         [24] 2593 	pop	ar2
   09E7 D0 03         [24] 2594 	pop	ar3
                           2595 ;	radio/tdm.c:584: last_t = tnow;
   09E9 78r2F         [12] 2596 	mov	r0,#_tdm_serial_loop_last_t_1_207
   09EB EA            [12] 2597 	mov	a,r2
   09EC F2            [24] 2598 	movx	@r0,a
   09ED 08            [12] 2599 	inc	r0
   09EE EB            [12] 2600 	mov	a,r3
   09EF F2            [24] 2601 	movx	@r0,a
                           2602 ;	radio/tdm.c:587: if (tnow - last_link_update > 32768) {
   09F0 78r31         [12] 2603 	mov	r0,#_tdm_serial_loop_last_link_update_1_207
   09F2 D3            [12] 2604 	setb	c
   09F3 E2            [24] 2605 	movx	a,@r0
   09F4 9A            [12] 2606 	subb	a,r2
   09F5 F4            [12] 2607 	cpl	a
   09F6 B3            [12] 2608 	cpl	c
   09F7 FC            [12] 2609 	mov	r4,a
   09F8 B3            [12] 2610 	cpl	c
   09F9 08            [12] 2611 	inc	r0
   09FA E2            [24] 2612 	movx	a,@r0
   09FB 9B            [12] 2613 	subb	a,r3
   09FC F4            [12] 2614 	cpl	a
   09FD FD            [12] 2615 	mov	r5,a
   09FE 7E 00         [12] 2616 	mov	r6,#0x00
   0A00 7F 00         [12] 2617 	mov	r7,#0x00
   0A02 C3            [12] 2618 	clr	c
   0A03 E4            [12] 2619 	clr	a
   0A04 9C            [12] 2620 	subb	a,r4
   0A05 74 80         [12] 2621 	mov	a,#0x80
   0A07 9D            [12] 2622 	subb	a,r5
   0A08 E4            [12] 2623 	clr	a
   0A09 9E            [12] 2624 	subb	a,r6
   0A0A E4            [12] 2625 	clr	a
   0A0B 64 80         [12] 2626 	xrl	a,#0x80
   0A0D 8F F0         [24] 2627 	mov	b,r7
   0A0F 63 F0 80      [24] 2628 	xrl	b,#0x80
   0A12 95 F0         [12] 2629 	subb	a,b
   0A14 50 12         [24] 2630 	jnc	00131$
                           2631 ;	radio/tdm.c:588: link_update();
   0A16 C0 03         [24] 2632 	push	ar3
   0A18 C0 02         [24] 2633 	push	ar2
   0A1A 12r05r9F      [24] 2634 	lcall	_link_update
   0A1D D0 02         [24] 2635 	pop	ar2
   0A1F D0 03         [24] 2636 	pop	ar3
                           2637 ;	radio/tdm.c:589: last_link_update = tnow;
   0A21 78r31         [12] 2638 	mov	r0,#_tdm_serial_loop_last_link_update_1_207
   0A23 EA            [12] 2639 	mov	a,r2
   0A24 F2            [24] 2640 	movx	@r0,a
   0A25 08            [12] 2641 	inc	r0
   0A26 EB            [12] 2642 	mov	a,r3
   0A27 F2            [24] 2643 	movx	@r0,a
   0A28                    2644 00131$:
                           2645 ;	radio/tdm.c:592: if (lbt_rssi != 0) {
   0A28 78r12         [12] 2646 	mov	r0,#_lbt_rssi
   0A2A E2            [24] 2647 	movx	a,@r0
   0A2B 70 03         [24] 2648 	jnz	00361$
   0A2D 02r0ArAD      [24] 2649 	ljmp	00140$
   0A30                    2650 00361$:
                           2651 ;	radio/tdm.c:594: if (radio_current_rssi() < lbt_rssi) {
   0A30 12r00r00      [24] 2652 	lcall	_radio_current_rssi
   0A33 AF 82         [24] 2653 	mov	r7,dpl
   0A35 78r12         [12] 2654 	mov	r0,#_lbt_rssi
   0A37 C3            [12] 2655 	clr	c
   0A38 E2            [24] 2656 	movx	a,@r0
   0A39 F5 F0         [12] 2657 	mov	b,a
   0A3B EF            [12] 2658 	mov	a,r7
   0A3C 95 F0         [12] 2659 	subb	a,b
   0A3E 50 16         [24] 2660 	jnc	00135$
                           2661 ;	radio/tdm.c:595: lbt_listen_time += tdelta;
   0A40 78r13         [12] 2662 	mov	r0,#_lbt_listen_time
   0A42 79r34         [12] 2663 	mov	r1,#_tdm_serial_loop_tdelta_2_208
   0A44 E3            [24] 2664 	movx	a,@r1
   0A45 C5 F0         [12] 2665 	xch	a,b
   0A47 E2            [24] 2666 	movx	a,@r0
   0A48 25 F0         [12] 2667 	add	a,b
   0A4A F2            [24] 2668 	movx	@r0,a
   0A4B 09            [12] 2669 	inc	r1
   0A4C E3            [24] 2670 	movx	a,@r1
   0A4D C5 F0         [12] 2671 	xch	a,b
   0A4F 08            [12] 2672 	inc	r0
   0A50 E2            [24] 2673 	movx	a,@r0
   0A51 35 F0         [12] 2674 	addc	a,b
   0A53 F2            [24] 2675 	movx	@r0,a
   0A54 80 36         [24] 2676 	sjmp	00136$
   0A56                    2677 00135$:
                           2678 ;	radio/tdm.c:597: lbt_listen_time = 0;
   0A56 78r13         [12] 2679 	mov	r0,#_lbt_listen_time
   0A58 E4            [12] 2680 	clr	a
   0A59 F2            [24] 2681 	movx	@r0,a
   0A5A 08            [12] 2682 	inc	r0
   0A5B F2            [24] 2683 	movx	@r0,a
                           2684 ;	radio/tdm.c:598: if (lbt_rand == 0) {
   0A5C 78r17         [12] 2685 	mov	r0,#_lbt_rand
   0A5E E2            [24] 2686 	movx	a,@r0
   0A5F F5 F0         [12] 2687 	mov	b,a
   0A61 08            [12] 2688 	inc	r0
   0A62 E2            [24] 2689 	movx	a,@r0
   0A63 45 F0         [12] 2690 	orl	a,b
   0A65 70 25         [24] 2691 	jnz	00136$
                           2692 ;	radio/tdm.c:599: lbt_rand = ((uint16_t)rand()) % lbt_min_time;
   0A67 12r00r00      [24] 2693 	lcall	_rand
   0A6A AE 82         [24] 2694 	mov	r6,dpl
   0A6C AF 83         [24] 2695 	mov	r7,dph
   0A6E 78r15         [12] 2696 	mov	r0,#_lbt_min_time
   0A70 90r00r00      [24] 2697 	mov	dptr,#__moduint_PARM_2
   0A73 E2            [24] 2698 	movx	a,@r0
   0A74 F0            [24] 2699 	movx	@dptr,a
   0A75 08            [12] 2700 	inc	r0
   0A76 E2            [24] 2701 	movx	a,@r0
   0A77 A3            [24] 2702 	inc	dptr
   0A78 F0            [24] 2703 	movx	@dptr,a
   0A79 8E 82         [24] 2704 	mov	dpl,r6
   0A7B 8F 83         [24] 2705 	mov	dph,r7
   0A7D 12r00r00      [24] 2706 	lcall	__moduint
   0A80 E5 82         [12] 2707 	mov	a,dpl
   0A82 85 83 F0      [24] 2708 	mov	b,dph
   0A85 78r17         [12] 2709 	mov	r0,#_lbt_rand
   0A87 F2            [24] 2710 	movx	@r0,a
   0A88 08            [12] 2711 	inc	r0
   0A89 E5 F0         [12] 2712 	mov	a,b
   0A8B F2            [24] 2713 	movx	@r0,a
   0A8C                    2714 00136$:
                           2715 ;	radio/tdm.c:602: if (lbt_listen_time < lbt_min_time + lbt_rand) {
   0A8C 78r15         [12] 2716 	mov	r0,#_lbt_min_time
   0A8E 79r17         [12] 2717 	mov	r1,#_lbt_rand
   0A90 E3            [24] 2718 	movx	a,@r1
   0A91 C5 F0         [12] 2719 	xch	a,b
   0A93 E2            [24] 2720 	movx	a,@r0
   0A94 25 F0         [12] 2721 	add	a,b
   0A96 FE            [12] 2722 	mov	r6,a
   0A97 09            [12] 2723 	inc	r1
   0A98 E3            [24] 2724 	movx	a,@r1
   0A99 C5 F0         [12] 2725 	xch	a,b
   0A9B 08            [12] 2726 	inc	r0
   0A9C E2            [24] 2727 	movx	a,@r0
   0A9D 35 F0         [12] 2728 	addc	a,b
   0A9F FF            [12] 2729 	mov	r7,a
   0AA0 78r13         [12] 2730 	mov	r0,#_lbt_listen_time
   0AA2 C3            [12] 2731 	clr	c
   0AA3 E2            [24] 2732 	movx	a,@r0
   0AA4 9E            [12] 2733 	subb	a,r6
   0AA5 08            [12] 2734 	inc	r0
   0AA6 E2            [24] 2735 	movx	a,@r0
   0AA7 9F            [12] 2736 	subb	a,r7
   0AA8 50 03         [24] 2737 	jnc	00364$
   0AAA 02r07rC5      [24] 2738 	ljmp	00192$
   0AAD                    2739 00364$:
                           2740 ;	radio/tdm.c:604: continue;
   0AAD                    2741 00140$:
                           2742 ;	radio/tdm.c:612: if (tdm_state != TDM_TRANSMIT &&
   0AAD 78r00         [12] 2743 	mov	r0,#_tdm_state
   0AAF E2            [24] 2744 	movx	a,@r0
   0AB0 60 11         [24] 2745 	jz	00142$
                           2746 ;	radio/tdm.c:613: !(bonus_transmit && tdm_state == TDM_RECEIVE)) {
   0AB2 20*00 03      [24] 2747 	jb	_bonus_transmit,00366$
   0AB5 02r07rC5      [24] 2748 	ljmp	00192$
   0AB8                    2749 00366$:
   0AB8 78r00         [12] 2750 	mov	r0,#_tdm_state
   0ABA E2            [24] 2751 	movx	a,@r0
   0ABB B4 02 02      [24] 2752 	cjne	a,#0x02,00367$
   0ABE 80 03         [24] 2753 	sjmp	00368$
   0AC0                    2754 00367$:
   0AC0 02r07rC5      [24] 2755 	ljmp	00192$
   0AC3                    2756 00368$:
                           2757 ;	radio/tdm.c:615: continue;
   0AC3                    2758 00142$:
                           2759 ;	radio/tdm.c:623: if (transmit_yield != 0) {
   0AC3 30*01 03      [24] 2760 	jnb	_transmit_yield,00369$
   0AC6 02r07rC5      [24] 2761 	ljmp	00192$
   0AC9                    2762 00369$:
                           2763 ;	radio/tdm.c:628: if (transmit_wait != 0) {
   0AC9 78r0C         [12] 2764 	mov	r0,#_transmit_wait
   0ACB E2            [24] 2765 	movx	a,@r0
   0ACC F5 F0         [12] 2766 	mov	b,a
   0ACE 08            [12] 2767 	inc	r0
   0ACF E2            [24] 2768 	movx	a,@r0
   0AD0 45 F0         [12] 2769 	orl	a,b
   0AD2 60 03         [24] 2770 	jz	00370$
   0AD4 02r07rC5      [24] 2771 	ljmp	00192$
   0AD7                    2772 00370$:
                           2773 ;	radio/tdm.c:633: if (!received_packet &&
   0AD7 20*03 05      [24] 2774 	jb	_received_packet,00152$
                           2775 ;	radio/tdm.c:634: radio_preamble_detected() ||
   0ADA 12r00r00      [24] 2776 	lcall	_radio_preamble_detected
   0ADD 40 05         [24] 2777 	jc	00149$
   0ADF                    2778 00152$:
                           2779 ;	radio/tdm.c:635: radio_receive_in_progress()) {
   0ADF 12r00r00      [24] 2780 	lcall	_radio_receive_in_progress
   0AE2 50 11         [24] 2781 	jnc	00150$
   0AE4                    2782 00149$:
                           2783 ;	radio/tdm.c:638: transmit_wait = packet_latency;
   0AE4 78r08         [12] 2784 	mov	r0,#_packet_latency
   0AE6 E2            [24] 2785 	movx	a,@r0
   0AE7 FE            [12] 2786 	mov	r6,a
   0AE8 08            [12] 2787 	inc	r0
   0AE9 E2            [24] 2788 	movx	a,@r0
   0AEA FF            [12] 2789 	mov	r7,a
   0AEB 78r0C         [12] 2790 	mov	r0,#_transmit_wait
   0AED EE            [12] 2791 	mov	a,r6
   0AEE F2            [24] 2792 	movx	@r0,a
   0AEF 08            [12] 2793 	inc	r0
   0AF0 EF            [12] 2794 	mov	a,r7
   0AF1 F2            [24] 2795 	movx	@r0,a
                           2796 ;	radio/tdm.c:639: continue;
   0AF2 02r07rC5      [24] 2797 	ljmp	00192$
   0AF5                    2798 00150$:
                           2799 ;	radio/tdm.c:645: statistics.average_noise = (radio_current_rssi() + 3*(uint16_t)statistics.average_noise)/4;
   0AF5 12r00r00      [24] 2800 	lcall	_radio_current_rssi
   0AF8 AF 82         [24] 2801 	mov	r7,dpl
   0AFA 7E 00         [12] 2802 	mov	r6,#0x00
   0AFC 78r01         [12] 2803 	mov	r0,#(_statistics + 0x0001)
   0AFE E2            [24] 2804 	movx	a,@r0
   0AFF 90r00r00      [24] 2805 	mov	dptr,#__mulint_PARM_2
   0B02 F0            [24] 2806 	movx	@dptr,a
   0B03 E4            [12] 2807 	clr	a
   0B04 A3            [24] 2808 	inc	dptr
   0B05 F0            [24] 2809 	movx	@dptr,a
   0B06 90 00 03      [24] 2810 	mov	dptr,#0x0003
   0B09 C0 07         [24] 2811 	push	ar7
   0B0B C0 06         [24] 2812 	push	ar6
   0B0D 12r00r00      [24] 2813 	lcall	__mulint
   0B10 AC 82         [24] 2814 	mov	r4,dpl
   0B12 AD 83         [24] 2815 	mov	r5,dph
   0B14 D0 06         [24] 2816 	pop	ar6
   0B16 D0 07         [24] 2817 	pop	ar7
   0B18 EC            [12] 2818 	mov	a,r4
   0B19 2F            [12] 2819 	add	a,r7
   0B1A FC            [12] 2820 	mov	r4,a
   0B1B ED            [12] 2821 	mov	a,r5
   0B1C 3E            [12] 2822 	addc	a,r6
   0B1D C3            [12] 2823 	clr	c
   0B1E 13            [12] 2824 	rrc	a
   0B1F CC            [12] 2825 	xch	a,r4
   0B20 13            [12] 2826 	rrc	a
   0B21 CC            [12] 2827 	xch	a,r4
   0B22 C3            [12] 2828 	clr	c
   0B23 13            [12] 2829 	rrc	a
   0B24 CC            [12] 2830 	xch	a,r4
   0B25 13            [12] 2831 	rrc	a
   0B26 CC            [12] 2832 	xch	a,r4
   0B27 FD            [12] 2833 	mov	r5,a
   0B28 78r01         [12] 2834 	mov	r0,#(_statistics + 0x0001)
   0B2A EC            [12] 2835 	mov	a,r4
   0B2B F2            [24] 2836 	movx	@r0,a
                           2837 ;	radio/tdm.c:647: if (duty_cycle_wait) {
   0B2C 30*04 03      [24] 2838 	jnb	_duty_cycle_wait,00374$
   0B2F 02r07rC5      [24] 2839 	ljmp	00192$
   0B32                    2840 00374$:
                           2841 ;	radio/tdm.c:654: if (tdm_state_remaining < packet_latency) {
   0B32 78r01         [12] 2842 	mov	r0,#_tdm_state_remaining
   0B34 79r08         [12] 2843 	mov	r1,#_packet_latency
   0B36 C3            [12] 2844 	clr	c
   0B37 E3            [24] 2845 	movx	a,@r1
   0B38 F5 F0         [12] 2846 	mov	b,a
   0B3A E2            [24] 2847 	movx	a,@r0
   0B3B 95 F0         [12] 2848 	subb	a,b
   0B3D 09            [12] 2849 	inc	r1
   0B3E E3            [24] 2850 	movx	a,@r1
   0B3F F5 F0         [12] 2851 	mov	b,a
   0B41 08            [12] 2852 	inc	r0
   0B42 E2            [24] 2853 	movx	a,@r0
   0B43 95 F0         [12] 2854 	subb	a,b
   0B45 50 03         [24] 2855 	jnc	00375$
   0B47 02r07rC5      [24] 2856 	ljmp	00192$
   0B4A                    2857 00375$:
                           2858 ;	radio/tdm.c:658: max_xmit = (tdm_state_remaining - packet_latency) / ticks_per_byte;
   0B4A 78r01         [12] 2859 	mov	r0,#_tdm_state_remaining
   0B4C 79r08         [12] 2860 	mov	r1,#_packet_latency
   0B4E E3            [24] 2861 	movx	a,@r1
   0B4F F5 F0         [12] 2862 	mov	b,a
   0B51 C3            [12] 2863 	clr	c
   0B52 E2            [24] 2864 	movx	a,@r0
   0B53 95 F0         [12] 2865 	subb	a,b
   0B55 FE            [12] 2866 	mov	r6,a
   0B56 09            [12] 2867 	inc	r1
   0B57 E3            [24] 2868 	movx	a,@r1
   0B58 F5 F0         [12] 2869 	mov	b,a
   0B5A 08            [12] 2870 	inc	r0
   0B5B E2            [24] 2871 	movx	a,@r0
   0B5C 95 F0         [12] 2872 	subb	a,b
   0B5E FF            [12] 2873 	mov	r7,a
   0B5F 78r0A         [12] 2874 	mov	r0,#_ticks_per_byte
   0B61 90r00r00      [24] 2875 	mov	dptr,#__divuint_PARM_2
   0B64 E2            [24] 2876 	movx	a,@r0
   0B65 F0            [24] 2877 	movx	@dptr,a
   0B66 08            [12] 2878 	inc	r0
   0B67 E2            [24] 2879 	movx	a,@r0
   0B68 A3            [24] 2880 	inc	dptr
   0B69 F0            [24] 2881 	movx	@dptr,a
   0B6A 8E 82         [24] 2882 	mov	dpl,r6
   0B6C 8F 83         [24] 2883 	mov	dph,r7
   0B6E 12r00r00      [24] 2884 	lcall	__divuint
   0B71 AE 82         [24] 2885 	mov	r6,dpl
   0B73 AF 83         [24] 2886 	mov	r7,dph
                           2887 ;	radio/tdm.c:659: if (max_xmit < sizeof(trailer)+1) {
   0B75 BE 03 00      [24] 2888 	cjne	r6,#0x03,00376$
   0B78                    2889 00376$:
   0B78 50 03         [24] 2890 	jnc	00377$
   0B7A 02r07rC5      [24] 2891 	ljmp	00192$
   0B7D                    2892 00377$:
                           2893 ;	radio/tdm.c:663: max_xmit -= sizeof(trailer)+1;
   0B7D 1E            [12] 2894 	dec	r6
   0B7E 1E            [12] 2895 	dec	r6
   0B7F 1E            [12] 2896 	dec	r6
                           2897 ;	radio/tdm.c:664: if (max_xmit > max_data_packet_length) {
   0B80 78r05         [12] 2898 	mov	r0,#_max_data_packet_length
   0B82 C3            [12] 2899 	clr	c
   0B83 E2            [24] 2900 	movx	a,@r0
   0B84 9E            [12] 2901 	subb	a,r6
   0B85 50 04         [24] 2902 	jnc	00160$
                           2903 ;	radio/tdm.c:665: max_xmit = max_data_packet_length;
   0B87 78r05         [12] 2904 	mov	r0,#_max_data_packet_length
   0B89 E2            [24] 2905 	movx	a,@r0
   0B8A FE            [12] 2906 	mov	r6,a
   0B8B                    2907 00160$:
                           2908 ;	radio/tdm.c:669: if (send_at_command && 
   0B8B 30*06 57      [24] 2909 	jnb	_send_at_command,00162$
                           2910 ;	radio/tdm.c:670: max_xmit >= strlen(remote_at_cmd)) {
   0B8E 90r00r1C      [24] 2911 	mov	dptr,#_remote_at_cmd
   0B91 75 F0 60      [24] 2912 	mov	b,#0x60
   0B94 C0 06         [24] 2913 	push	ar6
   0B96 12r00r00      [24] 2914 	lcall	_strlen
   0B99 AD 82         [24] 2915 	mov	r5,dpl
   0B9B AF 83         [24] 2916 	mov	r7,dph
   0B9D D0 06         [24] 2917 	pop	ar6
   0B9F 8E 03         [24] 2918 	mov	ar3,r6
   0BA1 7C 00         [12] 2919 	mov	r4,#0x00
   0BA3 C3            [12] 2920 	clr	c
   0BA4 EB            [12] 2921 	mov	a,r3
   0BA5 9D            [12] 2922 	subb	a,r5
   0BA6 EC            [12] 2923 	mov	a,r4
   0BA7 9F            [12] 2924 	subb	a,r7
   0BA8 40 3B         [24] 2925 	jc	00162$
                           2926 ;	radio/tdm.c:672: len = strlen(remote_at_cmd);
   0BAA 90r00r1C      [24] 2927 	mov	dptr,#_remote_at_cmd
   0BAD 75 F0 60      [24] 2928 	mov	b,#0x60
   0BB0 C0 06         [24] 2929 	push	ar6
   0BB2 12r00r00      [24] 2930 	lcall	_strlen
   0BB5 AD 82         [24] 2931 	mov	r5,dpl
   0BB7 78r33         [12] 2932 	mov	r0,#_tdm_serial_loop_len_2_208
   0BB9 ED            [12] 2933 	mov	a,r5
   0BBA F2            [24] 2934 	movx	@r0,a
                           2935 ;	radio/tdm.c:673: memcpy(pbuf, remote_at_cmd, len);
   0BBB 90r00r00      [24] 2936 	mov	dptr,#_memcpy_PARM_2
   0BBE 74r1C         [12] 2937 	mov	a,#_remote_at_cmd
   0BC0 F0            [24] 2938 	movx	@dptr,a
   0BC1 E4            [12] 2939 	clr	a
   0BC2 A3            [24] 2940 	inc	dptr
   0BC3 F0            [24] 2941 	movx	@dptr,a
   0BC4 74 60         [12] 2942 	mov	a,#0x60
   0BC6 A3            [24] 2943 	inc	dptr
   0BC7 F0            [24] 2944 	movx	@dptr,a
   0BC8 90r00r00      [24] 2945 	mov	dptr,#_memcpy_PARM_3
   0BCB ED            [12] 2946 	mov	a,r5
   0BCC F0            [24] 2947 	movx	@dptr,a
   0BCD E4            [12] 2948 	clr	a
   0BCE A3            [24] 2949 	inc	dptr
   0BCF F0            [24] 2950 	movx	@dptr,a
   0BD0 90r00r00      [24] 2951 	mov	dptr,#_pbuf
   0BD3 75 F0 00      [24] 2952 	mov	b,#0x00
   0BD6 12r00r00      [24] 2953 	lcall	_memcpy
   0BD9 D0 06         [24] 2954 	pop	ar6
                           2955 ;	radio/tdm.c:674: trailer.command = 1;
   0BDB 78r1B         [12] 2956 	mov	r0,#(_trailer + 0x0001)
   0BDD E2            [24] 2957 	movx	a,@r0
   0BDE 44 20         [12] 2958 	orl	a,#0x20
   0BE0 F2            [24] 2959 	movx	@r0,a
                           2960 ;	radio/tdm.c:675: send_at_command = false;
   0BE1 C2*06         [12] 2961 	clr	_send_at_command
   0BE3 80 26         [24] 2962 	sjmp	00163$
   0BE5                    2963 00162$:
                           2964 ;	radio/tdm.c:678: len = packet_get_next(max_xmit, pbuf);
   0BE5 78r00         [12] 2965 	mov	r0,#_packet_get_next_PARM_2
   0BE7 74r00         [12] 2966 	mov	a,#_pbuf
   0BE9 F2            [24] 2967 	movx	@r0,a
   0BEA 08            [12] 2968 	inc	r0
   0BEB 74s00         [12] 2969 	mov	a,#(_pbuf >> 8)
   0BED F2            [24] 2970 	movx	@r0,a
   0BEE 8E 82         [24] 2971 	mov	dpl,r6
   0BF0 C0 06         [24] 2972 	push	ar6
   0BF2 12r00r00      [24] 2973 	lcall	_packet_get_next
   0BF5 E5 82         [12] 2974 	mov	a,dpl
   0BF7 78r33         [12] 2975 	mov	r0,#_tdm_serial_loop_len_2_208
   0BF9 F2            [24] 2976 	movx	@r0,a
                           2977 ;	radio/tdm.c:679: trailer.command = packet_is_injected();
   0BFA 12r00r00      [24] 2978 	lcall	_packet_is_injected
   0BFD D0 06         [24] 2979 	pop	ar6
   0BFF 92*09         [24] 2980 	mov  _tdm_serial_loop_sloc0_1_0,c
   0C01 E4            [12] 2981 	clr	a
   0C02 33            [12] 2982 	rlc	a
   0C03 FF            [12] 2983 	mov	r7,a
   0C04 78r1B         [12] 2984 	mov	r0,#(_trailer + 0x0001)
   0C06 13            [12] 2985 	rrc	a
   0C07 E2            [24] 2986 	movx	a,@r0
   0C08 92 E5         [24] 2987 	mov	acc.5,c
   0C0A F2            [24] 2988 	movx	@r0,a
   0C0B                    2989 00163$:
                           2990 ;	radio/tdm.c:682: if (len > max_data_packet_length) {
   0C0B 78r33         [12] 2991 	mov	r0,#_tdm_serial_loop_len_2_208
   0C0D 79r05         [12] 2992 	mov	r1,#_max_data_packet_length
   0C0F C3            [12] 2993 	clr	c
   0C10 E2            [24] 2994 	movx	a,@r0
   0C11 F5 F0         [12] 2995 	mov	b,a
   0C13 E3            [24] 2996 	movx	a,@r1
   0C14 95 F0         [12] 2997 	subb	a,b
   0C16 50 19         [24] 2998 	jnc	00166$
                           2999 ;	radio/tdm.c:683: panic("oversized tdm packet");
   0C18 C0 06         [24] 3000 	push	ar6
   0C1A 74rCE         [12] 3001 	mov	a,#__str_8
   0C1C C0 E0         [24] 3002 	push	acc
   0C1E 74s00         [12] 3003 	mov	a,#(__str_8 >> 8)
   0C20 C0 E0         [24] 3004 	push	acc
   0C22 74 80         [12] 3005 	mov	a,#0x80
   0C24 C0 E0         [24] 3006 	push	acc
   0C26 12r00r00      [24] 3007 	lcall	_panic
   0C29 15 81         [12] 3008 	dec	sp
   0C2B 15 81         [12] 3009 	dec	sp
   0C2D 15 81         [12] 3010 	dec	sp
   0C2F D0 06         [24] 3011 	pop	ar6
   0C31                    3012 00166$:
                           3013 ;	radio/tdm.c:686: trailer.bonus = (tdm_state == TDM_RECEIVE);
   0C31 78r00         [12] 3014 	mov	r0,#_tdm_state
   0C33 E2            [24] 3015 	movx	a,@r0
   0C34 B4 02 03      [24] 3016 	cjne	a,#0x02,00382$
   0C37 D3            [12] 3017 	setb	c
   0C38 80 01         [24] 3018 	sjmp	00383$
   0C3A                    3019 00382$:
   0C3A C3            [12] 3020 	clr	c
   0C3B                    3021 00383$:
   0C3B 92*09         [24] 3022 	mov  _tdm_serial_loop_sloc0_1_0,c
   0C3D E4            [12] 3023 	clr	a
   0C3E 33            [12] 3024 	rlc	a
   0C3F 78r1B         [12] 3025 	mov	r0,#(_trailer + 0x0001)
   0C41 13            [12] 3026 	rrc	a
   0C42 E2            [24] 3027 	movx	a,@r0
   0C43 92 E6         [24] 3028 	mov	acc.6,c
   0C45 F2            [24] 3029 	movx	@r0,a
                           3030 ;	radio/tdm.c:687: trailer.resend = packet_is_resend();
   0C46 C0 06         [24] 3031 	push	ar6
   0C48 12r00r00      [24] 3032 	lcall	_packet_is_resend
   0C4B D0 06         [24] 3033 	pop	ar6
   0C4D 92*09         [24] 3034 	mov  _tdm_serial_loop_sloc0_1_0,c
   0C4F E4            [12] 3035 	clr	a
   0C50 33            [12] 3036 	rlc	a
   0C51 FF            [12] 3037 	mov	r7,a
   0C52 78r1B         [12] 3038 	mov	r0,#(_trailer + 0x0001)
   0C54 13            [12] 3039 	rrc	a
   0C55 E2            [24] 3040 	movx	a,@r0
   0C56 92 E7         [24] 3041 	mov	acc.7,c
   0C58 F2            [24] 3042 	movx	@r0,a
                           3043 ;	radio/tdm.c:689: if (tdm_state == TDM_TRANSMIT &&
   0C59 78r00         [12] 3044 	mov	r0,#_tdm_state
   0C5B E2            [24] 3045 	movx	a,@r0
   0C5C 70 44         [24] 3046 	jnz	00168$
                           3047 ;	radio/tdm.c:690: len == 0 && 
   0C5E 78r33         [12] 3048 	mov	r0,#_tdm_serial_loop_len_2_208
   0C60 E2            [24] 3049 	movx	a,@r0
   0C61 70 3F         [24] 3050 	jnz	00168$
                           3051 ;	radio/tdm.c:691: send_statistics && 
   0C63 30*05 3C      [24] 3052 	jnb	_send_statistics,00168$
                           3053 ;	radio/tdm.c:692: max_xmit >= sizeof(statistics)) {
   0C66 BE 04 00      [24] 3054 	cjne	r6,#0x04,00387$
   0C69                    3055 00387$:
   0C69 40 37         [24] 3056 	jc	00168$
                           3057 ;	radio/tdm.c:694: send_statistics = 0;
   0C6B C2*05         [12] 3058 	clr	_send_statistics
                           3059 ;	radio/tdm.c:695: memcpy(pbuf, &statistics, sizeof(statistics));
   0C6D 90r00r00      [24] 3060 	mov	dptr,#_memcpy_PARM_2
   0C70 74r00         [12] 3061 	mov	a,#_statistics
   0C72 F0            [24] 3062 	movx	@dptr,a
   0C73 E4            [12] 3063 	clr	a
   0C74 A3            [24] 3064 	inc	dptr
   0C75 F0            [24] 3065 	movx	@dptr,a
   0C76 74 60         [12] 3066 	mov	a,#0x60
   0C78 A3            [24] 3067 	inc	dptr
   0C79 F0            [24] 3068 	movx	@dptr,a
   0C7A 90r00r00      [24] 3069 	mov	dptr,#_memcpy_PARM_3
   0C7D 74 04         [12] 3070 	mov	a,#0x04
   0C7F F0            [24] 3071 	movx	@dptr,a
   0C80 E4            [12] 3072 	clr	a
   0C81 A3            [24] 3073 	inc	dptr
   0C82 F0            [24] 3074 	movx	@dptr,a
   0C83 90r00r00      [24] 3075 	mov	dptr,#_pbuf
   0C86 75 F0 00      [24] 3076 	mov	b,#0x00
   0C89 12r00r00      [24] 3077 	lcall	_memcpy
                           3078 ;	radio/tdm.c:696: len = sizeof(statistics);
   0C8C 78r33         [12] 3079 	mov	r0,#_tdm_serial_loop_len_2_208
   0C8E 74 04         [12] 3080 	mov	a,#0x04
   0C90 F2            [24] 3081 	movx	@r0,a
                           3082 ;	radio/tdm.c:699: trailer.window = 0;
   0C91 78r1A         [12] 3083 	mov	r0,#_trailer
   0C93 E4            [12] 3084 	clr	a
   0C94 F2            [24] 3085 	movx	@r0,a
   0C95 08            [12] 3086 	inc	r0
   0C96 E2            [24] 3087 	movx	a,@r0
   0C97 54 E0         [12] 3088 	anl	a,#0xE0
   0C99 F2            [24] 3089 	movx	@r0,a
                           3090 ;	radio/tdm.c:700: trailer.resend = 0;
   0C9A 78r1B         [12] 3091 	mov	r0,#(_trailer + 0x0001)
   0C9C E2            [24] 3092 	movx	a,@r0
   0C9D 54 7F         [12] 3093 	anl	a,#0x7F
   0C9F F2            [24] 3094 	movx	@r0,a
   0CA0 80 28         [24] 3095 	sjmp	00169$
   0CA2                    3096 00168$:
                           3097 ;	radio/tdm.c:705: trailer.window = (uint16_t)(tdm_state_remaining - flight_time_estimate(len+sizeof(trailer)));
   0CA2 78r33         [12] 3098 	mov	r0,#_tdm_serial_loop_len_2_208
   0CA4 E2            [24] 3099 	movx	a,@r0
   0CA5 24 02         [12] 3100 	add	a,#0x02
   0CA7 F5 82         [12] 3101 	mov	dpl,a
   0CA9 12r00rDE      [24] 3102 	lcall	_flight_time_estimate
   0CAC AE 82         [24] 3103 	mov	r6,dpl
   0CAE AF 83         [24] 3104 	mov	r7,dph
   0CB0 78r01         [12] 3105 	mov	r0,#_tdm_state_remaining
   0CB2 E2            [24] 3106 	movx	a,@r0
   0CB3 C3            [12] 3107 	clr	c
   0CB4 9E            [12] 3108 	subb	a,r6
   0CB5 FE            [12] 3109 	mov	r6,a
   0CB6 08            [12] 3110 	inc	r0
   0CB7 E2            [24] 3111 	movx	a,@r0
   0CB8 9F            [12] 3112 	subb	a,r7
   0CB9 FF            [12] 3113 	mov	r7,a
   0CBA 78r1A         [12] 3114 	mov	r0,#_trailer
   0CBC EE            [12] 3115 	mov	a,r6
   0CBD F2            [24] 3116 	movx	@r0,a
   0CBE 08            [12] 3117 	inc	r0
   0CBF EF            [12] 3118 	mov	a,r7
   0CC0 54 1F         [12] 3119 	anl	a,#0x1F
   0CC2 F5 F0         [12] 3120 	mov	b,a
   0CC4 E2            [24] 3121 	movx	a,@r0
   0CC5 54 E0         [12] 3122 	anl	a,#0xE0
   0CC7 45 F0         [12] 3123 	orl	a,b
   0CC9 F2            [24] 3124 	movx	@r0,a
   0CCA                    3125 00169$:
                           3126 ;	radio/tdm.c:709: radio_set_channel(fhop_transmit_channel());
   0CCA 12r00r00      [24] 3127 	lcall	_fhop_transmit_channel
   0CCD 12r00r00      [24] 3128 	lcall	_radio_set_channel
                           3129 ;	radio/tdm.c:711: memcpy(&pbuf[len], &trailer, sizeof(trailer));
   0CD0 78r33         [12] 3130 	mov	r0,#_tdm_serial_loop_len_2_208
   0CD2 E2            [24] 3131 	movx	a,@r0
   0CD3 24r00         [12] 3132 	add	a,#_pbuf
   0CD5 FE            [12] 3133 	mov	r6,a
   0CD6 E4            [12] 3134 	clr	a
   0CD7 34s00         [12] 3135 	addc	a,#(_pbuf >> 8)
   0CD9 FF            [12] 3136 	mov	r7,a
   0CDA 7D 00         [12] 3137 	mov	r5,#0x00
   0CDC 90r00r00      [24] 3138 	mov	dptr,#_memcpy_PARM_2
   0CDF 74r1A         [12] 3139 	mov	a,#_trailer
   0CE1 F0            [24] 3140 	movx	@dptr,a
   0CE2 E4            [12] 3141 	clr	a
   0CE3 A3            [24] 3142 	inc	dptr
   0CE4 F0            [24] 3143 	movx	@dptr,a
   0CE5 74 60         [12] 3144 	mov	a,#0x60
   0CE7 A3            [24] 3145 	inc	dptr
   0CE8 F0            [24] 3146 	movx	@dptr,a
   0CE9 90r00r00      [24] 3147 	mov	dptr,#_memcpy_PARM_3
   0CEC 74 02         [12] 3148 	mov	a,#0x02
   0CEE F0            [24] 3149 	movx	@dptr,a
   0CEF E4            [12] 3150 	clr	a
   0CF0 A3            [24] 3151 	inc	dptr
   0CF1 F0            [24] 3152 	movx	@dptr,a
   0CF2 8E 82         [24] 3153 	mov	dpl,r6
   0CF4 8F 83         [24] 3154 	mov	dph,r7
   0CF6 8D F0         [24] 3155 	mov	b,r5
   0CF8 12r00r00      [24] 3156 	lcall	_memcpy
                           3157 ;	radio/tdm.c:713: if (len != 0 && trailer.window != 0) {
   0CFB 78r33         [12] 3158 	mov	r0,#_tdm_serial_loop_len_2_208
   0CFD E2            [24] 3159 	movx	a,@r0
   0CFE 60 0E         [24] 3160 	jz	00174$
   0D00 78r1A         [12] 3161 	mov	r0,#_trailer
   0D02 E2            [24] 3162 	movx	a,@r0
   0D03 FE            [12] 3163 	mov	r6,a
   0D04 08            [12] 3164 	inc	r0
   0D05 E2            [24] 3165 	movx	a,@r0
   0D06 54 1F         [12] 3166 	anl	a,#0x1F
   0D08 FF            [12] 3167 	mov	r7,a
   0D09 4E            [12] 3168 	orl	a,r6
   0D0A 60 02         [24] 3169 	jz	00174$
                           3170 ;	radio/tdm.c:715: LED_ACTIVITY = LED_ON;
   0D0C C2 A0         [12] 3171 	clr	_LED_RED
   0D0E                    3172 00174$:
                           3173 ;	radio/tdm.c:718: if (len == 0) {
   0D0E 78r33         [12] 3174 	mov	r0,#_tdm_serial_loop_len_2_208
   0D10 E2            [24] 3175 	movx	a,@r0
   0D11 70 02         [24] 3176 	jnz	00177$
                           3177 ;	radio/tdm.c:722: transmit_yield = 1;
   0D13 D2*01         [12] 3178 	setb	_transmit_yield
   0D15                    3179 00177$:
                           3180 ;	radio/tdm.c:728: transmit_wait = packet_latency;
   0D15 78r08         [12] 3181 	mov	r0,#_packet_latency
   0D17 E2            [24] 3182 	movx	a,@r0
   0D18 FE            [12] 3183 	mov	r6,a
   0D19 08            [12] 3184 	inc	r0
   0D1A E2            [24] 3185 	movx	a,@r0
   0D1B FF            [12] 3186 	mov	r7,a
   0D1C 78r0C         [12] 3187 	mov	r0,#_transmit_wait
   0D1E EE            [12] 3188 	mov	a,r6
   0D1F F2            [24] 3189 	movx	@r0,a
   0D20 08            [12] 3190 	inc	r0
   0D21 EF            [12] 3191 	mov	a,r7
   0D22 F2            [24] 3192 	movx	@r0,a
                           3193 ;	radio/tdm.c:732: if ((duty_cycle - duty_cycle_offset) != 100) {
   0D23 78r0E         [12] 3194 	mov	r0,#_duty_cycle
   0D25 E2            [24] 3195 	movx	a,@r0
   0D26 FE            [12] 3196 	mov	r6,a
   0D27 7F 00         [12] 3197 	mov	r7,#0x00
   0D29 78r0F         [12] 3198 	mov	r0,#_duty_cycle_offset
   0D2B E2            [24] 3199 	movx	a,@r0
   0D2C FC            [12] 3200 	mov	r4,a
   0D2D 7D 00         [12] 3201 	mov	r5,#0x00
   0D2F EE            [12] 3202 	mov	a,r6
   0D30 C3            [12] 3203 	clr	c
   0D31 9C            [12] 3204 	subb	a,r4
   0D32 FE            [12] 3205 	mov	r6,a
   0D33 EF            [12] 3206 	mov	a,r7
   0D34 9D            [12] 3207 	subb	a,r5
   0D35 FF            [12] 3208 	mov	r7,a
   0D36 BE 64 05      [24] 3209 	cjne	r6,#0x64,00392$
   0D39 BF 00 02      [24] 3210 	cjne	r7,#0x00,00392$
   0D3C 80 17         [24] 3211 	sjmp	00179$
   0D3E                    3212 00392$:
                           3213 ;	radio/tdm.c:733: transmitted_ticks += flight_time_estimate(len+sizeof(trailer));
   0D3E 78r33         [12] 3214 	mov	r0,#_tdm_serial_loop_len_2_208
   0D40 E2            [24] 3215 	movx	a,@r0
   0D41 24 02         [12] 3216 	add	a,#0x02
   0D43 F5 82         [12] 3217 	mov	dpl,a
   0D45 12r00rDE      [24] 3218 	lcall	_flight_time_estimate
   0D48 AE 82         [24] 3219 	mov	r6,dpl
   0D4A AF 83         [24] 3220 	mov	r7,dph
   0D4C 78r10         [12] 3221 	mov	r0,#_transmitted_ticks
   0D4E E2            [24] 3222 	movx	a,@r0
   0D4F 2E            [12] 3223 	add	a,r6
   0D50 F2            [24] 3224 	movx	@r0,a
   0D51 08            [12] 3225 	inc	r0
   0D52 E2            [24] 3226 	movx	a,@r0
   0D53 3F            [12] 3227 	addc	a,r7
   0D54 F2            [24] 3228 	movx	@r0,a
   0D55                    3229 00179$:
                           3230 ;	radio/tdm.c:737: if (!radio_transmit(len + sizeof(trailer), pbuf, tdm_state_remaining + (silence_period/2)) &&
   0D55 78r33         [12] 3231 	mov	r0,#_tdm_serial_loop_len_2_208
   0D57 E2            [24] 3232 	movx	a,@r0
   0D58 24 02         [12] 3233 	add	a,#0x02
   0D5A FF            [12] 3234 	mov	r7,a
   0D5B 78r06         [12] 3235 	mov	r0,#_silence_period
   0D5D E2            [24] 3236 	movx	a,@r0
   0D5E FD            [12] 3237 	mov	r5,a
   0D5F 08            [12] 3238 	inc	r0
   0D60 E2            [24] 3239 	movx	a,@r0
   0D61 C3            [12] 3240 	clr	c
   0D62 13            [12] 3241 	rrc	a
   0D63 CD            [12] 3242 	xch	a,r5
   0D64 13            [12] 3243 	rrc	a
   0D65 CD            [12] 3244 	xch	a,r5
   0D66 FE            [12] 3245 	mov	r6,a
   0D67 78r01         [12] 3246 	mov	r0,#_tdm_state_remaining
   0D69 E2            [24] 3247 	movx	a,@r0
   0D6A 2D            [12] 3248 	add	a,r5
   0D6B FD            [12] 3249 	mov	r5,a
   0D6C 08            [12] 3250 	inc	r0
   0D6D E2            [24] 3251 	movx	a,@r0
   0D6E 3E            [12] 3252 	addc	a,r6
   0D6F FE            [12] 3253 	mov	r6,a
   0D70 78r00         [12] 3254 	mov	r0,#_radio_transmit_PARM_2
   0D72 74r00         [12] 3255 	mov	a,#_pbuf
   0D74 F2            [24] 3256 	movx	@r0,a
   0D75 08            [12] 3257 	inc	r0
   0D76 74s00         [12] 3258 	mov	a,#(_pbuf >> 8)
   0D78 F2            [24] 3259 	movx	@r0,a
   0D79 78r00         [12] 3260 	mov	r0,#_radio_transmit_PARM_3
   0D7B ED            [12] 3261 	mov	a,r5
   0D7C F2            [24] 3262 	movx	@r0,a
   0D7D 08            [12] 3263 	inc	r0
   0D7E EE            [12] 3264 	mov	a,r6
   0D7F F2            [24] 3265 	movx	@r0,a
   0D80 8F 82         [24] 3266 	mov	dpl,r7
   0D82 12r00r00      [24] 3267 	lcall	_radio_transmit
   0D85 40 1A         [24] 3268 	jc	00181$
                           3269 ;	radio/tdm.c:738: len != 0 && trailer.window != 0 && trailer.command == 0) {
   0D87 78r33         [12] 3270 	mov	r0,#_tdm_serial_loop_len_2_208
   0D89 E2            [24] 3271 	movx	a,@r0
   0D8A 60 15         [24] 3272 	jz	00181$
   0D8C 78r1A         [12] 3273 	mov	r0,#_trailer
   0D8E E2            [24] 3274 	movx	a,@r0
   0D8F FE            [12] 3275 	mov	r6,a
   0D90 08            [12] 3276 	inc	r0
   0D91 E2            [24] 3277 	movx	a,@r0
   0D92 54 1F         [12] 3278 	anl	a,#0x1F
   0D94 FF            [12] 3279 	mov	r7,a
   0D95 4E            [12] 3280 	orl	a,r6
   0D96 60 09         [24] 3281 	jz	00181$
   0D98 78r1B         [12] 3282 	mov	r0,#(_trailer + 0x0001)
   0D9A E2            [24] 3283 	movx	a,@r0
   0D9B 20 E5 03      [24] 3284 	jb	acc.5,00181$
                           3285 ;	radio/tdm.c:739: packet_force_resend();
   0D9E 12r00r00      [24] 3286 	lcall	_packet_force_resend
   0DA1                    3287 00181$:
                           3288 ;	radio/tdm.c:742: if (lbt_rssi != 0) {
   0DA1 78r12         [12] 3289 	mov	r0,#_lbt_rssi
   0DA3 E2            [24] 3290 	movx	a,@r0
   0DA4 60 0C         [24] 3291 	jz	00186$
                           3292 ;	radio/tdm.c:744: lbt_listen_time = 0;
   0DA6 78r13         [12] 3293 	mov	r0,#_lbt_listen_time
   0DA8 E4            [12] 3294 	clr	a
   0DA9 F2            [24] 3295 	movx	@r0,a
   0DAA 08            [12] 3296 	inc	r0
   0DAB F2            [24] 3297 	movx	@r0,a
                           3298 ;	radio/tdm.c:745: lbt_rand = 0;
   0DAC 78r17         [12] 3299 	mov	r0,#_lbt_rand
   0DAE E4            [12] 3300 	clr	a
   0DAF F2            [24] 3301 	movx	@r0,a
   0DB0 08            [12] 3302 	inc	r0
   0DB1 F2            [24] 3303 	movx	@r0,a
   0DB2                    3304 00186$:
                           3305 ;	radio/tdm.c:749: radio_set_channel(fhop_receive_channel());
   0DB2 12r00r00      [24] 3306 	lcall	_fhop_receive_channel
   0DB5 12r00r00      [24] 3307 	lcall	_radio_set_channel
                           3308 ;	radio/tdm.c:752: radio_receiver_on();
   0DB8 12r00r00      [24] 3309 	lcall	_radio_receiver_on
                           3310 ;	radio/tdm.c:754: if (len != 0 && trailer.window != 0) {
   0DBB 78r33         [12] 3311 	mov	r0,#_tdm_serial_loop_len_2_208
   0DBD E2            [24] 3312 	movx	a,@r0
   0DBE 70 03         [24] 3313 	jnz	00398$
   0DC0 02r07rC5      [24] 3314 	ljmp	00192$
   0DC3                    3315 00398$:
   0DC3 78r1A         [12] 3316 	mov	r0,#_trailer
   0DC5 E2            [24] 3317 	movx	a,@r0
   0DC6 FE            [12] 3318 	mov	r6,a
   0DC7 08            [12] 3319 	inc	r0
   0DC8 E2            [24] 3320 	movx	a,@r0
   0DC9 54 1F         [12] 3321 	anl	a,#0x1F
   0DCB FF            [12] 3322 	mov	r7,a
   0DCC 4E            [12] 3323 	orl	a,r6
   0DCD 70 03         [24] 3324 	jnz	00399$
   0DCF 02r07rC5      [24] 3325 	ljmp	00192$
   0DD2                    3326 00399$:
                           3327 ;	radio/tdm.c:755: LED_ACTIVITY = LED_OFF;
   0DD2 D2 A0         [12] 3328 	setb	_LED_RED
   0DD4 02r07rC5      [24] 3329 	ljmp	00192$
                           3330 ;------------------------------------------------------------
                           3331 ;Allocation info for local variables in function 'tdm_init'
                           3332 ;------------------------------------------------------------
                           3333 ;sloc0                     Allocated with name '_tdm_init_sloc0_1_0'
                           3334 ;------------------------------------------------------------
                           3335 ;	radio/tdm.c:873: tdm_init(void)
                           3336 ;	-----------------------------------------
                           3337 ;	 function tdm_init
                           3338 ;	-----------------------------------------
   0DD7                    3339 _tdm_init:
                           3340 ;	radio/tdm.c:876: __pdata uint8_t air_rate = radio_air_rate();
   0DD7 12r00r00      [24] 3341 	lcall	_radio_air_rate
   0DDA AF 82         [24] 3342 	mov	r7,dpl
                           3343 ;	radio/tdm.c:885: ticks_per_byte = (8+(8000000UL/(air_rate*1000UL)))/16;
   0DDC 90r00r00      [24] 3344 	mov	dptr,#__mullong_PARM_2
   0DDF EF            [12] 3345 	mov	a,r7
   0DE0 F0            [24] 3346 	movx	@dptr,a
   0DE1 E4            [12] 3347 	clr	a
   0DE2 A3            [24] 3348 	inc	dptr
   0DE3 F0            [24] 3349 	movx	@dptr,a
   0DE4 E4            [12] 3350 	clr	a
   0DE5 A3            [24] 3351 	inc	dptr
   0DE6 F0            [24] 3352 	movx	@dptr,a
   0DE7 E4            [12] 3353 	clr	a
   0DE8 A3            [24] 3354 	inc	dptr
   0DE9 F0            [24] 3355 	movx	@dptr,a
   0DEA 90 03 E8      [24] 3356 	mov	dptr,#0x03E8
   0DED E4            [12] 3357 	clr	a
   0DEE F5 F0         [12] 3358 	mov	b,a
   0DF0 12r00r00      [24] 3359 	lcall	__mullong
   0DF3 AC 82         [24] 3360 	mov	r4,dpl
   0DF5 AD 83         [24] 3361 	mov	r5,dph
   0DF7 AE F0         [24] 3362 	mov	r6,b
   0DF9 FF            [12] 3363 	mov	r7,a
   0DFA 90r00r00      [24] 3364 	mov	dptr,#__divulong_PARM_2
   0DFD EC            [12] 3365 	mov	a,r4
   0DFE F0            [24] 3366 	movx	@dptr,a
   0DFF ED            [12] 3367 	mov	a,r5
   0E00 A3            [24] 3368 	inc	dptr
   0E01 F0            [24] 3369 	movx	@dptr,a
   0E02 EE            [12] 3370 	mov	a,r6
   0E03 A3            [24] 3371 	inc	dptr
   0E04 F0            [24] 3372 	movx	@dptr,a
   0E05 EF            [12] 3373 	mov	a,r7
   0E06 A3            [24] 3374 	inc	dptr
   0E07 F0            [24] 3375 	movx	@dptr,a
   0E08 90 12 00      [24] 3376 	mov	dptr,#0x1200
   0E0B 75 F0 7A      [24] 3377 	mov	b,#0x7A
   0E0E E4            [12] 3378 	clr	a
   0E0F 12r00r00      [24] 3379 	lcall	__divulong
   0E12 AC 82         [24] 3380 	mov	r4,dpl
   0E14 AD 83         [24] 3381 	mov	r5,dph
   0E16 AE F0         [24] 3382 	mov	r6,b
   0E18 FF            [12] 3383 	mov	r7,a
   0E19 74 08         [12] 3384 	mov	a,#0x08
   0E1B 2C            [12] 3385 	add	a,r4
   0E1C FC            [12] 3386 	mov	r4,a
   0E1D E4            [12] 3387 	clr	a
   0E1E 3D            [12] 3388 	addc	a,r5
   0E1F FD            [12] 3389 	mov	r5,a
   0E20 E4            [12] 3390 	clr	a
   0E21 3E            [12] 3391 	addc	a,r6
   0E22 FE            [12] 3392 	mov	r6,a
   0E23 E4            [12] 3393 	clr	a
   0E24 3F            [12] 3394 	addc	a,r7
   0E25 FF            [12] 3395 	mov	r7,a
   0E26 ED            [12] 3396 	mov	a,r5
   0E27 C4            [12] 3397 	swap	a
   0E28 CC            [12] 3398 	xch	a,r4
   0E29 C4            [12] 3399 	swap	a
   0E2A 54 0F         [12] 3400 	anl	a,#0x0F
   0E2C 6C            [12] 3401 	xrl	a,r4
   0E2D CC            [12] 3402 	xch	a,r4
   0E2E 54 0F         [12] 3403 	anl	a,#0x0F
   0E30 CC            [12] 3404 	xch	a,r4
   0E31 6C            [12] 3405 	xrl	a,r4
   0E32 CC            [12] 3406 	xch	a,r4
   0E33 FD            [12] 3407 	mov	r5,a
   0E34 EE            [12] 3408 	mov	a,r6
   0E35 C4            [12] 3409 	swap	a
   0E36 54 F0         [12] 3410 	anl	a,#0xF0
   0E38 4D            [12] 3411 	orl	a,r5
   0E39 FD            [12] 3412 	mov	r5,a
   0E3A EF            [12] 3413 	mov	a,r7
   0E3B C4            [12] 3414 	swap	a
   0E3C CE            [12] 3415 	xch	a,r6
   0E3D C4            [12] 3416 	swap	a
   0E3E 54 0F         [12] 3417 	anl	a,#0x0F
   0E40 6E            [12] 3418 	xrl	a,r6
   0E41 CE            [12] 3419 	xch	a,r6
   0E42 54 0F         [12] 3420 	anl	a,#0x0F
   0E44 CE            [12] 3421 	xch	a,r6
   0E45 6E            [12] 3422 	xrl	a,r6
   0E46 CE            [12] 3423 	xch	a,r6
   0E47 78r0A         [12] 3424 	mov	r0,#_ticks_per_byte
   0E49 EC            [12] 3425 	mov	a,r4
   0E4A F2            [24] 3426 	movx	@r0,a
   0E4B 08            [12] 3427 	inc	r0
   0E4C ED            [12] 3428 	mov	a,r5
   0E4D F2            [24] 3429 	movx	@r0,a
                           3430 ;	radio/tdm.c:892: packet_latency = (8+(10/2)) * ticks_per_byte + 13;
   0E4E 90r00r00      [24] 3431 	mov	dptr,#__mulint_PARM_2
   0E51 EC            [12] 3432 	mov	a,r4
   0E52 F0            [24] 3433 	movx	@dptr,a
   0E53 ED            [12] 3434 	mov	a,r5
   0E54 A3            [24] 3435 	inc	dptr
   0E55 F0            [24] 3436 	movx	@dptr,a
   0E56 90 00 0D      [24] 3437 	mov	dptr,#0x000D
   0E59 C0 05         [24] 3438 	push	ar5
   0E5B C0 04         [24] 3439 	push	ar4
   0E5D 12r00r00      [24] 3440 	lcall	__mulint
   0E60 E5 82         [12] 3441 	mov	a,dpl
   0E62 85 83 F0      [24] 3442 	mov	b,dph
   0E65 D0 04         [24] 3443 	pop	ar4
   0E67 D0 05         [24] 3444 	pop	ar5
   0E69 24 0D         [12] 3445 	add	a,#0x0D
   0E6B FE            [12] 3446 	mov	r6,a
   0E6C E4            [12] 3447 	clr	a
   0E6D 35 F0         [12] 3448 	addc	a,b
   0E6F FF            [12] 3449 	mov	r7,a
   0E70 78r08         [12] 3450 	mov	r0,#_packet_latency
   0E72 EE            [12] 3451 	mov	a,r6
   0E73 F2            [24] 3452 	movx	@r0,a
   0E74 08            [12] 3453 	inc	r0
   0E75 EF            [12] 3454 	mov	a,r7
   0E76 F2            [24] 3455 	movx	@r0,a
                           3456 ;	radio/tdm.c:894: if (feature_golay) {
   0E77 30*00 2E      [24] 3457 	jnb	_feature_golay,00102$
                           3458 ;	radio/tdm.c:895: max_data_packet_length = (MAX_PACKET_LENGTH/2) - (6+sizeof(trailer));
   0E7A 78r05         [12] 3459 	mov	r0,#_max_data_packet_length
   0E7C 74 76         [12] 3460 	mov	a,#0x76
   0E7E F2            [24] 3461 	movx	@r0,a
                           3462 ;	radio/tdm.c:898: ticks_per_byte *= 2;
   0E7F ED            [12] 3463 	mov	a,r5
   0E80 CC            [12] 3464 	xch	a,r4
   0E81 25 E0         [12] 3465 	add	a,acc
   0E83 CC            [12] 3466 	xch	a,r4
   0E84 33            [12] 3467 	rlc	a
   0E85 FD            [12] 3468 	mov	r5,a
   0E86 78r0A         [12] 3469 	mov	r0,#_ticks_per_byte
   0E88 EC            [12] 3470 	mov	a,r4
   0E89 F2            [24] 3471 	movx	@r0,a
   0E8A 08            [12] 3472 	inc	r0
   0E8B ED            [12] 3473 	mov	a,r5
   0E8C F2            [24] 3474 	movx	@r0,a
                           3475 ;	radio/tdm.c:901: packet_latency += 4*ticks_per_byte;
   0E8D ED            [12] 3476 	mov	a,r5
   0E8E CC            [12] 3477 	xch	a,r4
   0E8F 25 E0         [12] 3478 	add	a,acc
   0E91 CC            [12] 3479 	xch	a,r4
   0E92 33            [12] 3480 	rlc	a
   0E93 CC            [12] 3481 	xch	a,r4
   0E94 25 E0         [12] 3482 	add	a,acc
   0E96 CC            [12] 3483 	xch	a,r4
   0E97 33            [12] 3484 	rlc	a
   0E98 FD            [12] 3485 	mov	r5,a
   0E99 EC            [12] 3486 	mov	a,r4
   0E9A 2E            [12] 3487 	add	a,r6
   0E9B FE            [12] 3488 	mov	r6,a
   0E9C ED            [12] 3489 	mov	a,r5
   0E9D 3F            [12] 3490 	addc	a,r7
   0E9E FF            [12] 3491 	mov	r7,a
   0E9F 78r08         [12] 3492 	mov	r0,#_packet_latency
   0EA1 EE            [12] 3493 	mov	a,r6
   0EA2 F2            [24] 3494 	movx	@r0,a
   0EA3 08            [12] 3495 	inc	r0
   0EA4 EF            [12] 3496 	mov	a,r7
   0EA5 F2            [24] 3497 	movx	@r0,a
   0EA6 80 05         [24] 3498 	sjmp	00103$
   0EA8                    3499 00102$:
                           3500 ;	radio/tdm.c:903: max_data_packet_length = MAX_PACKET_LENGTH - sizeof(trailer);
   0EA8 78r05         [12] 3501 	mov	r0,#_max_data_packet_length
   0EAA 74 FA         [12] 3502 	mov	a,#0xFA
   0EAC F2            [24] 3503 	movx	@r0,a
   0EAD                    3504 00103$:
                           3505 ;	radio/tdm.c:907: silence_period = 2*packet_latency;
   0EAD 78r08         [12] 3506 	mov	r0,#_packet_latency
   0EAF 79r06         [12] 3507 	mov	r1,#_silence_period
   0EB1 E2            [24] 3508 	movx	a,@r0
   0EB2 F3            [24] 3509 	movx	@r1,a
   0EB3 08            [12] 3510 	inc	r0
   0EB4 E2            [24] 3511 	movx	a,@r0
   0EB5 F5 F0         [12] 3512 	mov	b,a
   0EB7 E3            [24] 3513 	movx	a,@r1
   0EB8 25 E0         [12] 3514 	add	a,acc
   0EBA C5 F0         [12] 3515 	xch	a,b
   0EBC 33            [12] 3516 	rlc	a
   0EBD C5 F0         [12] 3517 	xch	a,b
   0EBF F3            [24] 3518 	movx	@r1,a
   0EC0 09            [12] 3519 	inc	r1
   0EC1 E5 F0         [12] 3520 	mov	a,b
   0EC3 F3            [24] 3521 	movx	@r1,a
                           3522 ;	radio/tdm.c:910: window_width = 3*(packet_latency+(max_data_packet_length*(uint32_t)ticks_per_byte));
   0EC4 78r0A         [12] 3523 	mov	r0,#_ticks_per_byte
   0EC6 90r00r00      [24] 3524 	mov	dptr,#__mullong_PARM_2
   0EC9 E2            [24] 3525 	movx	a,@r0
   0ECA F0            [24] 3526 	movx	@dptr,a
   0ECB 08            [12] 3527 	inc	r0
   0ECC E2            [24] 3528 	movx	a,@r0
   0ECD A3            [24] 3529 	inc	dptr
   0ECE F0            [24] 3530 	movx	@dptr,a
   0ECF E4            [12] 3531 	clr	a
   0ED0 A3            [24] 3532 	inc	dptr
   0ED1 F0            [24] 3533 	movx	@dptr,a
   0ED2 E4            [12] 3534 	clr	a
   0ED3 A3            [24] 3535 	inc	dptr
   0ED4 F0            [24] 3536 	movx	@dptr,a
   0ED5 78r05         [12] 3537 	mov	r0,#_max_data_packet_length
   0ED7 E2            [24] 3538 	movx	a,@r0
   0ED8 FC            [12] 3539 	mov	r4,a
   0ED9 7D 00         [12] 3540 	mov	r5,#0x00
   0EDB 7E 00         [12] 3541 	mov	r6,#0x00
   0EDD 7F 00         [12] 3542 	mov	r7,#0x00
   0EDF 8C 82         [24] 3543 	mov	dpl,r4
   0EE1 8D 83         [24] 3544 	mov	dph,r5
   0EE3 8E F0         [24] 3545 	mov	b,r6
   0EE5 EF            [12] 3546 	mov	a,r7
   0EE6 12r00r00      [24] 3547 	lcall	__mullong
   0EE9 85 82*19      [24] 3548 	mov	_tdm_init_sloc0_1_0,dpl
   0EEC 85 83*1A      [24] 3549 	mov	(_tdm_init_sloc0_1_0 + 1),dph
   0EEF 85 F0*1B      [24] 3550 	mov	(_tdm_init_sloc0_1_0 + 2),b
   0EF2 F5*1C         [12] 3551 	mov	(_tdm_init_sloc0_1_0 + 3),a
   0EF4 78r08         [12] 3552 	mov	r0,#_packet_latency
   0EF6 E2            [24] 3553 	movx	a,@r0
   0EF7 FA            [12] 3554 	mov	r2,a
   0EF8 08            [12] 3555 	inc	r0
   0EF9 E2            [24] 3556 	movx	a,@r0
   0EFA FB            [12] 3557 	mov	r3,a
   0EFB 7E 00         [12] 3558 	mov	r6,#0x00
   0EFD 7F 00         [12] 3559 	mov	r7,#0x00
   0EFF 90r00r00      [24] 3560 	mov	dptr,#__mullong_PARM_2
   0F02 E5*19         [12] 3561 	mov	a,_tdm_init_sloc0_1_0
   0F04 2A            [12] 3562 	add	a,r2
   0F05 F0            [24] 3563 	movx	@dptr,a
   0F06 E5*1A         [12] 3564 	mov	a,(_tdm_init_sloc0_1_0 + 1)
   0F08 3B            [12] 3565 	addc	a,r3
   0F09 A3            [24] 3566 	inc	dptr
   0F0A F0            [24] 3567 	movx	@dptr,a
   0F0B E5*1B         [12] 3568 	mov	a,(_tdm_init_sloc0_1_0 + 2)
   0F0D 3E            [12] 3569 	addc	a,r6
   0F0E A3            [24] 3570 	inc	dptr
   0F0F F0            [24] 3571 	movx	@dptr,a
   0F10 E5*1C         [12] 3572 	mov	a,(_tdm_init_sloc0_1_0 + 3)
   0F12 3F            [12] 3573 	addc	a,r7
   0F13 A3            [24] 3574 	inc	dptr
   0F14 F0            [24] 3575 	movx	@dptr,a
   0F15 90 00 03      [24] 3576 	mov	dptr,#(0x03&0x00ff)
   0F18 E4            [12] 3577 	clr	a
   0F19 F5 F0         [12] 3578 	mov	b,a
   0F1B 12r00r00      [24] 3579 	lcall	__mullong
   0F1E AC 82         [24] 3580 	mov	r4,dpl
   0F20 AD 83         [24] 3581 	mov	r5,dph
   0F22 AE F0         [24] 3582 	mov	r6,b
   0F24 FF            [12] 3583 	mov	r7,a
                           3584 ;	radio/tdm.c:913: if (lbt_rssi != 0) {
   0F25 78r12         [12] 3585 	mov	r0,#_lbt_rssi
   0F27 E2            [24] 3586 	movx	a,@r0
   0F28 60 35         [24] 3587 	jz	00105$
                           3588 ;	radio/tdm.c:915: lbt_min_time = LBT_MIN_TIME_USEC/16;
   0F2A 78r15         [12] 3589 	mov	r0,#_lbt_min_time
   0F2C 74 38         [12] 3590 	mov	a,#0x38
   0F2E F2            [24] 3591 	movx	@r0,a
   0F2F 08            [12] 3592 	inc	r0
   0F30 74 01         [12] 3593 	mov	a,#0x01
   0F32 F2            [24] 3594 	movx	@r0,a
                           3595 ;	radio/tdm.c:916: window_width = constrain(window_width, 3*lbt_min_time, window_width);
   0F33 78r00         [12] 3596 	mov	r0,#_constrain_PARM_2
   0F35 74 A8         [12] 3597 	mov	a,#0xA8
   0F37 F2            [24] 3598 	movx	@r0,a
   0F38 08            [12] 3599 	inc	r0
   0F39 74 03         [12] 3600 	mov	a,#0x03
   0F3B F2            [24] 3601 	movx	@r0,a
   0F3C 08            [12] 3602 	inc	r0
   0F3D E4            [12] 3603 	clr	a
   0F3E F2            [24] 3604 	movx	@r0,a
   0F3F 08            [12] 3605 	inc	r0
   0F40 F2            [24] 3606 	movx	@r0,a
   0F41 78r00         [12] 3607 	mov	r0,#_constrain_PARM_3
   0F43 EC            [12] 3608 	mov	a,r4
   0F44 F2            [24] 3609 	movx	@r0,a
   0F45 08            [12] 3610 	inc	r0
   0F46 ED            [12] 3611 	mov	a,r5
   0F47 F2            [24] 3612 	movx	@r0,a
   0F48 08            [12] 3613 	inc	r0
   0F49 EE            [12] 3614 	mov	a,r6
   0F4A F2            [24] 3615 	movx	@r0,a
   0F4B 08            [12] 3616 	inc	r0
   0F4C EF            [12] 3617 	mov	a,r7
   0F4D F2            [24] 3618 	movx	@r0,a
   0F4E 8C 82         [24] 3619 	mov	dpl,r4
   0F50 8D 83         [24] 3620 	mov	dph,r5
   0F52 8E F0         [24] 3621 	mov	b,r6
   0F54 EF            [12] 3622 	mov	a,r7
   0F55 12r00r00      [24] 3623 	lcall	_constrain
   0F58 AC 82         [24] 3624 	mov	r4,dpl
   0F5A AD 83         [24] 3625 	mov	r5,dph
   0F5C AE F0         [24] 3626 	mov	r6,b
   0F5E FF            [12] 3627 	mov	r7,a
   0F5F                    3628 00105$:
                           3629 ;	radio/tdm.c:921: if (window_width >= REGULATORY_MAX_WINDOW) {
   0F5F C3            [12] 3630 	clr	c
   0F60 EC            [12] 3631 	mov	a,r4
   0F61 94 A8         [12] 3632 	subb	a,#0xA8
   0F63 ED            [12] 3633 	mov	a,r5
   0F64 94 61         [12] 3634 	subb	a,#0x61
   0F66 EE            [12] 3635 	mov	a,r6
   0F67 94 00         [12] 3636 	subb	a,#0x00
   0F69 EF            [12] 3637 	mov	a,r7
   0F6A 94 00         [12] 3638 	subb	a,#0x00
   0F6C 40 08         [24] 3639 	jc	00108$
                           3640 ;	radio/tdm.c:922: window_width = REGULATORY_MAX_WINDOW;
   0F6E 7C A8         [12] 3641 	mov	r4,#0xA8
   0F70 7D 61         [12] 3642 	mov	r5,#0x61
   0F72 7E 00         [12] 3643 	mov	r6,#0x00
   0F74 7F 00         [12] 3644 	mov	r7,#0x00
                           3645 ;	radio/tdm.c:926: while (window_width > 0x1FFF) {
   0F76                    3646 00108$:
   0F76 ED            [12] 3647 	mov	a,r5
   0F77 54 E0         [12] 3648 	anl	a,#0xE0
   0F79 70 06         [24] 3649 	jnz	00136$
   0F7B EE            [12] 3650 	mov	a,r6
   0F7C 70 03         [24] 3651 	jnz	00136$
   0F7E EF            [12] 3652 	mov	a,r7
   0F7F 60 0A         [24] 3653 	jz	00110$
   0F81                    3654 00136$:
                           3655 ;	radio/tdm.c:927: window_width = 0x1FFF;
   0F81 7C FF         [12] 3656 	mov	r4,#0xFF
   0F83 7D 1F         [12] 3657 	mov	r5,#0x1F
   0F85 7E 00         [12] 3658 	mov	r6,#0x00
   0F87 7F 00         [12] 3659 	mov	r7,#0x00
   0F89 80 EB         [24] 3660 	sjmp	00108$
   0F8B                    3661 00110$:
                           3662 ;	radio/tdm.c:930: tx_window_width = window_width;
   0F8B 78r03         [12] 3663 	mov	r0,#_tx_window_width
   0F8D EC            [12] 3664 	mov	a,r4
   0F8E F2            [24] 3665 	movx	@r0,a
   0F8F 08            [12] 3666 	inc	r0
   0F90 ED            [12] 3667 	mov	a,r5
   0F91 F2            [24] 3668 	movx	@r0,a
                           3669 ;	radio/tdm.c:935: packet_latency += ((settings.preamble_length-10)/2) * ticks_per_byte;
   0F92 78r0B         [12] 3670 	mov	r0,#(_settings + 0x000b)
   0F94 E2            [24] 3671 	movx	a,@r0
   0F95 7E 00         [12] 3672 	mov	r6,#0x00
   0F97 24 F6         [12] 3673 	add	a,#0xF6
   0F99 FF            [12] 3674 	mov	r7,a
   0F9A EE            [12] 3675 	mov	a,r6
   0F9B 34 FF         [12] 3676 	addc	a,#0xFF
   0F9D FE            [12] 3677 	mov	r6,a
   0F9E 90r00r00      [24] 3678 	mov	dptr,#__divsint_PARM_2
   0FA1 74 02         [12] 3679 	mov	a,#0x02
   0FA3 F0            [24] 3680 	movx	@dptr,a
   0FA4 E4            [12] 3681 	clr	a
   0FA5 A3            [24] 3682 	inc	dptr
   0FA6 F0            [24] 3683 	movx	@dptr,a
   0FA7 8F 82         [24] 3684 	mov	dpl,r7
   0FA9 8E 83         [24] 3685 	mov	dph,r6
   0FAB C0 05         [24] 3686 	push	ar5
   0FAD C0 04         [24] 3687 	push	ar4
   0FAF 12r00r00      [24] 3688 	lcall	__divsint
   0FB2 AE 82         [24] 3689 	mov	r6,dpl
   0FB4 AF 83         [24] 3690 	mov	r7,dph
   0FB6 78r0A         [12] 3691 	mov	r0,#_ticks_per_byte
   0FB8 90r00r00      [24] 3692 	mov	dptr,#__mulint_PARM_2
   0FBB E2            [24] 3693 	movx	a,@r0
   0FBC F0            [24] 3694 	movx	@dptr,a
   0FBD 08            [12] 3695 	inc	r0
   0FBE E2            [24] 3696 	movx	a,@r0
   0FBF A3            [24] 3697 	inc	dptr
   0FC0 F0            [24] 3698 	movx	@dptr,a
   0FC1 8E 82         [24] 3699 	mov	dpl,r6
   0FC3 8F 83         [24] 3700 	mov	dph,r7
   0FC5 12r00r00      [24] 3701 	lcall	__mulint
   0FC8 AE 82         [24] 3702 	mov	r6,dpl
   0FCA AF 83         [24] 3703 	mov	r7,dph
   0FCC D0 04         [24] 3704 	pop	ar4
   0FCE D0 05         [24] 3705 	pop	ar5
   0FD0 78r08         [12] 3706 	mov	r0,#_packet_latency
   0FD2 E2            [24] 3707 	movx	a,@r0
   0FD3 2E            [12] 3708 	add	a,r6
   0FD4 F2            [24] 3709 	movx	@r0,a
   0FD5 08            [12] 3710 	inc	r0
   0FD6 E2            [24] 3711 	movx	a,@r0
   0FD7 3F            [12] 3712 	addc	a,r7
   0FD8 F2            [24] 3713 	movx	@r0,a
                           3714 ;	radio/tdm.c:939: i = (tx_window_width - packet_latency) / ticks_per_byte;
   0FD9 78r08         [12] 3715 	mov	r0,#_packet_latency
   0FDB D3            [12] 3716 	setb	c
   0FDC E2            [24] 3717 	movx	a,@r0
   0FDD 9C            [12] 3718 	subb	a,r4
   0FDE F4            [12] 3719 	cpl	a
   0FDF B3            [12] 3720 	cpl	c
   0FE0 FC            [12] 3721 	mov	r4,a
   0FE1 B3            [12] 3722 	cpl	c
   0FE2 08            [12] 3723 	inc	r0
   0FE3 E2            [24] 3724 	movx	a,@r0
   0FE4 9D            [12] 3725 	subb	a,r5
   0FE5 F4            [12] 3726 	cpl	a
   0FE6 FD            [12] 3727 	mov	r5,a
   0FE7 78r0A         [12] 3728 	mov	r0,#_ticks_per_byte
   0FE9 90r00r00      [24] 3729 	mov	dptr,#__divuint_PARM_2
   0FEC E2            [24] 3730 	movx	a,@r0
   0FED F0            [24] 3731 	movx	@dptr,a
   0FEE 08            [12] 3732 	inc	r0
   0FEF E2            [24] 3733 	movx	a,@r0
   0FF0 A3            [24] 3734 	inc	dptr
   0FF1 F0            [24] 3735 	movx	@dptr,a
   0FF2 8C 82         [24] 3736 	mov	dpl,r4
   0FF4 8D 83         [24] 3737 	mov	dph,r5
   0FF6 12r00r00      [24] 3738 	lcall	__divuint
   0FF9 AE 82         [24] 3739 	mov	r6,dpl
   0FFB AF 83         [24] 3740 	mov	r7,dph
                           3741 ;	radio/tdm.c:940: if (i > max_data_packet_length) {
   0FFD 78r05         [12] 3742 	mov	r0,#_max_data_packet_length
   0FFF E2            [24] 3743 	movx	a,@r0
   1000 FC            [12] 3744 	mov	r4,a
   1001 7D 00         [12] 3745 	mov	r5,#0x00
   1003 C3            [12] 3746 	clr	c
   1004 EC            [12] 3747 	mov	a,r4
   1005 9E            [12] 3748 	subb	a,r6
   1006 ED            [12] 3749 	mov	a,r5
   1007 9F            [12] 3750 	subb	a,r7
   1008 50 04         [24] 3751 	jnc	00112$
                           3752 ;	radio/tdm.c:941: i = max_data_packet_length;
   100A 8C 06         [24] 3753 	mov	ar6,r4
   100C 8D 07         [24] 3754 	mov	ar7,r5
   100E                    3755 00112$:
                           3756 ;	radio/tdm.c:943: packet_set_max_xmit(i);
   100E 8E 82         [24] 3757 	mov	dpl,r6
   1010 12r00r00      [24] 3758 	lcall	_packet_set_max_xmit
                           3759 ;	radio/tdm.c:946: TDM_SYNC_PIN = false;
   1013 C2 A6         [12] 3760 	clr	_TDM_SYNC_PIN
   1015 22            [24] 3761 	ret
                           3762 ;------------------------------------------------------------
                           3763 ;Allocation info for local variables in function 'tdm_report_timing'
                           3764 ;------------------------------------------------------------
                           3765 ;	radio/tdm.c:960: tdm_report_timing(void)
                           3766 ;	-----------------------------------------
                           3767 ;	 function tdm_report_timing
                           3768 ;	-----------------------------------------
   1016                    3769 _tdm_report_timing:
                           3770 ;	radio/tdm.c:962: printf("silence_period: %u\n", (unsigned)silence_period); delay_msec(1);
   1016 78r06         [12] 3771 	mov	r0,#_silence_period
   1018 E2            [24] 3772 	movx	a,@r0
   1019 C0 E0         [24] 3773 	push	acc
   101B 08            [12] 3774 	inc	r0
   101C E2            [24] 3775 	movx	a,@r0
   101D C0 E0         [24] 3776 	push	acc
   101F 74rE3         [12] 3777 	mov	a,#__str_9
   1021 C0 E0         [24] 3778 	push	acc
   1023 74s00         [12] 3779 	mov	a,#(__str_9 >> 8)
   1025 C0 E0         [24] 3780 	push	acc
   1027 74 80         [12] 3781 	mov	a,#0x80
   1029 C0 E0         [24] 3782 	push	acc
   102B 12r00r00      [24] 3783 	lcall	_printfl
   102E E5 81         [12] 3784 	mov	a,sp
   1030 24 FB         [12] 3785 	add	a,#0xfb
   1032 F5 81         [12] 3786 	mov	sp,a
   1034 90 00 01      [24] 3787 	mov	dptr,#0x0001
   1037 12r00r00      [24] 3788 	lcall	_delay_msec
                           3789 ;	radio/tdm.c:963: printf("tx_window_width: %u\n", (unsigned)tx_window_width); delay_msec(1);
   103A 78r03         [12] 3790 	mov	r0,#_tx_window_width
   103C E2            [24] 3791 	movx	a,@r0
   103D C0 E0         [24] 3792 	push	acc
   103F 08            [12] 3793 	inc	r0
   1040 E2            [24] 3794 	movx	a,@r0
   1041 C0 E0         [24] 3795 	push	acc
   1043 74rF7         [12] 3796 	mov	a,#__str_10
   1045 C0 E0         [24] 3797 	push	acc
   1047 74s00         [12] 3798 	mov	a,#(__str_10 >> 8)
   1049 C0 E0         [24] 3799 	push	acc
   104B 74 80         [12] 3800 	mov	a,#0x80
   104D C0 E0         [24] 3801 	push	acc
   104F 12r00r00      [24] 3802 	lcall	_printfl
   1052 E5 81         [12] 3803 	mov	a,sp
   1054 24 FB         [12] 3804 	add	a,#0xfb
   1056 F5 81         [12] 3805 	mov	sp,a
   1058 90 00 01      [24] 3806 	mov	dptr,#0x0001
   105B 12r00r00      [24] 3807 	lcall	_delay_msec
                           3808 ;	radio/tdm.c:964: printf("max_data_packet_length: %u\n", (unsigned)max_data_packet_length); delay_msec(1);
   105E 78r05         [12] 3809 	mov	r0,#_max_data_packet_length
   1060 E2            [24] 3810 	movx	a,@r0
   1061 FE            [12] 3811 	mov	r6,a
   1062 7F 00         [12] 3812 	mov	r7,#0x00
   1064 C0 06         [24] 3813 	push	ar6
   1066 C0 07         [24] 3814 	push	ar7
   1068 74r0C         [12] 3815 	mov	a,#__str_11
   106A C0 E0         [24] 3816 	push	acc
   106C 74s01         [12] 3817 	mov	a,#(__str_11 >> 8)
   106E C0 E0         [24] 3818 	push	acc
   1070 74 80         [12] 3819 	mov	a,#0x80
   1072 C0 E0         [24] 3820 	push	acc
   1074 12r00r00      [24] 3821 	lcall	_printfl
   1077 E5 81         [12] 3822 	mov	a,sp
   1079 24 FB         [12] 3823 	add	a,#0xfb
   107B F5 81         [12] 3824 	mov	sp,a
   107D 90 00 01      [24] 3825 	mov	dptr,#0x0001
   1080 02r00r00      [24] 3826 	ljmp	_delay_msec
                           3827 	.area CSEG    (CODE)
                           3828 	.area CONST   (CODE)
   0000                    3829 __str_0:
   0000 4C 2F 52 20 52 53  3830 	.ascii "L/R RSSI: %u/%u  L/R noise: %u/%u pkts: %u "
        53 49 3A 20 25 75
        2F 25 75 20 20 4C
        2F 52 20 6E 6F 69
        73 65 3A 20 25 75
        2F 25 75 20 70 6B
        74 73 3A 20 25 75
        20
   002B 00                 3831 	.db 0x00
   002C                    3832 __str_1:
   002C 20 74 78 65 3D 25  3833 	.ascii " txe=%u rxe=%u stx=%u srx=%u ecc=%u/%u temp=%d dco=%u"
        75 20 72 78 65 3D
        25 75 20 73 74 78
        3D 25 75 20 73 72
        78 3D 25 75 20 65
        63 63 3D 25 75 2F
        25 75 20 74 65 6D
        70 3D 25 64 20 64
        63 6F 3D 25 75
   0061 0A                 3834 	.db 0x0A
   0062 00                 3835 	.db 0x00
   0063                    3836 __str_2:
   0063 54 44 4D 3A 20 25  3837 	.ascii "TDM: %u/%u len=%u "
        75 2F 25 75 20 6C
        65 6E 3D 25 75 20
   0075 00                 3838 	.db 0x00
   0076                    3839 __str_3:
   0076 20 64 65 6C 74 61  3840 	.ascii " delta: %d"
        3A 20 25 64
   0080 0A                 3841 	.db 0x0A
   0081 00                 3842 	.db 0x00
   0082                    3843 __str_4:
   0082 54 44 4D 3A 20 63  3844 	.ascii "TDM: change timing %u/%u"
        68 61 6E 67 65 20
        74 69 6D 69 6E 67
        20 25 75 2F 25 75
   009A 0A                 3845 	.db 0x0A
   009B 00                 3846 	.db 0x00
   009C                    3847 __str_5:
   009C 54 44 4D 3A 20 73  3848 	.ascii "TDM: scanning"
        63 61 6E 6E 69 6E
        67
   00A9 0A                 3849 	.db 0x0A
   00AA 00                 3850 	.db 0x00
   00AB                    3851 __str_6:
   00AB 73 74 61 63 6B 20  3852 	.ascii "stack blown"
        62 6C 6F 77 6E
   00B6 0A                 3853 	.db 0x0A
   00B7 00                 3854 	.db 0x00
   00B8                    3855 __str_7:
   00B8 70 64 61 74 61 20  3856 	.ascii "pdata canary changed"
        63 61 6E 61 72 79
        20 63 68 61 6E 67
        65 64
   00CC 0A                 3857 	.db 0x0A
   00CD 00                 3858 	.db 0x00
   00CE                    3859 __str_8:
   00CE 6F 76 65 72 73 69  3860 	.ascii "oversized tdm packet"
        7A 65 64 20 74 64
        6D 20 70 61 63 6B
        65 74
   00E2 00                 3861 	.db 0x00
   00E3                    3862 __str_9:
   00E3 73 69 6C 65 6E 63  3863 	.ascii "silence_period: %u"
        65 5F 70 65 72 69
        6F 64 3A 20 25 75
   00F5 0A                 3864 	.db 0x0A
   00F6 00                 3865 	.db 0x00
   00F7                    3866 __str_10:
   00F7 74 78 5F 77 69 6E  3867 	.ascii "tx_window_width: %u"
        64 6F 77 5F 77 69
        64 74 68 3A 20 25
        75
   010A 0A                 3868 	.db 0x0A
   010B 00                 3869 	.db 0x00
   010C                    3870 __str_11:
   010C 6D 61 78 5F 64 61  3871 	.ascii "max_data_packet_length: %u"
        74 61 5F 70 61 63
        6B 65 74 5F 6C 65
        6E 67 74 68 3A 20
        25 75
   0126 0A                 3872 	.db 0x0A
   0127 00                 3873 	.db 0x00
                           3874 	.area XINIT   (CODE)
                           3875 	.area CABS    (ABS,CODE)
