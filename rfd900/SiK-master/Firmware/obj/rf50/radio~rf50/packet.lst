                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.3.0 #8604 (May 11 2013) (Linux)
                              4 ; This file was generated Sun Nov 24 17:43:06 2013
                              5 ;--------------------------------------------------------
                              6 	.module packet
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _timer2_tick
                             13 	.globl _serial_read_available
                             14 	.globl _serial_read_buf
                             15 	.globl _serial_peek2
                             16 	.globl _serial_peek
                             17 	.globl _serial_read
                             18 	.globl _memcmp
                             19 	.globl _memcpy
                             20 	.globl _SDN
                             21 	.globl _NSS1
                             22 	.globl _IRQ
                             23 	.globl _BUTTON_DOWN
                             24 	.globl _BUTTON_UP
                             25 	.globl _BUTTON_ENTER
                             26 	.globl _LED_GREEN
                             27 	.globl _LED_RED
                             28 	.globl _SPI0EN
                             29 	.globl _TXBMT0
                             30 	.globl _NSS0MD0
                             31 	.globl _NSS0MD1
                             32 	.globl _RXOVRN0
                             33 	.globl _MODF0
                             34 	.globl _WCOL0
                             35 	.globl _SPIF0
                             36 	.globl _AD0CM0
                             37 	.globl _AD0CM1
                             38 	.globl _AD0CM2
                             39 	.globl _AD0WINT
                             40 	.globl _AD0BUSY
                             41 	.globl _AD0INT
                             42 	.globl _BURSTEN
                             43 	.globl _AD0EN
                             44 	.globl _CCF0
                             45 	.globl _CCF1
                             46 	.globl _CCF2
                             47 	.globl _CCF3
                             48 	.globl _CCF4
                             49 	.globl _CCF5
                             50 	.globl _CR
                             51 	.globl _CF
                             52 	.globl _P
                             53 	.globl _F1
                             54 	.globl _OV
                             55 	.globl _RS0
                             56 	.globl _RS1
                             57 	.globl _F0
                             58 	.globl _AC
                             59 	.globl _CY
                             60 	.globl _T2XCLK
                             61 	.globl _T2RCLK
                             62 	.globl _TR2
                             63 	.globl _T2SPLIT
                             64 	.globl _TF2CEN
                             65 	.globl _TF2LEN
                             66 	.globl _TF2L
                             67 	.globl _TF2H
                             68 	.globl _SI
                             69 	.globl _ACK
                             70 	.globl _ARBLOST
                             71 	.globl _ACKRQ
                             72 	.globl _STO
                             73 	.globl _STA
                             74 	.globl _TXMODE
                             75 	.globl _MASTER
                             76 	.globl _PX0
                             77 	.globl _PT0
                             78 	.globl _PX1
                             79 	.globl _PT1
                             80 	.globl _PS0
                             81 	.globl _PT2
                             82 	.globl _PSPI0
                             83 	.globl _SPI1EN
                             84 	.globl _TXBMT1
                             85 	.globl _NSS1MD0
                             86 	.globl _NSS1MD1
                             87 	.globl _RXOVRN1
                             88 	.globl _MODF1
                             89 	.globl _WCOL1
                             90 	.globl _SPIF1
                             91 	.globl _EX0
                             92 	.globl _ET0
                             93 	.globl _EX1
                             94 	.globl _ET1
                             95 	.globl _ES0
                             96 	.globl _ET2
                             97 	.globl _ESPI0
                             98 	.globl _EA
                             99 	.globl _RI0
                            100 	.globl _TI0
                            101 	.globl _RB80
                            102 	.globl _TB80
                            103 	.globl _REN0
                            104 	.globl _MCE0
                            105 	.globl _S0MODE
                            106 	.globl _CRC0VAL
                            107 	.globl _CRC0INIT
                            108 	.globl _CRC0SEL
                            109 	.globl _IT0
                            110 	.globl _IE0
                            111 	.globl _IT1
                            112 	.globl _IE1
                            113 	.globl _TR0
                            114 	.globl _TF0
                            115 	.globl _TR1
                            116 	.globl _TF1
                            117 	.globl _PCA0CP4
                            118 	.globl _PCA0CP0
                            119 	.globl _PCA0
                            120 	.globl _PCA0CP3
                            121 	.globl _PCA0CP2
                            122 	.globl _PCA0CP1
                            123 	.globl _PCA0CP5
                            124 	.globl _TMR2
                            125 	.globl _TMR2RL
                            126 	.globl _ADC0LT
                            127 	.globl _ADC0GT
                            128 	.globl _ADC0
                            129 	.globl _TMR3
                            130 	.globl _TMR3RL
                            131 	.globl _TOFF
                            132 	.globl _DP
                            133 	.globl _VDM0CN
                            134 	.globl _PCA0CPH4
                            135 	.globl _PCA0CPL4
                            136 	.globl _PCA0CPH0
                            137 	.globl _PCA0CPL0
                            138 	.globl _PCA0H
                            139 	.globl _PCA0L
                            140 	.globl _SPI0CN
                            141 	.globl _EIP2
                            142 	.globl _EIP1
                            143 	.globl _SMB0ADM
                            144 	.globl _SMB0ADR
                            145 	.globl _P2MDIN
                            146 	.globl _P1MDIN
                            147 	.globl _P0MDIN
                            148 	.globl _B
                            149 	.globl _RSTSRC
                            150 	.globl _PCA0CPH3
                            151 	.globl _PCA0CPL3
                            152 	.globl _PCA0CPH2
                            153 	.globl _PCA0CPL2
                            154 	.globl _PCA0CPH1
                            155 	.globl _PCA0CPL1
                            156 	.globl _ADC0CN
                            157 	.globl _EIE2
                            158 	.globl _EIE1
                            159 	.globl _FLWR
                            160 	.globl _IT01CF
                            161 	.globl _XBR2
                            162 	.globl _XBR1
                            163 	.globl _XBR0
                            164 	.globl _ACC
                            165 	.globl _PCA0PWM
                            166 	.globl _PCA0CPM4
                            167 	.globl _PCA0CPM3
                            168 	.globl _PCA0CPM2
                            169 	.globl _PCA0CPM1
                            170 	.globl _PCA0CPM0
                            171 	.globl _PCA0MD
                            172 	.globl _PCA0CN
                            173 	.globl _P0MAT
                            174 	.globl _P2SKIP
                            175 	.globl _P1SKIP
                            176 	.globl _P0SKIP
                            177 	.globl _PCA0CPH5
                            178 	.globl _PCA0CPL5
                            179 	.globl _REF0CN
                            180 	.globl _PSW
                            181 	.globl _P1MAT
                            182 	.globl _PCA0CPM5
                            183 	.globl _TMR2H
                            184 	.globl _TMR2L
                            185 	.globl _TMR2RLH
                            186 	.globl _TMR2RLL
                            187 	.globl _REG0CN
                            188 	.globl _TMR2CN
                            189 	.globl _P0MASK
                            190 	.globl _ADC0LTH
                            191 	.globl _ADC0LTL
                            192 	.globl _ADC0GTH
                            193 	.globl _ADC0GTL
                            194 	.globl _SMB0DAT
                            195 	.globl _SMB0CF
                            196 	.globl _SMB0CN
                            197 	.globl _P1MASK
                            198 	.globl _ADC0H
                            199 	.globl _ADC0L
                            200 	.globl _ADC0TK
                            201 	.globl _ADC0CF
                            202 	.globl _ADC0MX
                            203 	.globl _ADC0PWR
                            204 	.globl _ADC0AC
                            205 	.globl _IREF0CN
                            206 	.globl _IP
                            207 	.globl _FLKEY
                            208 	.globl _FLSCL
                            209 	.globl _PMU0CF
                            210 	.globl _OSCICL
                            211 	.globl _OSCICN
                            212 	.globl _OSCXCN
                            213 	.globl _SPI1CN
                            214 	.globl _ONESHOT
                            215 	.globl _EMI0TC
                            216 	.globl _RTC0KEY
                            217 	.globl _RTC0DAT
                            218 	.globl _RTC0ADR
                            219 	.globl _EMI0CF
                            220 	.globl _EMI0CN
                            221 	.globl _CLKSEL
                            222 	.globl _IE
                            223 	.globl _SFRPAGE
                            224 	.globl _P2DRV
                            225 	.globl _P2MDOUT
                            226 	.globl _P1DRV
                            227 	.globl _P1MDOUT
                            228 	.globl _P0DRV
                            229 	.globl _P0MDOUT
                            230 	.globl _SPI0DAT
                            231 	.globl _SPI0CKR
                            232 	.globl _SPI0CFG
                            233 	.globl _P2
                            234 	.globl _CPT0MX
                            235 	.globl _CPT1MX
                            236 	.globl _CPT0MD
                            237 	.globl _CPT1MD
                            238 	.globl _CPT0CN
                            239 	.globl _CPT1CN
                            240 	.globl _SBUF0
                            241 	.globl _SCON0
                            242 	.globl _CRC0CNT
                            243 	.globl _DC0CN
                            244 	.globl _CRC0AUTO
                            245 	.globl _DC0CF
                            246 	.globl _TMR3H
                            247 	.globl _CRC0FLIP
                            248 	.globl _TMR3L
                            249 	.globl _CRC0IN
                            250 	.globl _TMR3RLH
                            251 	.globl _CRC0CN
                            252 	.globl _TMR3RLL
                            253 	.globl _CRC0DAT
                            254 	.globl _TMR3CN
                            255 	.globl _P1
                            256 	.globl _PSCTL
                            257 	.globl _CKCON
                            258 	.globl _TH1
                            259 	.globl _TH0
                            260 	.globl _TL1
                            261 	.globl _TL0
                            262 	.globl _TMOD
                            263 	.globl _TCON
                            264 	.globl _PCON
                            265 	.globl _TOFFH
                            266 	.globl _SPI1DAT
                            267 	.globl _TOFFL
                            268 	.globl _SPI1CKR
                            269 	.globl _SPI1CFG
                            270 	.globl _DPH
                            271 	.globl _DPL
                            272 	.globl _SP
                            273 	.globl _P0
                            274 	.globl _packet_inject_PARM_2
                            275 	.globl _packet_is_duplicate_PARM_2
                            276 	.globl _packet_get_next_PARM_2
                            277 	.globl _packet_is_duplicate_PARM_3
                            278 	.globl _using_mavlink_10
                            279 	.globl _seen_mavlink
                            280 	.globl _packet_get_next
                            281 	.globl _packet_is_resend
                            282 	.globl _packet_is_injected
                            283 	.globl _packet_force_resend
                            284 	.globl _packet_set_max_xmit
                            285 	.globl _packet_set_serial_speed
                            286 	.globl _packet_is_duplicate
                            287 	.globl _packet_inject
                            288 ;--------------------------------------------------------
                            289 ; special function registers
                            290 ;--------------------------------------------------------
                            291 	.area RSEG    (ABS,DATA)
   0000                     292 	.org 0x0000
                     0080   293 _P0	=	0x0080
                     0081   294 _SP	=	0x0081
                     0082   295 _DPL	=	0x0082
                     0083   296 _DPH	=	0x0083
                     0084   297 _SPI1CFG	=	0x0084
                     0085   298 _SPI1CKR	=	0x0085
                     0085   299 _TOFFL	=	0x0085
                     0086   300 _SPI1DAT	=	0x0086
                     0086   301 _TOFFH	=	0x0086
                     0087   302 _PCON	=	0x0087
                     0088   303 _TCON	=	0x0088
                     0089   304 _TMOD	=	0x0089
                     008A   305 _TL0	=	0x008a
                     008B   306 _TL1	=	0x008b
                     008C   307 _TH0	=	0x008c
                     008D   308 _TH1	=	0x008d
                     008E   309 _CKCON	=	0x008e
                     008F   310 _PSCTL	=	0x008f
                     0090   311 _P1	=	0x0090
                     0091   312 _TMR3CN	=	0x0091
                     0091   313 _CRC0DAT	=	0x0091
                     0092   314 _TMR3RLL	=	0x0092
                     0092   315 _CRC0CN	=	0x0092
                     0093   316 _TMR3RLH	=	0x0093
                     0093   317 _CRC0IN	=	0x0093
                     0094   318 _TMR3L	=	0x0094
                     0095   319 _CRC0FLIP	=	0x0095
                     0095   320 _TMR3H	=	0x0095
                     0096   321 _DC0CF	=	0x0096
                     0096   322 _CRC0AUTO	=	0x0096
                     0097   323 _DC0CN	=	0x0097
                     0097   324 _CRC0CNT	=	0x0097
                     0098   325 _SCON0	=	0x0098
                     0099   326 _SBUF0	=	0x0099
                     009A   327 _CPT1CN	=	0x009a
                     009B   328 _CPT0CN	=	0x009b
                     009C   329 _CPT1MD	=	0x009c
                     009D   330 _CPT0MD	=	0x009d
                     009E   331 _CPT1MX	=	0x009e
                     009F   332 _CPT0MX	=	0x009f
                     00A0   333 _P2	=	0x00a0
                     00A1   334 _SPI0CFG	=	0x00a1
                     00A2   335 _SPI0CKR	=	0x00a2
                     00A3   336 _SPI0DAT	=	0x00a3
                     00A4   337 _P0MDOUT	=	0x00a4
                     00A4   338 _P0DRV	=	0x00a4
                     00A5   339 _P1MDOUT	=	0x00a5
                     00A5   340 _P1DRV	=	0x00a5
                     00A6   341 _P2MDOUT	=	0x00a6
                     00A6   342 _P2DRV	=	0x00a6
                     00A7   343 _SFRPAGE	=	0x00a7
                     00A8   344 _IE	=	0x00a8
                     00A9   345 _CLKSEL	=	0x00a9
                     00AA   346 _EMI0CN	=	0x00aa
                     00AB   347 _EMI0CF	=	0x00ab
                     00AC   348 _RTC0ADR	=	0x00ac
                     00AD   349 _RTC0DAT	=	0x00ad
                     00AE   350 _RTC0KEY	=	0x00ae
                     00AF   351 _EMI0TC	=	0x00af
                     00AF   352 _ONESHOT	=	0x00af
                     00B0   353 _SPI1CN	=	0x00b0
                     00B1   354 _OSCXCN	=	0x00b1
                     00B2   355 _OSCICN	=	0x00b2
                     00B3   356 _OSCICL	=	0x00b3
                     00B5   357 _PMU0CF	=	0x00b5
                     00B6   358 _FLSCL	=	0x00b6
                     00B7   359 _FLKEY	=	0x00b7
                     00B8   360 _IP	=	0x00b8
                     00B9   361 _IREF0CN	=	0x00b9
                     00BA   362 _ADC0AC	=	0x00ba
                     00BA   363 _ADC0PWR	=	0x00ba
                     00BB   364 _ADC0MX	=	0x00bb
                     00BC   365 _ADC0CF	=	0x00bc
                     00BD   366 _ADC0TK	=	0x00bd
                     00BD   367 _ADC0L	=	0x00bd
                     00BE   368 _ADC0H	=	0x00be
                     00BF   369 _P1MASK	=	0x00bf
                     00C0   370 _SMB0CN	=	0x00c0
                     00C1   371 _SMB0CF	=	0x00c1
                     00C2   372 _SMB0DAT	=	0x00c2
                     00C3   373 _ADC0GTL	=	0x00c3
                     00C4   374 _ADC0GTH	=	0x00c4
                     00C5   375 _ADC0LTL	=	0x00c5
                     00C6   376 _ADC0LTH	=	0x00c6
                     00C7   377 _P0MASK	=	0x00c7
                     00C8   378 _TMR2CN	=	0x00c8
                     00C9   379 _REG0CN	=	0x00c9
                     00CA   380 _TMR2RLL	=	0x00ca
                     00CB   381 _TMR2RLH	=	0x00cb
                     00CC   382 _TMR2L	=	0x00cc
                     00CD   383 _TMR2H	=	0x00cd
                     00CE   384 _PCA0CPM5	=	0x00ce
                     00CF   385 _P1MAT	=	0x00cf
                     00D0   386 _PSW	=	0x00d0
                     00D1   387 _REF0CN	=	0x00d1
                     00D2   388 _PCA0CPL5	=	0x00d2
                     00D3   389 _PCA0CPH5	=	0x00d3
                     00D4   390 _P0SKIP	=	0x00d4
                     00D5   391 _P1SKIP	=	0x00d5
                     00D6   392 _P2SKIP	=	0x00d6
                     00D7   393 _P0MAT	=	0x00d7
                     00D8   394 _PCA0CN	=	0x00d8
                     00D9   395 _PCA0MD	=	0x00d9
                     00DA   396 _PCA0CPM0	=	0x00da
                     00DB   397 _PCA0CPM1	=	0x00db
                     00DC   398 _PCA0CPM2	=	0x00dc
                     00DD   399 _PCA0CPM3	=	0x00dd
                     00DE   400 _PCA0CPM4	=	0x00de
                     00DF   401 _PCA0PWM	=	0x00df
                     00E0   402 _ACC	=	0x00e0
                     00E1   403 _XBR0	=	0x00e1
                     00E2   404 _XBR1	=	0x00e2
                     00E3   405 _XBR2	=	0x00e3
                     00E4   406 _IT01CF	=	0x00e4
                     00E5   407 _FLWR	=	0x00e5
                     00E6   408 _EIE1	=	0x00e6
                     00E7   409 _EIE2	=	0x00e7
                     00E8   410 _ADC0CN	=	0x00e8
                     00E9   411 _PCA0CPL1	=	0x00e9
                     00EA   412 _PCA0CPH1	=	0x00ea
                     00EB   413 _PCA0CPL2	=	0x00eb
                     00EC   414 _PCA0CPH2	=	0x00ec
                     00ED   415 _PCA0CPL3	=	0x00ed
                     00EE   416 _PCA0CPH3	=	0x00ee
                     00EF   417 _RSTSRC	=	0x00ef
                     00F0   418 _B	=	0x00f0
                     00F1   419 _P0MDIN	=	0x00f1
                     00F2   420 _P1MDIN	=	0x00f2
                     00F3   421 _P2MDIN	=	0x00f3
                     00F4   422 _SMB0ADR	=	0x00f4
                     00F5   423 _SMB0ADM	=	0x00f5
                     00F6   424 _EIP1	=	0x00f6
                     00F7   425 _EIP2	=	0x00f7
                     00F8   426 _SPI0CN	=	0x00f8
                     00F9   427 _PCA0L	=	0x00f9
                     00FA   428 _PCA0H	=	0x00fa
                     00FB   429 _PCA0CPL0	=	0x00fb
                     00FC   430 _PCA0CPH0	=	0x00fc
                     00FD   431 _PCA0CPL4	=	0x00fd
                     00FE   432 _PCA0CPH4	=	0x00fe
                     00FF   433 _VDM0CN	=	0x00ff
                     8382   434 _DP	=	0x8382
                     8685   435 _TOFF	=	0x8685
                     9392   436 _TMR3RL	=	0x9392
                     9594   437 _TMR3	=	0x9594
                     BEBD   438 _ADC0	=	0xbebd
                     C4C3   439 _ADC0GT	=	0xc4c3
                     C6C5   440 _ADC0LT	=	0xc6c5
                     CBCA   441 _TMR2RL	=	0xcbca
                     CDCC   442 _TMR2	=	0xcdcc
                     D3D2   443 _PCA0CP5	=	0xd3d2
                     EAE9   444 _PCA0CP1	=	0xeae9
                     ECEB   445 _PCA0CP2	=	0xeceb
                     EEED   446 _PCA0CP3	=	0xeeed
                     FAF9   447 _PCA0	=	0xfaf9
                     FCFB   448 _PCA0CP0	=	0xfcfb
                     FEFD   449 _PCA0CP4	=	0xfefd
                            450 ;--------------------------------------------------------
                            451 ; special function bits
                            452 ;--------------------------------------------------------
                            453 	.area RSEG    (ABS,DATA)
   0000                     454 	.org 0x0000
                     008F   455 _TF1	=	0x008f
                     008E   456 _TR1	=	0x008e
                     008D   457 _TF0	=	0x008d
                     008C   458 _TR0	=	0x008c
                     008B   459 _IE1	=	0x008b
                     008A   460 _IT1	=	0x008a
                     0089   461 _IE0	=	0x0089
                     0088   462 _IT0	=	0x0088
                     0096   463 _CRC0SEL	=	0x0096
                     0095   464 _CRC0INIT	=	0x0095
                     0094   465 _CRC0VAL	=	0x0094
                     009F   466 _S0MODE	=	0x009f
                     009D   467 _MCE0	=	0x009d
                     009C   468 _REN0	=	0x009c
                     009B   469 _TB80	=	0x009b
                     009A   470 _RB80	=	0x009a
                     0099   471 _TI0	=	0x0099
                     0098   472 _RI0	=	0x0098
                     00AF   473 _EA	=	0x00af
                     00AE   474 _ESPI0	=	0x00ae
                     00AD   475 _ET2	=	0x00ad
                     00AC   476 _ES0	=	0x00ac
                     00AB   477 _ET1	=	0x00ab
                     00AA   478 _EX1	=	0x00aa
                     00A9   479 _ET0	=	0x00a9
                     00A8   480 _EX0	=	0x00a8
                     00B7   481 _SPIF1	=	0x00b7
                     00B6   482 _WCOL1	=	0x00b6
                     00B5   483 _MODF1	=	0x00b5
                     00B4   484 _RXOVRN1	=	0x00b4
                     00B3   485 _NSS1MD1	=	0x00b3
                     00B2   486 _NSS1MD0	=	0x00b2
                     00B1   487 _TXBMT1	=	0x00b1
                     00B0   488 _SPI1EN	=	0x00b0
                     00BE   489 _PSPI0	=	0x00be
                     00BD   490 _PT2	=	0x00bd
                     00BC   491 _PS0	=	0x00bc
                     00BB   492 _PT1	=	0x00bb
                     00BA   493 _PX1	=	0x00ba
                     00B9   494 _PT0	=	0x00b9
                     00B8   495 _PX0	=	0x00b8
                     00C7   496 _MASTER	=	0x00c7
                     00C6   497 _TXMODE	=	0x00c6
                     00C5   498 _STA	=	0x00c5
                     00C4   499 _STO	=	0x00c4
                     00C3   500 _ACKRQ	=	0x00c3
                     00C2   501 _ARBLOST	=	0x00c2
                     00C1   502 _ACK	=	0x00c1
                     00C0   503 _SI	=	0x00c0
                     00CF   504 _TF2H	=	0x00cf
                     00CE   505 _TF2L	=	0x00ce
                     00CD   506 _TF2LEN	=	0x00cd
                     00CC   507 _TF2CEN	=	0x00cc
                     00CB   508 _T2SPLIT	=	0x00cb
                     00CA   509 _TR2	=	0x00ca
                     00C9   510 _T2RCLK	=	0x00c9
                     00C8   511 _T2XCLK	=	0x00c8
                     00D7   512 _CY	=	0x00d7
                     00D6   513 _AC	=	0x00d6
                     00D5   514 _F0	=	0x00d5
                     00D4   515 _RS1	=	0x00d4
                     00D3   516 _RS0	=	0x00d3
                     00D2   517 _OV	=	0x00d2
                     00D1   518 _F1	=	0x00d1
                     00D0   519 _P	=	0x00d0
                     00DF   520 _CF	=	0x00df
                     00DE   521 _CR	=	0x00de
                     00DD   522 _CCF5	=	0x00dd
                     00DC   523 _CCF4	=	0x00dc
                     00DB   524 _CCF3	=	0x00db
                     00DA   525 _CCF2	=	0x00da
                     00D9   526 _CCF1	=	0x00d9
                     00D8   527 _CCF0	=	0x00d8
                     00EF   528 _AD0EN	=	0x00ef
                     00EE   529 _BURSTEN	=	0x00ee
                     00ED   530 _AD0INT	=	0x00ed
                     00EC   531 _AD0BUSY	=	0x00ec
                     00EB   532 _AD0WINT	=	0x00eb
                     00EA   533 _AD0CM2	=	0x00ea
                     00E9   534 _AD0CM1	=	0x00e9
                     00E8   535 _AD0CM0	=	0x00e8
                     00FF   536 _SPIF0	=	0x00ff
                     00FE   537 _WCOL0	=	0x00fe
                     00FD   538 _MODF0	=	0x00fd
                     00FC   539 _RXOVRN0	=	0x00fc
                     00FB   540 _NSS0MD1	=	0x00fb
                     00FA   541 _NSS0MD0	=	0x00fa
                     00F9   542 _TXBMT0	=	0x00f9
                     00F8   543 _SPI0EN	=	0x00f8
                     00A0   544 _LED_RED	=	0x00a0
                     00A5   545 _LED_GREEN	=	0x00a5
                     0086   546 _BUTTON_ENTER	=	0x0086
                     0095   547 _BUTTON_UP	=	0x0095
                     0096   548 _BUTTON_DOWN	=	0x0096
                     0087   549 _IRQ	=	0x0087
                     0094   550 _NSS1	=	0x0094
                     00A6   551 _SDN	=	0x00a6
                            552 ;--------------------------------------------------------
                            553 ; overlayable register banks
                            554 ;--------------------------------------------------------
                            555 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     556 	.ds 8
                            557 ;--------------------------------------------------------
                            558 ; internal ram data
                            559 ;--------------------------------------------------------
                            560 	.area DSEG    (DATA)
   0000                     561 _mavlink_frame_slen_1_138:
   0000                     562 	.ds 2
   0002                     563 _mavlink_frame_c_2_139:
   0002                     564 	.ds 1
   0003                     565 _mavlink_frame_sloc0_1_0:
   0003                     566 	.ds 1
   0004                     567 _mavlink_frame_sloc1_1_0:
   0004                     568 	.ds 2
   0006                     569 _packet_get_next_max_xmit_1_143:
   0006                     570 	.ds 1
   0007                     571 _packet_get_next_slen_1_144:
   0007                     572 	.ds 2
   0009                     573 _packet_get_next_sloc0_1_0:
   0009                     574 	.ds 2
                            575 ;--------------------------------------------------------
                            576 ; overlayable items in internal ram 
                            577 ;--------------------------------------------------------
                            578 ;--------------------------------------------------------
                            579 ; indirectly addressable internal ram data
                            580 ;--------------------------------------------------------
                            581 	.area ISEG    (DATA)
                            582 ;--------------------------------------------------------
                            583 ; absolute internal ram data
                            584 ;--------------------------------------------------------
                            585 	.area IABS    (ABS,DATA)
                            586 	.area IABS    (ABS,DATA)
                            587 ;--------------------------------------------------------
                            588 ; bit data
                            589 ;--------------------------------------------------------
                            590 	.area BSEG    (BIT)
   0000                     591 _last_sent_is_resend:
   0000                     592 	.ds 1
   0001                     593 _last_sent_is_injected:
   0001                     594 	.ds 1
   0002                     595 _last_recv_is_resend:
   0002                     596 	.ds 1
   0003                     597 _force_resend:
   0003                     598 	.ds 1
   0004                     599 _injected_packet:
   0004                     600 	.ds 1
   0005                     601 _seen_mavlink::
   0005                     602 	.ds 1
   0006                     603 _using_mavlink_10::
   0006                     604 	.ds 1
   0007                     605 _packet_is_duplicate_PARM_3:
   0007                     606 	.ds 1
                            607 ;--------------------------------------------------------
                            608 ; paged external ram data
                            609 ;--------------------------------------------------------
                            610 	.area PSEG    (PAG,XDATA)
   0000                     611 _last_sent_len:
   0000                     612 	.ds 1
   0001                     613 _last_recv_len:
   0001                     614 	.ds 1
   0002                     615 _serial_rate:
   0002                     616 	.ds 2
   0004                     617 _mav_pkt_len:
   0004                     618 	.ds 1
   0005                     619 _mav_pkt_start_time:
   0005                     620 	.ds 2
   0007                     621 _mav_pkt_max_time:
   0007                     622 	.ds 2
   0009                     623 _mav_max_xmit:
   0009                     624 	.ds 1
   000A                     625 _mavlink_frame_PARM_2:
   000A                     626 	.ds 2
   000C                     627 _packet_get_next_PARM_2:
   000C                     628 	.ds 2
   000E                     629 _packet_is_duplicate_PARM_2:
   000E                     630 	.ds 2
   0010                     631 _packet_inject_PARM_2:
   0010                     632 	.ds 1
                            633 ;--------------------------------------------------------
                            634 ; external ram data
                            635 ;--------------------------------------------------------
                            636 	.area XSEG    (XDATA)
   0000                     637 _last_received:
   0000                     638 	.ds 252
   00FC                     639 _last_sent:
   00FC                     640 	.ds 252
   01F8                     641 _mavlink_frame_max_xmit_1_137:
   01F8                     642 	.ds 1
   01F9                     643 _packet_set_max_xmit_max_1_175:
   01F9                     644 	.ds 1
   01FA                     645 _packet_set_serial_speed_speed_1_177:
   01FA                     646 	.ds 2
   01FC                     647 _packet_is_duplicate_len_1_179:
   01FC                     648 	.ds 1
                            649 ;--------------------------------------------------------
                            650 ; absolute external ram data
                            651 ;--------------------------------------------------------
                            652 	.area XABS    (ABS,XDATA)
                            653 ;--------------------------------------------------------
                            654 ; external initialized ram data
                            655 ;--------------------------------------------------------
                            656 	.area XISEG   (XDATA)
                            657 	.area HOME    (CODE)
                            658 	.area GSINIT0 (CODE)
                            659 	.area GSINIT1 (CODE)
                            660 	.area GSINIT2 (CODE)
                            661 	.area GSINIT3 (CODE)
                            662 	.area GSINIT4 (CODE)
                            663 	.area GSINIT5 (CODE)
                            664 	.area GSINIT  (CODE)
                            665 	.area GSFINAL (CODE)
                            666 	.area CSEG    (CODE)
                            667 ;--------------------------------------------------------
                            668 ; global & static initialisations
                            669 ;--------------------------------------------------------
                            670 	.area HOME    (CODE)
                            671 	.area GSINIT  (CODE)
                            672 	.area GSFINAL (CODE)
                            673 	.area GSINIT  (CODE)
                            674 ;--------------------------------------------------------
                            675 ; Home
                            676 ;--------------------------------------------------------
                            677 	.area HOME    (CODE)
                            678 	.area HOME    (CODE)
                            679 ;--------------------------------------------------------
                            680 ; code
                            681 ;--------------------------------------------------------
                            682 	.area CSEG    (CODE)
                            683 ;------------------------------------------------------------
                            684 ;Allocation info for local variables in function 'check_heartbeat'
                            685 ;------------------------------------------------------------
                            686 ;	radio/packet.c:81: static void check_heartbeat(__xdata uint8_t * __pdata buf)
                            687 ;	-----------------------------------------
                            688 ;	 function check_heartbeat
                            689 ;	-----------------------------------------
   0000                     690 _check_heartbeat:
                     0007   691 	ar7 = 0x07
                     0006   692 	ar6 = 0x06
                     0005   693 	ar5 = 0x05
                     0004   694 	ar4 = 0x04
                     0003   695 	ar3 = 0x03
                     0002   696 	ar2 = 0x02
                     0001   697 	ar1 = 0x01
                     0000   698 	ar0 = 0x00
                            699 ;	radio/packet.c:83: if (buf[0] == MAVLINK09_STX &&
   0000 AE 82         [24]  700 	mov	r6,dpl
   0002 AF 83         [24]  701 	mov  r7,dph
   0004 E0            [24]  702 	movx	a,@dptr
   0005 FD            [12]  703 	mov	r5,a
   0006 BD 55 1D      [24]  704 	cjne	r5,#0x55,00106$
                            705 ;	radio/packet.c:84: buf[1] == 3 && buf[5] == 0) {
   0009 8E 82         [24]  706 	mov	dpl,r6
   000B 8F 83         [24]  707 	mov	dph,r7
   000D A3            [24]  708 	inc	dptr
   000E E0            [24]  709 	movx	a,@dptr
   000F FC            [12]  710 	mov	r4,a
   0010 BC 03 13      [24]  711 	cjne	r4,#0x03,00106$
   0013 74 05         [12]  712 	mov	a,#0x05
   0015 2E            [12]  713 	add	a,r6
   0016 FB            [12]  714 	mov	r3,a
   0017 E4            [12]  715 	clr	a
   0018 3F            [12]  716 	addc	a,r7
   0019 FC            [12]  717 	mov	r4,a
   001A 8B 82         [24]  718 	mov	dpl,r3
   001C 8C 83         [24]  719 	mov	dph,r4
   001E E0            [24]  720 	movx	a,@dptr
   001F 70 05         [24]  721 	jnz	00106$
                            722 ;	radio/packet.c:86: using_mavlink_10 = false;
   0021 C2*06         [12]  723 	clr	_using_mavlink_10
                            724 ;	radio/packet.c:87: seen_mavlink = true;
   0023 D2*05         [12]  725 	setb	_seen_mavlink
   0025 22            [24]  726 	ret
   0026                     727 00106$:
                            728 ;	radio/packet.c:88: } else if (buf[0] == MAVLINK10_STX &&
   0026 BD FE 1C      [24]  729 	cjne	r5,#0xFE,00110$
                            730 ;	radio/packet.c:89: buf[1] == 9 && buf[5] == 0) {
   0029 8E 82         [24]  731 	mov	dpl,r6
   002B 8F 83         [24]  732 	mov	dph,r7
   002D A3            [24]  733 	inc	dptr
   002E E0            [24]  734 	movx	a,@dptr
   002F FD            [12]  735 	mov	r5,a
   0030 BD 09 12      [24]  736 	cjne	r5,#0x09,00110$
   0033 74 05         [12]  737 	mov	a,#0x05
   0035 2E            [12]  738 	add	a,r6
   0036 FE            [12]  739 	mov	r6,a
   0037 E4            [12]  740 	clr	a
   0038 3F            [12]  741 	addc	a,r7
   0039 FF            [12]  742 	mov	r7,a
   003A 8E 82         [24]  743 	mov	dpl,r6
   003C 8F 83         [24]  744 	mov	dph,r7
   003E E0            [24]  745 	movx	a,@dptr
   003F 70 04         [24]  746 	jnz	00110$
                            747 ;	radio/packet.c:91: using_mavlink_10 = true;
   0041 D2*06         [12]  748 	setb	_using_mavlink_10
                            749 ;	radio/packet.c:92: seen_mavlink = true;
   0043 D2*05         [12]  750 	setb	_seen_mavlink
   0045                     751 00110$:
   0045 22            [24]  752 	ret
                            753 ;------------------------------------------------------------
                            754 ;Allocation info for local variables in function 'mavlink_frame'
                            755 ;------------------------------------------------------------
                            756 ;slen                      Allocated with name '_mavlink_frame_slen_1_138'
                            757 ;c                         Allocated with name '_mavlink_frame_c_2_139'
                            758 ;sloc0                     Allocated with name '_mavlink_frame_sloc0_1_0'
                            759 ;sloc1                     Allocated with name '_mavlink_frame_sloc1_1_0'
                            760 ;max_xmit                  Allocated with name '_mavlink_frame_max_xmit_1_137'
                            761 ;------------------------------------------------------------
                            762 ;	radio/packet.c:99: uint8_t mavlink_frame(uint8_t max_xmit, __xdata uint8_t * __pdata buf)
                            763 ;	-----------------------------------------
                            764 ;	 function mavlink_frame
                            765 ;	-----------------------------------------
   0046                     766 _mavlink_frame:
   0046 E5 82         [12]  767 	mov	a,dpl
   0048 90r01rF8      [24]  768 	mov	dptr,#_mavlink_frame_max_xmit_1_137
   004B F0            [24]  769 	movx	@dptr,a
                            770 ;	radio/packet.c:103: serial_read_buf(last_sent, mav_pkt_len);
   004C 78r04         [12]  771 	mov	r0,#_mav_pkt_len
   004E 79r00         [12]  772 	mov	r1,#_serial_read_buf_PARM_2
   0050 E2            [24]  773 	movx	a,@r0
   0051 F3            [24]  774 	movx	@r1,a
   0052 90r00rFC      [24]  775 	mov	dptr,#_last_sent
   0055 12r00r00      [24]  776 	lcall	_serial_read_buf
                            777 ;	radio/packet.c:104: last_sent_len = mav_pkt_len;
   0058 78r04         [12]  778 	mov	r0,#_mav_pkt_len
   005A E2            [24]  779 	movx	a,@r0
   005B FF            [12]  780 	mov	r7,a
   005C 78r00         [12]  781 	mov	r0,#_last_sent_len
   005E F2            [24]  782 	movx	@r0,a
                            783 ;	radio/packet.c:105: memcpy(buf, last_sent, last_sent_len);
   005F 78r0A         [12]  784 	mov	r0,#_mavlink_frame_PARM_2
   0061 E2            [24]  785 	movx	a,@r0
   0062 FC            [12]  786 	mov	r4,a
   0063 08            [12]  787 	inc	r0
   0064 E2            [24]  788 	movx	a,@r0
   0065 FD            [12]  789 	mov	r5,a
   0066 7E 00         [12]  790 	mov	r6,#0x00
   0068 90r00r00      [24]  791 	mov	dptr,#_memcpy_PARM_2
   006B 74rFC         [12]  792 	mov	a,#_last_sent
   006D F0            [24]  793 	movx	@dptr,a
   006E 74s00         [12]  794 	mov	a,#(_last_sent >> 8)
   0070 A3            [24]  795 	inc	dptr
   0071 F0            [24]  796 	movx	@dptr,a
   0072 E4            [12]  797 	clr	a
   0073 A3            [24]  798 	inc	dptr
   0074 F0            [24]  799 	movx	@dptr,a
   0075 90r00r00      [24]  800 	mov	dptr,#_memcpy_PARM_3
   0078 EF            [12]  801 	mov	a,r7
   0079 F0            [24]  802 	movx	@dptr,a
   007A E4            [12]  803 	clr	a
   007B A3            [24]  804 	inc	dptr
   007C F0            [24]  805 	movx	@dptr,a
   007D 8C 82         [24]  806 	mov	dpl,r4
   007F 8D 83         [24]  807 	mov	dph,r5
   0081 8E F0         [24]  808 	mov	b,r6
   0083 12r00r00      [24]  809 	lcall	_memcpy
                            810 ;	radio/packet.c:106: mav_pkt_len = 0;
   0086 78r04         [12]  811 	mov	r0,#_mav_pkt_len
   0088 E4            [12]  812 	clr	a
   0089 F2            [24]  813 	movx	@r0,a
                            814 ;	radio/packet.c:108: check_heartbeat(buf);
   008A 78r0A         [12]  815 	mov	r0,#_mavlink_frame_PARM_2
   008C E2            [24]  816 	movx	a,@r0
   008D F5 82         [12]  817 	mov	dpl,a
   008F 08            [12]  818 	inc	r0
   0090 E2            [24]  819 	movx	a,@r0
   0091 F5 83         [12]  820 	mov	dph,a
   0093 12r00r00      [24]  821 	lcall	_check_heartbeat
                            822 ;	radio/packet.c:110: slen = serial_read_available();
   0096 12r00r00      [24]  823 	lcall	_serial_read_available
   0099 85 82*00      [24]  824 	mov	_mavlink_frame_slen_1_138,dpl
   009C 85 83*01      [24]  825 	mov	(_mavlink_frame_slen_1_138 + 1),dph
                            826 ;	radio/packet.c:114: while (slen >= 8) {
   009F 90r01rF8      [24]  827 	mov	dptr,#_mavlink_frame_max_xmit_1_137
   00A2 E0            [24]  828 	movx	a,@dptr
   00A3 F5*03         [12]  829 	mov	_mavlink_frame_sloc0_1_0,a
   00A5                     830 00109$:
   00A5 C3            [12]  831 	clr	c
   00A6 E5*00         [12]  832 	mov	a,_mavlink_frame_slen_1_138
   00A8 94 08         [12]  833 	subb	a,#0x08
   00AA E5*01         [12]  834 	mov	a,(_mavlink_frame_slen_1_138 + 1)
   00AC 94 00         [12]  835 	subb	a,#0x00
   00AE 50 03         [24]  836 	jnc	00135$
   00B0 02r01rA5      [24]  837 	ljmp	00111$
   00B3                     838 00135$:
                            839 ;	radio/packet.c:115: register uint8_t c = serial_peek();
   00B3 12r00r00      [24]  840 	lcall	_serial_peek
   00B6 85 82*02      [24]  841 	mov	_mavlink_frame_c_2_139,dpl
                            842 ;	radio/packet.c:116: if (c != MAVLINK09_STX && c != MAVLINK10_STX) {
   00B9 74 55         [12]  843 	mov	a,#0x55
   00BB B5*02 02      [24]  844 	cjne	a,_mavlink_frame_c_2_139,00136$
   00BE 80 0D         [24]  845 	sjmp	00102$
   00C0                     846 00136$:
   00C0 74 FE         [12]  847 	mov	a,#0xFE
   00C2 B5*02 02      [24]  848 	cjne	a,_mavlink_frame_c_2_139,00137$
   00C5 80 06         [24]  849 	sjmp	00102$
   00C7                     850 00137$:
                            851 ;	radio/packet.c:118: return last_sent_len;			
   00C7 78r00         [12]  852 	mov	r0,#_last_sent_len
   00C9 E2            [24]  853 	movx	a,@r0
   00CA F5 82         [12]  854 	mov	dpl,a
   00CC 22            [24]  855 	ret
   00CD                     856 00102$:
                            857 ;	radio/packet.c:120: c = serial_peek2();
   00CD 12r00r00      [24]  858 	lcall	_serial_peek2
   00D0 85 82*02      [24]  859 	mov	_mavlink_frame_c_2_139,dpl
                            860 ;	radio/packet.c:121: if (c >= 255 - 8 || 
   00D3 74 09         [12]  861 	mov	a,#0x100 - 0xF7
   00D5 25*02         [12]  862 	add	a,_mavlink_frame_c_2_139
   00D7 50 03         [24]  863 	jnc	00138$
   00D9 02r01rA5      [24]  864 	ljmp	00111$
   00DC                     865 00138$:
                            866 ;	radio/packet.c:122: c+8 > max_xmit - last_sent_len) {
   00DC AA*02         [24]  867 	mov	r2,_mavlink_frame_c_2_139
   00DE 7B 00         [12]  868 	mov	r3,#0x00
   00E0 74 08         [12]  869 	mov	a,#0x08
   00E2 2A            [12]  870 	add	a,r2
   00E3 FE            [12]  871 	mov	r6,a
   00E4 E4            [12]  872 	clr	a
   00E5 3B            [12]  873 	addc	a,r3
   00E6 FF            [12]  874 	mov	r7,a
   00E7 85*03*04      [24]  875 	mov	_mavlink_frame_sloc1_1_0,_mavlink_frame_sloc0_1_0
   00EA 75*05 00      [24]  876 	mov	(_mavlink_frame_sloc1_1_0 + 1),#0x00
   00ED 78r00         [12]  877 	mov	r0,#_last_sent_len
   00EF E2            [24]  878 	movx	a,@r0
   00F0 FC            [12]  879 	mov	r4,a
   00F1 7D 00         [12]  880 	mov	r5,#0x00
   00F3 E5*04         [12]  881 	mov	a,_mavlink_frame_sloc1_1_0
   00F5 C3            [12]  882 	clr	c
   00F6 9C            [12]  883 	subb	a,r4
   00F7 FC            [12]  884 	mov	r4,a
   00F8 E5*05         [12]  885 	mov	a,(_mavlink_frame_sloc1_1_0 + 1)
   00FA 9D            [12]  886 	subb	a,r5
   00FB FD            [12]  887 	mov	r5,a
   00FC C3            [12]  888 	clr	c
   00FD EC            [12]  889 	mov	a,r4
   00FE 9E            [12]  890 	subb	a,r6
   00FF ED            [12]  891 	mov	a,r5
   0100 64 80         [12]  892 	xrl	a,#0x80
   0102 8F F0         [24]  893 	mov	b,r7
   0104 63 F0 80      [24]  894 	xrl	b,#0x80
   0107 95 F0         [12]  895 	subb	a,b
   0109 50 03         [24]  896 	jnc	00139$
   010B 02r01rA5      [24]  897 	ljmp	00111$
   010E                     898 00139$:
                            899 ;	radio/packet.c:126: if (c+8 > slen) {
   010E 74 08         [12]  900 	mov	a,#0x08
   0110 2A            [12]  901 	add	a,r2
   0111 FA            [12]  902 	mov	r2,a
   0112 E4            [12]  903 	clr	a
   0113 3B            [12]  904 	addc	a,r3
   0114 FB            [12]  905 	mov	r3,a
   0115 C3            [12]  906 	clr	c
   0116 E5*00         [12]  907 	mov	a,_mavlink_frame_slen_1_138
   0118 9A            [12]  908 	subb	a,r2
   0119 E5*01         [12]  909 	mov	a,(_mavlink_frame_slen_1_138 + 1)
   011B 9B            [12]  910 	subb	a,r3
   011C 50 03         [24]  911 	jnc	00140$
   011E 02r01rA5      [24]  912 	ljmp	00111$
   0121                     913 00140$:
                            914 ;	radio/packet.c:132: c += 8;
   0121 74 08         [12]  915 	mov	a,#0x08
   0123 25*02         [12]  916 	add	a,_mavlink_frame_c_2_139
   0125 F5*02         [12]  917 	mov	_mavlink_frame_c_2_139,a
                            918 ;	radio/packet.c:135: serial_read_buf(&last_sent[last_sent_len], c);
   0127 78r00         [12]  919 	mov	r0,#_last_sent_len
   0129 E2            [24]  920 	movx	a,@r0
   012A 24rFC         [12]  921 	add	a,#_last_sent
   012C FE            [12]  922 	mov	r6,a
   012D E4            [12]  923 	clr	a
   012E 34s00         [12]  924 	addc	a,#(_last_sent >> 8)
   0130 FF            [12]  925 	mov	r7,a
   0131 78r00         [12]  926 	mov	r0,#_serial_read_buf_PARM_2
   0133 E5*02         [12]  927 	mov	a,_mavlink_frame_c_2_139
   0135 F2            [24]  928 	movx	@r0,a
   0136 8E 82         [24]  929 	mov	dpl,r6
   0138 8F 83         [24]  930 	mov	dph,r7
   013A 12r00r00      [24]  931 	lcall	_serial_read_buf
                            932 ;	radio/packet.c:136: memcpy(&buf[last_sent_len], &last_sent[last_sent_len], c);
   013D 78r0A         [12]  933 	mov	r0,#_mavlink_frame_PARM_2
   013F 79r00         [12]  934 	mov	r1,#_last_sent_len
   0141 E3            [24]  935 	movx	a,@r1
   0142 C5 F0         [12]  936 	xch	a,b
   0144 E2            [24]  937 	movx	a,@r0
   0145 25 F0         [12]  938 	add	a,b
   0147 FE            [12]  939 	mov	r6,a
   0148 08            [12]  940 	inc	r0
   0149 E2            [24]  941 	movx	a,@r0
   014A 34 00         [12]  942 	addc	a,#0x00
   014C FF            [12]  943 	mov	r7,a
   014D 7D 00         [12]  944 	mov	r5,#0x00
   014F 78r00         [12]  945 	mov	r0,#_last_sent_len
   0151 E2            [24]  946 	movx	a,@r0
   0152 24rFC         [12]  947 	add	a,#_last_sent
   0154 FB            [12]  948 	mov	r3,a
   0155 E4            [12]  949 	clr	a
   0156 34s00         [12]  950 	addc	a,#(_last_sent >> 8)
   0158 FC            [12]  951 	mov	r4,a
   0159 90r00r00      [24]  952 	mov	dptr,#_memcpy_PARM_2
   015C EB            [12]  953 	mov	a,r3
   015D F0            [24]  954 	movx	@dptr,a
   015E EC            [12]  955 	mov	a,r4
   015F A3            [24]  956 	inc	dptr
   0160 F0            [24]  957 	movx	@dptr,a
   0161 E4            [12]  958 	clr	a
   0162 A3            [24]  959 	inc	dptr
   0163 F0            [24]  960 	movx	@dptr,a
   0164 90r00r00      [24]  961 	mov	dptr,#_memcpy_PARM_3
   0167 E5*02         [12]  962 	mov	a,_mavlink_frame_c_2_139
   0169 F0            [24]  963 	movx	@dptr,a
   016A E4            [12]  964 	clr	a
   016B A3            [24]  965 	inc	dptr
   016C F0            [24]  966 	movx	@dptr,a
   016D 8E 82         [24]  967 	mov	dpl,r6
   016F 8F 83         [24]  968 	mov	dph,r7
   0171 8D F0         [24]  969 	mov	b,r5
   0173 12r00r00      [24]  970 	lcall	_memcpy
                            971 ;	radio/packet.c:138: check_heartbeat(buf+last_sent_len);
   0176 78r0A         [12]  972 	mov	r0,#_mavlink_frame_PARM_2
   0178 79r00         [12]  973 	mov	r1,#_last_sent_len
   017A E3            [24]  974 	movx	a,@r1
   017B C5 F0         [12]  975 	xch	a,b
   017D E2            [24]  976 	movx	a,@r0
   017E 25 F0         [12]  977 	add	a,b
   0180 FE            [12]  978 	mov	r6,a
   0181 08            [12]  979 	inc	r0
   0182 E2            [24]  980 	movx	a,@r0
   0183 34 00         [12]  981 	addc	a,#0x00
   0185 FF            [12]  982 	mov	r7,a
   0186 8E 82         [24]  983 	mov	dpl,r6
   0188 8F 83         [24]  984 	mov	dph,r7
   018A 12r00r00      [24]  985 	lcall	_check_heartbeat
                            986 ;	radio/packet.c:140: last_sent_len += c;
   018D 78r00         [12]  987 	mov	r0,#_last_sent_len
   018F E2            [24]  988 	movx	a,@r0
   0190 25*02         [12]  989 	add	a,_mavlink_frame_c_2_139
   0192 F2            [24]  990 	movx	@r0,a
                            991 ;	radio/packet.c:141: slen -= c;
   0193 AC*02         [24]  992 	mov	r4,_mavlink_frame_c_2_139
   0195 7F 00         [12]  993 	mov	r7,#0x00
   0197 E5*00         [12]  994 	mov	a,_mavlink_frame_slen_1_138
   0199 C3            [12]  995 	clr	c
   019A 9C            [12]  996 	subb	a,r4
   019B F5*00         [12]  997 	mov	_mavlink_frame_slen_1_138,a
   019D E5*01         [12]  998 	mov	a,(_mavlink_frame_slen_1_138 + 1)
   019F 9F            [12]  999 	subb	a,r7
   01A0 F5*01         [12] 1000 	mov	(_mavlink_frame_slen_1_138 + 1),a
   01A2 02r00rA5      [24] 1001 	ljmp	00109$
   01A5                    1002 00111$:
                           1003 ;	radio/packet.c:144: return last_sent_len;
   01A5 78r00         [12] 1004 	mov	r0,#_last_sent_len
   01A7 E2            [24] 1005 	movx	a,@r0
   01A8 F5 82         [12] 1006 	mov	dpl,a
   01AA 22            [24] 1007 	ret
                           1008 ;------------------------------------------------------------
                           1009 ;Allocation info for local variables in function 'packet_get_next'
                           1010 ;------------------------------------------------------------
                           1011 ;max_xmit                  Allocated with name '_packet_get_next_max_xmit_1_143'
                           1012 ;slen                      Allocated with name '_packet_get_next_slen_1_144'
                           1013 ;c                         Allocated to registers r7 
                           1014 ;sloc0                     Allocated with name '_packet_get_next_sloc0_1_0'
                           1015 ;------------------------------------------------------------
                           1016 ;	radio/packet.c:150: packet_get_next(register uint8_t max_xmit, __xdata uint8_t * __pdata buf)
                           1017 ;	-----------------------------------------
                           1018 ;	 function packet_get_next
                           1019 ;	-----------------------------------------
   01AB                    1020 _packet_get_next:
   01AB 85 82*06      [24] 1021 	mov	_packet_get_next_max_xmit_1_143,dpl
                           1022 ;	radio/packet.c:154: slen = serial_read_available();
   01AE 12r00r00      [24] 1023 	lcall	_serial_read_available
   01B1 85 82*07      [24] 1024 	mov	_packet_get_next_slen_1_144,dpl
   01B4 85 83*08      [24] 1025 	mov	(_packet_get_next_slen_1_144 + 1),dph
                           1026 ;	radio/packet.c:155: if (force_resend ||
   01B7 20*03 16      [24] 1027 	jb	_force_resend,00103$
                           1028 ;	radio/packet.c:156: (feature_opportunistic_resend &&
   01BA 30*00 65      [24] 1029 	jnb	_feature_opportunistic_resend,00104$
   01BD 20*00 62      [24] 1030 	jb	_last_sent_is_resend,00104$
                           1031 ;	radio/packet.c:158: last_sent_len != 0 && 
   01C0 78r00         [12] 1032 	mov	r0,#_last_sent_len
   01C2 E2            [24] 1033 	movx	a,@r0
   01C3 60 5D         [24] 1034 	jz	00104$
                           1035 ;	radio/packet.c:159: slen < PACKET_RESEND_THRESHOLD)) {
   01C5 C3            [12] 1036 	clr	c
   01C6 E5*07         [12] 1037 	mov	a,_packet_get_next_slen_1_144
   01C8 94 20         [12] 1038 	subb	a,#0x20
   01CA E5*08         [12] 1039 	mov	a,(_packet_get_next_slen_1_144 + 1)
   01CC 94 00         [12] 1040 	subb	a,#0x00
   01CE 50 52         [24] 1041 	jnc	00104$
   01D0                    1042 00103$:
                           1043 ;	radio/packet.c:160: if (max_xmit < last_sent_len) {
   01D0 78r00         [12] 1044 	mov	r0,#_last_sent_len
   01D2 C3            [12] 1045 	clr	c
   01D3 E2            [24] 1046 	movx	a,@r0
   01D4 F5 F0         [12] 1047 	mov	b,a
   01D6 E5*06         [12] 1048 	mov	a,_packet_get_next_max_xmit_1_143
   01D8 95 F0         [12] 1049 	subb	a,b
   01DA 50 08         [24] 1050 	jnc	00102$
                           1051 ;	radio/packet.c:161: last_sent_len = 0;
   01DC 78r00         [12] 1052 	mov	r0,#_last_sent_len
   01DE E4            [12] 1053 	clr	a
   01DF F2            [24] 1054 	movx	@r0,a
                           1055 ;	radio/packet.c:162: return 0;
   01E0 75 82 00      [24] 1056 	mov	dpl,#0x00
   01E3 22            [24] 1057 	ret
   01E4                    1058 00102$:
                           1059 ;	radio/packet.c:164: last_sent_is_resend = true;
   01E4 D2*00         [12] 1060 	setb	_last_sent_is_resend
                           1061 ;	radio/packet.c:165: force_resend = false;
   01E6 C2*03         [12] 1062 	clr	_force_resend
                           1063 ;	radio/packet.c:166: memcpy(buf, last_sent, last_sent_len);
   01E8 78r0C         [12] 1064 	mov	r0,#_packet_get_next_PARM_2
   01EA E2            [24] 1065 	movx	a,@r0
   01EB FA            [12] 1066 	mov	r2,a
   01EC 08            [12] 1067 	inc	r0
   01ED E2            [24] 1068 	movx	a,@r0
   01EE FB            [12] 1069 	mov	r3,a
   01EF 7C 00         [12] 1070 	mov	r4,#0x00
   01F1 90r00r00      [24] 1071 	mov	dptr,#_memcpy_PARM_2
   01F4 74rFC         [12] 1072 	mov	a,#_last_sent
   01F6 F0            [24] 1073 	movx	@dptr,a
   01F7 74s00         [12] 1074 	mov	a,#(_last_sent >> 8)
   01F9 A3            [24] 1075 	inc	dptr
   01FA F0            [24] 1076 	movx	@dptr,a
   01FB E4            [12] 1077 	clr	a
   01FC A3            [24] 1078 	inc	dptr
   01FD F0            [24] 1079 	movx	@dptr,a
   01FE 78r00         [12] 1080 	mov	r0,#_last_sent_len
   0200 90r00r00      [24] 1081 	mov	dptr,#_memcpy_PARM_3
   0203 E2            [24] 1082 	movx	a,@r0
   0204 F0            [24] 1083 	movx	@dptr,a
   0205 E4            [12] 1084 	clr	a
   0206 A3            [24] 1085 	inc	dptr
   0207 F0            [24] 1086 	movx	@dptr,a
   0208 8A 82         [24] 1087 	mov	dpl,r2
   020A 8B 83         [24] 1088 	mov	dph,r3
   020C 8C F0         [24] 1089 	mov	b,r4
   020E 12r00r00      [24] 1090 	lcall	_memcpy
                           1091 ;	radio/packet.c:167: slen = last_sent_len;
   0211 78r00         [12] 1092 	mov	r0,#_last_sent_len
   0213 E2            [24] 1093 	movx	a,@r0
   0214 F5*07         [12] 1094 	mov	_packet_get_next_slen_1_144,a
   0216 75*08 00      [24] 1095 	mov	(_packet_get_next_slen_1_144 + 1),#0x00
                           1096 ;	radio/packet.c:168: last_sent_len = 0;
   0219 78r00         [12] 1097 	mov	r0,#_last_sent_len
   021B E4            [12] 1098 	clr	a
   021C F2            [24] 1099 	movx	@r0,a
                           1100 ;	radio/packet.c:169: return (slen & 0xFF);
   021D AB*07         [24] 1101 	mov	r3,_packet_get_next_slen_1_144
   021F 8B 82         [24] 1102 	mov	dpl,r3
   0221 22            [24] 1103 	ret
   0222                    1104 00104$:
                           1105 ;	radio/packet.c:172: last_sent_is_resend = false;
   0222 C2*00         [12] 1106 	clr	_last_sent_is_resend
                           1107 ;	radio/packet.c:174: if (injected_packet) {
   0224 20*04 03      [24] 1108 	jb	_injected_packet,00241$
   0227 02r02rDB      [24] 1109 	ljmp	00112$
   022A                    1110 00241$:
                           1111 ;	radio/packet.c:176: slen = last_sent_len;
   022A 78r00         [12] 1112 	mov	r0,#_last_sent_len
   022C E2            [24] 1113 	movx	a,@r0
   022D FB            [12] 1114 	mov	r3,a
   022E 7C 00         [12] 1115 	mov	r4,#0x00
   0230 8B*07         [24] 1116 	mov	_packet_get_next_slen_1_144,r3
   0232 8C*08         [24] 1117 	mov	(_packet_get_next_slen_1_144 + 1),r4
                           1118 ;	radio/packet.c:177: if (max_xmit < slen) {
   0234 85*06*09      [24] 1119 	mov	_packet_get_next_sloc0_1_0,_packet_get_next_max_xmit_1_143
   0237 75*0A 00      [24] 1120 	mov	(_packet_get_next_sloc0_1_0 + 1),#0x00
   023A C3            [12] 1121 	clr	c
   023B E5*09         [12] 1122 	mov	a,_packet_get_next_sloc0_1_0
   023D 95*07         [12] 1123 	subb	a,_packet_get_next_slen_1_144
   023F E5*0A         [12] 1124 	mov	a,(_packet_get_next_sloc0_1_0 + 1)
   0241 95*08         [12] 1125 	subb	a,(_packet_get_next_slen_1_144 + 1)
   0243 50 65         [24] 1126 	jnc	00110$
                           1127 ;	radio/packet.c:179: memcpy(buf, last_sent, max_xmit);
   0245 78r0C         [12] 1128 	mov	r0,#_packet_get_next_PARM_2
   0247 E2            [24] 1129 	movx	a,@r0
   0248 FA            [12] 1130 	mov	r2,a
   0249 08            [12] 1131 	inc	r0
   024A E2            [24] 1132 	movx	a,@r0
   024B FE            [12] 1133 	mov	r6,a
   024C 7F 00         [12] 1134 	mov	r7,#0x00
   024E 90r00r00      [24] 1135 	mov	dptr,#_memcpy_PARM_2
   0251 74rFC         [12] 1136 	mov	a,#_last_sent
   0253 F0            [24] 1137 	movx	@dptr,a
   0254 74s00         [12] 1138 	mov	a,#(_last_sent >> 8)
   0256 A3            [24] 1139 	inc	dptr
   0257 F0            [24] 1140 	movx	@dptr,a
   0258 E4            [12] 1141 	clr	a
   0259 A3            [24] 1142 	inc	dptr
   025A F0            [24] 1143 	movx	@dptr,a
   025B 90r00r00      [24] 1144 	mov	dptr,#_memcpy_PARM_3
   025E E5*09         [12] 1145 	mov	a,_packet_get_next_sloc0_1_0
   0260 F0            [24] 1146 	movx	@dptr,a
   0261 E5*0A         [12] 1147 	mov	a,(_packet_get_next_sloc0_1_0 + 1)
   0263 A3            [24] 1148 	inc	dptr
   0264 F0            [24] 1149 	movx	@dptr,a
   0265 8A 82         [24] 1150 	mov	dpl,r2
   0267 8E 83         [24] 1151 	mov	dph,r6
   0269 8F F0         [24] 1152 	mov	b,r7
   026B 12r00r00      [24] 1153 	lcall	_memcpy
                           1154 ;	radio/packet.c:180: memcpy(last_sent, &last_sent[max_xmit], slen - max_xmit);
   026E E5*06         [12] 1155 	mov	a,_packet_get_next_max_xmit_1_143
   0270 24rFC         [12] 1156 	add	a,#_last_sent
   0272 FE            [12] 1157 	mov	r6,a
   0273 E4            [12] 1158 	clr	a
   0274 34s00         [12] 1159 	addc	a,#(_last_sent >> 8)
   0276 FF            [12] 1160 	mov	r7,a
   0277 90r00r00      [24] 1161 	mov	dptr,#_memcpy_PARM_2
   027A EE            [12] 1162 	mov	a,r6
   027B F0            [24] 1163 	movx	@dptr,a
   027C EF            [12] 1164 	mov	a,r7
   027D A3            [24] 1165 	inc	dptr
   027E F0            [24] 1166 	movx	@dptr,a
   027F E4            [12] 1167 	clr	a
   0280 A3            [24] 1168 	inc	dptr
   0281 F0            [24] 1169 	movx	@dptr,a
   0282 AE*06         [24] 1170 	mov	r6,_packet_get_next_max_xmit_1_143
   0284 7F 00         [12] 1171 	mov	r7,#0x00
   0286 90r00r00      [24] 1172 	mov	dptr,#_memcpy_PARM_3
   0289 E5*07         [12] 1173 	mov	a,_packet_get_next_slen_1_144
   028B C3            [12] 1174 	clr	c
   028C 9E            [12] 1175 	subb	a,r6
   028D F0            [24] 1176 	movx	@dptr,a
   028E E5*08         [12] 1177 	mov	a,(_packet_get_next_slen_1_144 + 1)
   0290 9F            [12] 1178 	subb	a,r7
   0291 A3            [24] 1179 	inc	dptr
   0292 F0            [24] 1180 	movx	@dptr,a
   0293 90r00rFC      [24] 1181 	mov	dptr,#_last_sent
   0296 75 F0 00      [24] 1182 	mov	b,#0x00
   0299 12r00r00      [24] 1183 	lcall	_memcpy
                           1184 ;	radio/packet.c:181: last_sent_len = slen - max_xmit;
   029C E5*07         [12] 1185 	mov	a,_packet_get_next_slen_1_144
   029E C3            [12] 1186 	clr	c
   029F 95*06         [12] 1187 	subb	a,_packet_get_next_max_xmit_1_143
   02A1 78r00         [12] 1188 	mov	r0,#_last_sent_len
   02A3 F2            [24] 1189 	movx	@r0,a
                           1190 ;	radio/packet.c:182: last_sent_is_injected = true;
   02A4 D2*01         [12] 1191 	setb	_last_sent_is_injected
                           1192 ;	radio/packet.c:183: return max_xmit;
   02A6 85*06 82      [24] 1193 	mov	dpl,_packet_get_next_max_xmit_1_143
   02A9 22            [24] 1194 	ret
   02AA                    1195 00110$:
                           1196 ;	radio/packet.c:186: memcpy(buf, last_sent, last_sent_len);
   02AA 78r0C         [12] 1197 	mov	r0,#_packet_get_next_PARM_2
   02AC E2            [24] 1198 	movx	a,@r0
   02AD FD            [12] 1199 	mov	r5,a
   02AE 08            [12] 1200 	inc	r0
   02AF E2            [24] 1201 	movx	a,@r0
   02B0 FE            [12] 1202 	mov	r6,a
   02B1 7F 00         [12] 1203 	mov	r7,#0x00
   02B3 90r00r00      [24] 1204 	mov	dptr,#_memcpy_PARM_2
   02B6 74rFC         [12] 1205 	mov	a,#_last_sent
   02B8 F0            [24] 1206 	movx	@dptr,a
   02B9 74s00         [12] 1207 	mov	a,#(_last_sent >> 8)
   02BB A3            [24] 1208 	inc	dptr
   02BC F0            [24] 1209 	movx	@dptr,a
   02BD E4            [12] 1210 	clr	a
   02BE A3            [24] 1211 	inc	dptr
   02BF F0            [24] 1212 	movx	@dptr,a
   02C0 90r00r00      [24] 1213 	mov	dptr,#_memcpy_PARM_3
   02C3 EB            [12] 1214 	mov	a,r3
   02C4 F0            [24] 1215 	movx	@dptr,a
   02C5 EC            [12] 1216 	mov	a,r4
   02C6 A3            [24] 1217 	inc	dptr
   02C7 F0            [24] 1218 	movx	@dptr,a
   02C8 8D 82         [24] 1219 	mov	dpl,r5
   02CA 8E 83         [24] 1220 	mov	dph,r6
   02CC 8F F0         [24] 1221 	mov	b,r7
   02CE 12r00r00      [24] 1222 	lcall	_memcpy
                           1223 ;	radio/packet.c:187: injected_packet = false;
   02D1 C2*04         [12] 1224 	clr	_injected_packet
                           1225 ;	radio/packet.c:188: last_sent_is_injected = true;
   02D3 D2*01         [12] 1226 	setb	_last_sent_is_injected
                           1227 ;	radio/packet.c:189: return last_sent_len;
   02D5 78r00         [12] 1228 	mov	r0,#_last_sent_len
   02D7 E2            [24] 1229 	movx	a,@r0
   02D8 F5 82         [12] 1230 	mov	dpl,a
   02DA 22            [24] 1231 	ret
   02DB                    1232 00112$:
                           1233 ;	radio/packet.c:192: last_sent_is_injected = false;
   02DB C2*01         [12] 1234 	clr	_last_sent_is_injected
                           1235 ;	radio/packet.c:196: if (slen > max_xmit) {
   02DD AE*06         [24] 1236 	mov	r6,_packet_get_next_max_xmit_1_143
   02DF 7F 00         [12] 1237 	mov	r7,#0x00
   02E1 C3            [12] 1238 	clr	c
   02E2 EE            [12] 1239 	mov	a,r6
   02E3 95*07         [12] 1240 	subb	a,_packet_get_next_slen_1_144
   02E5 EF            [12] 1241 	mov	a,r7
   02E6 95*08         [12] 1242 	subb	a,(_packet_get_next_slen_1_144 + 1)
   02E8 50 04         [24] 1243 	jnc	00114$
                           1244 ;	radio/packet.c:197: slen = max_xmit;
   02EA 8E*07         [24] 1245 	mov	_packet_get_next_slen_1_144,r6
   02EC 8F*08         [24] 1246 	mov	(_packet_get_next_slen_1_144 + 1),r7
   02EE                    1247 00114$:
                           1248 ;	radio/packet.c:200: last_sent_len = 0;
   02EE 78r00         [12] 1249 	mov	r0,#_last_sent_len
   02F0 E4            [12] 1250 	clr	a
   02F1 F2            [24] 1251 	movx	@r0,a
                           1252 ;	radio/packet.c:202: if (slen == 0) {
   02F2 E5*07         [12] 1253 	mov	a,_packet_get_next_slen_1_144
   02F4 45*08         [12] 1254 	orl	a,(_packet_get_next_slen_1_144 + 1)
                           1255 ;	radio/packet.c:204: return 0;
   02F6 70 03         [24] 1256 	jnz	00116$
   02F8 F5 82         [12] 1257 	mov	dpl,a
   02FA 22            [24] 1258 	ret
   02FB                    1259 00116$:
                           1260 ;	radio/packet.c:207: if (!feature_mavlink_framing) {
   02FB 20*00 53      [24] 1261 	jb	_feature_mavlink_framing,00122$
                           1262 ;	radio/packet.c:209: if (slen > 0 && serial_read_buf(buf, slen)) {
   02FE E5*07         [12] 1263 	mov	a,_packet_get_next_slen_1_144
   0300 45*08         [12] 1264 	orl	a,(_packet_get_next_slen_1_144 + 1)
   0302 60 43         [24] 1265 	jz	00118$
   0304 AD*07         [24] 1266 	mov	r5,_packet_get_next_slen_1_144
   0306 78r00         [12] 1267 	mov	r0,#_serial_read_buf_PARM_2
   0308 ED            [12] 1268 	mov	a,r5
   0309 F2            [24] 1269 	movx	@r0,a
   030A 78r0C         [12] 1270 	mov	r0,#_packet_get_next_PARM_2
   030C E2            [24] 1271 	movx	a,@r0
   030D F5 82         [12] 1272 	mov	dpl,a
   030F 08            [12] 1273 	inc	r0
   0310 E2            [24] 1274 	movx	a,@r0
   0311 F5 83         [12] 1275 	mov	dph,a
   0313 C0 05         [24] 1276 	push	ar5
   0315 12r00r00      [24] 1277 	lcall	_serial_read_buf
   0318 D0 05         [24] 1278 	pop	ar5
   031A 50 2B         [24] 1279 	jnc	00118$
                           1280 ;	radio/packet.c:210: memcpy(last_sent, buf, slen);
   031C 78r0C         [12] 1281 	mov	r0,#_packet_get_next_PARM_2
   031E 90r00r00      [24] 1282 	mov	dptr,#_memcpy_PARM_2
   0321 E2            [24] 1283 	movx	a,@r0
   0322 F0            [24] 1284 	movx	@dptr,a
   0323 08            [12] 1285 	inc	r0
   0324 E2            [24] 1286 	movx	a,@r0
   0325 A3            [24] 1287 	inc	dptr
   0326 F0            [24] 1288 	movx	@dptr,a
   0327 E4            [12] 1289 	clr	a
   0328 A3            [24] 1290 	inc	dptr
   0329 F0            [24] 1291 	movx	@dptr,a
   032A 90r00r00      [24] 1292 	mov	dptr,#_memcpy_PARM_3
   032D E5*07         [12] 1293 	mov	a,_packet_get_next_slen_1_144
   032F F0            [24] 1294 	movx	@dptr,a
   0330 E5*08         [12] 1295 	mov	a,(_packet_get_next_slen_1_144 + 1)
   0332 A3            [24] 1296 	inc	dptr
   0333 F0            [24] 1297 	movx	@dptr,a
   0334 90r00rFC      [24] 1298 	mov	dptr,#_last_sent
   0337 75 F0 00      [24] 1299 	mov	b,#0x00
   033A C0 05         [24] 1300 	push	ar5
   033C 12r00r00      [24] 1301 	lcall	_memcpy
   033F D0 05         [24] 1302 	pop	ar5
                           1303 ;	radio/packet.c:211: last_sent_len = slen;
   0341 78r00         [12] 1304 	mov	r0,#_last_sent_len
   0343 ED            [12] 1305 	mov	a,r5
   0344 F2            [24] 1306 	movx	@r0,a
   0345 80 04         [24] 1307 	sjmp	00119$
   0347                    1308 00118$:
                           1309 ;	radio/packet.c:213: last_sent_len = 0;
   0347 78r00         [12] 1310 	mov	r0,#_last_sent_len
   0349 E4            [12] 1311 	clr	a
   034A F2            [24] 1312 	movx	@r0,a
   034B                    1313 00119$:
                           1314 ;	radio/packet.c:215: return last_sent_len;
   034B 78r00         [12] 1315 	mov	r0,#_last_sent_len
   034D E2            [24] 1316 	movx	a,@r0
   034E F5 82         [12] 1317 	mov	dpl,a
   0350 22            [24] 1318 	ret
   0351                    1319 00122$:
                           1320 ;	radio/packet.c:220: if (mav_pkt_len == 1) {
   0351 78r04         [12] 1321 	mov	r0,#_mav_pkt_len
   0353 E2            [24] 1322 	movx	a,@r0
   0354 B4 01 02      [24] 1323 	cjne	a,#0x01,00248$
   0357 80 03         [24] 1324 	sjmp	00249$
   0359                    1325 00248$:
   0359 02r03rE6      [24] 1326 	ljmp	00128$
   035C                    1327 00249$:
                           1328 ;	radio/packet.c:222: if (slen == 1) {
   035C 74 01         [12] 1329 	mov	a,#0x01
   035E B5*07 06      [24] 1330 	cjne	a,_packet_get_next_slen_1_144,00250$
   0361 E4            [12] 1331 	clr	a
   0362 B5*08 02      [24] 1332 	cjne	a,(_packet_get_next_slen_1_144 + 1),00250$
   0365 80 02         [24] 1333 	sjmp	00251$
   0367                    1334 00250$:
   0367 80 79         [24] 1335 	sjmp	00126$
   0369                    1336 00251$:
                           1337 ;	radio/packet.c:223: if ((uint16_t)(timer2_tick() - mav_pkt_start_time) > mav_pkt_max_time) {
   0369 12r00r00      [24] 1338 	lcall	_timer2_tick
   036C AE 82         [24] 1339 	mov	r6,dpl
   036E AF 83         [24] 1340 	mov	r7,dph
   0370 78r05         [12] 1341 	mov	r0,#_mav_pkt_start_time
   0372 D3            [12] 1342 	setb	c
   0373 E2            [24] 1343 	movx	a,@r0
   0374 9E            [12] 1344 	subb	a,r6
   0375 F4            [12] 1345 	cpl	a
   0376 B3            [12] 1346 	cpl	c
   0377 FE            [12] 1347 	mov	r6,a
   0378 B3            [12] 1348 	cpl	c
   0379 08            [12] 1349 	inc	r0
   037A E2            [24] 1350 	movx	a,@r0
   037B 9F            [12] 1351 	subb	a,r7
   037C F4            [12] 1352 	cpl	a
   037D FF            [12] 1353 	mov	r7,a
   037E 78r07         [12] 1354 	mov	r0,#_mav_pkt_max_time
   0380 C3            [12] 1355 	clr	c
   0381 E2            [24] 1356 	movx	a,@r0
   0382 9E            [12] 1357 	subb	a,r6
   0383 08            [12] 1358 	inc	r0
   0384 E2            [24] 1359 	movx	a,@r0
   0385 9F            [12] 1360 	subb	a,r7
   0386 50 56         [24] 1361 	jnc	00124$
                           1362 ;	radio/packet.c:225: last_sent[last_sent_len++] = serial_read();
   0388 78r00         [12] 1363 	mov	r0,#_last_sent_len
   038A E2            [24] 1364 	movx	a,@r0
   038B FF            [12] 1365 	mov	r7,a
   038C 78r00         [12] 1366 	mov	r0,#_last_sent_len
   038E 04            [12] 1367 	inc	a
   038F F2            [24] 1368 	movx	@r0,a
   0390 EF            [12] 1369 	mov	a,r7
   0391 24rFC         [12] 1370 	add	a,#_last_sent
   0393 FF            [12] 1371 	mov	r7,a
   0394 E4            [12] 1372 	clr	a
   0395 34s00         [12] 1373 	addc	a,#(_last_sent >> 8)
   0397 FE            [12] 1374 	mov	r6,a
   0398 C0 07         [24] 1375 	push	ar7
   039A C0 06         [24] 1376 	push	ar6
   039C 12r00r00      [24] 1377 	lcall	_serial_read
   039F AD 82         [24] 1378 	mov	r5,dpl
   03A1 D0 06         [24] 1379 	pop	ar6
   03A3 D0 07         [24] 1380 	pop	ar7
   03A5 8F 82         [24] 1381 	mov	dpl,r7
   03A7 8E 83         [24] 1382 	mov	dph,r6
   03A9 ED            [12] 1383 	mov	a,r5
   03AA F0            [24] 1384 	movx	@dptr,a
                           1385 ;	radio/packet.c:226: memcpy(buf, last_sent, last_sent_len);				
   03AB 78r0C         [12] 1386 	mov	r0,#_packet_get_next_PARM_2
   03AD E2            [24] 1387 	movx	a,@r0
   03AE FD            [12] 1388 	mov	r5,a
   03AF 08            [12] 1389 	inc	r0
   03B0 E2            [24] 1390 	movx	a,@r0
   03B1 FE            [12] 1391 	mov	r6,a
   03B2 7F 00         [12] 1392 	mov	r7,#0x00
   03B4 90r00r00      [24] 1393 	mov	dptr,#_memcpy_PARM_2
   03B7 74rFC         [12] 1394 	mov	a,#_last_sent
   03B9 F0            [24] 1395 	movx	@dptr,a
   03BA 74s00         [12] 1396 	mov	a,#(_last_sent >> 8)
   03BC A3            [24] 1397 	inc	dptr
   03BD F0            [24] 1398 	movx	@dptr,a
   03BE E4            [12] 1399 	clr	a
   03BF A3            [24] 1400 	inc	dptr
   03C0 F0            [24] 1401 	movx	@dptr,a
   03C1 78r00         [12] 1402 	mov	r0,#_last_sent_len
   03C3 90r00r00      [24] 1403 	mov	dptr,#_memcpy_PARM_3
   03C6 E2            [24] 1404 	movx	a,@r0
   03C7 F0            [24] 1405 	movx	@dptr,a
   03C8 E4            [12] 1406 	clr	a
   03C9 A3            [24] 1407 	inc	dptr
   03CA F0            [24] 1408 	movx	@dptr,a
   03CB 8D 82         [24] 1409 	mov	dpl,r5
   03CD 8E 83         [24] 1410 	mov	dph,r6
   03CF 8F F0         [24] 1411 	mov	b,r7
   03D1 12r00r00      [24] 1412 	lcall	_memcpy
                           1413 ;	radio/packet.c:227: mav_pkt_len = 0;
   03D4 78r04         [12] 1414 	mov	r0,#_mav_pkt_len
   03D6 E4            [12] 1415 	clr	a
   03D7 F2            [24] 1416 	movx	@r0,a
                           1417 ;	radio/packet.c:228: return last_sent_len;
   03D8 78r00         [12] 1418 	mov	r0,#_last_sent_len
   03DA E2            [24] 1419 	movx	a,@r0
   03DB F5 82         [12] 1420 	mov	dpl,a
   03DD 22            [24] 1421 	ret
   03DE                    1422 00124$:
                           1423 ;	radio/packet.c:231: return 0;
   03DE 75 82 00      [24] 1424 	mov	dpl,#0x00
   03E1 22            [24] 1425 	ret
   03E2                    1426 00126$:
                           1427 ;	radio/packet.c:235: mav_pkt_len = 0;
   03E2 78r04         [12] 1428 	mov	r0,#_mav_pkt_len
   03E4 E4            [12] 1429 	clr	a
   03E5 F2            [24] 1430 	movx	@r0,a
   03E6                    1431 00128$:
                           1432 ;	radio/packet.c:239: if (mav_pkt_len != 0) {
   03E6 78r04         [12] 1433 	mov	r0,#_mav_pkt_len
   03E8 E2            [24] 1434 	movx	a,@r0
   03E9 70 03         [24] 1435 	jnz	00253$
   03EB 02r04r75      [24] 1436 	ljmp	00180$
   03EE                    1437 00253$:
                           1438 ;	radio/packet.c:240: if (slen < mav_pkt_len) {
   03EE 78r04         [12] 1439 	mov	r0,#_mav_pkt_len
   03F0 E2            [24] 1440 	movx	a,@r0
   03F1 FE            [12] 1441 	mov	r6,a
   03F2 7F 00         [12] 1442 	mov	r7,#0x00
   03F4 C3            [12] 1443 	clr	c
   03F5 E5*07         [12] 1444 	mov	a,_packet_get_next_slen_1_144
   03F7 9E            [12] 1445 	subb	a,r6
   03F8 E5*08         [12] 1446 	mov	a,(_packet_get_next_slen_1_144 + 1)
   03FA 9F            [12] 1447 	subb	a,r7
   03FB 50 68         [24] 1448 	jnc	00132$
                           1449 ;	radio/packet.c:241: if ((uint16_t)(timer2_tick() - mav_pkt_start_time) > mav_pkt_max_time) {
   03FD 12r00r00      [24] 1450 	lcall	_timer2_tick
   0400 AE 82         [24] 1451 	mov	r6,dpl
   0402 AF 83         [24] 1452 	mov	r7,dph
   0404 78r05         [12] 1453 	mov	r0,#_mav_pkt_start_time
   0406 D3            [12] 1454 	setb	c
   0407 E2            [24] 1455 	movx	a,@r0
   0408 9E            [12] 1456 	subb	a,r6
   0409 F4            [12] 1457 	cpl	a
   040A B3            [12] 1458 	cpl	c
   040B FE            [12] 1459 	mov	r6,a
   040C B3            [12] 1460 	cpl	c
   040D 08            [12] 1461 	inc	r0
   040E E2            [24] 1462 	movx	a,@r0
   040F 9F            [12] 1463 	subb	a,r7
   0410 F4            [12] 1464 	cpl	a
   0411 FF            [12] 1465 	mov	r7,a
   0412 78r07         [12] 1466 	mov	r0,#_mav_pkt_max_time
   0414 C3            [12] 1467 	clr	c
   0415 E2            [24] 1468 	movx	a,@r0
   0416 9E            [12] 1469 	subb	a,r6
   0417 08            [12] 1470 	inc	r0
   0418 E2            [24] 1471 	movx	a,@r0
   0419 9F            [12] 1472 	subb	a,r7
   041A 50 45         [24] 1473 	jnc	00130$
                           1474 ;	radio/packet.c:244: serial_read_buf(last_sent, slen);
   041C AD*07         [24] 1475 	mov	r5,_packet_get_next_slen_1_144
   041E 78r00         [12] 1476 	mov	r0,#_serial_read_buf_PARM_2
   0420 ED            [12] 1477 	mov	a,r5
   0421 F2            [24] 1478 	movx	@r0,a
   0422 90r00rFC      [24] 1479 	mov	dptr,#_last_sent
   0425 C0 05         [24] 1480 	push	ar5
   0427 12r00r00      [24] 1481 	lcall	_serial_read_buf
   042A D0 05         [24] 1482 	pop	ar5
                           1483 ;	radio/packet.c:245: last_sent_len = slen;
   042C 78r00         [12] 1484 	mov	r0,#_last_sent_len
   042E ED            [12] 1485 	mov	a,r5
   042F F2            [24] 1486 	movx	@r0,a
                           1487 ;	radio/packet.c:246: memcpy(buf, last_sent, last_sent_len);
   0430 78r0C         [12] 1488 	mov	r0,#_packet_get_next_PARM_2
   0432 E2            [24] 1489 	movx	a,@r0
   0433 FC            [12] 1490 	mov	r4,a
   0434 08            [12] 1491 	inc	r0
   0435 E2            [24] 1492 	movx	a,@r0
   0436 FE            [12] 1493 	mov	r6,a
   0437 7F 00         [12] 1494 	mov	r7,#0x00
   0439 90r00r00      [24] 1495 	mov	dptr,#_memcpy_PARM_2
   043C 74rFC         [12] 1496 	mov	a,#_last_sent
   043E F0            [24] 1497 	movx	@dptr,a
   043F 74s00         [12] 1498 	mov	a,#(_last_sent >> 8)
   0441 A3            [24] 1499 	inc	dptr
   0442 F0            [24] 1500 	movx	@dptr,a
   0443 E4            [12] 1501 	clr	a
   0444 A3            [24] 1502 	inc	dptr
   0445 F0            [24] 1503 	movx	@dptr,a
   0446 90r00r00      [24] 1504 	mov	dptr,#_memcpy_PARM_3
   0449 ED            [12] 1505 	mov	a,r5
   044A F0            [24] 1506 	movx	@dptr,a
   044B E4            [12] 1507 	clr	a
   044C A3            [24] 1508 	inc	dptr
   044D F0            [24] 1509 	movx	@dptr,a
   044E 8C 82         [24] 1510 	mov	dpl,r4
   0450 8E 83         [24] 1511 	mov	dph,r6
   0452 8F F0         [24] 1512 	mov	b,r7
   0454 12r00r00      [24] 1513 	lcall	_memcpy
                           1514 ;	radio/packet.c:247: mav_pkt_len = 0;
   0457 78r04         [12] 1515 	mov	r0,#_mav_pkt_len
   0459 E4            [12] 1516 	clr	a
   045A F2            [24] 1517 	movx	@r0,a
                           1518 ;	radio/packet.c:248: return last_sent_len;
   045B 78r00         [12] 1519 	mov	r0,#_last_sent_len
   045D E2            [24] 1520 	movx	a,@r0
   045E F5 82         [12] 1521 	mov	dpl,a
   0460 22            [24] 1522 	ret
   0461                    1523 00130$:
                           1524 ;	radio/packet.c:252: return 0;
   0461 75 82 00      [24] 1525 	mov	dpl,#0x00
   0464 22            [24] 1526 	ret
   0465                    1527 00132$:
                           1528 ;	radio/packet.c:256: return mavlink_frame(max_xmit, buf);
   0465 78r0C         [12] 1529 	mov	r0,#_packet_get_next_PARM_2
   0467 79r0A         [12] 1530 	mov	r1,#_mavlink_frame_PARM_2
   0469 E2            [24] 1531 	movx	a,@r0
   046A F3            [24] 1532 	movx	@r1,a
   046B 08            [12] 1533 	inc	r0
   046C E2            [24] 1534 	movx	a,@r0
   046D 09            [12] 1535 	inc	r1
   046E F3            [24] 1536 	movx	@r1,a
   046F 85*06 82      [24] 1537 	mov	dpl,_packet_get_next_max_xmit_1_143
   0472 02r00r46      [24] 1538 	ljmp	_mavlink_frame
                           1539 ;	radio/packet.c:259: while (slen > 0) {
   0475                    1540 00180$:
   0475                    1541 00152$:
   0475 E5*07         [12] 1542 	mov	a,_packet_get_next_slen_1_144
   0477 45*08         [12] 1543 	orl	a,(_packet_get_next_slen_1_144 + 1)
   0479 70 03         [24] 1544 	jnz	00256$
   047B 02r06r1B      [24] 1545 	ljmp	00154$
   047E                    1546 00256$:
                           1547 ;	radio/packet.c:260: register uint8_t c = serial_peek();
   047E 12r00r00      [24] 1548 	lcall	_serial_peek
   0481 AF 82         [24] 1549 	mov	r7,dpl
                           1550 ;	radio/packet.c:261: if (c == MAVLINK09_STX || c == MAVLINK10_STX) {
   0483 BF 55 02      [24] 1551 	cjne	r7,#0x55,00257$
   0486 80 08         [24] 1552 	sjmp	00148$
   0488                    1553 00257$:
   0488 BF FE 02      [24] 1554 	cjne	r7,#0xFE,00258$
   048B 80 03         [24] 1555 	sjmp	00259$
   048D                    1556 00258$:
   048D 02r05rEC      [24] 1557 	ljmp	00149$
   0490                    1558 00259$:
   0490                    1559 00148$:
                           1560 ;	radio/packet.c:262: if (slen == 1) {
   0490 74 01         [12] 1561 	mov	a,#0x01
   0492 B5*07 06      [24] 1562 	cjne	a,_packet_get_next_slen_1_144,00260$
   0495 E4            [12] 1563 	clr	a
   0496 B5*08 02      [24] 1564 	cjne	a,(_packet_get_next_slen_1_144 + 1),00260$
   0499 80 02         [24] 1565 	sjmp	00261$
   049B                    1566 00260$:
   049B 80 2E         [24] 1567 	sjmp	00138$
   049D                    1568 00261$:
                           1569 ;	radio/packet.c:264: if (last_sent_len == 0) {
   049D 78r00         [12] 1570 	mov	r0,#_last_sent_len
   049F E2            [24] 1571 	movx	a,@r0
   04A0 60 03         [24] 1572 	jz	00262$
   04A2 02r06r1B      [24] 1573 	ljmp	00154$
   04A5                    1574 00262$:
                           1575 ;	radio/packet.c:267: mav_pkt_len = 1;
   04A5 78r04         [12] 1576 	mov	r0,#_mav_pkt_len
   04A7 74 01         [12] 1577 	mov	a,#0x01
   04A9 F2            [24] 1578 	movx	@r0,a
                           1579 ;	radio/packet.c:268: mav_pkt_start_time = timer2_tick();
   04AA 12r00r00      [24] 1580 	lcall	_timer2_tick
   04AD E5 82         [12] 1581 	mov	a,dpl
   04AF 85 83 F0      [24] 1582 	mov	b,dph
   04B2 78r05         [12] 1583 	mov	r0,#_mav_pkt_start_time
   04B4 F2            [24] 1584 	movx	@r0,a
   04B5 08            [12] 1585 	inc	r0
   04B6 E5 F0         [12] 1586 	mov	a,b
   04B8 F2            [24] 1587 	movx	@r0,a
                           1588 ;	radio/packet.c:269: mav_pkt_max_time = serial_rate;
   04B9 78r02         [12] 1589 	mov	r0,#_serial_rate
   04BB E2            [24] 1590 	movx	a,@r0
   04BC FE            [12] 1591 	mov	r6,a
   04BD 08            [12] 1592 	inc	r0
   04BE E2            [24] 1593 	movx	a,@r0
   04BF FF            [12] 1594 	mov	r7,a
   04C0 78r07         [12] 1595 	mov	r0,#_mav_pkt_max_time
   04C2 EE            [12] 1596 	mov	a,r6
   04C3 F2            [24] 1597 	movx	@r0,a
   04C4 08            [12] 1598 	inc	r0
   04C5 EF            [12] 1599 	mov	a,r7
   04C6 F2            [24] 1600 	movx	@r0,a
                           1601 ;	radio/packet.c:270: return 0;
   04C7 75 82 00      [24] 1602 	mov	dpl,#0x00
   04CA 22            [24] 1603 	ret
                           1604 ;	radio/packet.c:272: break;
   04CB                    1605 00138$:
                           1606 ;	radio/packet.c:274: mav_pkt_len = serial_peek2();
   04CB 12r00r00      [24] 1607 	lcall	_serial_peek2
   04CE AF 82         [24] 1608 	mov	r7,dpl
   04D0 78r04         [12] 1609 	mov	r0,#_mav_pkt_len
   04D2 EF            [12] 1610 	mov	a,r7
   04D3 F2            [24] 1611 	movx	@r0,a
                           1612 ;	radio/packet.c:275: if (mav_pkt_len >= 255-8 ||
   04D4 BF F7 00      [24] 1613 	cjne	r7,#0xF7,00263$
   04D7                    1614 00263$:
   04D7 50 20         [24] 1615 	jnc	00139$
                           1616 ;	radio/packet.c:276: mav_pkt_len+8 > mav_max_xmit) {
   04D9 8F 05         [24] 1617 	mov	ar5,r7
   04DB 7E 00         [12] 1618 	mov	r6,#0x00
   04DD 74 08         [12] 1619 	mov	a,#0x08
   04DF 2D            [12] 1620 	add	a,r5
   04E0 FD            [12] 1621 	mov	r5,a
   04E1 E4            [12] 1622 	clr	a
   04E2 3E            [12] 1623 	addc	a,r6
   04E3 FE            [12] 1624 	mov	r6,a
   04E4 78r09         [12] 1625 	mov	r0,#_mav_max_xmit
   04E6 E2            [24] 1626 	movx	a,@r0
   04E7 FB            [12] 1627 	mov	r3,a
   04E8 7C 00         [12] 1628 	mov	r4,#0x00
   04EA C3            [12] 1629 	clr	c
   04EB EB            [12] 1630 	mov	a,r3
   04EC 9D            [12] 1631 	subb	a,r5
   04ED EC            [12] 1632 	mov	a,r4
   04EE 64 80         [12] 1633 	xrl	a,#0x80
   04F0 8E F0         [24] 1634 	mov	b,r6
   04F2 63 F0 80      [24] 1635 	xrl	b,#0x80
   04F5 95 F0         [12] 1636 	subb	a,b
   04F7 50 33         [24] 1637 	jnc	00140$
   04F9                    1638 00139$:
                           1639 ;	radio/packet.c:278: mav_pkt_len = 0;
   04F9 78r04         [12] 1640 	mov	r0,#_mav_pkt_len
   04FB E4            [12] 1641 	clr	a
   04FC F2            [24] 1642 	movx	@r0,a
                           1643 ;	radio/packet.c:279: last_sent[last_sent_len++] = serial_read();
   04FD 78r00         [12] 1644 	mov	r0,#_last_sent_len
   04FF E2            [24] 1645 	movx	a,@r0
   0500 FE            [12] 1646 	mov	r6,a
   0501 78r00         [12] 1647 	mov	r0,#_last_sent_len
   0503 04            [12] 1648 	inc	a
   0504 F2            [24] 1649 	movx	@r0,a
   0505 EE            [12] 1650 	mov	a,r6
   0506 24rFC         [12] 1651 	add	a,#_last_sent
   0508 FE            [12] 1652 	mov	r6,a
   0509 E4            [12] 1653 	clr	a
   050A 34s00         [12] 1654 	addc	a,#(_last_sent >> 8)
   050C FD            [12] 1655 	mov	r5,a
   050D C0 06         [24] 1656 	push	ar6
   050F C0 05         [24] 1657 	push	ar5
   0511 12r00r00      [24] 1658 	lcall	_serial_read
   0514 AC 82         [24] 1659 	mov	r4,dpl
   0516 D0 05         [24] 1660 	pop	ar5
   0518 D0 06         [24] 1661 	pop	ar6
   051A 8E 82         [24] 1662 	mov	dpl,r6
   051C 8D 83         [24] 1663 	mov	dph,r5
   051E EC            [12] 1664 	mov	a,r4
   051F F0            [24] 1665 	movx	@dptr,a
                           1666 ;	radio/packet.c:280: slen--;				
   0520 15*07         [12] 1667 	dec	_packet_get_next_slen_1_144
   0522 74 FF         [12] 1668 	mov	a,#0xFF
   0524 B5*07 02      [24] 1669 	cjne	a,_packet_get_next_slen_1_144,00266$
   0527 15*08         [12] 1670 	dec	(_packet_get_next_slen_1_144 + 1)
   0529                    1671 00266$:
                           1672 ;	radio/packet.c:281: continue;
   0529 02r04r75      [24] 1673 	ljmp	00152$
   052C                    1674 00140$:
                           1675 ;	radio/packet.c:286: mav_pkt_len += 8;
   052C 74 08         [12] 1676 	mov	a,#0x08
   052E 2F            [12] 1677 	add	a,r7
   052F FF            [12] 1678 	mov	r7,a
   0530 78r04         [12] 1679 	mov	r0,#_mav_pkt_len
   0532 F2            [24] 1680 	movx	@r0,a
                           1681 ;	radio/packet.c:288: if (last_sent_len != 0) {
   0533 78r00         [12] 1682 	mov	r0,#_last_sent_len
   0535 E2            [24] 1683 	movx	a,@r0
   0536 60 62         [24] 1684 	jz	00146$
                           1685 ;	radio/packet.c:292: memcpy(buf, last_sent, last_sent_len);
   0538 78r0C         [12] 1686 	mov	r0,#_packet_get_next_PARM_2
   053A E2            [24] 1687 	movx	a,@r0
   053B FC            [12] 1688 	mov	r4,a
   053C 08            [12] 1689 	inc	r0
   053D E2            [24] 1690 	movx	a,@r0
   053E FD            [12] 1691 	mov	r5,a
   053F 7E 00         [12] 1692 	mov	r6,#0x00
   0541 90r00r00      [24] 1693 	mov	dptr,#_memcpy_PARM_2
   0544 74rFC         [12] 1694 	mov	a,#_last_sent
   0546 F0            [24] 1695 	movx	@dptr,a
   0547 74s00         [12] 1696 	mov	a,#(_last_sent >> 8)
   0549 A3            [24] 1697 	inc	dptr
   054A F0            [24] 1698 	movx	@dptr,a
   054B E4            [12] 1699 	clr	a
   054C A3            [24] 1700 	inc	dptr
   054D F0            [24] 1701 	movx	@dptr,a
   054E 78r00         [12] 1702 	mov	r0,#_last_sent_len
   0550 90r00r00      [24] 1703 	mov	dptr,#_memcpy_PARM_3
   0553 E2            [24] 1704 	movx	a,@r0
   0554 F0            [24] 1705 	movx	@dptr,a
   0555 E4            [12] 1706 	clr	a
   0556 A3            [24] 1707 	inc	dptr
   0557 F0            [24] 1708 	movx	@dptr,a
   0558 8C 82         [24] 1709 	mov	dpl,r4
   055A 8D 83         [24] 1710 	mov	dph,r5
   055C 8E F0         [24] 1711 	mov	b,r6
   055E 12r00r00      [24] 1712 	lcall	_memcpy
                           1713 ;	radio/packet.c:293: mav_pkt_start_time = timer2_tick();
   0561 12r00r00      [24] 1714 	lcall	_timer2_tick
   0564 E5 82         [12] 1715 	mov	a,dpl
   0566 85 83 F0      [24] 1716 	mov	b,dph
   0569 78r05         [12] 1717 	mov	r0,#_mav_pkt_start_time
   056B F2            [24] 1718 	movx	@r0,a
   056C 08            [12] 1719 	inc	r0
   056D E5 F0         [12] 1720 	mov	a,b
   056F F2            [24] 1721 	movx	@r0,a
                           1722 ;	radio/packet.c:294: mav_pkt_max_time = mav_pkt_len * serial_rate;
   0570 78r04         [12] 1723 	mov	r0,#_mav_pkt_len
   0572 E2            [24] 1724 	movx	a,@r0
   0573 FD            [12] 1725 	mov	r5,a
   0574 7E 00         [12] 1726 	mov	r6,#0x00
   0576 78r02         [12] 1727 	mov	r0,#_serial_rate
   0578 90r00r00      [24] 1728 	mov	dptr,#__mulint_PARM_2
   057B E2            [24] 1729 	movx	a,@r0
   057C F0            [24] 1730 	movx	@dptr,a
   057D 08            [12] 1731 	inc	r0
   057E E2            [24] 1732 	movx	a,@r0
   057F A3            [24] 1733 	inc	dptr
   0580 F0            [24] 1734 	movx	@dptr,a
   0581 8D 82         [24] 1735 	mov	dpl,r5
   0583 8E 83         [24] 1736 	mov	dph,r6
   0585 12r00r00      [24] 1737 	lcall	__mulint
   0588 E5 82         [12] 1738 	mov	a,dpl
   058A 85 83 F0      [24] 1739 	mov	b,dph
   058D 78r07         [12] 1740 	mov	r0,#_mav_pkt_max_time
   058F F2            [24] 1741 	movx	@r0,a
   0590 08            [12] 1742 	inc	r0
   0591 E5 F0         [12] 1743 	mov	a,b
   0593 F2            [24] 1744 	movx	@r0,a
                           1745 ;	radio/packet.c:295: return last_sent_len;
   0594 78r00         [12] 1746 	mov	r0,#_last_sent_len
   0596 E2            [24] 1747 	movx	a,@r0
   0597 F5 82         [12] 1748 	mov	dpl,a
   0599 22            [24] 1749 	ret
   059A                    1750 00146$:
                           1751 ;	radio/packet.c:296: } else if (mav_pkt_len > slen) {
   059A 7E 00         [12] 1752 	mov	r6,#0x00
   059C C3            [12] 1753 	clr	c
   059D E5*07         [12] 1754 	mov	a,_packet_get_next_slen_1_144
   059F 9F            [12] 1755 	subb	a,r7
   05A0 E5*08         [12] 1756 	mov	a,(_packet_get_next_slen_1_144 + 1)
   05A2 9E            [12] 1757 	subb	a,r6
   05A3 50 37         [24] 1758 	jnc	00143$
                           1759 ;	radio/packet.c:299: mav_pkt_start_time = timer2_tick();
   05A5 12r00r00      [24] 1760 	lcall	_timer2_tick
   05A8 E5 82         [12] 1761 	mov	a,dpl
   05AA 85 83 F0      [24] 1762 	mov	b,dph
   05AD 78r05         [12] 1763 	mov	r0,#_mav_pkt_start_time
   05AF F2            [24] 1764 	movx	@r0,a
   05B0 08            [12] 1765 	inc	r0
   05B1 E5 F0         [12] 1766 	mov	a,b
   05B3 F2            [24] 1767 	movx	@r0,a
                           1768 ;	radio/packet.c:300: mav_pkt_max_time = mav_pkt_len * serial_rate;
   05B4 78r04         [12] 1769 	mov	r0,#_mav_pkt_len
   05B6 E2            [24] 1770 	movx	a,@r0
   05B7 FE            [12] 1771 	mov	r6,a
   05B8 7F 00         [12] 1772 	mov	r7,#0x00
   05BA 78r02         [12] 1773 	mov	r0,#_serial_rate
   05BC 90r00r00      [24] 1774 	mov	dptr,#__mulint_PARM_2
   05BF E2            [24] 1775 	movx	a,@r0
   05C0 F0            [24] 1776 	movx	@dptr,a
   05C1 08            [12] 1777 	inc	r0
   05C2 E2            [24] 1778 	movx	a,@r0
   05C3 A3            [24] 1779 	inc	dptr
   05C4 F0            [24] 1780 	movx	@dptr,a
   05C5 8E 82         [24] 1781 	mov	dpl,r6
   05C7 8F 83         [24] 1782 	mov	dph,r7
   05C9 12r00r00      [24] 1783 	lcall	__mulint
   05CC E5 82         [12] 1784 	mov	a,dpl
   05CE 85 83 F0      [24] 1785 	mov	b,dph
   05D1 78r07         [12] 1786 	mov	r0,#_mav_pkt_max_time
   05D3 F2            [24] 1787 	movx	@r0,a
   05D4 08            [12] 1788 	inc	r0
   05D5 E5 F0         [12] 1789 	mov	a,b
   05D7 F2            [24] 1790 	movx	@r0,a
                           1791 ;	radio/packet.c:301: return 0;					
   05D8 75 82 00      [24] 1792 	mov	dpl,#0x00
   05DB 22            [24] 1793 	ret
   05DC                    1794 00143$:
                           1795 ;	radio/packet.c:305: return mavlink_frame(max_xmit, buf);
   05DC 78r0C         [12] 1796 	mov	r0,#_packet_get_next_PARM_2
   05DE 79r0A         [12] 1797 	mov	r1,#_mavlink_frame_PARM_2
   05E0 E2            [24] 1798 	movx	a,@r0
   05E1 F3            [24] 1799 	movx	@r1,a
   05E2 08            [12] 1800 	inc	r0
   05E3 E2            [24] 1801 	movx	a,@r0
   05E4 09            [12] 1802 	inc	r1
   05E5 F3            [24] 1803 	movx	@r1,a
   05E6 85*06 82      [24] 1804 	mov	dpl,_packet_get_next_max_xmit_1_143
   05E9 02r00r46      [24] 1805 	ljmp	_mavlink_frame
   05EC                    1806 00149$:
                           1807 ;	radio/packet.c:308: last_sent[last_sent_len++] = serial_read();
   05EC 78r00         [12] 1808 	mov	r0,#_last_sent_len
   05EE E2            [24] 1809 	movx	a,@r0
   05EF FF            [12] 1810 	mov	r7,a
   05F0 78r00         [12] 1811 	mov	r0,#_last_sent_len
   05F2 04            [12] 1812 	inc	a
   05F3 F2            [24] 1813 	movx	@r0,a
   05F4 EF            [12] 1814 	mov	a,r7
   05F5 24rFC         [12] 1815 	add	a,#_last_sent
   05F7 FF            [12] 1816 	mov	r7,a
   05F8 E4            [12] 1817 	clr	a
   05F9 34s00         [12] 1818 	addc	a,#(_last_sent >> 8)
   05FB FE            [12] 1819 	mov	r6,a
   05FC C0 07         [24] 1820 	push	ar7
   05FE C0 06         [24] 1821 	push	ar6
   0600 12r00r00      [24] 1822 	lcall	_serial_read
   0603 AD 82         [24] 1823 	mov	r5,dpl
   0605 D0 06         [24] 1824 	pop	ar6
   0607 D0 07         [24] 1825 	pop	ar7
   0609 8F 82         [24] 1826 	mov	dpl,r7
   060B 8E 83         [24] 1827 	mov	dph,r6
   060D ED            [12] 1828 	mov	a,r5
   060E F0            [24] 1829 	movx	@dptr,a
                           1830 ;	radio/packet.c:309: slen--;
   060F 15*07         [12] 1831 	dec	_packet_get_next_slen_1_144
   0611 74 FF         [12] 1832 	mov	a,#0xFF
   0613 B5*07 02      [24] 1833 	cjne	a,_packet_get_next_slen_1_144,00269$
   0616 15*08         [12] 1834 	dec	(_packet_get_next_slen_1_144 + 1)
   0618                    1835 00269$:
   0618 02r04r75      [24] 1836 	ljmp	00152$
   061B                    1837 00154$:
                           1838 ;	radio/packet.c:313: memcpy(buf, last_sent, last_sent_len);
   061B 78r0C         [12] 1839 	mov	r0,#_packet_get_next_PARM_2
   061D E2            [24] 1840 	movx	a,@r0
   061E FD            [12] 1841 	mov	r5,a
   061F 08            [12] 1842 	inc	r0
   0620 E2            [24] 1843 	movx	a,@r0
   0621 FE            [12] 1844 	mov	r6,a
   0622 7F 00         [12] 1845 	mov	r7,#0x00
   0624 90r00r00      [24] 1846 	mov	dptr,#_memcpy_PARM_2
   0627 74rFC         [12] 1847 	mov	a,#_last_sent
   0629 F0            [24] 1848 	movx	@dptr,a
   062A 74s00         [12] 1849 	mov	a,#(_last_sent >> 8)
   062C A3            [24] 1850 	inc	dptr
   062D F0            [24] 1851 	movx	@dptr,a
   062E E4            [12] 1852 	clr	a
   062F A3            [24] 1853 	inc	dptr
   0630 F0            [24] 1854 	movx	@dptr,a
   0631 78r00         [12] 1855 	mov	r0,#_last_sent_len
   0633 90r00r00      [24] 1856 	mov	dptr,#_memcpy_PARM_3
   0636 E2            [24] 1857 	movx	a,@r0
   0637 F0            [24] 1858 	movx	@dptr,a
   0638 E4            [12] 1859 	clr	a
   0639 A3            [24] 1860 	inc	dptr
   063A F0            [24] 1861 	movx	@dptr,a
   063B 8D 82         [24] 1862 	mov	dpl,r5
   063D 8E 83         [24] 1863 	mov	dph,r6
   063F 8F F0         [24] 1864 	mov	b,r7
   0641 12r00r00      [24] 1865 	lcall	_memcpy
                           1866 ;	radio/packet.c:314: return last_sent_len;
   0644 78r00         [12] 1867 	mov	r0,#_last_sent_len
   0646 E2            [24] 1868 	movx	a,@r0
   0647 F5 82         [12] 1869 	mov	dpl,a
   0649 22            [24] 1870 	ret
                           1871 ;------------------------------------------------------------
                           1872 ;Allocation info for local variables in function 'packet_is_resend'
                           1873 ;------------------------------------------------------------
                           1874 ;	radio/packet.c:320: packet_is_resend(void)
                           1875 ;	-----------------------------------------
                           1876 ;	 function packet_is_resend
                           1877 ;	-----------------------------------------
   064A                    1878 _packet_is_resend:
                           1879 ;	radio/packet.c:322: return last_sent_is_resend;
   064A A2*00         [12] 1880 	mov	c,_last_sent_is_resend
   064C 22            [24] 1881 	ret
                           1882 ;------------------------------------------------------------
                           1883 ;Allocation info for local variables in function 'packet_is_injected'
                           1884 ;------------------------------------------------------------
                           1885 ;	radio/packet.c:328: packet_is_injected(void)
                           1886 ;	-----------------------------------------
                           1887 ;	 function packet_is_injected
                           1888 ;	-----------------------------------------
   064D                    1889 _packet_is_injected:
                           1890 ;	radio/packet.c:330: return last_sent_is_injected;
   064D A2*01         [12] 1891 	mov	c,_last_sent_is_injected
   064F 22            [24] 1892 	ret
                           1893 ;------------------------------------------------------------
                           1894 ;Allocation info for local variables in function 'packet_force_resend'
                           1895 ;------------------------------------------------------------
                           1896 ;	radio/packet.c:335: packet_force_resend(void)
                           1897 ;	-----------------------------------------
                           1898 ;	 function packet_force_resend
                           1899 ;	-----------------------------------------
   0650                    1900 _packet_force_resend:
                           1901 ;	radio/packet.c:337: force_resend = true;
   0650 D2*03         [12] 1902 	setb	_force_resend
   0652 22            [24] 1903 	ret
                           1904 ;------------------------------------------------------------
                           1905 ;Allocation info for local variables in function 'packet_set_max_xmit'
                           1906 ;------------------------------------------------------------
                           1907 ;max                       Allocated with name '_packet_set_max_xmit_max_1_175'
                           1908 ;------------------------------------------------------------
                           1909 ;	radio/packet.c:342: packet_set_max_xmit(uint8_t max)
                           1910 ;	-----------------------------------------
                           1911 ;	 function packet_set_max_xmit
                           1912 ;	-----------------------------------------
   0653                    1913 _packet_set_max_xmit:
   0653 E5 82         [12] 1914 	mov	a,dpl
                           1915 ;	radio/packet.c:344: mav_max_xmit = max;
   0655 90r01rF9      [24] 1916 	mov	dptr,#_packet_set_max_xmit_max_1_175
   0658 F0            [24] 1917 	movx	@dptr,a
   0659 78r09         [12] 1918 	mov	r0,#_mav_max_xmit
   065B F2            [24] 1919 	movx	@r0,a
   065C 22            [24] 1920 	ret
                           1921 ;------------------------------------------------------------
                           1922 ;Allocation info for local variables in function 'packet_set_serial_speed'
                           1923 ;------------------------------------------------------------
                           1924 ;speed                     Allocated with name '_packet_set_serial_speed_speed_1_177'
                           1925 ;------------------------------------------------------------
                           1926 ;	radio/packet.c:349: packet_set_serial_speed(uint16_t speed)
                           1927 ;	-----------------------------------------
                           1928 ;	 function packet_set_serial_speed
                           1929 ;	-----------------------------------------
   065D                    1930 _packet_set_serial_speed:
   065D AF 83         [24] 1931 	mov	r7,dph
   065F E5 82         [12] 1932 	mov	a,dpl
   0661 90r01rFA      [24] 1933 	mov	dptr,#_packet_set_serial_speed_speed_1_177
   0664 F0            [24] 1934 	movx	@dptr,a
   0665 EF            [12] 1935 	mov	a,r7
   0666 A3            [24] 1936 	inc	dptr
   0667 F0            [24] 1937 	movx	@dptr,a
                           1938 ;	radio/packet.c:352: serial_rate = (65536UL / speed) + 1;
   0668 90r01rFA      [24] 1939 	mov	dptr,#_packet_set_serial_speed_speed_1_177
   066B E0            [24] 1940 	movx	a,@dptr
   066C FE            [12] 1941 	mov	r6,a
   066D A3            [24] 1942 	inc	dptr
   066E E0            [24] 1943 	movx	a,@dptr
   066F FF            [12] 1944 	mov	r7,a
   0670 90r00r00      [24] 1945 	mov	dptr,#__divulong_PARM_2
   0673 EE            [12] 1946 	mov	a,r6
   0674 F0            [24] 1947 	movx	@dptr,a
   0675 EF            [12] 1948 	mov	a,r7
   0676 A3            [24] 1949 	inc	dptr
   0677 F0            [24] 1950 	movx	@dptr,a
   0678 E4            [12] 1951 	clr	a
   0679 A3            [24] 1952 	inc	dptr
   067A F0            [24] 1953 	movx	@dptr,a
   067B E4            [12] 1954 	clr	a
   067C A3            [24] 1955 	inc	dptr
   067D F0            [24] 1956 	movx	@dptr,a
   067E 90 00 00      [24] 1957 	mov	dptr,#0x0000
   0681 75 F0 01      [24] 1958 	mov	b,#0x01
   0684 E4            [12] 1959 	clr	a
   0685 12r00r00      [24] 1960 	lcall	__divulong
   0688 AC 82         [24] 1961 	mov	r4,dpl
   068A AD 83         [24] 1962 	mov	r5,dph
   068C AE F0         [24] 1963 	mov	r6,b
   068E FF            [12] 1964 	mov	r7,a
   068F 0C            [12] 1965 	inc	r4
   0690 BC 00 09      [24] 1966 	cjne	r4,#0x00,00103$
   0693 0D            [12] 1967 	inc	r5
   0694 BD 00 05      [24] 1968 	cjne	r5,#0x00,00103$
   0697 0E            [12] 1969 	inc	r6
   0698 BE 00 01      [24] 1970 	cjne	r6,#0x00,00103$
   069B 0F            [12] 1971 	inc	r7
   069C                    1972 00103$:
   069C 78r02         [12] 1973 	mov	r0,#_serial_rate
   069E EC            [12] 1974 	mov	a,r4
   069F F2            [24] 1975 	movx	@r0,a
   06A0 08            [12] 1976 	inc	r0
   06A1 ED            [12] 1977 	mov	a,r5
   06A2 F2            [24] 1978 	movx	@r0,a
   06A3 22            [24] 1979 	ret
                           1980 ;------------------------------------------------------------
                           1981 ;Allocation info for local variables in function 'packet_is_duplicate'
                           1982 ;------------------------------------------------------------
                           1983 ;len                       Allocated with name '_packet_is_duplicate_len_1_179'
                           1984 ;------------------------------------------------------------
                           1985 ;	radio/packet.c:357: packet_is_duplicate(uint8_t len, __xdata uint8_t * __pdata buf, bool is_resend)
                           1986 ;	-----------------------------------------
                           1987 ;	 function packet_is_duplicate
                           1988 ;	-----------------------------------------
   06A4                    1989 _packet_is_duplicate:
   06A4 E5 82         [12] 1990 	mov	a,dpl
   06A6 90r01rFC      [24] 1991 	mov	dptr,#_packet_is_duplicate_len_1_179
   06A9 F0            [24] 1992 	movx	@dptr,a
                           1993 ;	radio/packet.c:359: if (!is_resend) {
   06AA 20*07 39      [24] 1994 	jb	_packet_is_duplicate_PARM_3,00102$
                           1995 ;	radio/packet.c:360: memcpy(last_received, buf, len);
   06AD 78r0E         [12] 1996 	mov	r0,#_packet_is_duplicate_PARM_2
   06AF E2            [24] 1997 	movx	a,@r0
   06B0 FD            [12] 1998 	mov	r5,a
   06B1 08            [12] 1999 	inc	r0
   06B2 E2            [24] 2000 	movx	a,@r0
   06B3 FE            [12] 2001 	mov	r6,a
   06B4 7F 00         [12] 2002 	mov	r7,#0x00
   06B6 90r01rFC      [24] 2003 	mov	dptr,#_packet_is_duplicate_len_1_179
   06B9 E0            [24] 2004 	movx	a,@dptr
   06BA FC            [12] 2005 	mov	r4,a
   06BB FA            [12] 2006 	mov	r2,a
   06BC 7B 00         [12] 2007 	mov	r3,#0x00
   06BE 90r00r00      [24] 2008 	mov	dptr,#_memcpy_PARM_2
   06C1 ED            [12] 2009 	mov	a,r5
   06C2 F0            [24] 2010 	movx	@dptr,a
   06C3 EE            [12] 2011 	mov	a,r6
   06C4 A3            [24] 2012 	inc	dptr
   06C5 F0            [24] 2013 	movx	@dptr,a
   06C6 EF            [12] 2014 	mov	a,r7
   06C7 A3            [24] 2015 	inc	dptr
   06C8 F0            [24] 2016 	movx	@dptr,a
   06C9 90r00r00      [24] 2017 	mov	dptr,#_memcpy_PARM_3
   06CC EA            [12] 2018 	mov	a,r2
   06CD F0            [24] 2019 	movx	@dptr,a
   06CE EB            [12] 2020 	mov	a,r3
   06CF A3            [24] 2021 	inc	dptr
   06D0 F0            [24] 2022 	movx	@dptr,a
   06D1 90r00r00      [24] 2023 	mov	dptr,#_last_received
   06D4 75 F0 00      [24] 2024 	mov	b,#0x00
   06D7 C0 04         [24] 2025 	push	ar4
   06D9 12r00r00      [24] 2026 	lcall	_memcpy
   06DC D0 04         [24] 2027 	pop	ar4
                           2028 ;	radio/packet.c:361: last_recv_len = len;
   06DE 78r01         [12] 2029 	mov	r0,#_last_recv_len
   06E0 EC            [12] 2030 	mov	a,r4
   06E1 F2            [24] 2031 	movx	@r0,a
                           2032 ;	radio/packet.c:362: last_recv_is_resend = false;
   06E2 C2*02         [12] 2033 	clr	_last_recv_is_resend
                           2034 ;	radio/packet.c:363: return false;
   06E4 C3            [12] 2035 	clr	c
   06E5 22            [24] 2036 	ret
   06E6                    2037 00102$:
                           2038 ;	radio/packet.c:367: memcmp(last_received, buf, len) == 0) {
   06E6 20*02 37      [24] 2039 	jb	_last_recv_is_resend,00104$
                           2040 ;	radio/packet.c:366: len == last_recv_len &&
   06E9 90r01rFC      [24] 2041 	mov	dptr,#_packet_is_duplicate_len_1_179
   06EC E0            [24] 2042 	movx	a,@dptr
   06ED FF            [12] 2043 	mov	r7,a
   06EE 78r01         [12] 2044 	mov	r0,#_last_recv_len
   06F0 E2            [24] 2045 	movx	a,@r0
   06F1 B5 07 2C      [24] 2046 	cjne	a,ar7,00104$
                           2047 ;	radio/packet.c:367: memcmp(last_received, buf, len) == 0) {
   06F4 78r0E         [12] 2048 	mov	r0,#_packet_is_duplicate_PARM_2
   06F6 90r00r00      [24] 2049 	mov	dptr,#_memcmp_PARM_2
   06F9 E2            [24] 2050 	movx	a,@r0
   06FA F0            [24] 2051 	movx	@dptr,a
   06FB 08            [12] 2052 	inc	r0
   06FC E2            [24] 2053 	movx	a,@r0
   06FD A3            [24] 2054 	inc	dptr
   06FE F0            [24] 2055 	movx	@dptr,a
   06FF E4            [12] 2056 	clr	a
   0700 A3            [24] 2057 	inc	dptr
   0701 F0            [24] 2058 	movx	@dptr,a
   0702 90r00r00      [24] 2059 	mov	dptr,#_memcmp_PARM_3
   0705 EF            [12] 2060 	mov	a,r7
   0706 F0            [24] 2061 	movx	@dptr,a
   0707 E4            [12] 2062 	clr	a
   0708 A3            [24] 2063 	inc	dptr
   0709 F0            [24] 2064 	movx	@dptr,a
   070A 90r00r00      [24] 2065 	mov	dptr,#_last_received
   070D 75 F0 00      [24] 2066 	mov	b,#0x00
   0710 12r00r00      [24] 2067 	lcall	_memcmp
   0713 E5 82         [12] 2068 	mov	a,dpl
   0715 85 83 F0      [24] 2069 	mov	b,dph
   0718 45 F0         [12] 2070 	orl	a,b
   071A 70 04         [24] 2071 	jnz	00104$
                           2072 ;	radio/packet.c:368: last_recv_is_resend = false;
   071C C2*02         [12] 2073 	clr	_last_recv_is_resend
                           2074 ;	radio/packet.c:369: return true;
   071E D3            [12] 2075 	setb	c
   071F 22            [24] 2076 	ret
   0720                    2077 00104$:
                           2078 ;	radio/packet.c:377: last_recv_is_resend = true;
   0720 D2*02         [12] 2079 	setb	_last_recv_is_resend
                           2080 ;	radio/packet.c:378: return false;
   0722 C3            [12] 2081 	clr	c
   0723 22            [24] 2082 	ret
                           2083 ;------------------------------------------------------------
                           2084 ;Allocation info for local variables in function 'packet_inject'
                           2085 ;------------------------------------------------------------
                           2086 ;	radio/packet.c:383: packet_inject(__xdata uint8_t * __pdata buf, __pdata uint8_t len)
                           2087 ;	-----------------------------------------
                           2088 ;	 function packet_inject
                           2089 ;	-----------------------------------------
   0724                    2090 _packet_inject:
   0724 AE 82         [24] 2091 	mov	r6,dpl
   0726 AF 83         [24] 2092 	mov	r7,dph
                           2093 ;	radio/packet.c:385: if (len > sizeof(last_sent)) {
   0728 78r10         [12] 2094 	mov	r0,#_packet_inject_PARM_2
   072A C3            [12] 2095 	clr	c
   072B E2            [24] 2096 	movx	a,@r0
   072C F5 F0         [12] 2097 	mov	b,a
   072E 74 FC         [12] 2098 	mov	a,#0xFC
   0730 95 F0         [12] 2099 	subb	a,b
   0732 50 05         [24] 2100 	jnc	00102$
                           2101 ;	radio/packet.c:386: len = sizeof(last_sent);
   0734 78r10         [12] 2102 	mov	r0,#_packet_inject_PARM_2
   0736 74 FC         [12] 2103 	mov	a,#0xFC
   0738 F2            [24] 2104 	movx	@r0,a
   0739                    2105 00102$:
                           2106 ;	radio/packet.c:388: memcpy(last_sent, buf, len);
   0739 90r00r00      [24] 2107 	mov	dptr,#_memcpy_PARM_2
   073C EE            [12] 2108 	mov	a,r6
   073D F0            [24] 2109 	movx	@dptr,a
   073E EF            [12] 2110 	mov	a,r7
   073F A3            [24] 2111 	inc	dptr
   0740 F0            [24] 2112 	movx	@dptr,a
   0741 E4            [12] 2113 	clr	a
   0742 A3            [24] 2114 	inc	dptr
   0743 F0            [24] 2115 	movx	@dptr,a
   0744 78r10         [12] 2116 	mov	r0,#_packet_inject_PARM_2
   0746 90r00r00      [24] 2117 	mov	dptr,#_memcpy_PARM_3
   0749 E2            [24] 2118 	movx	a,@r0
   074A F0            [24] 2119 	movx	@dptr,a
   074B E4            [12] 2120 	clr	a
   074C A3            [24] 2121 	inc	dptr
   074D F0            [24] 2122 	movx	@dptr,a
   074E 90r00rFC      [24] 2123 	mov	dptr,#_last_sent
   0751 75 F0 00      [24] 2124 	mov	b,#0x00
   0754 12r00r00      [24] 2125 	lcall	_memcpy
                           2126 ;	radio/packet.c:389: last_sent_len = len;
   0757 78r10         [12] 2127 	mov	r0,#_packet_inject_PARM_2
   0759 E2            [24] 2128 	movx	a,@r0
   075A 78r00         [12] 2129 	mov	r0,#_last_sent_len
   075C F2            [24] 2130 	movx	@r0,a
                           2131 ;	radio/packet.c:390: last_sent_is_resend = false;
   075D C2*00         [12] 2132 	clr	_last_sent_is_resend
                           2133 ;	radio/packet.c:391: injected_packet = true;
   075F D2*04         [12] 2134 	setb	_injected_packet
   0761 22            [24] 2135 	ret
                           2136 	.area CSEG    (CODE)
                           2137 	.area CONST   (CODE)
                           2138 	.area XINIT   (CODE)
                           2139 	.area CABS    (ABS,CODE)
