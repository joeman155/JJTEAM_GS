                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.3.0 #8604 (May 11 2013) (Linux)
                              4 ; This file was generated Sun Nov 24 17:43:07 2013
                              5 ;--------------------------------------------------------
                              6 	.module radio
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _Receiver_ISR
                             13 	.globl _crc16
                             14 	.globl _golay_decode
                             15 	.globl _golay_encode
                             16 	.globl _delay_msec
                             17 	.globl _delay_expired
                             18 	.globl _delay_set
                             19 	.globl _timer2_tick
                             20 	.globl _panic
                             21 	.globl _param_get
                             22 	.globl _memcpy
                             23 	.globl _SDN
                             24 	.globl _NSS1
                             25 	.globl _IRQ
                             26 	.globl _BUTTON_DOWN
                             27 	.globl _BUTTON_UP
                             28 	.globl _BUTTON_ENTER
                             29 	.globl _LED_GREEN
                             30 	.globl _LED_RED
                             31 	.globl _SPI0EN
                             32 	.globl _TXBMT0
                             33 	.globl _NSS0MD0
                             34 	.globl _NSS0MD1
                             35 	.globl _RXOVRN0
                             36 	.globl _MODF0
                             37 	.globl _WCOL0
                             38 	.globl _SPIF0
                             39 	.globl _AD0CM0
                             40 	.globl _AD0CM1
                             41 	.globl _AD0CM2
                             42 	.globl _AD0WINT
                             43 	.globl _AD0BUSY
                             44 	.globl _AD0INT
                             45 	.globl _BURSTEN
                             46 	.globl _AD0EN
                             47 	.globl _CCF0
                             48 	.globl _CCF1
                             49 	.globl _CCF2
                             50 	.globl _CCF3
                             51 	.globl _CCF4
                             52 	.globl _CCF5
                             53 	.globl _CR
                             54 	.globl _CF
                             55 	.globl _P
                             56 	.globl _F1
                             57 	.globl _OV
                             58 	.globl _RS0
                             59 	.globl _RS1
                             60 	.globl _F0
                             61 	.globl _AC
                             62 	.globl _CY
                             63 	.globl _T2XCLK
                             64 	.globl _T2RCLK
                             65 	.globl _TR2
                             66 	.globl _T2SPLIT
                             67 	.globl _TF2CEN
                             68 	.globl _TF2LEN
                             69 	.globl _TF2L
                             70 	.globl _TF2H
                             71 	.globl _SI
                             72 	.globl _ACK
                             73 	.globl _ARBLOST
                             74 	.globl _ACKRQ
                             75 	.globl _STO
                             76 	.globl _STA
                             77 	.globl _TXMODE
                             78 	.globl _MASTER
                             79 	.globl _PX0
                             80 	.globl _PT0
                             81 	.globl _PX1
                             82 	.globl _PT1
                             83 	.globl _PS0
                             84 	.globl _PT2
                             85 	.globl _PSPI0
                             86 	.globl _SPI1EN
                             87 	.globl _TXBMT1
                             88 	.globl _NSS1MD0
                             89 	.globl _NSS1MD1
                             90 	.globl _RXOVRN1
                             91 	.globl _MODF1
                             92 	.globl _WCOL1
                             93 	.globl _SPIF1
                             94 	.globl _EX0
                             95 	.globl _ET0
                             96 	.globl _EX1
                             97 	.globl _ET1
                             98 	.globl _ES0
                             99 	.globl _ET2
                            100 	.globl _ESPI0
                            101 	.globl _EA
                            102 	.globl _RI0
                            103 	.globl _TI0
                            104 	.globl _RB80
                            105 	.globl _TB80
                            106 	.globl _REN0
                            107 	.globl _MCE0
                            108 	.globl _S0MODE
                            109 	.globl _CRC0VAL
                            110 	.globl _CRC0INIT
                            111 	.globl _CRC0SEL
                            112 	.globl _IT0
                            113 	.globl _IE0
                            114 	.globl _IT1
                            115 	.globl _IE1
                            116 	.globl _TR0
                            117 	.globl _TF0
                            118 	.globl _TR1
                            119 	.globl _TF1
                            120 	.globl _PCA0CP4
                            121 	.globl _PCA0CP0
                            122 	.globl _PCA0
                            123 	.globl _PCA0CP3
                            124 	.globl _PCA0CP2
                            125 	.globl _PCA0CP1
                            126 	.globl _PCA0CP5
                            127 	.globl _TMR2
                            128 	.globl _TMR2RL
                            129 	.globl _ADC0LT
                            130 	.globl _ADC0GT
                            131 	.globl _ADC0
                            132 	.globl _TMR3
                            133 	.globl _TMR3RL
                            134 	.globl _TOFF
                            135 	.globl _DP
                            136 	.globl _VDM0CN
                            137 	.globl _PCA0CPH4
                            138 	.globl _PCA0CPL4
                            139 	.globl _PCA0CPH0
                            140 	.globl _PCA0CPL0
                            141 	.globl _PCA0H
                            142 	.globl _PCA0L
                            143 	.globl _SPI0CN
                            144 	.globl _EIP2
                            145 	.globl _EIP1
                            146 	.globl _SMB0ADM
                            147 	.globl _SMB0ADR
                            148 	.globl _P2MDIN
                            149 	.globl _P1MDIN
                            150 	.globl _P0MDIN
                            151 	.globl _B
                            152 	.globl _RSTSRC
                            153 	.globl _PCA0CPH3
                            154 	.globl _PCA0CPL3
                            155 	.globl _PCA0CPH2
                            156 	.globl _PCA0CPL2
                            157 	.globl _PCA0CPH1
                            158 	.globl _PCA0CPL1
                            159 	.globl _ADC0CN
                            160 	.globl _EIE2
                            161 	.globl _EIE1
                            162 	.globl _FLWR
                            163 	.globl _IT01CF
                            164 	.globl _XBR2
                            165 	.globl _XBR1
                            166 	.globl _XBR0
                            167 	.globl _ACC
                            168 	.globl _PCA0PWM
                            169 	.globl _PCA0CPM4
                            170 	.globl _PCA0CPM3
                            171 	.globl _PCA0CPM2
                            172 	.globl _PCA0CPM1
                            173 	.globl _PCA0CPM0
                            174 	.globl _PCA0MD
                            175 	.globl _PCA0CN
                            176 	.globl _P0MAT
                            177 	.globl _P2SKIP
                            178 	.globl _P1SKIP
                            179 	.globl _P0SKIP
                            180 	.globl _PCA0CPH5
                            181 	.globl _PCA0CPL5
                            182 	.globl _REF0CN
                            183 	.globl _PSW
                            184 	.globl _P1MAT
                            185 	.globl _PCA0CPM5
                            186 	.globl _TMR2H
                            187 	.globl _TMR2L
                            188 	.globl _TMR2RLH
                            189 	.globl _TMR2RLL
                            190 	.globl _REG0CN
                            191 	.globl _TMR2CN
                            192 	.globl _P0MASK
                            193 	.globl _ADC0LTH
                            194 	.globl _ADC0LTL
                            195 	.globl _ADC0GTH
                            196 	.globl _ADC0GTL
                            197 	.globl _SMB0DAT
                            198 	.globl _SMB0CF
                            199 	.globl _SMB0CN
                            200 	.globl _P1MASK
                            201 	.globl _ADC0H
                            202 	.globl _ADC0L
                            203 	.globl _ADC0TK
                            204 	.globl _ADC0CF
                            205 	.globl _ADC0MX
                            206 	.globl _ADC0PWR
                            207 	.globl _ADC0AC
                            208 	.globl _IREF0CN
                            209 	.globl _IP
                            210 	.globl _FLKEY
                            211 	.globl _FLSCL
                            212 	.globl _PMU0CF
                            213 	.globl _OSCICL
                            214 	.globl _OSCICN
                            215 	.globl _OSCXCN
                            216 	.globl _SPI1CN
                            217 	.globl _ONESHOT
                            218 	.globl _EMI0TC
                            219 	.globl _RTC0KEY
                            220 	.globl _RTC0DAT
                            221 	.globl _RTC0ADR
                            222 	.globl _EMI0CF
                            223 	.globl _EMI0CN
                            224 	.globl _CLKSEL
                            225 	.globl _IE
                            226 	.globl _SFRPAGE
                            227 	.globl _P2DRV
                            228 	.globl _P2MDOUT
                            229 	.globl _P1DRV
                            230 	.globl _P1MDOUT
                            231 	.globl _P0DRV
                            232 	.globl _P0MDOUT
                            233 	.globl _SPI0DAT
                            234 	.globl _SPI0CKR
                            235 	.globl _SPI0CFG
                            236 	.globl _P2
                            237 	.globl _CPT0MX
                            238 	.globl _CPT1MX
                            239 	.globl _CPT0MD
                            240 	.globl _CPT1MD
                            241 	.globl _CPT0CN
                            242 	.globl _CPT1CN
                            243 	.globl _SBUF0
                            244 	.globl _SCON0
                            245 	.globl _CRC0CNT
                            246 	.globl _DC0CN
                            247 	.globl _CRC0AUTO
                            248 	.globl _DC0CF
                            249 	.globl _TMR3H
                            250 	.globl _CRC0FLIP
                            251 	.globl _TMR3L
                            252 	.globl _CRC0IN
                            253 	.globl _TMR3RLH
                            254 	.globl _CRC0CN
                            255 	.globl _TMR3RLL
                            256 	.globl _CRC0DAT
                            257 	.globl _TMR3CN
                            258 	.globl _P1
                            259 	.globl _PSCTL
                            260 	.globl _CKCON
                            261 	.globl _TH1
                            262 	.globl _TH0
                            263 	.globl _TL1
                            264 	.globl _TL0
                            265 	.globl _TMOD
                            266 	.globl _TCON
                            267 	.globl _PCON
                            268 	.globl _TOFFH
                            269 	.globl _SPI1DAT
                            270 	.globl _TOFFL
                            271 	.globl _SPI1CKR
                            272 	.globl _SPI1CFG
                            273 	.globl _DPH
                            274 	.globl _DPL
                            275 	.globl _SP
                            276 	.globl _P0
                            277 	.globl _radio_buffer
                            278 	.globl _radio_transmit_PARM_3
                            279 	.globl _radio_transmit_PARM_2
                            280 	.globl _radio_receive_packet_PARM_2
                            281 	.globl _settings
                            282 	.globl _netid
                            283 	.globl _last_rssi
                            284 	.globl _partial_packet_length
                            285 	.globl _receive_packet_length
                            286 	.globl _radio_set_diversity_PARM_1
                            287 	.globl _radio_receive_packet
                            288 	.globl _radio_receive_in_progress
                            289 	.globl _radio_preamble_detected
                            290 	.globl _radio_last_rssi
                            291 	.globl _radio_current_rssi
                            292 	.globl _radio_air_rate
                            293 	.globl _radio_transmit
                            294 	.globl _radio_receiver_on
                            295 	.globl _radio_initialise
                            296 	.globl _radio_set_frequency
                            297 	.globl _radio_set_channel_spacing
                            298 	.globl _radio_set_channel
                            299 	.globl _radio_get_channel
                            300 	.globl _radio_configure
                            301 	.globl _radio_set_transmit_power
                            302 	.globl _radio_get_transmit_power
                            303 	.globl _radio_set_network_id
                            304 	.globl _radio_temperature
                            305 	.globl _radio_set_diversity
                            306 ;--------------------------------------------------------
                            307 ; special function registers
                            308 ;--------------------------------------------------------
                            309 	.area RSEG    (ABS,DATA)
   0000                     310 	.org 0x0000
                     0080   311 _P0	=	0x0080
                     0081   312 _SP	=	0x0081
                     0082   313 _DPL	=	0x0082
                     0083   314 _DPH	=	0x0083
                     0084   315 _SPI1CFG	=	0x0084
                     0085   316 _SPI1CKR	=	0x0085
                     0085   317 _TOFFL	=	0x0085
                     0086   318 _SPI1DAT	=	0x0086
                     0086   319 _TOFFH	=	0x0086
                     0087   320 _PCON	=	0x0087
                     0088   321 _TCON	=	0x0088
                     0089   322 _TMOD	=	0x0089
                     008A   323 _TL0	=	0x008a
                     008B   324 _TL1	=	0x008b
                     008C   325 _TH0	=	0x008c
                     008D   326 _TH1	=	0x008d
                     008E   327 _CKCON	=	0x008e
                     008F   328 _PSCTL	=	0x008f
                     0090   329 _P1	=	0x0090
                     0091   330 _TMR3CN	=	0x0091
                     0091   331 _CRC0DAT	=	0x0091
                     0092   332 _TMR3RLL	=	0x0092
                     0092   333 _CRC0CN	=	0x0092
                     0093   334 _TMR3RLH	=	0x0093
                     0093   335 _CRC0IN	=	0x0093
                     0094   336 _TMR3L	=	0x0094
                     0095   337 _CRC0FLIP	=	0x0095
                     0095   338 _TMR3H	=	0x0095
                     0096   339 _DC0CF	=	0x0096
                     0096   340 _CRC0AUTO	=	0x0096
                     0097   341 _DC0CN	=	0x0097
                     0097   342 _CRC0CNT	=	0x0097
                     0098   343 _SCON0	=	0x0098
                     0099   344 _SBUF0	=	0x0099
                     009A   345 _CPT1CN	=	0x009a
                     009B   346 _CPT0CN	=	0x009b
                     009C   347 _CPT1MD	=	0x009c
                     009D   348 _CPT0MD	=	0x009d
                     009E   349 _CPT1MX	=	0x009e
                     009F   350 _CPT0MX	=	0x009f
                     00A0   351 _P2	=	0x00a0
                     00A1   352 _SPI0CFG	=	0x00a1
                     00A2   353 _SPI0CKR	=	0x00a2
                     00A3   354 _SPI0DAT	=	0x00a3
                     00A4   355 _P0MDOUT	=	0x00a4
                     00A4   356 _P0DRV	=	0x00a4
                     00A5   357 _P1MDOUT	=	0x00a5
                     00A5   358 _P1DRV	=	0x00a5
                     00A6   359 _P2MDOUT	=	0x00a6
                     00A6   360 _P2DRV	=	0x00a6
                     00A7   361 _SFRPAGE	=	0x00a7
                     00A8   362 _IE	=	0x00a8
                     00A9   363 _CLKSEL	=	0x00a9
                     00AA   364 _EMI0CN	=	0x00aa
                     00AB   365 _EMI0CF	=	0x00ab
                     00AC   366 _RTC0ADR	=	0x00ac
                     00AD   367 _RTC0DAT	=	0x00ad
                     00AE   368 _RTC0KEY	=	0x00ae
                     00AF   369 _EMI0TC	=	0x00af
                     00AF   370 _ONESHOT	=	0x00af
                     00B0   371 _SPI1CN	=	0x00b0
                     00B1   372 _OSCXCN	=	0x00b1
                     00B2   373 _OSCICN	=	0x00b2
                     00B3   374 _OSCICL	=	0x00b3
                     00B5   375 _PMU0CF	=	0x00b5
                     00B6   376 _FLSCL	=	0x00b6
                     00B7   377 _FLKEY	=	0x00b7
                     00B8   378 _IP	=	0x00b8
                     00B9   379 _IREF0CN	=	0x00b9
                     00BA   380 _ADC0AC	=	0x00ba
                     00BA   381 _ADC0PWR	=	0x00ba
                     00BB   382 _ADC0MX	=	0x00bb
                     00BC   383 _ADC0CF	=	0x00bc
                     00BD   384 _ADC0TK	=	0x00bd
                     00BD   385 _ADC0L	=	0x00bd
                     00BE   386 _ADC0H	=	0x00be
                     00BF   387 _P1MASK	=	0x00bf
                     00C0   388 _SMB0CN	=	0x00c0
                     00C1   389 _SMB0CF	=	0x00c1
                     00C2   390 _SMB0DAT	=	0x00c2
                     00C3   391 _ADC0GTL	=	0x00c3
                     00C4   392 _ADC0GTH	=	0x00c4
                     00C5   393 _ADC0LTL	=	0x00c5
                     00C6   394 _ADC0LTH	=	0x00c6
                     00C7   395 _P0MASK	=	0x00c7
                     00C8   396 _TMR2CN	=	0x00c8
                     00C9   397 _REG0CN	=	0x00c9
                     00CA   398 _TMR2RLL	=	0x00ca
                     00CB   399 _TMR2RLH	=	0x00cb
                     00CC   400 _TMR2L	=	0x00cc
                     00CD   401 _TMR2H	=	0x00cd
                     00CE   402 _PCA0CPM5	=	0x00ce
                     00CF   403 _P1MAT	=	0x00cf
                     00D0   404 _PSW	=	0x00d0
                     00D1   405 _REF0CN	=	0x00d1
                     00D2   406 _PCA0CPL5	=	0x00d2
                     00D3   407 _PCA0CPH5	=	0x00d3
                     00D4   408 _P0SKIP	=	0x00d4
                     00D5   409 _P1SKIP	=	0x00d5
                     00D6   410 _P2SKIP	=	0x00d6
                     00D7   411 _P0MAT	=	0x00d7
                     00D8   412 _PCA0CN	=	0x00d8
                     00D9   413 _PCA0MD	=	0x00d9
                     00DA   414 _PCA0CPM0	=	0x00da
                     00DB   415 _PCA0CPM1	=	0x00db
                     00DC   416 _PCA0CPM2	=	0x00dc
                     00DD   417 _PCA0CPM3	=	0x00dd
                     00DE   418 _PCA0CPM4	=	0x00de
                     00DF   419 _PCA0PWM	=	0x00df
                     00E0   420 _ACC	=	0x00e0
                     00E1   421 _XBR0	=	0x00e1
                     00E2   422 _XBR1	=	0x00e2
                     00E3   423 _XBR2	=	0x00e3
                     00E4   424 _IT01CF	=	0x00e4
                     00E5   425 _FLWR	=	0x00e5
                     00E6   426 _EIE1	=	0x00e6
                     00E7   427 _EIE2	=	0x00e7
                     00E8   428 _ADC0CN	=	0x00e8
                     00E9   429 _PCA0CPL1	=	0x00e9
                     00EA   430 _PCA0CPH1	=	0x00ea
                     00EB   431 _PCA0CPL2	=	0x00eb
                     00EC   432 _PCA0CPH2	=	0x00ec
                     00ED   433 _PCA0CPL3	=	0x00ed
                     00EE   434 _PCA0CPH3	=	0x00ee
                     00EF   435 _RSTSRC	=	0x00ef
                     00F0   436 _B	=	0x00f0
                     00F1   437 _P0MDIN	=	0x00f1
                     00F2   438 _P1MDIN	=	0x00f2
                     00F3   439 _P2MDIN	=	0x00f3
                     00F4   440 _SMB0ADR	=	0x00f4
                     00F5   441 _SMB0ADM	=	0x00f5
                     00F6   442 _EIP1	=	0x00f6
                     00F7   443 _EIP2	=	0x00f7
                     00F8   444 _SPI0CN	=	0x00f8
                     00F9   445 _PCA0L	=	0x00f9
                     00FA   446 _PCA0H	=	0x00fa
                     00FB   447 _PCA0CPL0	=	0x00fb
                     00FC   448 _PCA0CPH0	=	0x00fc
                     00FD   449 _PCA0CPL4	=	0x00fd
                     00FE   450 _PCA0CPH4	=	0x00fe
                     00FF   451 _VDM0CN	=	0x00ff
                     8382   452 _DP	=	0x8382
                     8685   453 _TOFF	=	0x8685
                     9392   454 _TMR3RL	=	0x9392
                     9594   455 _TMR3	=	0x9594
                     BEBD   456 _ADC0	=	0xbebd
                     C4C3   457 _ADC0GT	=	0xc4c3
                     C6C5   458 _ADC0LT	=	0xc6c5
                     CBCA   459 _TMR2RL	=	0xcbca
                     CDCC   460 _TMR2	=	0xcdcc
                     D3D2   461 _PCA0CP5	=	0xd3d2
                     EAE9   462 _PCA0CP1	=	0xeae9
                     ECEB   463 _PCA0CP2	=	0xeceb
                     EEED   464 _PCA0CP3	=	0xeeed
                     FAF9   465 _PCA0	=	0xfaf9
                     FCFB   466 _PCA0CP0	=	0xfcfb
                     FEFD   467 _PCA0CP4	=	0xfefd
                            468 ;--------------------------------------------------------
                            469 ; special function bits
                            470 ;--------------------------------------------------------
                            471 	.area RSEG    (ABS,DATA)
   0000                     472 	.org 0x0000
                     008F   473 _TF1	=	0x008f
                     008E   474 _TR1	=	0x008e
                     008D   475 _TF0	=	0x008d
                     008C   476 _TR0	=	0x008c
                     008B   477 _IE1	=	0x008b
                     008A   478 _IT1	=	0x008a
                     0089   479 _IE0	=	0x0089
                     0088   480 _IT0	=	0x0088
                     0096   481 _CRC0SEL	=	0x0096
                     0095   482 _CRC0INIT	=	0x0095
                     0094   483 _CRC0VAL	=	0x0094
                     009F   484 _S0MODE	=	0x009f
                     009D   485 _MCE0	=	0x009d
                     009C   486 _REN0	=	0x009c
                     009B   487 _TB80	=	0x009b
                     009A   488 _RB80	=	0x009a
                     0099   489 _TI0	=	0x0099
                     0098   490 _RI0	=	0x0098
                     00AF   491 _EA	=	0x00af
                     00AE   492 _ESPI0	=	0x00ae
                     00AD   493 _ET2	=	0x00ad
                     00AC   494 _ES0	=	0x00ac
                     00AB   495 _ET1	=	0x00ab
                     00AA   496 _EX1	=	0x00aa
                     00A9   497 _ET0	=	0x00a9
                     00A8   498 _EX0	=	0x00a8
                     00B7   499 _SPIF1	=	0x00b7
                     00B6   500 _WCOL1	=	0x00b6
                     00B5   501 _MODF1	=	0x00b5
                     00B4   502 _RXOVRN1	=	0x00b4
                     00B3   503 _NSS1MD1	=	0x00b3
                     00B2   504 _NSS1MD0	=	0x00b2
                     00B1   505 _TXBMT1	=	0x00b1
                     00B0   506 _SPI1EN	=	0x00b0
                     00BE   507 _PSPI0	=	0x00be
                     00BD   508 _PT2	=	0x00bd
                     00BC   509 _PS0	=	0x00bc
                     00BB   510 _PT1	=	0x00bb
                     00BA   511 _PX1	=	0x00ba
                     00B9   512 _PT0	=	0x00b9
                     00B8   513 _PX0	=	0x00b8
                     00C7   514 _MASTER	=	0x00c7
                     00C6   515 _TXMODE	=	0x00c6
                     00C5   516 _STA	=	0x00c5
                     00C4   517 _STO	=	0x00c4
                     00C3   518 _ACKRQ	=	0x00c3
                     00C2   519 _ARBLOST	=	0x00c2
                     00C1   520 _ACK	=	0x00c1
                     00C0   521 _SI	=	0x00c0
                     00CF   522 _TF2H	=	0x00cf
                     00CE   523 _TF2L	=	0x00ce
                     00CD   524 _TF2LEN	=	0x00cd
                     00CC   525 _TF2CEN	=	0x00cc
                     00CB   526 _T2SPLIT	=	0x00cb
                     00CA   527 _TR2	=	0x00ca
                     00C9   528 _T2RCLK	=	0x00c9
                     00C8   529 _T2XCLK	=	0x00c8
                     00D7   530 _CY	=	0x00d7
                     00D6   531 _AC	=	0x00d6
                     00D5   532 _F0	=	0x00d5
                     00D4   533 _RS1	=	0x00d4
                     00D3   534 _RS0	=	0x00d3
                     00D2   535 _OV	=	0x00d2
                     00D1   536 _F1	=	0x00d1
                     00D0   537 _P	=	0x00d0
                     00DF   538 _CF	=	0x00df
                     00DE   539 _CR	=	0x00de
                     00DD   540 _CCF5	=	0x00dd
                     00DC   541 _CCF4	=	0x00dc
                     00DB   542 _CCF3	=	0x00db
                     00DA   543 _CCF2	=	0x00da
                     00D9   544 _CCF1	=	0x00d9
                     00D8   545 _CCF0	=	0x00d8
                     00EF   546 _AD0EN	=	0x00ef
                     00EE   547 _BURSTEN	=	0x00ee
                     00ED   548 _AD0INT	=	0x00ed
                     00EC   549 _AD0BUSY	=	0x00ec
                     00EB   550 _AD0WINT	=	0x00eb
                     00EA   551 _AD0CM2	=	0x00ea
                     00E9   552 _AD0CM1	=	0x00e9
                     00E8   553 _AD0CM0	=	0x00e8
                     00FF   554 _SPIF0	=	0x00ff
                     00FE   555 _WCOL0	=	0x00fe
                     00FD   556 _MODF0	=	0x00fd
                     00FC   557 _RXOVRN0	=	0x00fc
                     00FB   558 _NSS0MD1	=	0x00fb
                     00FA   559 _NSS0MD0	=	0x00fa
                     00F9   560 _TXBMT0	=	0x00f9
                     00F8   561 _SPI0EN	=	0x00f8
                     00A0   562 _LED_RED	=	0x00a0
                     00A5   563 _LED_GREEN	=	0x00a5
                     0086   564 _BUTTON_ENTER	=	0x0086
                     0095   565 _BUTTON_UP	=	0x0095
                     0096   566 _BUTTON_DOWN	=	0x0096
                     0087   567 _IRQ	=	0x0087
                     0094   568 _NSS1	=	0x0094
                     00A6   569 _SDN	=	0x00a6
                            570 ;--------------------------------------------------------
                            571 ; overlayable register banks
                            572 ;--------------------------------------------------------
                            573 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     574 	.ds 8
                            575 ;--------------------------------------------------------
                            576 ; overlayable bit register bank
                            577 ;--------------------------------------------------------
                            578 	.area BIT_BANK	(REL,OVR,DATA)
   0000                     579 bits:
   0000                     580 	.ds 1
                     8000   581 	b0 = bits[0]
                     8100   582 	b1 = bits[1]
                     8200   583 	b2 = bits[2]
                     8300   584 	b3 = bits[3]
                     8400   585 	b4 = bits[4]
                     8500   586 	b5 = bits[5]
                     8600   587 	b6 = bits[6]
                     8700   588 	b7 = bits[7]
                            589 ;--------------------------------------------------------
                            590 ; internal ram data
                            591 ;--------------------------------------------------------
                            592 	.area DSEG    (DATA)
   0000                     593 _radio_receive_packet_crc1_1_135:
   0000                     594 	.ds 2
   0002                     595 _radio_transmit_golay_elen_1_186:
   0002                     596 	.ds 1
                            597 ;--------------------------------------------------------
                            598 ; overlayable items in internal ram 
                            599 ;--------------------------------------------------------
                            600 	.area	OSEG    (OVR,DATA)
                            601 ;--------------------------------------------------------
                            602 ; indirectly addressable internal ram data
                            603 ;--------------------------------------------------------
                            604 	.area ISEG    (DATA)
                            605 ;--------------------------------------------------------
                            606 ; absolute internal ram data
                            607 ;--------------------------------------------------------
                            608 	.area IABS    (ABS,DATA)
                            609 	.area IABS    (ABS,DATA)
                            610 ;--------------------------------------------------------
                            611 ; bit data
                            612 ;--------------------------------------------------------
                            613 	.area BSEG    (BIT)
   0000                     614 _packet_received:
   0000                     615 	.ds 1
   0001                     616 _preamble_detected:
   0001                     617 	.ds 1
   0002                     618 _radio_preamble_detected_EX0_saved_1_157:
   0002                     619 	.ds 1
   0003                     620 _radio_transmit_simple_transmit_started_1_170:
   0003                     621 	.ds 1
   0004                     622 _radio_transmit_golay_sloc0_1_0:
   0004                     623 	.ds 1
   0005                     624 _radio_transmit_EX0_saved_1_189:
   0005                     625 	.ds 1
   0006                     626 _radio_transmit_sloc0_1_0:
   0006                     627 	.ds 1
   0007                     628 _radio_initialise_sloc0_1_0:
   0007                     629 	.ds 1
   0008                     630 _radio_set_diversity_PARM_1:
   0008                     631 	.ds 1
                            632 ;--------------------------------------------------------
                            633 ; paged external ram data
                            634 ;--------------------------------------------------------
                            635 	.area PSEG    (PAG,XDATA)
   0000                     636 _receive_packet_length::
   0000                     637 	.ds 1
   0001                     638 _partial_packet_length::
   0001                     639 	.ds 1
   0002                     640 _last_rssi::
   0002                     641 	.ds 1
   0003                     642 _netid::
   0003                     643 	.ds 2
   0005                     644 _settings::
   0005                     645 	.ds 12
   0011                     646 _radio_receive_packet_PARM_2:
   0011                     647 	.ds 2
   0013                     648 _radio_write_transmit_fifo_PARM_2:
   0013                     649 	.ds 2
   0015                     650 _radio_transmit_simple_PARM_2:
   0015                     651 	.ds 2
   0017                     652 _radio_transmit_simple_PARM_3:
   0017                     653 	.ds 2
   0019                     654 _radio_transmit_golay_PARM_2:
   0019                     655 	.ds 2
   001B                     656 _radio_transmit_golay_PARM_3:
   001B                     657 	.ds 2
   001D                     658 _radio_transmit_PARM_2:
   001D                     659 	.ds 2
   001F                     660 _radio_transmit_PARM_3:
   001F                     661 	.ds 2
   0021                     662 _scale_uint32_PARM_2:
   0021                     663 	.ds 4
   0025                     664 _scale_uint32_value_1_248:
   0025                     665 	.ds 4
   0029                     666 _set_frequency_registers_frequency_1_256:
   0029                     667 	.ds 4
                            668 ;--------------------------------------------------------
                            669 ; external ram data
                            670 ;--------------------------------------------------------
                            671 	.area XSEG    (XDATA)
   0000                     672 _radio_buffer::
   0000                     673 	.ds 252
   00FC                     674 _radio_receive_packet_length_1_134:
   00FC                     675 	.ds 3
   00FF                     676 _radio_receive_packet_gout_1_135:
   00FF                     677 	.ds 3
   0102                     678 _radio_transmit_golay_length_1_185:
   0102                     679 	.ds 1
   0103                     680 _radio_transmit_golay_gin_1_186:
   0103                     681 	.ds 3
   0106                     682 _radio_transmit_length_1_188:
   0106                     683 	.ds 1
   0107                     684 _radio_set_channel_channel_1_206:
   0107                     685 	.ds 1
   0108                     686 _radio_set_transmit_power_power_1_230:
   0108                     687 	.ds 1
   0109                     688 _radio_set_transmit_power_i_1_231:
   0109                     689 	.ds 1
   010A                     690 _radio_set_network_id_id_1_236:
   010A                     691 	.ds 2
   010C                     692 _set_frequency_registers_band_1_257:
   010C                     693 	.ds 1
                            694 ;--------------------------------------------------------
                            695 ; absolute external ram data
                            696 ;--------------------------------------------------------
                            697 	.area XABS    (ABS,XDATA)
                            698 ;--------------------------------------------------------
                            699 ; external initialized ram data
                            700 ;--------------------------------------------------------
                            701 	.area XISEG   (XDATA)
                            702 	.area HOME    (CODE)
                            703 	.area GSINIT0 (CODE)
                            704 	.area GSINIT1 (CODE)
                            705 	.area GSINIT2 (CODE)
                            706 	.area GSINIT3 (CODE)
                            707 	.area GSINIT4 (CODE)
                            708 	.area GSINIT5 (CODE)
                            709 	.area GSINIT  (CODE)
                            710 	.area GSFINAL (CODE)
                            711 	.area CSEG    (CODE)
                            712 ;--------------------------------------------------------
                            713 ; global & static initialisations
                            714 ;--------------------------------------------------------
                            715 	.area HOME    (CODE)
                            716 	.area GSINIT  (CODE)
                            717 	.area GSFINAL (CODE)
                            718 	.area GSINIT  (CODE)
                            719 ;--------------------------------------------------------
                            720 ; Home
                            721 ;--------------------------------------------------------
                            722 	.area HOME    (CODE)
                            723 	.area HOME    (CODE)
                            724 ;--------------------------------------------------------
                            725 ; code
                            726 ;--------------------------------------------------------
                            727 	.area CSEG    (CODE)
                            728 ;------------------------------------------------------------
                            729 ;Allocation info for local variables in function 'radio_receive_packet'
                            730 ;------------------------------------------------------------
                            731 ;crc1                      Allocated with name '_radio_receive_packet_crc1_1_135'
                            732 ;crc2                      Allocated to registers r5 r7 
                            733 ;errcount                  Allocated to registers r6 
                            734 ;elen                      Allocated to registers r7 
                            735 ;length                    Allocated with name '_radio_receive_packet_length_1_134'
                            736 ;gout                      Allocated with name '_radio_receive_packet_gout_1_135'
                            737 ;------------------------------------------------------------
                            738 ;	radio/radio.c:77: radio_receive_packet(uint8_t *length, __xdata uint8_t * __pdata buf)
                            739 ;	-----------------------------------------
                            740 ;	 function radio_receive_packet
                            741 ;	-----------------------------------------
   0000                     742 _radio_receive_packet:
                     0007   743 	ar7 = 0x07
                     0006   744 	ar6 = 0x06
                     0005   745 	ar5 = 0x05
                     0004   746 	ar4 = 0x04
                     0003   747 	ar3 = 0x03
                     0002   748 	ar2 = 0x02
                     0001   749 	ar1 = 0x01
                     0000   750 	ar0 = 0x00
   0000 AF F0         [24]  751 	mov	r7,b
   0002 AE 83         [24]  752 	mov	r6,dph
   0004 E5 82         [12]  753 	mov	a,dpl
   0006 90r00rFC      [24]  754 	mov	dptr,#_radio_receive_packet_length_1_134
   0009 F0            [24]  755 	movx	@dptr,a
   000A EE            [12]  756 	mov	a,r6
   000B A3            [24]  757 	inc	dptr
   000C F0            [24]  758 	movx	@dptr,a
   000D EF            [12]  759 	mov	a,r7
   000E A3            [24]  760 	inc	dptr
   000F F0            [24]  761 	movx	@dptr,a
                            762 ;	radio/radio.c:84: if (!packet_received) {
   0010 20*00 02      [24]  763 	jb	_packet_received,00102$
                            764 ;	radio/radio.c:85: return false;
   0013 C3            [12]  765 	clr	c
   0014 22            [24]  766 	ret
   0015                     767 00102$:
                            768 ;	radio/radio.c:88: if (receive_packet_length > MAX_PACKET_LENGTH) {
   0015 78r00         [12]  769 	mov	r0,#_receive_packet_length
   0017 C3            [12]  770 	clr	c
   0018 E2            [24]  771 	movx	a,@r0
   0019 F5 F0         [12]  772 	mov	b,a
   001B 74 FC         [12]  773 	mov	a,#0xFC
   001D 95 F0         [12]  774 	subb	a,b
   001F 50 06         [24]  775 	jnc	00104$
                            776 ;	radio/radio.c:89: radio_receiver_on();
   0021 12r06r70      [24]  777 	lcall	_radio_receiver_on
                            778 ;	radio/radio.c:90: goto failed;
   0024 02r02r40      [24]  779 	ljmp	00126$
   0027                     780 00104$:
                            781 ;	radio/radio.c:101: if (!feature_golay) {
   0027 20*00 45      [24]  782 	jb	_feature_golay,00106$
                            783 ;	radio/radio.c:103: *length = receive_packet_length;
   002A 90r00rFC      [24]  784 	mov	dptr,#_radio_receive_packet_length_1_134
   002D E0            [24]  785 	movx	a,@dptr
   002E FD            [12]  786 	mov	r5,a
   002F A3            [24]  787 	inc	dptr
   0030 E0            [24]  788 	movx	a,@dptr
   0031 FE            [12]  789 	mov	r6,a
   0032 A3            [24]  790 	inc	dptr
   0033 E0            [24]  791 	movx	a,@dptr
   0034 FF            [12]  792 	mov	r7,a
   0035 8D 82         [24]  793 	mov	dpl,r5
   0037 8E 83         [24]  794 	mov	dph,r6
   0039 8F F0         [24]  795 	mov	b,r7
   003B 78r00         [12]  796 	mov	r0,#_receive_packet_length
   003D E2            [24]  797 	movx	a,@r0
   003E 12r00r00      [24]  798 	lcall	__gptrput
                            799 ;	radio/radio.c:104: memcpy(buf, radio_buffer, receive_packet_length);
   0041 78r11         [12]  800 	mov	r0,#_radio_receive_packet_PARM_2
   0043 E2            [24]  801 	movx	a,@r0
   0044 FD            [12]  802 	mov	r5,a
   0045 08            [12]  803 	inc	r0
   0046 E2            [24]  804 	movx	a,@r0
   0047 FE            [12]  805 	mov	r6,a
   0048 7F 00         [12]  806 	mov	r7,#0x00
   004A 90r00r00      [24]  807 	mov	dptr,#_memcpy_PARM_2
   004D 74r00         [12]  808 	mov	a,#_radio_buffer
   004F F0            [24]  809 	movx	@dptr,a
   0050 74s00         [12]  810 	mov	a,#(_radio_buffer >> 8)
   0052 A3            [24]  811 	inc	dptr
   0053 F0            [24]  812 	movx	@dptr,a
   0054 E4            [12]  813 	clr	a
   0055 A3            [24]  814 	inc	dptr
   0056 F0            [24]  815 	movx	@dptr,a
   0057 78r00         [12]  816 	mov	r0,#_receive_packet_length
   0059 90r00r00      [24]  817 	mov	dptr,#_memcpy_PARM_3
   005C E2            [24]  818 	movx	a,@r0
   005D F0            [24]  819 	movx	@dptr,a
   005E E4            [12]  820 	clr	a
   005F A3            [24]  821 	inc	dptr
   0060 F0            [24]  822 	movx	@dptr,a
   0061 8D 82         [24]  823 	mov	dpl,r5
   0063 8E 83         [24]  824 	mov	dph,r6
   0065 8F F0         [24]  825 	mov	b,r7
   0067 12r00r00      [24]  826 	lcall	_memcpy
                            827 ;	radio/radio.c:105: radio_receiver_on();
   006A 12r06r70      [24]  828 	lcall	_radio_receiver_on
                            829 ;	radio/radio.c:106: return true;
   006D D3            [12]  830 	setb	c
   006E 22            [24]  831 	ret
   006F                     832 00106$:
                            833 ;	radio/radio.c:112: memcpy(buf, radio_buffer, receive_packet_length);
   006F 78r11         [12]  834 	mov	r0,#_radio_receive_packet_PARM_2
   0071 E2            [24]  835 	movx	a,@r0
   0072 FD            [12]  836 	mov	r5,a
   0073 08            [12]  837 	inc	r0
   0074 E2            [24]  838 	movx	a,@r0
   0075 FE            [12]  839 	mov	r6,a
   0076 7F 00         [12]  840 	mov	r7,#0x00
   0078 90r00r00      [24]  841 	mov	dptr,#_memcpy_PARM_2
   007B 74r00         [12]  842 	mov	a,#_radio_buffer
   007D F0            [24]  843 	movx	@dptr,a
   007E 74s00         [12]  844 	mov	a,#(_radio_buffer >> 8)
   0080 A3            [24]  845 	inc	dptr
   0081 F0            [24]  846 	movx	@dptr,a
   0082 E4            [12]  847 	clr	a
   0083 A3            [24]  848 	inc	dptr
   0084 F0            [24]  849 	movx	@dptr,a
   0085 78r00         [12]  850 	mov	r0,#_receive_packet_length
   0087 90r00r00      [24]  851 	mov	dptr,#_memcpy_PARM_3
   008A E2            [24]  852 	movx	a,@r0
   008B F0            [24]  853 	movx	@dptr,a
   008C E4            [12]  854 	clr	a
   008D A3            [24]  855 	inc	dptr
   008E F0            [24]  856 	movx	@dptr,a
   008F 8D 82         [24]  857 	mov	dpl,r5
   0091 8E 83         [24]  858 	mov	dph,r6
   0093 8F F0         [24]  859 	mov	b,r7
   0095 12r00r00      [24]  860 	lcall	_memcpy
                            861 ;	radio/radio.c:116: elen = receive_packet_length;
   0098 78r00         [12]  862 	mov	r0,#_receive_packet_length
   009A E2            [24]  863 	movx	a,@r0
   009B FF            [12]  864 	mov	r7,a
                            865 ;	radio/radio.c:117: radio_receiver_on();	
   009C C0 07         [24]  866 	push	ar7
   009E 12r06r70      [24]  867 	lcall	_radio_receiver_on
   00A1 D0 07         [24]  868 	pop	ar7
                            869 ;	radio/radio.c:119: if (elen < 12 || (elen%6) != 0) {
   00A3 BF 0C 00      [24]  870 	cjne	r7,#0x0C,00176$
   00A6                     871 00176$:
   00A6 50 03         [24]  872 	jnc	00177$
   00A8 02r02r40      [24]  873 	ljmp	00126$
   00AB                     874 00177$:
   00AB 75 F0 06      [24]  875 	mov	b,#0x06
   00AE EF            [12]  876 	mov	a,r7
   00AF 84            [48]  877 	div	ab
   00B0 E5 F0         [12]  878 	mov	a,b
   00B2 60 03         [24]  879 	jz	00178$
   00B4 02r02r40      [24]  880 	ljmp	00126$
   00B7                     881 00178$:
                            882 ;	radio/radio.c:126: errcount = golay_decode(6, buf, gout);
   00B7 78r11         [12]  883 	mov	r0,#_radio_receive_packet_PARM_2
   00B9 79r00         [12]  884 	mov	r1,#_golay_decode_PARM_2
   00BB E2            [24]  885 	movx	a,@r0
   00BC F3            [24]  886 	movx	@r1,a
   00BD 08            [12]  887 	inc	r0
   00BE E2            [24]  888 	movx	a,@r0
   00BF 09            [12]  889 	inc	r1
   00C0 F3            [24]  890 	movx	@r1,a
   00C1 78r00         [12]  891 	mov	r0,#_golay_decode_PARM_3
   00C3 74rFF         [12]  892 	mov	a,#_radio_receive_packet_gout_1_135
   00C5 F2            [24]  893 	movx	@r0,a
   00C6 08            [12]  894 	inc	r0
   00C7 74s00         [12]  895 	mov	a,#(_radio_receive_packet_gout_1_135 >> 8)
   00C9 F2            [24]  896 	movx	@r0,a
   00CA 75 82 06      [24]  897 	mov	dpl,#0x06
   00CD C0 07         [24]  898 	push	ar7
   00CF 12r00r00      [24]  899 	lcall	_golay_decode
   00D2 AE 82         [24]  900 	mov	r6,dpl
   00D4 D0 07         [24]  901 	pop	ar7
                            902 ;	radio/radio.c:127: if (gout[0] != netid[0] ||
   00D6 90r00rFF      [24]  903 	mov	dptr,#_radio_receive_packet_gout_1_135
   00D9 E0            [24]  904 	movx	a,@dptr
   00DA FD            [12]  905 	mov	r5,a
   00DB 78r03         [12]  906 	mov	r0,#_netid
   00DD E2            [24]  907 	movx	a,@r0
   00DE FC            [12]  908 	mov	r4,a
   00DF ED            [12]  909 	mov	a,r5
   00E0 B5 04 02      [24]  910 	cjne	a,ar4,00179$
   00E3 80 03         [24]  911 	sjmp	00180$
   00E5                     912 00179$:
   00E5 02r02r40      [24]  913 	ljmp	00126$
   00E8                     914 00180$:
                            915 ;	radio/radio.c:128: gout[1] != netid[1]) {
   00E8 90r01r00      [24]  916 	mov	dptr,#(_radio_receive_packet_gout_1_135 + 0x0001)
   00EB E0            [24]  917 	movx	a,@dptr
   00EC FD            [12]  918 	mov	r5,a
   00ED 78r04         [12]  919 	mov	r0,#(_netid + 0x0001)
   00EF E2            [24]  920 	movx	a,@r0
   00F0 FC            [12]  921 	mov	r4,a
   00F1 ED            [12]  922 	mov	a,r5
   00F2 B5 04 02      [24]  923 	cjne	a,ar4,00181$
   00F5 80 03         [24]  924 	sjmp	00182$
   00F7                     925 00181$:
   00F7 02r02r40      [24]  926 	ljmp	00126$
   00FA                     927 00182$:
                            928 ;	radio/radio.c:136: if (6*((gout[2]+2)/3+2) != elen) {
   00FA 90r01r01      [24]  929 	mov	dptr,#(_radio_receive_packet_gout_1_135 + 0x0002)
   00FD E0            [24]  930 	movx	a,@dptr
   00FE FD            [12]  931 	mov	r5,a
   00FF 7C 00         [12]  932 	mov	r4,#0x00
   0101 74 02         [12]  933 	mov	a,#0x02
   0103 2D            [12]  934 	add	a,r5
   0104 FD            [12]  935 	mov	r5,a
   0105 E4            [12]  936 	clr	a
   0106 3C            [12]  937 	addc	a,r4
   0107 FC            [12]  938 	mov	r4,a
   0108 90r00r00      [24]  939 	mov	dptr,#__divsint_PARM_2
   010B 74 03         [12]  940 	mov	a,#0x03
   010D F0            [24]  941 	movx	@dptr,a
   010E E4            [12]  942 	clr	a
   010F A3            [24]  943 	inc	dptr
   0110 F0            [24]  944 	movx	@dptr,a
   0111 8D 82         [24]  945 	mov	dpl,r5
   0113 8C 83         [24]  946 	mov	dph,r4
   0115 C0 07         [24]  947 	push	ar7
   0117 C0 06         [24]  948 	push	ar6
   0119 12r00r00      [24]  949 	lcall	__divsint
   011C E5 82         [12]  950 	mov	a,dpl
   011E 85 83 F0      [24]  951 	mov	b,dph
   0121 90r00r00      [24]  952 	mov	dptr,#__mulint_PARM_2
   0124 24 02         [12]  953 	add	a,#0x02
   0126 F0            [24]  954 	movx	@dptr,a
   0127 E4            [12]  955 	clr	a
   0128 35 F0         [12]  956 	addc	a,b
   012A A3            [24]  957 	inc	dptr
   012B F0            [24]  958 	movx	@dptr,a
   012C 90 00 06      [24]  959 	mov	dptr,#0x0006
   012F 12r00r00      [24]  960 	lcall	__mulint
   0132 AC 82         [24]  961 	mov	r4,dpl
   0134 AD 83         [24]  962 	mov	r5,dph
   0136 D0 06         [24]  963 	pop	ar6
   0138 D0 07         [24]  964 	pop	ar7
   013A 8F 02         [24]  965 	mov	ar2,r7
   013C 7B 00         [12]  966 	mov	r3,#0x00
   013E EC            [12]  967 	mov	a,r4
   013F B5 02 06      [24]  968 	cjne	a,ar2,00183$
   0142 ED            [12]  969 	mov	a,r5
   0143 B5 03 02      [24]  970 	cjne	a,ar3,00183$
   0146 80 03         [24]  971 	sjmp	00184$
   0148                     972 00183$:
   0148 02r02r40      [24]  973 	ljmp	00126$
   014B                     974 00184$:
                            975 ;	radio/radio.c:144: errcount += golay_decode(6, &buf[6], gout);
   014B 78r11         [12]  976 	mov	r0,#_radio_receive_packet_PARM_2
   014D 79r00         [12]  977 	mov	r1,#_golay_decode_PARM_2
   014F E2            [24]  978 	movx	a,@r0
   0150 24 06         [12]  979 	add	a,#0x06
   0152 F3            [24]  980 	movx	@r1,a
   0153 08            [12]  981 	inc	r0
   0154 E2            [24]  982 	movx	a,@r0
   0155 34 00         [12]  983 	addc	a,#0x00
   0157 09            [12]  984 	inc	r1
   0158 F3            [24]  985 	movx	@r1,a
   0159 78r00         [12]  986 	mov	r0,#_golay_decode_PARM_3
   015B 74rFF         [12]  987 	mov	a,#_radio_receive_packet_gout_1_135
   015D F2            [24]  988 	movx	@r0,a
   015E 08            [12]  989 	inc	r0
   015F 74s00         [12]  990 	mov	a,#(_radio_receive_packet_gout_1_135 >> 8)
   0161 F2            [24]  991 	movx	@r0,a
   0162 75 82 06      [24]  992 	mov	dpl,#0x06
   0165 C0 07         [24]  993 	push	ar7
   0167 C0 06         [24]  994 	push	ar6
   0169 12r00r00      [24]  995 	lcall	_golay_decode
   016C AD 82         [24]  996 	mov	r5,dpl
   016E D0 06         [24]  997 	pop	ar6
   0170 D0 07         [24]  998 	pop	ar7
   0172 ED            [12]  999 	mov	a,r5
   0173 2E            [12] 1000 	add	a,r6
   0174 FE            [12] 1001 	mov	r6,a
                           1002 ;	radio/radio.c:145: crc1 = gout[0] | (((uint16_t)gout[1])<<8);
   0175 90r00rFF      [24] 1003 	mov	dptr,#_radio_receive_packet_gout_1_135
   0178 E0            [24] 1004 	movx	a,@dptr
   0179 FD            [12] 1005 	mov	r5,a
   017A 90r01r00      [24] 1006 	mov	dptr,#(_radio_receive_packet_gout_1_135 + 0x0001)
   017D E0            [24] 1007 	movx	a,@dptr
   017E FB            [12] 1008 	mov	r3,a
   017F E4            [12] 1009 	clr	a
   0180 FC            [12] 1010 	mov	r4,a
   0181 FA            [12] 1011 	mov	r2,a
   0182 4D            [12] 1012 	orl	a,r5
   0183 F5*00         [12] 1013 	mov	_radio_receive_packet_crc1_1_135,a
   0185 EB            [12] 1014 	mov	a,r3
   0186 4A            [12] 1015 	orl	a,r2
   0187 F5*01         [12] 1016 	mov	(_radio_receive_packet_crc1_1_135 + 1),a
                           1017 ;	radio/radio.c:147: if (elen != 12) {
   0189 BF 0C 02      [24] 1018 	cjne	r7,#0x0C,00185$
   018C 80 2A         [24] 1019 	sjmp	00116$
   018E                    1020 00185$:
                           1021 ;	radio/radio.c:148: errcount += golay_decode(elen-12, &buf[12], buf);
   018E EF            [12] 1022 	mov	a,r7
   018F 24 F4         [12] 1023 	add	a,#0xF4
   0191 FF            [12] 1024 	mov	r7,a
   0192 78r11         [12] 1025 	mov	r0,#_radio_receive_packet_PARM_2
   0194 79r00         [12] 1026 	mov	r1,#_golay_decode_PARM_2
   0196 E2            [24] 1027 	movx	a,@r0
   0197 24 0C         [12] 1028 	add	a,#0x0C
   0199 F3            [24] 1029 	movx	@r1,a
   019A 08            [12] 1030 	inc	r0
   019B E2            [24] 1031 	movx	a,@r0
   019C 34 00         [12] 1032 	addc	a,#0x00
   019E 09            [12] 1033 	inc	r1
   019F F3            [24] 1034 	movx	@r1,a
   01A0 78r11         [12] 1035 	mov	r0,#_radio_receive_packet_PARM_2
   01A2 79r00         [12] 1036 	mov	r1,#_golay_decode_PARM_3
   01A4 E2            [24] 1037 	movx	a,@r0
   01A5 F3            [24] 1038 	movx	@r1,a
   01A6 08            [12] 1039 	inc	r0
   01A7 E2            [24] 1040 	movx	a,@r0
   01A8 09            [12] 1041 	inc	r1
   01A9 F3            [24] 1042 	movx	@r1,a
   01AA 8F 82         [24] 1043 	mov	dpl,r7
   01AC C0 06         [24] 1044 	push	ar6
   01AE 12r00r00      [24] 1045 	lcall	_golay_decode
   01B1 AF 82         [24] 1046 	mov	r7,dpl
   01B3 D0 06         [24] 1047 	pop	ar6
   01B5 EF            [12] 1048 	mov	a,r7
   01B6 2E            [12] 1049 	add	a,r6
   01B7 FE            [12] 1050 	mov	r6,a
   01B8                    1051 00116$:
                           1052 ;	radio/radio.c:151: *length = gout[2];
   01B8 90r00rFC      [24] 1053 	mov	dptr,#_radio_receive_packet_length_1_134
   01BB E0            [24] 1054 	movx	a,@dptr
   01BC FA            [12] 1055 	mov	r2,a
   01BD A3            [24] 1056 	inc	dptr
   01BE E0            [24] 1057 	movx	a,@dptr
   01BF FB            [12] 1058 	mov	r3,a
   01C0 A3            [24] 1059 	inc	dptr
   01C1 E0            [24] 1060 	movx	a,@dptr
   01C2 FF            [12] 1061 	mov	r7,a
   01C3 90r01r01      [24] 1062 	mov	dptr,#(_radio_receive_packet_gout_1_135 + 0x0002)
   01C6 E0            [24] 1063 	movx	a,@dptr
   01C7 FD            [12] 1064 	mov	r5,a
   01C8 8A 82         [24] 1065 	mov	dpl,r2
   01CA 8B 83         [24] 1066 	mov	dph,r3
   01CC 8F F0         [24] 1067 	mov	b,r7
   01CE 12r00r00      [24] 1068 	lcall	__gptrput
                           1069 ;	radio/radio.c:153: crc2 = crc16(*length, buf);
   01D1 78r11         [12] 1070 	mov	r0,#_radio_receive_packet_PARM_2
   01D3 E2            [24] 1071 	movx	a,@r0
   01D4 F5*00         [12] 1072 	mov	_crc16_PARM_2,a
   01D6 08            [12] 1073 	inc	r0
   01D7 E2            [24] 1074 	movx	a,@r0
   01D8 F5*01         [12] 1075 	mov	(_crc16_PARM_2 + 1),a
   01DA 8D 82         [24] 1076 	mov	dpl,r5
   01DC C0 06         [24] 1077 	push	ar6
   01DE 12r00r00      [24] 1078 	lcall	_crc16
   01E1 AD 82         [24] 1079 	mov	r5,dpl
   01E3 AF 83         [24] 1080 	mov	r7,dph
   01E5 D0 06         [24] 1081 	pop	ar6
                           1082 ;	radio/radio.c:155: if (crc1 != crc2) {
   01E7 ED            [12] 1083 	mov	a,r5
   01E8 B5*00 55      [24] 1084 	cjne	a,_radio_receive_packet_crc1_1_135,00126$
   01EB EF            [12] 1085 	mov	a,r7
   01EC B5*01 51      [24] 1086 	cjne	a,(_radio_receive_packet_crc1_1_135 + 1),00126$
                           1087 ;	radio/radio.c:165: if (errcount != 0) {
   01EF EE            [12] 1088 	mov	a,r6
   01F0 60 4C         [24] 1089 	jz	00125$
                           1090 ;	radio/radio.c:166: if ((uint16_t)(0xFFFF - errcount) > errors.corrected_errors) {
   01F2 7F 00         [12] 1091 	mov	r7,#0x00
   01F4 74 FF         [12] 1092 	mov	a,#0xFF
   01F6 C3            [12] 1093 	clr	c
   01F7 9E            [12] 1094 	subb	a,r6
   01F8 FC            [12] 1095 	mov	r4,a
   01F9 74 FF         [12] 1096 	mov	a,#0xFF
   01FB 9F            [12] 1097 	subb	a,r7
   01FC FD            [12] 1098 	mov	r5,a
   01FD 78r08         [12] 1099 	mov	r0,#(_errors + 0x0008)
   01FF E2            [24] 1100 	movx	a,@r0
   0200 FA            [12] 1101 	mov	r2,a
   0201 08            [12] 1102 	inc	r0
   0202 E2            [24] 1103 	movx	a,@r0
   0203 FB            [12] 1104 	mov	r3,a
   0204 C3            [12] 1105 	clr	c
   0205 EA            [12] 1106 	mov	a,r2
   0206 9C            [12] 1107 	subb	a,r4
   0207 EB            [12] 1108 	mov	a,r3
   0208 9D            [12] 1109 	subb	a,r5
   0209 50 0F         [24] 1110 	jnc	00120$
                           1111 ;	radio/radio.c:167: errors.corrected_errors += errcount;
   020B EE            [12] 1112 	mov	a,r6
   020C 2A            [12] 1113 	add	a,r2
   020D FE            [12] 1114 	mov	r6,a
   020E EF            [12] 1115 	mov	a,r7
   020F 3B            [12] 1116 	addc	a,r3
   0210 FF            [12] 1117 	mov	r7,a
   0211 78r08         [12] 1118 	mov	r0,#(_errors + 0x0008)
   0213 EE            [12] 1119 	mov	a,r6
   0214 F2            [24] 1120 	movx	@r0,a
   0215 08            [12] 1121 	inc	r0
   0216 EF            [12] 1122 	mov	a,r7
   0217 F2            [24] 1123 	movx	@r0,a
   0218 80 09         [24] 1124 	sjmp	00121$
   021A                    1125 00120$:
                           1126 ;	radio/radio.c:169: errors.corrected_errors = 0xFFFF;
   021A 78r08         [12] 1127 	mov	r0,#(_errors + 0x0008)
   021C 74 FF         [12] 1128 	mov	a,#0xFF
   021E F2            [24] 1129 	movx	@r0,a
   021F 08            [12] 1130 	inc	r0
   0220 74 FF         [12] 1131 	mov	a,#0xFF
   0222 F2            [24] 1132 	movx	@r0,a
   0223                    1133 00121$:
                           1134 ;	radio/radio.c:171: if (errors.corrected_packets != 0xFFFF) {
   0223 78r0A         [12] 1135 	mov	r0,#(_errors + 0x000a)
   0225 E2            [24] 1136 	movx	a,@r0
   0226 FE            [12] 1137 	mov	r6,a
   0227 08            [12] 1138 	inc	r0
   0228 E2            [24] 1139 	movx	a,@r0
   0229 FF            [12] 1140 	mov	r7,a
   022A BE FF 05      [24] 1141 	cjne	r6,#0xFF,00190$
   022D BF FF 02      [24] 1142 	cjne	r7,#0xFF,00190$
   0230 80 0C         [24] 1143 	sjmp	00125$
   0232                    1144 00190$:
                           1145 ;	radio/radio.c:172: errors.corrected_packets++;
   0232 0E            [12] 1146 	inc	r6
   0233 BE 00 01      [24] 1147 	cjne	r6,#0x00,00191$
   0236 0F            [12] 1148 	inc	r7
   0237                    1149 00191$:
   0237 78r0A         [12] 1150 	mov	r0,#(_errors + 0x000a)
   0239 EE            [12] 1151 	mov	a,r6
   023A F2            [24] 1152 	movx	@r0,a
   023B 08            [12] 1153 	inc	r0
   023C EF            [12] 1154 	mov	a,r7
   023D F2            [24] 1155 	movx	@r0,a
   023E                    1156 00125$:
                           1157 ;	radio/radio.c:176: return true;
   023E D3            [12] 1158 	setb	c
                           1159 ;	radio/radio.c:178: failed:
   023F 22            [24] 1160 	ret
   0240                    1161 00126$:
                           1162 ;	radio/radio.c:179: if (errors.rx_errors != 0xFFFF) {
   0240 78r00         [12] 1163 	mov	r0,#_errors
   0242 E2            [24] 1164 	movx	a,@r0
   0243 FE            [12] 1165 	mov	r6,a
   0244 08            [12] 1166 	inc	r0
   0245 E2            [24] 1167 	movx	a,@r0
   0246 FF            [12] 1168 	mov	r7,a
   0247 BE FF 05      [24] 1169 	cjne	r6,#0xFF,00192$
   024A BF FF 02      [24] 1170 	cjne	r7,#0xFF,00192$
   024D 80 0C         [24] 1171 	sjmp	00128$
   024F                    1172 00192$:
                           1173 ;	radio/radio.c:180: errors.rx_errors++;
   024F 0E            [12] 1174 	inc	r6
   0250 BE 00 01      [24] 1175 	cjne	r6,#0x00,00193$
   0253 0F            [12] 1176 	inc	r7
   0254                    1177 00193$:
   0254 78r00         [12] 1178 	mov	r0,#_errors
   0256 EE            [12] 1179 	mov	a,r6
   0257 F2            [24] 1180 	movx	@r0,a
   0258 08            [12] 1181 	inc	r0
   0259 EF            [12] 1182 	mov	a,r7
   025A F2            [24] 1183 	movx	@r0,a
   025B                    1184 00128$:
                           1185 ;	radio/radio.c:182: return false;
   025B C3            [12] 1186 	clr	c
   025C 22            [24] 1187 	ret
                           1188 ;------------------------------------------------------------
                           1189 ;Allocation info for local variables in function 'radio_write_transmit_fifo'
                           1190 ;------------------------------------------------------------
                           1191 ;n                         Allocated to registers r7 
                           1192 ;------------------------------------------------------------
                           1193 ;	radio/radio.c:189: radio_write_transmit_fifo(register uint8_t n, __xdata uint8_t * __pdata buffer)
                           1194 ;	-----------------------------------------
                           1195 ;	 function radio_write_transmit_fifo
                           1196 ;	-----------------------------------------
   025D                    1197 _radio_write_transmit_fifo:
   025D AF 82         [24] 1198 	mov	r7,dpl
                           1199 ;	radio/radio.c:191: NSS1 = 0;
   025F C2 94         [12] 1200 	clr	_NSS1
                           1201 ;	radio/radio.c:192: SPIF1 = 0;
   0261 C2 B7         [12] 1202 	clr	_SPIF1
                           1203 ;	radio/radio.c:193: SPI1DAT = (0x80 | EZRADIOPRO_FIFO_ACCESS);
   0263 75 86 FF      [24] 1204 	mov	_SPI1DAT,#0xFF
                           1205 ;	radio/radio.c:195: while (n--) {
   0266 78r13         [12] 1206 	mov	r0,#_radio_write_transmit_fifo_PARM_2
   0268 E2            [24] 1207 	movx	a,@r0
   0269 FD            [12] 1208 	mov	r5,a
   026A 08            [12] 1209 	inc	r0
   026B E2            [24] 1210 	movx	a,@r0
   026C FE            [12] 1211 	mov	r6,a
   026D                    1212 00104$:
   026D 8F 04         [24] 1213 	mov	ar4,r7
   026F 1F            [12] 1214 	dec	r7
   0270 EC            [12] 1215 	mov	a,r4
   0271 60 11         [24] 1216 	jz	00107$
                           1217 ;	radio/radio.c:196: while (!TXBMT1) /* noop */;
   0273                    1218 00101$:
   0273 30 B1 FD      [24] 1219 	jnb	_TXBMT1,00101$
                           1220 ;	radio/radio.c:197: SPI1DAT = *buffer++;
   0276 8D 82         [24] 1221 	mov	dpl,r5
   0278 8E 83         [24] 1222 	mov	dph,r6
   027A E0            [24] 1223 	movx	a,@dptr
   027B F5 86         [12] 1224 	mov	_SPI1DAT,a
   027D A3            [24] 1225 	inc	dptr
   027E AD 82         [24] 1226 	mov	r5,dpl
   0280 AE 83         [24] 1227 	mov	r6,dph
                           1228 ;	radio/radio.c:200: while (!TXBMT1) /* noop */;
   0282 80 E9         [24] 1229 	sjmp	00104$
   0284                    1230 00107$:
   0284 30 B1 FD      [24] 1231 	jnb	_TXBMT1,00107$
                           1232 ;	radio/radio.c:201: while ((SPI1CFG & 0x80) == 0x80);
   0287                    1233 00110$:
   0287 74 80         [12] 1234 	mov	a,#0x80
   0289 55 84         [12] 1235 	anl	a,_SPI1CFG
   028B FF            [12] 1236 	mov	r7,a
   028C BF 80 02      [24] 1237 	cjne	r7,#0x80,00137$
   028F 80 F6         [24] 1238 	sjmp	00110$
   0291                    1239 00137$:
                           1240 ;	radio/radio.c:203: SPIF1 = 0;
   0291 C2 B7         [12] 1241 	clr	_SPIF1
                           1242 ;	radio/radio.c:204: NSS1 = 1;
   0293 D2 94         [12] 1243 	setb	_NSS1
   0295 22            [24] 1244 	ret
                           1245 ;------------------------------------------------------------
                           1246 ;Allocation info for local variables in function 'radio_receive_in_progress'
                           1247 ;------------------------------------------------------------
                           1248 ;	radio/radio.c:210: radio_receive_in_progress(void)
                           1249 ;	-----------------------------------------
                           1250 ;	 function radio_receive_in_progress
                           1251 ;	-----------------------------------------
   0296                    1252 _radio_receive_in_progress:
                           1253 ;	radio/radio.c:212: if (packet_received ||
   0296 20*00 05      [24] 1254 	jb	_packet_received,00101$
                           1255 ;	radio/radio.c:213: partial_packet_length != 0) {
   0299 78r01         [12] 1256 	mov	r0,#_partial_packet_length
   029B E2            [24] 1257 	movx	a,@r0
   029C 60 02         [24] 1258 	jz	00102$
   029E                    1259 00101$:
                           1260 ;	radio/radio.c:214: return true;
   029E D3            [12] 1261 	setb	c
   029F 22            [24] 1262 	ret
   02A0                    1263 00102$:
                           1264 ;	radio/radio.c:218: if (register_read(EZRADIOPRO_EZMAC_STATUS) & EZRADIOPRO_PKRX) {
   02A0 75 82 31      [24] 1265 	mov	dpl,#0x31
   02A3 12r0Br6F      [24] 1266 	lcall	_register_read
   02A6 E5 82         [12] 1267 	mov	a,dpl
   02A8 30 E4 02      [24] 1268 	jnb	acc.4,00105$
                           1269 ;	radio/radio.c:219: return true;
   02AB D3            [12] 1270 	setb	c
   02AC 22            [24] 1271 	ret
   02AD                    1272 00105$:
                           1273 ;	radio/radio.c:221: return false;
   02AD C3            [12] 1274 	clr	c
   02AE 22            [24] 1275 	ret
                           1276 ;------------------------------------------------------------
                           1277 ;Allocation info for local variables in function 'radio_preamble_detected'
                           1278 ;------------------------------------------------------------
                           1279 ;	radio/radio.c:228: radio_preamble_detected(void)
                           1280 ;	-----------------------------------------
                           1281 ;	 function radio_preamble_detected
                           1282 ;	-----------------------------------------
   02AF                    1283 _radio_preamble_detected:
                           1284 ;	radio/radio.c:230: EX0_SAVE_DISABLE;
   02AF A2 A8         [12] 1285 	mov	c,_EX0
   02B1 92*02         [24] 1286 	mov	_radio_preamble_detected_EX0_saved_1_157,c
   02B3 C2 A8         [12] 1287 	clr	_EX0
                           1288 ;	radio/radio.c:231: if (preamble_detected) {
                           1289 ;	radio/radio.c:232: preamble_detected = 0;
   02B5 10*01 02      [24] 1290 	jbc	_preamble_detected,00108$
   02B8 80 06         [24] 1291 	sjmp	00102$
   02BA                    1292 00108$:
                           1293 ;	radio/radio.c:233: EX0_RESTORE;
   02BA A2*02         [12] 1294 	mov	c,_radio_preamble_detected_EX0_saved_1_157
   02BC 92 A8         [24] 1295 	mov	_EX0,c
                           1296 ;	radio/radio.c:234: return true;
   02BE D3            [12] 1297 	setb	c
   02BF 22            [24] 1298 	ret
   02C0                    1299 00102$:
                           1300 ;	radio/radio.c:236: EX0_RESTORE;
   02C0 A2*02         [12] 1301 	mov	c,_radio_preamble_detected_EX0_saved_1_157
   02C2 92 A8         [24] 1302 	mov	_EX0,c
                           1303 ;	radio/radio.c:237: return false;
   02C4 C3            [12] 1304 	clr	c
   02C5 22            [24] 1305 	ret
                           1306 ;------------------------------------------------------------
                           1307 ;Allocation info for local variables in function 'radio_last_rssi'
                           1308 ;------------------------------------------------------------
                           1309 ;	radio/radio.c:245: radio_last_rssi(void)
                           1310 ;	-----------------------------------------
                           1311 ;	 function radio_last_rssi
                           1312 ;	-----------------------------------------
   02C6                    1313 _radio_last_rssi:
                           1314 ;	radio/radio.c:247: return last_rssi;
   02C6 78r02         [12] 1315 	mov	r0,#_last_rssi
   02C8 E2            [24] 1316 	movx	a,@r0
   02C9 F5 82         [12] 1317 	mov	dpl,a
   02CB 22            [24] 1318 	ret
                           1319 ;------------------------------------------------------------
                           1320 ;Allocation info for local variables in function 'radio_current_rssi'
                           1321 ;------------------------------------------------------------
                           1322 ;	radio/radio.c:253: radio_current_rssi(void)
                           1323 ;	-----------------------------------------
                           1324 ;	 function radio_current_rssi
                           1325 ;	-----------------------------------------
   02CC                    1326 _radio_current_rssi:
                           1327 ;	radio/radio.c:255: return register_read(EZRADIOPRO_RECEIVED_SIGNAL_STRENGTH_INDICATOR);
   02CC 75 82 26      [24] 1328 	mov	dpl,#0x26
   02CF 02r0Br6F      [24] 1329 	ljmp	_register_read
                           1330 ;------------------------------------------------------------
                           1331 ;Allocation info for local variables in function 'radio_air_rate'
                           1332 ;------------------------------------------------------------
                           1333 ;	radio/radio.c:261: radio_air_rate(void)
                           1334 ;	-----------------------------------------
                           1335 ;	 function radio_air_rate
                           1336 ;	-----------------------------------------
   02D2                    1337 _radio_air_rate:
                           1338 ;	radio/radio.c:263: return settings.air_data_rate;
   02D2 78r0D         [12] 1339 	mov	r0,#(_settings + 0x0008)
   02D4 E2            [24] 1340 	movx	a,@r0
   02D5 F5 82         [12] 1341 	mov	dpl,a
   02D7 22            [24] 1342 	ret
                           1343 ;------------------------------------------------------------
                           1344 ;Allocation info for local variables in function 'radio_clear_transmit_fifo'
                           1345 ;------------------------------------------------------------
                           1346 ;control                   Allocated to registers r7 
                           1347 ;------------------------------------------------------------
                           1348 ;	radio/radio.c:269: radio_clear_transmit_fifo(void)
                           1349 ;	-----------------------------------------
                           1350 ;	 function radio_clear_transmit_fifo
                           1351 ;	-----------------------------------------
   02D8                    1352 _radio_clear_transmit_fifo:
                           1353 ;	radio/radio.c:272: control = register_read(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2);
   02D8 75 82 08      [24] 1354 	mov	dpl,#0x08
   02DB 12r0Br6F      [24] 1355 	lcall	_register_read
   02DE AF 82         [24] 1356 	mov	r7,dpl
                           1357 ;	radio/radio.c:273: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, control | EZRADIOPRO_FFCLRTX);
   02E0 74 01         [12] 1358 	mov	a,#0x01
   02E2 4F            [12] 1359 	orl	a,r7
   02E3 FE            [12] 1360 	mov	r6,a
   02E4 C0 07         [24] 1361 	push	ar7
   02E6 C0 06         [24] 1362 	push	ar6
   02E8 75 82 08      [24] 1363 	mov	dpl,#0x08
   02EB 12r0Br3F      [24] 1364 	lcall	_register_write
   02EE 15 81         [12] 1365 	dec	sp
   02F0 D0 07         [24] 1366 	pop	ar7
                           1367 ;	radio/radio.c:274: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, control & ~EZRADIOPRO_FFCLRTX);
   02F2 53 07 FE      [24] 1368 	anl	ar7,#0xFE
   02F5 C0 07         [24] 1369 	push	ar7
   02F7 75 82 08      [24] 1370 	mov	dpl,#0x08
   02FA 12r0Br3F      [24] 1371 	lcall	_register_write
   02FD 15 81         [12] 1372 	dec	sp
   02FF 22            [24] 1373 	ret
                           1374 ;------------------------------------------------------------
                           1375 ;Allocation info for local variables in function 'radio_clear_receive_fifo'
                           1376 ;------------------------------------------------------------
                           1377 ;control                   Allocated to registers r7 
                           1378 ;------------------------------------------------------------
                           1379 ;	radio/radio.c:281: radio_clear_receive_fifo(void) __reentrant
                           1380 ;	-----------------------------------------
                           1381 ;	 function radio_clear_receive_fifo
                           1382 ;	-----------------------------------------
   0300                    1383 _radio_clear_receive_fifo:
                           1384 ;	radio/radio.c:284: control = register_read(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2);
   0300 75 82 08      [24] 1385 	mov	dpl,#0x08
   0303 12r0Br6F      [24] 1386 	lcall	_register_read
   0306 AF 82         [24] 1387 	mov	r7,dpl
                           1388 ;	radio/radio.c:285: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, control | EZRADIOPRO_FFCLRRX);
   0308 74 02         [12] 1389 	mov	a,#0x02
   030A 4F            [12] 1390 	orl	a,r7
   030B FE            [12] 1391 	mov	r6,a
   030C C0 07         [24] 1392 	push	ar7
   030E C0 06         [24] 1393 	push	ar6
   0310 75 82 08      [24] 1394 	mov	dpl,#0x08
   0313 12r0Br3F      [24] 1395 	lcall	_register_write
   0316 15 81         [12] 1396 	dec	sp
   0318 D0 07         [24] 1397 	pop	ar7
                           1398 ;	radio/radio.c:286: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, control & ~EZRADIOPRO_FFCLRRX);
   031A 53 07 FD      [24] 1399 	anl	ar7,#0xFD
   031D C0 07         [24] 1400 	push	ar7
   031F 75 82 08      [24] 1401 	mov	dpl,#0x08
   0322 12r0Br3F      [24] 1402 	lcall	_register_write
   0325 15 81         [12] 1403 	dec	sp
   0327 22            [24] 1404 	ret
                           1405 ;------------------------------------------------------------
                           1406 ;Allocation info for local variables in function 'radio_transmit_simple'
                           1407 ;------------------------------------------------------------
                           1408 ;length                    Allocated to registers r7 
                           1409 ;n                         Allocated to registers r6 
                           1410 ;status                    Allocated to registers r3 
                           1411 ;------------------------------------------------------------
                           1412 ;	radio/radio.c:298: radio_transmit_simple(__data uint8_t length, __xdata uint8_t * __pdata buf, __pdata uint16_t timeout_ticks)
                           1413 ;	-----------------------------------------
                           1414 ;	 function radio_transmit_simple
                           1415 ;	-----------------------------------------
   0328                    1416 _radio_transmit_simple:
                           1417 ;	radio/radio.c:304: if (length > sizeof(radio_buffer)) {
   0328 E5 82         [12] 1418 	mov	a,dpl
   032A FF            [12] 1419 	mov	r7,a
   032B 24 03         [12] 1420 	add	a,#0xff - 0xFC
   032D 50 19         [24] 1421 	jnc	00102$
                           1422 ;	radio/radio.c:305: panic("oversized packet");
   032F C0 07         [24] 1423 	push	ar7
   0331 74r00         [12] 1424 	mov	a,#__str_0
   0333 C0 E0         [24] 1425 	push	acc
   0335 74s00         [12] 1426 	mov	a,#(__str_0 >> 8)
   0337 C0 E0         [24] 1427 	push	acc
   0339 74 80         [12] 1428 	mov	a,#0x80
   033B C0 E0         [24] 1429 	push	acc
   033D 12r00r00      [24] 1430 	lcall	_panic
   0340 15 81         [12] 1431 	dec	sp
   0342 15 81         [12] 1432 	dec	sp
   0344 15 81         [12] 1433 	dec	sp
   0346 D0 07         [24] 1434 	pop	ar7
   0348                    1435 00102$:
                           1436 ;	radio/radio.c:308: radio_clear_transmit_fifo();
   0348 C0 07         [24] 1437 	push	ar7
   034A 12r02rD8      [24] 1438 	lcall	_radio_clear_transmit_fifo
   034D D0 07         [24] 1439 	pop	ar7
                           1440 ;	radio/radio.c:310: register_write(EZRADIOPRO_TRANSMIT_PACKET_LENGTH, length);
   034F C0 07         [24] 1441 	push	ar7
   0351 C0 07         [24] 1442 	push	ar7
   0353 75 82 3E      [24] 1443 	mov	dpl,#0x3E
   0356 12r0Br3F      [24] 1444 	lcall	_register_write
   0359 15 81         [12] 1445 	dec	sp
   035B D0 07         [24] 1446 	pop	ar7
                           1447 ;	radio/radio.c:313: n = length;
                           1448 ;	radio/radio.c:314: if (n > TX_FIFO_THRESHOLD_LOW) {
   035D EF            [12] 1449 	mov	a,r7
   035E FE            [12] 1450 	mov	r6,a
   035F 24 DF         [12] 1451 	add	a,#0xff - 0x20
   0361 50 02         [24] 1452 	jnc	00104$
                           1453 ;	radio/radio.c:315: n = TX_FIFO_THRESHOLD_LOW;
   0363 7E 20         [12] 1454 	mov	r6,#0x20
   0365                    1455 00104$:
                           1456 ;	radio/radio.c:317: radio_write_transmit_fifo(n, buf);
   0365 78r15         [12] 1457 	mov	r0,#_radio_transmit_simple_PARM_2
   0367 79r13         [12] 1458 	mov	r1,#_radio_write_transmit_fifo_PARM_2
   0369 E2            [24] 1459 	movx	a,@r0
   036A F3            [24] 1460 	movx	@r1,a
   036B 08            [12] 1461 	inc	r0
   036C E2            [24] 1462 	movx	a,@r0
   036D 09            [12] 1463 	inc	r1
   036E F3            [24] 1464 	movx	@r1,a
   036F 8E 82         [24] 1465 	mov	dpl,r6
   0371 C0 07         [24] 1466 	push	ar7
   0373 C0 06         [24] 1467 	push	ar6
   0375 12r02r5D      [24] 1468 	lcall	_radio_write_transmit_fifo
   0378 D0 06         [24] 1469 	pop	ar6
   037A D0 07         [24] 1470 	pop	ar7
                           1471 ;	radio/radio.c:318: length -= n;
   037C EF            [12] 1472 	mov	a,r7
   037D C3            [12] 1473 	clr	c
   037E 9E            [12] 1474 	subb	a,r6
   037F FF            [12] 1475 	mov	r7,a
                           1476 ;	radio/radio.c:319: buf += n;
   0380 78r15         [12] 1477 	mov	r0,#_radio_transmit_simple_PARM_2
   0382 E2            [24] 1478 	movx	a,@r0
   0383 2E            [12] 1479 	add	a,r6
   0384 F2            [24] 1480 	movx	@r0,a
   0385 08            [12] 1481 	inc	r0
   0386 E2            [24] 1482 	movx	a,@r0
   0387 34 00         [12] 1483 	addc	a,#0x00
   0389 F2            [24] 1484 	movx	@r0,a
                           1485 ;	radio/radio.c:322: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, 0);
   038A C0 07         [24] 1486 	push	ar7
   038C E4            [12] 1487 	clr	a
   038D C0 E0         [24] 1488 	push	acc
   038F 75 82 05      [24] 1489 	mov	dpl,#0x05
   0392 12r0Br3F      [24] 1490 	lcall	_register_write
   0395 15 81         [12] 1491 	dec	sp
                           1492 ;	radio/radio.c:323: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, 0);
   0397 E4            [12] 1493 	clr	a
   0398 C0 E0         [24] 1494 	push	acc
   039A 75 82 06      [24] 1495 	mov	dpl,#0x06
   039D 12r0Br3F      [24] 1496 	lcall	_register_write
   03A0 15 81         [12] 1497 	dec	sp
                           1498 ;	radio/radio.c:325: preamble_detected = 0;
   03A2 C2*01         [12] 1499 	clr	_preamble_detected
                           1500 ;	radio/radio.c:326: transmit_started = false;
   03A4 C2*03         [12] 1501 	clr	_radio_transmit_simple_transmit_started_1_170
                           1502 ;	radio/radio.c:329: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_1, EZRADIOPRO_TXON | EZRADIOPRO_XTON);
   03A6 74 09         [12] 1503 	mov	a,#0x09
   03A8 C0 E0         [24] 1504 	push	acc
   03AA 75 82 07      [24] 1505 	mov	dpl,#0x07
   03AD 12r0Br3F      [24] 1506 	lcall	_register_write
   03B0 15 81         [12] 1507 	dec	sp
                           1508 ;	radio/radio.c:332: tstart = timer2_tick();
   03B2 12r00r00      [24] 1509 	lcall	_timer2_tick
   03B5 AC 82         [24] 1510 	mov	r4,dpl
   03B7 AD 83         [24] 1511 	mov	r5,dph
   03B9 D0 07         [24] 1512 	pop	ar7
                           1513 ;	radio/radio.c:333: while ((uint16_t)(timer2_tick() - tstart) < timeout_ticks) {
   03BB                    1514 00130$:
   03BB C0 07         [24] 1515 	push	ar7
   03BD C0 05         [24] 1516 	push	ar5
   03BF C0 04         [24] 1517 	push	ar4
   03C1 12r00r00      [24] 1518 	lcall	_timer2_tick
   03C4 AA 82         [24] 1519 	mov	r2,dpl
   03C6 AB 83         [24] 1520 	mov	r3,dph
   03C8 D0 04         [24] 1521 	pop	ar4
   03CA D0 05         [24] 1522 	pop	ar5
   03CC D0 07         [24] 1523 	pop	ar7
   03CE EA            [12] 1524 	mov	a,r2
   03CF C3            [12] 1525 	clr	c
   03D0 9C            [12] 1526 	subb	a,r4
   03D1 FA            [12] 1527 	mov	r2,a
   03D2 EB            [12] 1528 	mov	a,r3
   03D3 9D            [12] 1529 	subb	a,r5
   03D4 FB            [12] 1530 	mov	r3,a
   03D5 78r17         [12] 1531 	mov	r0,#_radio_transmit_simple_PARM_3
   03D7 C3            [12] 1532 	clr	c
   03D8 E2            [24] 1533 	movx	a,@r0
   03D9 F5 F0         [12] 1534 	mov	b,a
   03DB EA            [12] 1535 	mov	a,r2
   03DC 95 F0         [12] 1536 	subb	a,b
   03DE 08            [12] 1537 	inc	r0
   03DF E2            [24] 1538 	movx	a,@r0
   03E0 F5 F0         [12] 1539 	mov	b,a
   03E2 EB            [12] 1540 	mov	a,r3
   03E3 95 F0         [12] 1541 	subb	a,b
   03E5 40 03         [24] 1542 	jc	00199$
   03E7 02r04rF4      [24] 1543 	ljmp	00132$
   03EA                    1544 00199$:
                           1545 ;	radio/radio.c:337: status = register_read(EZRADIOPRO_INTERRUPT_STATUS_1);
   03EA 75 82 03      [24] 1546 	mov	dpl,#0x03
   03ED C0 07         [24] 1547 	push	ar7
   03EF C0 05         [24] 1548 	push	ar5
   03F1 C0 04         [24] 1549 	push	ar4
   03F3 12r0Br6F      [24] 1550 	lcall	_register_read
   03F6 AB 82         [24] 1551 	mov	r3,dpl
   03F8 D0 04         [24] 1552 	pop	ar4
   03FA D0 05         [24] 1553 	pop	ar5
   03FC D0 07         [24] 1554 	pop	ar7
                           1555 ;	radio/radio.c:338: if (transmit_started && length != 0 && (status & EZRADIOPRO_ITXFFAEM)) {
   03FE 30*03 40      [24] 1556 	jnb	_radio_transmit_simple_transmit_started_1_170,00108$
   0401 EF            [12] 1557 	mov	a,r7
   0402 60 3D         [24] 1558 	jz	00108$
   0404 EB            [12] 1559 	mov	a,r3
   0405 30 E5 39      [24] 1560 	jnb	acc.5,00108$
                           1561 ;	radio/radio.c:345: n = 4;
   0408 7E 04         [12] 1562 	mov	r6,#0x04
                           1563 ;	radio/radio.c:346: if (n > length) {
   040A BF 04 00      [24] 1564 	cjne	r7,#0x04,00203$
   040D                    1565 00203$:
   040D 50 02         [24] 1566 	jnc	00106$
                           1567 ;	radio/radio.c:347: n = length;
   040F 8F 06         [24] 1568 	mov	ar6,r7
   0411                    1569 00106$:
                           1570 ;	radio/radio.c:349: radio_write_transmit_fifo(n, buf);
   0411 78r15         [12] 1571 	mov	r0,#_radio_transmit_simple_PARM_2
   0413 79r13         [12] 1572 	mov	r1,#_radio_write_transmit_fifo_PARM_2
   0415 E2            [24] 1573 	movx	a,@r0
   0416 F3            [24] 1574 	movx	@r1,a
   0417 08            [12] 1575 	inc	r0
   0418 E2            [24] 1576 	movx	a,@r0
   0419 09            [12] 1577 	inc	r1
   041A F3            [24] 1578 	movx	@r1,a
   041B 8E 82         [24] 1579 	mov	dpl,r6
   041D C0 07         [24] 1580 	push	ar7
   041F C0 06         [24] 1581 	push	ar6
   0421 C0 05         [24] 1582 	push	ar5
   0423 C0 04         [24] 1583 	push	ar4
   0425 12r02r5D      [24] 1584 	lcall	_radio_write_transmit_fifo
   0428 D0 04         [24] 1585 	pop	ar4
   042A D0 05         [24] 1586 	pop	ar5
   042C D0 06         [24] 1587 	pop	ar6
   042E D0 07         [24] 1588 	pop	ar7
                           1589 ;	radio/radio.c:350: length -= n;
   0430 EF            [12] 1590 	mov	a,r7
   0431 C3            [12] 1591 	clr	c
   0432 9E            [12] 1592 	subb	a,r6
   0433 FF            [12] 1593 	mov	r7,a
                           1594 ;	radio/radio.c:351: buf += n;
   0434 78r15         [12] 1595 	mov	r0,#_radio_transmit_simple_PARM_2
   0436 E2            [24] 1596 	movx	a,@r0
   0437 2E            [12] 1597 	add	a,r6
   0438 F2            [24] 1598 	movx	@r0,a
   0439 08            [12] 1599 	inc	r0
   043A E2            [24] 1600 	movx	a,@r0
   043B 34 00         [12] 1601 	addc	a,#0x00
   043D F2            [24] 1602 	movx	@r0,a
                           1603 ;	radio/radio.c:352: continue;
   043E 02r03rBB      [24] 1604 	ljmp	00130$
   0441                    1605 00108$:
                           1606 ;	radio/radio.c:354: if (transmit_started && length != 0 && (status & EZRADIOPRO_ITXFFAFULL) == 0) {
   0441 30*03 40      [24] 1607 	jnb	_radio_transmit_simple_transmit_started_1_170,00114$
   0444 EF            [12] 1608 	mov	a,r7
   0445 60 3D         [24] 1609 	jz	00114$
   0447 EB            [12] 1610 	mov	a,r3
   0448 20 E6 39      [24] 1611 	jb	acc.6,00114$
                           1612 ;	radio/radio.c:358: n = 4;
   044B 7E 04         [12] 1613 	mov	r6,#0x04
                           1614 ;	radio/radio.c:359: if (n > length) {
   044D BF 04 00      [24] 1615 	cjne	r7,#0x04,00208$
   0450                    1616 00208$:
   0450 50 02         [24] 1617 	jnc	00112$
                           1618 ;	radio/radio.c:360: n = length;
   0452 8F 06         [24] 1619 	mov	ar6,r7
   0454                    1620 00112$:
                           1621 ;	radio/radio.c:362: radio_write_transmit_fifo(n, buf);
   0454 78r15         [12] 1622 	mov	r0,#_radio_transmit_simple_PARM_2
   0456 79r13         [12] 1623 	mov	r1,#_radio_write_transmit_fifo_PARM_2
   0458 E2            [24] 1624 	movx	a,@r0
   0459 F3            [24] 1625 	movx	@r1,a
   045A 08            [12] 1626 	inc	r0
   045B E2            [24] 1627 	movx	a,@r0
   045C 09            [12] 1628 	inc	r1
   045D F3            [24] 1629 	movx	@r1,a
   045E 8E 82         [24] 1630 	mov	dpl,r6
   0460 C0 07         [24] 1631 	push	ar7
   0462 C0 06         [24] 1632 	push	ar6
   0464 C0 05         [24] 1633 	push	ar5
   0466 C0 04         [24] 1634 	push	ar4
   0468 12r02r5D      [24] 1635 	lcall	_radio_write_transmit_fifo
   046B D0 04         [24] 1636 	pop	ar4
   046D D0 05         [24] 1637 	pop	ar5
   046F D0 06         [24] 1638 	pop	ar6
   0471 D0 07         [24] 1639 	pop	ar7
                           1640 ;	radio/radio.c:363: length -= n;
   0473 EF            [12] 1641 	mov	a,r7
   0474 C3            [12] 1642 	clr	c
   0475 9E            [12] 1643 	subb	a,r6
   0476 FF            [12] 1644 	mov	r7,a
                           1645 ;	radio/radio.c:364: buf += n;
   0477 78r15         [12] 1646 	mov	r0,#_radio_transmit_simple_PARM_2
   0479 E2            [24] 1647 	movx	a,@r0
   047A 2E            [12] 1648 	add	a,r6
   047B F2            [24] 1649 	movx	@r0,a
   047C 08            [12] 1650 	inc	r0
   047D E2            [24] 1651 	movx	a,@r0
   047E 34 00         [12] 1652 	addc	a,#0x00
   0480 F2            [24] 1653 	movx	@r0,a
                           1654 ;	radio/radio.c:365: continue;
   0481 02r03rBB      [24] 1655 	ljmp	00130$
   0484                    1656 00114$:
                           1657 ;	radio/radio.c:368: if (status & EZRADIOPRO_IFFERR) {
   0484 EB            [12] 1658 	mov	a,r3
   0485 30 E7 20      [24] 1659 	jnb	acc.7,00120$
                           1660 ;	radio/radio.c:370: radio_clear_transmit_fifo();
   0488 12r02rD8      [24] 1661 	lcall	_radio_clear_transmit_fifo
                           1662 ;	radio/radio.c:372: if (errors.tx_errors != 0xFFFF) {
   048B 78r02         [12] 1663 	mov	r0,#(_errors + 0x0002)
   048D E2            [24] 1664 	movx	a,@r0
   048E FA            [12] 1665 	mov	r2,a
   048F 08            [12] 1666 	inc	r0
   0490 E2            [24] 1667 	movx	a,@r0
   0491 FE            [12] 1668 	mov	r6,a
   0492 BA FF 05      [24] 1669 	cjne	r2,#0xFF,00211$
   0495 BE FF 02      [24] 1670 	cjne	r6,#0xFF,00211$
   0498 80 0C         [24] 1671 	sjmp	00118$
   049A                    1672 00211$:
                           1673 ;	radio/radio.c:373: errors.tx_errors++;
   049A 0A            [12] 1674 	inc	r2
   049B BA 00 01      [24] 1675 	cjne	r2,#0x00,00212$
   049E 0E            [12] 1676 	inc	r6
   049F                    1677 00212$:
   049F 78r02         [12] 1678 	mov	r0,#(_errors + 0x0002)
   04A1 EA            [12] 1679 	mov	a,r2
   04A2 F2            [24] 1680 	movx	@r0,a
   04A3 08            [12] 1681 	inc	r0
   04A4 EE            [12] 1682 	mov	a,r6
   04A5 F2            [24] 1683 	movx	@r0,a
   04A6                    1684 00118$:
                           1685 ;	radio/radio.c:375: return false;
   04A6 C3            [12] 1686 	clr	c
   04A7 22            [24] 1687 	ret
   04A8                    1688 00120$:
                           1689 ;	radio/radio.c:380: status = register_read(EZRADIOPRO_DEVICE_STATUS);
   04A8 75 82 02      [24] 1690 	mov	dpl,#0x02
   04AB C0 07         [24] 1691 	push	ar7
   04AD C0 05         [24] 1692 	push	ar5
   04AF C0 04         [24] 1693 	push	ar4
   04B1 12r0Br6F      [24] 1694 	lcall	_register_read
   04B4 AB 82         [24] 1695 	mov	r3,dpl
   04B6 D0 04         [24] 1696 	pop	ar4
   04B8 D0 05         [24] 1697 	pop	ar5
   04BA D0 07         [24] 1698 	pop	ar7
                           1699 ;	radio/radio.c:381: if (status & 0x02) {
   04BC EB            [12] 1700 	mov	a,r3
   04BD 30 E1 05      [24] 1701 	jnb	acc.1,00122$
                           1702 ;	radio/radio.c:383: transmit_started = true;
   04C0 D2*03         [12] 1703 	setb	_radio_transmit_simple_transmit_started_1_170
                           1704 ;	radio/radio.c:384: continue;
   04C2 02r03rBB      [24] 1705 	ljmp	00130$
   04C5                    1706 00122$:
                           1707 ;	radio/radio.c:386: if (transmit_started && (status & 0x02) == 0) {
   04C5 20*03 03      [24] 1708 	jb	_radio_transmit_simple_transmit_started_1_170,00214$
   04C8 02r03rBB      [24] 1709 	ljmp	00130$
   04CB                    1710 00214$:
   04CB EB            [12] 1711 	mov	a,r3
   04CC 30 E1 03      [24] 1712 	jnb	acc.1,00215$
   04CF 02r03rBB      [24] 1713 	ljmp	00130$
   04D2                    1714 00215$:
                           1715 ;	radio/radio.c:389: if (length != 0) {
   04D2 EF            [12] 1716 	mov	a,r7
   04D3 60 1D         [24] 1717 	jz	00126$
                           1718 ;	radio/radio.c:391: if (errors.tx_errors != 0xFFFF) {
   04D5 78r02         [12] 1719 	mov	r0,#(_errors + 0x0002)
   04D7 E2            [24] 1720 	movx	a,@r0
   04D8 FE            [12] 1721 	mov	r6,a
   04D9 08            [12] 1722 	inc	r0
   04DA E2            [24] 1723 	movx	a,@r0
   04DB FF            [12] 1724 	mov	r7,a
   04DC BE FF 05      [24] 1725 	cjne	r6,#0xFF,00217$
   04DF BF FF 02      [24] 1726 	cjne	r7,#0xFF,00217$
   04E2 80 0C         [24] 1727 	sjmp	00124$
   04E4                    1728 00217$:
                           1729 ;	radio/radio.c:392: errors.tx_errors++;
   04E4 0E            [12] 1730 	inc	r6
   04E5 BE 00 01      [24] 1731 	cjne	r6,#0x00,00218$
   04E8 0F            [12] 1732 	inc	r7
   04E9                    1733 00218$:
   04E9 78r02         [12] 1734 	mov	r0,#(_errors + 0x0002)
   04EB EE            [12] 1735 	mov	a,r6
   04EC F2            [24] 1736 	movx	@r0,a
   04ED 08            [12] 1737 	inc	r0
   04EE EF            [12] 1738 	mov	a,r7
   04EF F2            [24] 1739 	movx	@r0,a
   04F0                    1740 00124$:
                           1741 ;	radio/radio.c:394: return false;
   04F0 C3            [12] 1742 	clr	c
   04F1 22            [24] 1743 	ret
   04F2                    1744 00126$:
                           1745 ;	radio/radio.c:396: return true;			
   04F2 D3            [12] 1746 	setb	c
   04F3 22            [24] 1747 	ret
   04F4                    1748 00132$:
                           1749 ;	radio/radio.c:407: if (errors.tx_errors != 0xFFFF) {
   04F4 78r02         [12] 1750 	mov	r0,#(_errors + 0x0002)
   04F6 E2            [24] 1751 	movx	a,@r0
   04F7 FE            [12] 1752 	mov	r6,a
   04F8 08            [12] 1753 	inc	r0
   04F9 E2            [24] 1754 	movx	a,@r0
   04FA FF            [12] 1755 	mov	r7,a
   04FB BE FF 05      [24] 1756 	cjne	r6,#0xFF,00219$
   04FE BF FF 02      [24] 1757 	cjne	r7,#0xFF,00219$
   0501 80 0C         [24] 1758 	sjmp	00134$
   0503                    1759 00219$:
                           1760 ;	radio/radio.c:408: errors.tx_errors++;
   0503 0E            [12] 1761 	inc	r6
   0504 BE 00 01      [24] 1762 	cjne	r6,#0x00,00220$
   0507 0F            [12] 1763 	inc	r7
   0508                    1764 00220$:
   0508 78r02         [12] 1765 	mov	r0,#(_errors + 0x0002)
   050A EE            [12] 1766 	mov	a,r6
   050B F2            [24] 1767 	movx	@r0,a
   050C 08            [12] 1768 	inc	r0
   050D EF            [12] 1769 	mov	a,r7
   050E F2            [24] 1770 	movx	@r0,a
   050F                    1771 00134$:
                           1772 ;	radio/radio.c:411: return false;
   050F C3            [12] 1773 	clr	c
   0510 22            [24] 1774 	ret
                           1775 ;------------------------------------------------------------
                           1776 ;Allocation info for local variables in function 'radio_transmit_golay'
                           1777 ;------------------------------------------------------------
                           1778 ;elen                      Allocated with name '_radio_transmit_golay_elen_1_186'
                           1779 ;rlen                      Allocated to registers r5 
                           1780 ;length                    Allocated with name '_radio_transmit_golay_length_1_185'
                           1781 ;gin                       Allocated with name '_radio_transmit_golay_gin_1_186'
                           1782 ;------------------------------------------------------------
                           1783 ;	radio/radio.c:424: radio_transmit_golay(uint8_t length, __xdata uint8_t * __pdata buf, __pdata uint16_t timeout_ticks)
                           1784 ;	-----------------------------------------
                           1785 ;	 function radio_transmit_golay
                           1786 ;	-----------------------------------------
   0511                    1787 _radio_transmit_golay:
   0511 E5 82         [12] 1788 	mov	a,dpl
                           1789 ;	radio/radio.c:430: if (length > (sizeof(radio_buffer)/2)-6) {
   0513 90r01r02      [24] 1790 	mov	dptr,#_radio_transmit_golay_length_1_185
   0516 F0            [24] 1791 	movx	@dptr,a
   0517 FF            [12] 1792 	mov  r7,a
   0518 24 87         [12] 1793 	add	a,#0xff - 0x78
   051A 50 19         [24] 1794 	jnc	00102$
                           1795 ;	radio/radio.c:432: panic("oversized golay packet");		
   051C C0 07         [24] 1796 	push	ar7
   051E 74r11         [12] 1797 	mov	a,#__str_1
   0520 C0 E0         [24] 1798 	push	acc
   0522 74s00         [12] 1799 	mov	a,#(__str_1 >> 8)
   0524 C0 E0         [24] 1800 	push	acc
   0526 74 80         [12] 1801 	mov	a,#0x80
   0528 C0 E0         [24] 1802 	push	acc
   052A 12r00r00      [24] 1803 	lcall	_panic
   052D 15 81         [12] 1804 	dec	sp
   052F 15 81         [12] 1805 	dec	sp
   0531 15 81         [12] 1806 	dec	sp
   0533 D0 07         [24] 1807 	pop	ar7
   0535                    1808 00102$:
                           1809 ;	radio/radio.c:436: rlen = ((length+2)/3)*3;
   0535 8F 05         [24] 1810 	mov	ar5,r7
   0537 7E 00         [12] 1811 	mov	r6,#0x00
   0539 74 02         [12] 1812 	mov	a,#0x02
   053B 2D            [12] 1813 	add	a,r5
   053C FD            [12] 1814 	mov	r5,a
   053D E4            [12] 1815 	clr	a
   053E 3E            [12] 1816 	addc	a,r6
   053F FE            [12] 1817 	mov	r6,a
   0540 90r00r00      [24] 1818 	mov	dptr,#__divsint_PARM_2
   0543 74 03         [12] 1819 	mov	a,#0x03
   0545 F0            [24] 1820 	movx	@dptr,a
   0546 E4            [12] 1821 	clr	a
   0547 A3            [24] 1822 	inc	dptr
   0548 F0            [24] 1823 	movx	@dptr,a
   0549 8D 82         [24] 1824 	mov	dpl,r5
   054B 8E 83         [24] 1825 	mov	dph,r6
   054D C0 07         [24] 1826 	push	ar7
   054F 12r00r00      [24] 1827 	lcall	__divsint
   0552 AD 82         [24] 1828 	mov	r5,dpl
   0554 D0 07         [24] 1829 	pop	ar7
   0556 ED            [12] 1830 	mov	a,r5
   0557 75 F0 03      [24] 1831 	mov	b,#0x03
   055A A4            [48] 1832 	mul	ab
                           1833 ;	radio/radio.c:439: elen = (rlen+6)*2;
   055B FD            [12] 1834 	mov	r5,a
   055C 24 06         [12] 1835 	add	a,#0x06
   055E 25 E0         [12] 1836 	add	a,acc
   0560 F5*02         [12] 1837 	mov	_radio_transmit_golay_elen_1_186,a
                           1838 ;	radio/radio.c:442: gin[0] = netid[0];
   0562 78r03         [12] 1839 	mov	r0,#_netid
   0564 E2            [24] 1840 	movx	a,@r0
   0565 90r01r03      [24] 1841 	mov	dptr,#_radio_transmit_golay_gin_1_186
   0568 F0            [24] 1842 	movx	@dptr,a
                           1843 ;	radio/radio.c:443: gin[1] = netid[1];
   0569 78r04         [12] 1844 	mov	r0,#(_netid + 0x0001)
   056B E2            [24] 1845 	movx	a,@r0
   056C 90r01r04      [24] 1846 	mov	dptr,#(_radio_transmit_golay_gin_1_186 + 0x0001)
   056F F0            [24] 1847 	movx	@dptr,a
                           1848 ;	radio/radio.c:444: gin[2] = length;
   0570 90r01r05      [24] 1849 	mov	dptr,#(_radio_transmit_golay_gin_1_186 + 0x0002)
   0573 EF            [12] 1850 	mov	a,r7
   0574 F0            [24] 1851 	movx	@dptr,a
                           1852 ;	radio/radio.c:447: golay_encode(3, gin, radio_buffer);
   0575 78r00         [12] 1853 	mov	r0,#_golay_encode_PARM_2
   0577 74r03         [12] 1854 	mov	a,#_radio_transmit_golay_gin_1_186
   0579 F2            [24] 1855 	movx	@r0,a
   057A 08            [12] 1856 	inc	r0
   057B 74s01         [12] 1857 	mov	a,#(_radio_transmit_golay_gin_1_186 >> 8)
   057D F2            [24] 1858 	movx	@r0,a
   057E 78r00         [12] 1859 	mov	r0,#_golay_encode_PARM_3
   0580 74r00         [12] 1860 	mov	a,#_radio_buffer
   0582 F2            [24] 1861 	movx	@r0,a
   0583 08            [12] 1862 	inc	r0
   0584 74s00         [12] 1863 	mov	a,#(_radio_buffer >> 8)
   0586 F2            [24] 1864 	movx	@r0,a
   0587 75 82 03      [24] 1865 	mov	dpl,#0x03
   058A C0 07         [24] 1866 	push	ar7
   058C C0 05         [24] 1867 	push	ar5
   058E 12r00r00      [24] 1868 	lcall	_golay_encode
   0591 D0 05         [24] 1869 	pop	ar5
   0593 D0 07         [24] 1870 	pop	ar7
                           1871 ;	radio/radio.c:451: crc = crc16(length, buf);
   0595 78r19         [12] 1872 	mov	r0,#_radio_transmit_golay_PARM_2
   0597 E2            [24] 1873 	movx	a,@r0
   0598 F5*00         [12] 1874 	mov	_crc16_PARM_2,a
   059A 08            [12] 1875 	inc	r0
   059B E2            [24] 1876 	movx	a,@r0
   059C F5*01         [12] 1877 	mov	(_crc16_PARM_2 + 1),a
   059E 8F 82         [24] 1878 	mov	dpl,r7
   05A0 C0 07         [24] 1879 	push	ar7
   05A2 C0 05         [24] 1880 	push	ar5
   05A4 12r00r00      [24] 1881 	lcall	_crc16
   05A7 AB 82         [24] 1882 	mov	r3,dpl
   05A9 AC 83         [24] 1883 	mov	r4,dph
   05AB D0 05         [24] 1884 	pop	ar5
   05AD D0 07         [24] 1885 	pop	ar7
                           1886 ;	radio/radio.c:452: gin[0] = crc&0xFF;
   05AF 8B 02         [24] 1887 	mov	ar2,r3
   05B1 90r01r03      [24] 1888 	mov	dptr,#_radio_transmit_golay_gin_1_186
   05B4 EA            [12] 1889 	mov	a,r2
   05B5 F0            [24] 1890 	movx	@dptr,a
                           1891 ;	radio/radio.c:453: gin[1] = crc>>8;
   05B6 8C 03         [24] 1892 	mov	ar3,r4
   05B8 90r01r04      [24] 1893 	mov	dptr,#(_radio_transmit_golay_gin_1_186 + 0x0001)
   05BB EB            [12] 1894 	mov	a,r3
   05BC F0            [24] 1895 	movx	@dptr,a
                           1896 ;	radio/radio.c:454: gin[2] = length;
   05BD 90r01r05      [24] 1897 	mov	dptr,#(_radio_transmit_golay_gin_1_186 + 0x0002)
   05C0 EF            [12] 1898 	mov	a,r7
   05C1 F0            [24] 1899 	movx	@dptr,a
                           1900 ;	radio/radio.c:457: golay_encode(3, gin, &radio_buffer[6]);
   05C2 78r00         [12] 1901 	mov	r0,#_golay_encode_PARM_3
   05C4 74 06         [12] 1902 	mov	a,#0x06
   05C6 24r00         [12] 1903 	add	a,#_radio_buffer
   05C8 F2            [24] 1904 	movx	@r0,a
   05C9 E4            [12] 1905 	clr	a
   05CA 34s00         [12] 1906 	addc	a,#(_radio_buffer >> 8)
   05CC 08            [12] 1907 	inc	r0
   05CD F2            [24] 1908 	movx	@r0,a
   05CE 78r00         [12] 1909 	mov	r0,#_golay_encode_PARM_2
   05D0 74r03         [12] 1910 	mov	a,#_radio_transmit_golay_gin_1_186
   05D2 F2            [24] 1911 	movx	@r0,a
   05D3 08            [12] 1912 	inc	r0
   05D4 74s01         [12] 1913 	mov	a,#(_radio_transmit_golay_gin_1_186 >> 8)
   05D6 F2            [24] 1914 	movx	@r0,a
   05D7 75 82 03      [24] 1915 	mov	dpl,#0x03
   05DA C0 05         [24] 1916 	push	ar5
   05DC 12r00r00      [24] 1917 	lcall	_golay_encode
   05DF D0 05         [24] 1918 	pop	ar5
                           1919 ;	radio/radio.c:460: golay_encode(rlen, buf, &radio_buffer[12]);
   05E1 78r00         [12] 1920 	mov	r0,#_golay_encode_PARM_3
   05E3 74 0C         [12] 1921 	mov	a,#0x0C
   05E5 24r00         [12] 1922 	add	a,#_radio_buffer
   05E7 F2            [24] 1923 	movx	@r0,a
   05E8 E4            [12] 1924 	clr	a
   05E9 34s00         [12] 1925 	addc	a,#(_radio_buffer >> 8)
   05EB 08            [12] 1926 	inc	r0
   05EC F2            [24] 1927 	movx	@r0,a
   05ED 78r19         [12] 1928 	mov	r0,#_radio_transmit_golay_PARM_2
   05EF 79r00         [12] 1929 	mov	r1,#_golay_encode_PARM_2
   05F1 E2            [24] 1930 	movx	a,@r0
   05F2 F3            [24] 1931 	movx	@r1,a
   05F3 08            [12] 1932 	inc	r0
   05F4 E2            [24] 1933 	movx	a,@r0
   05F5 09            [12] 1934 	inc	r1
   05F6 F3            [24] 1935 	movx	@r1,a
   05F7 8D 82         [24] 1936 	mov	dpl,r5
   05F9 12r00r00      [24] 1937 	lcall	_golay_encode
                           1938 ;	radio/radio.c:462: return radio_transmit_simple(elen, radio_buffer, timeout_ticks);
   05FC 78r15         [12] 1939 	mov	r0,#_radio_transmit_simple_PARM_2
   05FE 74r00         [12] 1940 	mov	a,#_radio_buffer
   0600 F2            [24] 1941 	movx	@r0,a
   0601 08            [12] 1942 	inc	r0
   0602 74s00         [12] 1943 	mov	a,#(_radio_buffer >> 8)
   0604 F2            [24] 1944 	movx	@r0,a
   0605 78r1B         [12] 1945 	mov	r0,#_radio_transmit_golay_PARM_3
   0607 79r17         [12] 1946 	mov	r1,#_radio_transmit_simple_PARM_3
   0609 E2            [24] 1947 	movx	a,@r0
   060A F3            [24] 1948 	movx	@r1,a
   060B 08            [12] 1949 	inc	r0
   060C E2            [24] 1950 	movx	a,@r0
   060D 09            [12] 1951 	inc	r1
   060E F3            [24] 1952 	movx	@r1,a
   060F 85*02 82      [24] 1953 	mov	dpl,_radio_transmit_golay_elen_1_186
   0612 12r03r28      [24] 1954 	lcall	_radio_transmit_simple
   0615 92*04         [24] 1955 	mov  _radio_transmit_golay_sloc0_1_0,c
   0617 22            [24] 1956 	ret
                           1957 ;------------------------------------------------------------
                           1958 ;Allocation info for local variables in function 'radio_transmit'
                           1959 ;------------------------------------------------------------
                           1960 ;length                    Allocated with name '_radio_transmit_length_1_188'
                           1961 ;------------------------------------------------------------
                           1962 ;	radio/radio.c:474: radio_transmit(uint8_t length, __xdata uint8_t * __pdata buf, __pdata uint16_t timeout_ticks)
                           1963 ;	-----------------------------------------
                           1964 ;	 function radio_transmit
                           1965 ;	-----------------------------------------
   0618                    1966 _radio_transmit:
   0618 E5 82         [12] 1967 	mov	a,dpl
   061A 90r01r06      [24] 1968 	mov	dptr,#_radio_transmit_length_1_188
   061D F0            [24] 1969 	movx	@dptr,a
                           1970 ;	radio/radio.c:477: EX0_SAVE_DISABLE;
   061E A2 A8         [12] 1971 	mov	c,_EX0
   0620 92*05         [24] 1972 	mov	_radio_transmit_EX0_saved_1_189,c
   0622 C2 A8         [12] 1973 	clr	_EX0
                           1974 ;	radio/radio.c:483: if (!feature_golay) {
   0624 20*00 22      [24] 1975 	jb	_feature_golay,00102$
                           1976 ;	radio/radio.c:484: ret = radio_transmit_simple(length, buf, timeout_ticks);
   0627 90r01r06      [24] 1977 	mov	dptr,#_radio_transmit_length_1_188
   062A E0            [24] 1978 	movx	a,@dptr
   062B FF            [12] 1979 	mov	r7,a
   062C 78r1D         [12] 1980 	mov	r0,#_radio_transmit_PARM_2
   062E 79r15         [12] 1981 	mov	r1,#_radio_transmit_simple_PARM_2
   0630 E2            [24] 1982 	movx	a,@r0
   0631 F3            [24] 1983 	movx	@r1,a
   0632 08            [12] 1984 	inc	r0
   0633 E2            [24] 1985 	movx	a,@r0
   0634 09            [12] 1986 	inc	r1
   0635 F3            [24] 1987 	movx	@r1,a
   0636 78r1F         [12] 1988 	mov	r0,#_radio_transmit_PARM_3
   0638 79r17         [12] 1989 	mov	r1,#_radio_transmit_simple_PARM_3
   063A E2            [24] 1990 	movx	a,@r0
   063B F3            [24] 1991 	movx	@r1,a
   063C 08            [12] 1992 	inc	r0
   063D E2            [24] 1993 	movx	a,@r0
   063E 09            [12] 1994 	inc	r1
   063F F3            [24] 1995 	movx	@r1,a
   0640 8F 82         [24] 1996 	mov	dpl,r7
   0642 12r03r28      [24] 1997 	lcall	_radio_transmit_simple
   0645 92*06         [24] 1998 	mov	_radio_transmit_sloc0_1_0,c
   0647 80 20         [24] 1999 	sjmp	00103$
   0649                    2000 00102$:
                           2001 ;	radio/radio.c:486: ret = radio_transmit_golay(length, buf, timeout_ticks);
   0649 90r01r06      [24] 2002 	mov	dptr,#_radio_transmit_length_1_188
   064C E0            [24] 2003 	movx	a,@dptr
   064D FF            [12] 2004 	mov	r7,a
   064E 78r1D         [12] 2005 	mov	r0,#_radio_transmit_PARM_2
   0650 79r19         [12] 2006 	mov	r1,#_radio_transmit_golay_PARM_2
   0652 E2            [24] 2007 	movx	a,@r0
   0653 F3            [24] 2008 	movx	@r1,a
   0654 08            [12] 2009 	inc	r0
   0655 E2            [24] 2010 	movx	a,@r0
   0656 09            [12] 2011 	inc	r1
   0657 F3            [24] 2012 	movx	@r1,a
   0658 78r1F         [12] 2013 	mov	r0,#_radio_transmit_PARM_3
   065A 79r1B         [12] 2014 	mov	r1,#_radio_transmit_golay_PARM_3
   065C E2            [24] 2015 	movx	a,@r0
   065D F3            [24] 2016 	movx	@r1,a
   065E 08            [12] 2017 	inc	r0
   065F E2            [24] 2018 	movx	a,@r0
   0660 09            [12] 2019 	inc	r1
   0661 F3            [24] 2020 	movx	@r1,a
   0662 8F 82         [24] 2021 	mov	dpl,r7
   0664 12r05r11      [24] 2022 	lcall	_radio_transmit_golay
   0667 92*06         [24] 2023 	mov	_radio_transmit_sloc0_1_0,c
   0669                    2024 00103$:
                           2025 ;	radio/radio.c:491: EX0_RESTORE;
   0669 A2*05         [12] 2026 	mov	c,_radio_transmit_EX0_saved_1_189
   066B 92 A8         [24] 2027 	mov	_EX0,c
                           2028 ;	radio/radio.c:492: return ret;
   066D A2*06         [12] 2029 	mov	c,_radio_transmit_sloc0_1_0
   066F 22            [24] 2030 	ret
                           2031 ;------------------------------------------------------------
                           2032 ;Allocation info for local variables in function 'radio_receiver_on'
                           2033 ;------------------------------------------------------------
                           2034 ;	radio/radio.c:499: radio_receiver_on(void)
                           2035 ;	-----------------------------------------
                           2036 ;	 function radio_receiver_on
                           2037 ;	-----------------------------------------
   0670                    2038 _radio_receiver_on:
                           2039 ;	radio/radio.c:501: EX0 = 0;
   0670 C2 A8         [12] 2040 	clr	_EX0
                           2041 ;	radio/radio.c:503: packet_received = 0;
   0672 C2*00         [12] 2042 	clr	_packet_received
                           2043 ;	radio/radio.c:504: receive_packet_length = 0;
   0674 78r00         [12] 2044 	mov	r0,#_receive_packet_length
   0676 E4            [12] 2045 	clr	a
   0677 F2            [24] 2046 	movx	@r0,a
                           2047 ;	radio/radio.c:505: preamble_detected = 0;
   0678 C2*01         [12] 2048 	clr	_preamble_detected
                           2049 ;	radio/radio.c:506: partial_packet_length = 0;
   067A 78r01         [12] 2050 	mov	r0,#_partial_packet_length
   067C E4            [12] 2051 	clr	a
   067D F2            [24] 2052 	movx	@r0,a
                           2053 ;	radio/radio.c:509: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, RADIO_RX_INTERRUPTS);
   067E 74 13         [12] 2054 	mov	a,#0x13
   0680 C0 E0         [24] 2055 	push	acc
   0682 75 82 05      [24] 2056 	mov	dpl,#0x05
   0685 12r0Br3F      [24] 2057 	lcall	_register_write
   0688 15 81         [12] 2058 	dec	sp
                           2059 ;	radio/radio.c:510: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, EZRADIOPRO_ENPREAVAL);
   068A 74 40         [12] 2060 	mov	a,#0x40
   068C C0 E0         [24] 2061 	push	acc
   068E 75 82 06      [24] 2062 	mov	dpl,#0x06
   0691 12r0Br3F      [24] 2063 	lcall	_register_write
   0694 15 81         [12] 2064 	dec	sp
                           2065 ;	radio/radio.c:512: clear_status_registers();
   0696 12r0BrD7      [24] 2066 	lcall	_clear_status_registers
                           2067 ;	radio/radio.c:513: radio_clear_transmit_fifo();
   0699 12r02rD8      [24] 2068 	lcall	_radio_clear_transmit_fifo
                           2069 ;	radio/radio.c:514: radio_clear_receive_fifo();
   069C 12r03r00      [24] 2070 	lcall	_radio_clear_receive_fifo
                           2071 ;	radio/radio.c:517: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_1, EZRADIOPRO_RXON | EZRADIOPRO_XTON);
   069F 74 05         [12] 2072 	mov	a,#0x05
   06A1 C0 E0         [24] 2073 	push	acc
   06A3 75 82 07      [24] 2074 	mov	dpl,#0x07
   06A6 12r0Br3F      [24] 2075 	lcall	_register_write
   06A9 15 81         [12] 2076 	dec	sp
                           2077 ;	radio/radio.c:520: EX0 = 1;
   06AB D2 A8         [12] 2078 	setb	_EX0
                           2079 ;	radio/radio.c:522: return true;
   06AD D3            [12] 2080 	setb	c
   06AE 22            [24] 2081 	ret
                           2082 ;------------------------------------------------------------
                           2083 ;Allocation info for local variables in function 'radio_initialise'
                           2084 ;------------------------------------------------------------
                           2085 ;status                    Allocated with name '_radio_initialise_status_1_195'
                           2086 ;------------------------------------------------------------
                           2087 ;	radio/radio.c:529: radio_initialise(void)
                           2088 ;	-----------------------------------------
                           2089 ;	 function radio_initialise
                           2090 ;	-----------------------------------------
   06AF                    2091 _radio_initialise:
                           2092 ;	radio/radio.c:533: delay_msec(50);
   06AF 90 00 32      [24] 2093 	mov	dptr,#0x0032
   06B2 12r00r00      [24] 2094 	lcall	_delay_msec
                           2095 ;	radio/radio.c:536: status = register_read(EZRADIOPRO_DEVICE_VERSION);
   06B5 75 82 01      [24] 2096 	mov	dpl,#0x01
   06B8 12r0Br6F      [24] 2097 	lcall	_register_read
   06BB AF 82         [24] 2098 	mov	r7,dpl
                           2099 ;	radio/radio.c:537: if (status == 0xFF || status < 5) {
   06BD BF FF 02      [24] 2100 	cjne	r7,#0xFF,00133$
   06C0 80 05         [24] 2101 	sjmp	00101$
   06C2                    2102 00133$:
   06C2 BF 05 00      [24] 2103 	cjne	r7,#0x05,00134$
   06C5                    2104 00134$:
   06C5 50 02         [24] 2105 	jnc	00102$
   06C7                    2106 00101$:
                           2107 ;	radio/radio.c:539: return false;
   06C7 C3            [12] 2108 	clr	c
   06C8 22            [24] 2109 	ret
   06C9                    2110 00102$:
                           2111 ;	radio/radio.c:542: status = register_read(EZRADIOPRO_INTERRUPT_STATUS_2);
   06C9 75 82 04      [24] 2112 	mov	dpl,#0x04
   06CC 12r0Br6F      [24] 2113 	lcall	_register_read
                           2114 ;	radio/radio.c:544: if ((status & EZRADIOPRO_IPOR) == 0) {
   06CF E5 82         [12] 2115 	mov	a,dpl
   06D1 FF            [12] 2116 	mov	r7,a
   06D2 20 E0 06      [24] 2117 	jb	acc.0,00105$
                           2118 ;	radio/radio.c:546: return software_reset();
   06D5 12r0Cr37      [24] 2119 	lcall	_software_reset
   06D8 92*07         [24] 2120 	mov  _radio_initialise_sloc0_1_0,c
   06DA 22            [24] 2121 	ret
   06DB                    2122 00105$:
                           2123 ;	radio/radio.c:549: if (status & EZRADIOPRO_ICHIPRDY) {
   06DB EF            [12] 2124 	mov	a,r7
   06DC 30 E1 02      [24] 2125 	jnb	acc.1,00107$
                           2126 ;	radio/radio.c:551: return true;
   06DF D3            [12] 2127 	setb	c
   06E0 22            [24] 2128 	ret
   06E1                    2129 00107$:
                           2130 ;	radio/radio.c:555: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, 0);
   06E1 E4            [12] 2131 	clr	a
   06E2 C0 E0         [24] 2132 	push	acc
   06E4 75 82 05      [24] 2133 	mov	dpl,#0x05
   06E7 12r0Br3F      [24] 2134 	lcall	_register_write
   06EA 15 81         [12] 2135 	dec	sp
                           2136 ;	radio/radio.c:556: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, EZRADIOPRO_ENCHIPRDY);
   06EC 74 02         [12] 2137 	mov	a,#0x02
   06EE C0 E0         [24] 2138 	push	acc
   06F0 75 82 06      [24] 2139 	mov	dpl,#0x06
   06F3 12r0Br3F      [24] 2140 	lcall	_register_write
   06F6 15 81         [12] 2141 	dec	sp
                           2142 ;	radio/radio.c:559: delay_set(50);
   06F8 90 00 32      [24] 2143 	mov	dptr,#0x0032
   06FB 12r00r00      [24] 2144 	lcall	_delay_set
                           2145 ;	radio/radio.c:560: while (!delay_expired()) {
   06FE                    2146 00110$:
   06FE 12r00r00      [24] 2147 	lcall	_delay_expired
   0701 40 13         [24] 2148 	jc	00112$
                           2149 ;	radio/radio.c:561: status = register_read(EZRADIOPRO_INTERRUPT_STATUS_1);
   0703 75 82 03      [24] 2150 	mov	dpl,#0x03
   0706 12r0Br6F      [24] 2151 	lcall	_register_read
                           2152 ;	radio/radio.c:562: status = register_read(EZRADIOPRO_INTERRUPT_STATUS_2);
   0709 75 82 04      [24] 2153 	mov	dpl,#0x04
   070C 12r0Br6F      [24] 2154 	lcall	_register_read
   070F E5 82         [12] 2155 	mov	a,dpl
                           2156 ;	radio/radio.c:563: if (status & EZRADIOPRO_ICHIPRDY) {
   0711 30 E1 EA      [24] 2157 	jnb	acc.1,00110$
                           2158 ;	radio/radio.c:564: return true;
   0714 D3            [12] 2159 	setb	c
   0715 22            [24] 2160 	ret
   0716                    2161 00112$:
                           2162 ;	radio/radio.c:568: return false;
   0716 C3            [12] 2163 	clr	c
   0717 22            [24] 2164 	ret
                           2165 ;------------------------------------------------------------
                           2166 ;Allocation info for local variables in function 'radio_set_frequency'
                           2167 ;------------------------------------------------------------
                           2168 ;	radio/radio.c:575: radio_set_frequency(__pdata uint32_t value)
                           2169 ;	-----------------------------------------
                           2170 ;	 function radio_set_frequency
                           2171 ;	-----------------------------------------
   0718                    2172 _radio_set_frequency:
   0718 AC 82         [24] 2173 	mov	r4,dpl
   071A AD 83         [24] 2174 	mov	r5,dph
   071C AE F0         [24] 2175 	mov	r6,b
   071E FF            [12] 2176 	mov	r7,a
                           2177 ;	radio/radio.c:577: if (value < 240000000UL || value > 935000000UL) {
   071F C3            [12] 2178 	clr	c
   0720 ED            [12] 2179 	mov	a,r5
   0721 94 1C         [12] 2180 	subb	a,#0x1C
   0723 EE            [12] 2181 	mov	a,r6
   0724 94 4E         [12] 2182 	subb	a,#0x4E
   0726 EF            [12] 2183 	mov	a,r7
   0727 94 0E         [12] 2184 	subb	a,#0x0E
   0729 40 0E         [24] 2185 	jc	00101$
   072B 74 C0         [12] 2186 	mov	a,#0xC0
   072D 9C            [12] 2187 	subb	a,r4
   072E 74 F7         [12] 2188 	mov	a,#0xF7
   0730 9D            [12] 2189 	subb	a,r5
   0731 74 BA         [12] 2190 	mov	a,#0xBA
   0733 9E            [12] 2191 	subb	a,r6
   0734 74 37         [12] 2192 	mov	a,#0x37
   0736 9F            [12] 2193 	subb	a,r7
   0737 50 02         [24] 2194 	jnc	00102$
   0739                    2195 00101$:
                           2196 ;	radio/radio.c:578: return false;
   0739 C3            [12] 2197 	clr	c
   073A 22            [24] 2198 	ret
   073B                    2199 00102$:
                           2200 ;	radio/radio.c:580: settings.frequency = value;
   073B 78r05         [12] 2201 	mov	r0,#_settings
   073D EC            [12] 2202 	mov	a,r4
   073E F2            [24] 2203 	movx	@r0,a
   073F 08            [12] 2204 	inc	r0
   0740 ED            [12] 2205 	mov	a,r5
   0741 F2            [24] 2206 	movx	@r0,a
   0742 08            [12] 2207 	inc	r0
   0743 EE            [12] 2208 	mov	a,r6
   0744 F2            [24] 2209 	movx	@r0,a
   0745 08            [12] 2210 	inc	r0
   0746 EF            [12] 2211 	mov	a,r7
   0747 F2            [24] 2212 	movx	@r0,a
                           2213 ;	radio/radio.c:581: set_frequency_registers(value);
   0748 8C 82         [24] 2214 	mov	dpl,r4
   074A 8D 83         [24] 2215 	mov	dph,r5
   074C 8E F0         [24] 2216 	mov	b,r6
   074E EF            [12] 2217 	mov	a,r7
   074F 12r0CrA3      [24] 2218 	lcall	_set_frequency_registers
                           2219 ;	radio/radio.c:582: return true;
   0752 D3            [12] 2220 	setb	c
   0753 22            [24] 2221 	ret
                           2222 ;------------------------------------------------------------
                           2223 ;Allocation info for local variables in function 'radio_set_channel_spacing'
                           2224 ;------------------------------------------------------------
                           2225 ;	radio/radio.c:589: radio_set_channel_spacing(__pdata uint32_t value)
                           2226 ;	-----------------------------------------
                           2227 ;	 function radio_set_channel_spacing
                           2228 ;	-----------------------------------------
   0754                    2229 _radio_set_channel_spacing:
   0754 AC 82         [24] 2230 	mov	r4,dpl
   0756 AD 83         [24] 2231 	mov	r5,dph
   0758 AE F0         [24] 2232 	mov	r6,b
   075A FF            [12] 2233 	mov	r7,a
                           2234 ;	radio/radio.c:591: if (value > 2550000L)
   075B C3            [12] 2235 	clr	c
   075C 74 F0         [12] 2236 	mov	a,#0xF0
   075E 9C            [12] 2237 	subb	a,r4
   075F 74 E8         [12] 2238 	mov	a,#0xE8
   0761 9D            [12] 2239 	subb	a,r5
   0762 74 26         [12] 2240 	mov	a,#0x26
   0764 9E            [12] 2241 	subb	a,r6
   0765 E4            [12] 2242 	clr	a
   0766 9F            [12] 2243 	subb	a,r7
   0767 50 02         [24] 2244 	jnc	00102$
                           2245 ;	radio/radio.c:592: return false;
   0769 C3            [12] 2246 	clr	c
   076A 22            [24] 2247 	ret
   076B                    2248 00102$:
                           2249 ;	radio/radio.c:593: value = scale_uint32(value, 10000);
   076B 90r00r21      [24] 2250 	mov	dptr,#_scale_uint32_PARM_2
   076E 74 10         [12] 2251 	mov	a,#0x10
   0770 F0            [24] 2252 	movx	@dptr,a
   0771 74 27         [12] 2253 	mov	a,#0x27
   0773 A3            [24] 2254 	inc	dptr
   0774 F0            [24] 2255 	movx	@dptr,a
   0775 E4            [12] 2256 	clr	a
   0776 A3            [24] 2257 	inc	dptr
   0777 F0            [24] 2258 	movx	@dptr,a
   0778 E4            [12] 2259 	clr	a
   0779 A3            [24] 2260 	inc	dptr
   077A F0            [24] 2261 	movx	@dptr,a
   077B 8C 82         [24] 2262 	mov	dpl,r4
   077D 8D 83         [24] 2263 	mov	dph,r5
   077F 8E F0         [24] 2264 	mov	b,r6
   0781 EF            [12] 2265 	mov	a,r7
   0782 12r0BrE3      [24] 2266 	lcall	_scale_uint32
   0785 AC 82         [24] 2267 	mov	r4,dpl
   0787 AD 83         [24] 2268 	mov	r5,dph
   0789 AE F0         [24] 2269 	mov	r6,b
   078B FF            [12] 2270 	mov	r7,a
                           2271 ;	radio/radio.c:594: settings.channel_spacing = value;
   078C 78r09         [12] 2272 	mov	r0,#(_settings + 0x0004)
   078E EC            [12] 2273 	mov	a,r4
   078F F2            [24] 2274 	movx	@r0,a
   0790 08            [12] 2275 	inc	r0
   0791 ED            [12] 2276 	mov	a,r5
   0792 F2            [24] 2277 	movx	@r0,a
   0793 08            [12] 2278 	inc	r0
   0794 EE            [12] 2279 	mov	a,r6
   0795 F2            [24] 2280 	movx	@r0,a
   0796 08            [12] 2281 	inc	r0
   0797 EF            [12] 2282 	mov	a,r7
   0798 F2            [24] 2283 	movx	@r0,a
                           2284 ;	radio/radio.c:595: register_write(EZRADIOPRO_FREQUENCY_HOPPING_STEP_SIZE, value);
   0799 C0 04         [24] 2285 	push	ar4
   079B 75 82 7A      [24] 2286 	mov	dpl,#0x7A
   079E 12r0Br3F      [24] 2287 	lcall	_register_write
   07A1 15 81         [12] 2288 	dec	sp
                           2289 ;	radio/radio.c:596: return true;
   07A3 D3            [12] 2290 	setb	c
   07A4 22            [24] 2291 	ret
                           2292 ;------------------------------------------------------------
                           2293 ;Allocation info for local variables in function 'radio_set_channel'
                           2294 ;------------------------------------------------------------
                           2295 ;channel                   Allocated with name '_radio_set_channel_channel_1_206'
                           2296 ;------------------------------------------------------------
                           2297 ;	radio/radio.c:602: radio_set_channel(uint8_t channel)
                           2298 ;	-----------------------------------------
                           2299 ;	 function radio_set_channel
                           2300 ;	-----------------------------------------
   07A5                    2301 _radio_set_channel:
   07A5 E5 82         [12] 2302 	mov	a,dpl
   07A7 90r01r07      [24] 2303 	mov	dptr,#_radio_set_channel_channel_1_206
   07AA F0            [24] 2304 	movx	@dptr,a
                           2305 ;	radio/radio.c:604: if (channel != settings.current_channel) {
   07AB 78r0E         [12] 2306 	mov	r0,#(_settings + 0x0009)
   07AD E2            [24] 2307 	movx	a,@r0
   07AE FF            [12] 2308 	mov	r7,a
   07AF 90r01r07      [24] 2309 	mov	dptr,#_radio_set_channel_channel_1_206
   07B2 E0            [24] 2310 	movx	a,@dptr
   07B3 FE            [12] 2311 	mov	r6,a
   07B4 B5 07 01      [24] 2312 	cjne	a,ar7,00108$
   07B7 22            [24] 2313 	ret
   07B8                    2314 00108$:
                           2315 ;	radio/radio.c:605: settings.current_channel = channel;
   07B8 78r0E         [12] 2316 	mov	r0,#(_settings + 0x0009)
   07BA EE            [12] 2317 	mov	a,r6
   07BB F2            [24] 2318 	movx	@r0,a
                           2319 ;	radio/radio.c:606: register_write(EZRADIOPRO_FREQUENCY_HOPPING_CHANNEL_SELECT, channel);
   07BC C0 06         [24] 2320 	push	ar6
   07BE 75 82 79      [24] 2321 	mov	dpl,#0x79
   07C1 12r0Br3F      [24] 2322 	lcall	_register_write
   07C4 15 81         [12] 2323 	dec	sp
                           2324 ;	radio/radio.c:607: preamble_detected = 0;
   07C6 C2*01         [12] 2325 	clr	_preamble_detected
   07C8 22            [24] 2326 	ret
                           2327 ;------------------------------------------------------------
                           2328 ;Allocation info for local variables in function 'radio_get_channel'
                           2329 ;------------------------------------------------------------
                           2330 ;	radio/radio.c:614: radio_get_channel(void)
                           2331 ;	-----------------------------------------
                           2332 ;	 function radio_get_channel
                           2333 ;	-----------------------------------------
   07C9                    2334 _radio_get_channel:
                           2335 ;	radio/radio.c:616: return settings.current_channel;
   07C9 78r0E         [12] 2336 	mov	r0,#(_settings + 0x0009)
   07CB E2            [24] 2337 	movx	a,@r0
   07CC F5 82         [12] 2338 	mov	dpl,a
   07CE 22            [24] 2339 	ret
                           2340 ;------------------------------------------------------------
                           2341 ;Allocation info for local variables in function 'radio_configure'
                           2342 ;------------------------------------------------------------
                           2343 ;	radio/radio.c:713: radio_configure(__pdata uint8_t air_rate)
                           2344 ;	-----------------------------------------
                           2345 ;	 function radio_configure
                           2346 ;	-----------------------------------------
   07CF                    2347 _radio_configure:
   07CF AF 82         [24] 2348 	mov	r7,dpl
                           2349 ;	radio/radio.c:718: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, 0x00);
   07D1 C0 07         [24] 2350 	push	ar7
   07D3 E4            [12] 2351 	clr	a
   07D4 C0 E0         [24] 2352 	push	acc
   07D6 75 82 05      [24] 2353 	mov	dpl,#0x05
   07D9 12r0Br3F      [24] 2354 	lcall	_register_write
   07DC 15 81         [12] 2355 	dec	sp
                           2356 ;	radio/radio.c:719: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, 0x00);
   07DE E4            [12] 2357 	clr	a
   07DF C0 E0         [24] 2358 	push	acc
   07E1 75 82 06      [24] 2359 	mov	dpl,#0x06
   07E4 12r0Br3F      [24] 2360 	lcall	_register_write
   07E7 15 81         [12] 2361 	dec	sp
                           2362 ;	radio/radio.c:721: clear_status_registers();
   07E9 12r0BrD7      [24] 2363 	lcall	_clear_status_registers
                           2364 ;	radio/radio.c:731: register_write(EZRADIOPRO_GPIO0_CONFIGURATION, 0x15);	// RX state (output)
   07EC 74 15         [12] 2365 	mov	a,#0x15
   07EE C0 E0         [24] 2366 	push	acc
   07F0 75 82 0B      [24] 2367 	mov	dpl,#0x0B
   07F3 12r0Br3F      [24] 2368 	lcall	_register_write
   07F6 15 81         [12] 2369 	dec	sp
                           2370 ;	radio/radio.c:732: register_write(EZRADIOPRO_GPIO1_CONFIGURATION, 0x12);	// TX state (output)
   07F8 74 12         [12] 2371 	mov	a,#0x12
   07FA C0 E0         [24] 2372 	push	acc
   07FC 75 82 0C      [24] 2373 	mov	dpl,#0x0C
   07FF 12r0Br3F      [24] 2374 	lcall	_register_write
   0802 15 81         [12] 2375 	dec	sp
                           2376 ;	radio/radio.c:750: register_write(EZRADIOPRO_CRYSTAL_OSCILLATOR_LOAD_CAPACITANCE, EZRADIOPRO_OSC_CAP_VALUE);
   0804 74 B4         [12] 2377 	mov	a,#0xB4
   0806 C0 E0         [24] 2378 	push	acc
   0808 75 82 09      [24] 2379 	mov	dpl,#0x09
   080B 12r0Br3F      [24] 2380 	lcall	_register_write
   080E 15 81         [12] 2381 	dec	sp
   0810 D0 07         [24] 2382 	pop	ar7
                           2383 ;	radio/radio.c:753: if (air_rate > 100) {
   0812 EF            [12] 2384 	mov	a,r7
   0813 24 9B         [12] 2385 	add	a,#0xff - 0x64
   0815 50 10         [24] 2386 	jnc	00102$
                           2387 ;	radio/radio.c:754: register_write(EZRADIOPRO_CHARGEPUMP_CURRENT_TRIMMING_OVERRIDE, 0xC0);
   0817 C0 07         [24] 2388 	push	ar7
   0819 74 C0         [12] 2389 	mov	a,#0xC0
   081B C0 E0         [24] 2390 	push	acc
   081D 75 82 58      [24] 2391 	mov	dpl,#0x58
   0820 12r0Br3F      [24] 2392 	lcall	_register_write
   0823 15 81         [12] 2393 	dec	sp
   0825 D0 07         [24] 2394 	pop	ar7
   0827                    2395 00102$:
                           2396 ;	radio/radio.c:758: set_frequency_registers(settings.frequency);
   0827 78r05         [12] 2397 	mov	r0,#_settings
   0829 E2            [24] 2398 	movx	a,@r0
   082A FB            [12] 2399 	mov	r3,a
   082B 08            [12] 2400 	inc	r0
   082C E2            [24] 2401 	movx	a,@r0
   082D FC            [12] 2402 	mov	r4,a
   082E 08            [12] 2403 	inc	r0
   082F E2            [24] 2404 	movx	a,@r0
   0830 FD            [12] 2405 	mov	r5,a
   0831 08            [12] 2406 	inc	r0
   0832 E2            [24] 2407 	movx	a,@r0
   0833 8B 82         [24] 2408 	mov	dpl,r3
   0835 8C 83         [24] 2409 	mov	dph,r4
   0837 8D F0         [24] 2410 	mov	b,r5
   0839 C0 07         [24] 2411 	push	ar7
   083B 12r0CrA3      [24] 2412 	lcall	_set_frequency_registers
                           2413 ;	radio/radio.c:759: register_write(EZRADIOPRO_FREQUENCY_HOPPING_STEP_SIZE, settings.channel_spacing);
   083E 78r09         [12] 2414 	mov	r0,#(_settings + 0x0004)
   0840 E2            [24] 2415 	movx	a,@r0
   0841 FB            [12] 2416 	mov	r3,a
   0842 08            [12] 2417 	inc	r0
   0843 E2            [24] 2418 	movx	a,@r0
   0844 08            [12] 2419 	inc	r0
   0845 E2            [24] 2420 	movx	a,@r0
   0846 08            [12] 2421 	inc	r0
   0847 E2            [24] 2422 	movx	a,@r0
   0848 C0 03         [24] 2423 	push	ar3
   084A 75 82 7A      [24] 2424 	mov	dpl,#0x7A
   084D 12r0Br3F      [24] 2425 	lcall	_register_write
   0850 15 81         [12] 2426 	dec	sp
   0852 D0 07         [24] 2427 	pop	ar7
                           2428 ;	radio/radio.c:761: if (feature_golay) {
   0854 30*00 29      [24] 2429 	jnb	_feature_golay,00104$
                           2430 ;	radio/radio.c:765: register_write(EZRADIOPRO_DATA_ACCESS_CONTROL,
   0857 C0 07         [24] 2431 	push	ar7
   0859 74 88         [12] 2432 	mov	a,#0x88
   085B C0 E0         [24] 2433 	push	acc
   085D 75 82 30      [24] 2434 	mov	dpl,#0x30
   0860 12r0Br3F      [24] 2435 	lcall	_register_write
   0863 15 81         [12] 2436 	dec	sp
                           2437 ;	radio/radio.c:769: register_write(EZRADIOPRO_HEADER_CONTROL_2, EZRADIOPRO_HDLEN_0BYTE | EZRADIOPRO_SYNCLEN_2BYTE);
   0865 74 02         [12] 2438 	mov	a,#0x02
   0867 C0 E0         [24] 2439 	push	acc
   0869 75 82 33      [24] 2440 	mov	dpl,#0x33
   086C 12r0Br3F      [24] 2441 	lcall	_register_write
   086F 15 81         [12] 2442 	dec	sp
                           2443 ;	radio/radio.c:772: register_write(EZRADIOPRO_HEADER_CONTROL_1, 0x00);
   0871 E4            [12] 2444 	clr	a
   0872 C0 E0         [24] 2445 	push	acc
   0874 75 82 32      [24] 2446 	mov	dpl,#0x32
   0877 12r0Br3F      [24] 2447 	lcall	_register_write
   087A 15 81         [12] 2448 	dec	sp
   087C D0 07         [24] 2449 	pop	ar7
   087E 80 40         [24] 2450 	sjmp	00105$
   0880                    2451 00104$:
                           2452 ;	radio/radio.c:774: register_write(EZRADIOPRO_DATA_ACCESS_CONTROL,
   0880 C0 07         [24] 2453 	push	ar7
   0882 74 8D         [12] 2454 	mov	a,#0x8D
   0884 C0 E0         [24] 2455 	push	acc
   0886 75 82 30      [24] 2456 	mov	dpl,#0x30
   0889 12r0Br3F      [24] 2457 	lcall	_register_write
   088C 15 81         [12] 2458 	dec	sp
                           2459 ;	radio/radio.c:780: register_write(EZRADIOPRO_HEADER_CONTROL_2, EZRADIOPRO_HDLEN_2BYTE | EZRADIOPRO_SYNCLEN_2BYTE);
   088E 74 22         [12] 2460 	mov	a,#0x22
   0890 C0 E0         [24] 2461 	push	acc
   0892 75 82 33      [24] 2462 	mov	dpl,#0x33
   0895 12r0Br3F      [24] 2463 	lcall	_register_write
   0898 15 81         [12] 2464 	dec	sp
                           2465 ;	radio/radio.c:782: register_write(EZRADIOPRO_HEADER_CONTROL_1, 0x0C);
   089A 74 0C         [12] 2466 	mov	a,#0x0C
   089C C0 E0         [24] 2467 	push	acc
   089E 75 82 32      [24] 2468 	mov	dpl,#0x32
   08A1 12r0Br3F      [24] 2469 	lcall	_register_write
   08A4 15 81         [12] 2470 	dec	sp
                           2471 ;	radio/radio.c:783: register_write(EZRADIOPRO_HEADER_ENABLE_3, 0xFF);
   08A6 74 FF         [12] 2472 	mov	a,#0xFF
   08A8 C0 E0         [24] 2473 	push	acc
   08AA 75 82 43      [24] 2474 	mov	dpl,#0x43
   08AD 12r0Br3F      [24] 2475 	lcall	_register_write
   08B0 15 81         [12] 2476 	dec	sp
                           2477 ;	radio/radio.c:784: register_write(EZRADIOPRO_HEADER_ENABLE_2, 0xFF);
   08B2 74 FF         [12] 2478 	mov	a,#0xFF
   08B4 C0 E0         [24] 2479 	push	acc
   08B6 75 82 44      [24] 2480 	mov	dpl,#0x44
   08B9 12r0Br3F      [24] 2481 	lcall	_register_write
   08BC 15 81         [12] 2482 	dec	sp
   08BE D0 07         [24] 2483 	pop	ar7
   08C0                    2484 00105$:
                           2485 ;	radio/radio.c:789: register_write(EZRADIOPRO_TX_FIFO_CONTROL_1, TX_FIFO_THRESHOLD_HIGH);
   08C0 C0 07         [24] 2486 	push	ar7
   08C2 74 3C         [12] 2487 	mov	a,#0x3C
   08C4 C0 E0         [24] 2488 	push	acc
   08C6 75 82 7C      [24] 2489 	mov	dpl,#0x7C
   08C9 12r0Br3F      [24] 2490 	lcall	_register_write
   08CC 15 81         [12] 2491 	dec	sp
                           2492 ;	radio/radio.c:790: register_write(EZRADIOPRO_TX_FIFO_CONTROL_2, TX_FIFO_THRESHOLD_LOW);
   08CE 74 20         [12] 2493 	mov	a,#0x20
   08D0 C0 E0         [24] 2494 	push	acc
   08D2 75 82 7D      [24] 2495 	mov	dpl,#0x7D
   08D5 12r0Br3F      [24] 2496 	lcall	_register_write
   08D8 15 81         [12] 2497 	dec	sp
                           2498 ;	radio/radio.c:791: register_write(EZRADIOPRO_RX_FIFO_CONTROL, RX_FIFO_THRESHOLD_HIGH);
   08DA 74 32         [12] 2499 	mov	a,#0x32
   08DC C0 E0         [24] 2500 	push	acc
   08DE 75 82 7E      [24] 2501 	mov	dpl,#0x7E
   08E1 12r0Br3F      [24] 2502 	lcall	_register_write
   08E4 15 81         [12] 2503 	dec	sp
                           2504 ;	radio/radio.c:793: settings.preamble_length = 16;
   08E6 78r10         [12] 2505 	mov	r0,#(_settings + 0x000b)
   08E8 74 10         [12] 2506 	mov	a,#0x10
   08EA F2            [24] 2507 	movx	@r0,a
                           2508 ;	radio/radio.c:795: register_write(EZRADIOPRO_PREAMBLE_LENGTH, settings.preamble_length); // nibbles 
   08EB 78r10         [12] 2509 	mov	r0,#(_settings + 0x000b)
   08ED E2            [24] 2510 	movx	a,@r0
   08EE FE            [12] 2511 	mov	r6,a
   08EF C0 06         [24] 2512 	push	ar6
   08F1 75 82 34      [24] 2513 	mov	dpl,#0x34
   08F4 12r0Br3F      [24] 2514 	lcall	_register_write
   08F7 15 81         [12] 2515 	dec	sp
                           2516 ;	radio/radio.c:796: register_write(EZRADIOPRO_PREAMBLE_DETECTION_CONTROL, 5<<3); // 5 nibbles
   08F9 74 28         [12] 2517 	mov	a,#0x28
   08FB C0 E0         [24] 2518 	push	acc
   08FD 75 82 35      [24] 2519 	mov	dpl,#0x35
   0900 12r0Br3F      [24] 2520 	lcall	_register_write
   0903 15 81         [12] 2521 	dec	sp
                           2522 ;	radio/radio.c:799: radio_set_transmit_power(0);
   0905 75 82 00      [24] 2523 	mov	dpl,#0x00
   0908 12r0ArA2      [24] 2524 	lcall	_radio_set_transmit_power
   090B D0 07         [24] 2525 	pop	ar7
                           2526 ;	radio/radio.c:802: for (i = 0; i < NUM_DATA_RATES - 1; i++) {
   090D 7E 00         [12] 2527 	mov	r6,#0x00
   090F                    2528 00131$:
                           2529 ;	radio/radio.c:803: if (air_data_rates[i] >= air_rate) break;
   090F EE            [12] 2530 	mov	a,r6
   0910 90r00r34      [24] 2531 	mov	dptr,#_air_data_rates
   0913 93            [24] 2532 	movc	a,@a+dptr
   0914 FD            [12] 2533 	mov	r5,a
   0915 C3            [12] 2534 	clr	c
   0916 9F            [12] 2535 	subb	a,r7
   0917 50 06         [24] 2536 	jnc	00108$
                           2537 ;	radio/radio.c:802: for (i = 0; i < NUM_DATA_RATES - 1; i++) {
   0919 0E            [12] 2538 	inc	r6
   091A BE 0C 00      [24] 2539 	cjne	r6,#0x0C,00205$
   091D                    2540 00205$:
   091D 40 F0         [24] 2541 	jc	00131$
   091F                    2542 00108$:
                           2543 ;	radio/radio.c:805: rate_selection = i;
                           2544 ;	radio/radio.c:807: settings.air_data_rate = air_data_rates[rate_selection];
   091F EE            [12] 2545 	mov	a,r6
   0920 FF            [12] 2546 	mov	r7,a
   0921 90r00r34      [24] 2547 	mov	dptr,#_air_data_rates
   0924 93            [24] 2548 	movc	a,@a+dptr
   0925 FE            [12] 2549 	mov	r6,a
   0926 78r0D         [12] 2550 	mov	r0,#(_settings + 0x0008)
   0928 F2            [24] 2551 	movx	@r0,a
                           2552 ;	radio/radio.c:809: if (settings.air_data_rate >= 32) {
   0929 BE 20 00      [24] 2553 	cjne	r6,#0x20,00207$
   092C                    2554 00207$:
   092C 40 04         [24] 2555 	jc	00110$
                           2556 ;	radio/radio.c:810: control = 0x0D;
   092E 7E 0D         [12] 2557 	mov	r6,#0x0D
   0930 80 02         [24] 2558 	sjmp	00111$
   0932                    2559 00110$:
                           2560 ;	radio/radio.c:812: control = 0x2D;
   0932 7E 2D         [12] 2561 	mov	r6,#0x2D
   0934                    2562 00111$:
                           2563 ;	radio/radio.c:814: if (param_get(PARAM_MANCHESTER) && settings.air_data_rate <= 128) {
   0934 75 82 0D      [24] 2564 	mov	dpl,#0x0D
   0937 C0 07         [24] 2565 	push	ar7
   0939 C0 06         [24] 2566 	push	ar6
   093B 12r00r00      [24] 2567 	lcall	_param_get
   093E AA 82         [24] 2568 	mov	r2,dpl
   0940 AB 83         [24] 2569 	mov	r3,dph
   0942 AC F0         [24] 2570 	mov	r4,b
   0944 FD            [12] 2571 	mov	r5,a
   0945 D0 06         [24] 2572 	pop	ar6
   0947 D0 07         [24] 2573 	pop	ar7
   0949 EA            [12] 2574 	mov	a,r2
   094A 4B            [12] 2575 	orl	a,r3
   094B 4C            [12] 2576 	orl	a,r4
   094C 4D            [12] 2577 	orl	a,r5
   094D 60 0B         [24] 2578 	jz	00113$
   094F 78r0D         [12] 2579 	mov	r0,#(_settings + 0x0008)
   0951 E2            [24] 2580 	movx	a,@r0
   0952 FD            [12] 2581 	mov  r5,a
   0953 24 7F         [12] 2582 	add	a,#0xff - 0x80
   0955 40 03         [24] 2583 	jc	00113$
                           2584 ;	radio/radio.c:816: control |= EZRADIOPRO_ENMANCH;
   0957 43 06 02      [24] 2585 	orl	ar6,#0x02
   095A                    2586 00113$:
                           2587 ;	radio/radio.c:818: register_write(EZRADIOPRO_MODULATION_MODE_CONTROL_1, control);
   095A C0 07         [24] 2588 	push	ar7
   095C C0 06         [24] 2589 	push	ar6
   095E 75 82 70      [24] 2590 	mov	dpl,#0x70
   0961 12r0Br3F      [24] 2591 	lcall	_register_write
   0964 15 81         [12] 2592 	dec	sp
                           2593 ;	radio/radio.c:820: register_write(EZRADIOPRO_MODULATION_MODE_CONTROL_2, 0x23);
   0966 74 23         [12] 2594 	mov	a,#0x23
   0968 C0 E0         [24] 2595 	push	acc
   096A 75 82 71      [24] 2596 	mov	dpl,#0x71
   096D 12r0Br3F      [24] 2597 	lcall	_register_write
   0970 15 81         [12] 2598 	dec	sp
                           2599 ;	radio/radio.c:824: register_write(EZRADIOPRO_AFC_LOOP_GEARSHIFT_OVERRIDE, 0x44);
   0972 74 44         [12] 2600 	mov	a,#0x44
   0974 C0 E0         [24] 2601 	push	acc
   0976 75 82 1D      [24] 2602 	mov	dpl,#0x1D
   0979 12r0Br3F      [24] 2603 	lcall	_register_write
   097C 15 81         [12] 2604 	dec	sp
   097E D0 07         [24] 2605 	pop	ar7
                           2606 ;	radio/radio.c:828: if (settings.air_data_rate < 200) {
   0980 78r0D         [12] 2607 	mov	r0,#(_settings + 0x0008)
   0982 E2            [24] 2608 	movx	a,@r0
   0983 FE            [12] 2609 	mov	r6,a
   0984 BE C8 00      [24] 2610 	cjne	r6,#0xC8,00211$
   0987                    2611 00211$:
   0987 50 12         [24] 2612 	jnc	00116$
                           2613 ;	radio/radio.c:829: register_write(EZRADIOPRO_AFC_TIMING_CONTROL, 0x0A);
   0989 C0 07         [24] 2614 	push	ar7
   098B 74 0A         [12] 2615 	mov	a,#0x0A
   098D C0 E0         [24] 2616 	push	acc
   098F 75 82 1E      [24] 2617 	mov	dpl,#0x1E
   0992 12r0Br3F      [24] 2618 	lcall	_register_write
   0995 15 81         [12] 2619 	dec	sp
   0997 D0 07         [24] 2620 	pop	ar7
   0999 80 10         [24] 2621 	sjmp	00117$
   099B                    2622 00116$:
                           2623 ;	radio/radio.c:831: register_write(EZRADIOPRO_AFC_TIMING_CONTROL, 0x02);
   099B C0 07         [24] 2624 	push	ar7
   099D 74 02         [12] 2625 	mov	a,#0x02
   099F C0 E0         [24] 2626 	push	acc
   09A1 75 82 1E      [24] 2627 	mov	dpl,#0x1E
   09A4 12r0Br3F      [24] 2628 	lcall	_register_write
   09A7 15 81         [12] 2629 	dec	sp
   09A9 D0 07         [24] 2630 	pop	ar7
   09AB                    2631 00117$:
                           2632 ;	radio/radio.c:835: if (g_board_frequency == FREQ_433) {
   09AB 78r00         [12] 2633 	mov	r0,#_g_board_frequency
   09AD E2            [24] 2634 	movx	a,@r0
   09AE B4 43 3A      [24] 2635 	cjne	a,#0x43,00129$
                           2636 ;	radio/radio.c:836: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
   09B1 7E 00         [12] 2637 	mov	r6,#0x00
   09B3                    2638 00133$:
                           2639 ;	radio/radio.c:838: reg_table_433[i][rate_selection]);
   09B3 EE            [12] 2640 	mov	a,r6
   09B4 75 F0 0D      [24] 2641 	mov	b,#0x0D
   09B7 A4            [48] 2642 	mul	ab
   09B8 24r41         [12] 2643 	add	a,#_reg_table_433
   09BA FC            [12] 2644 	mov	r4,a
   09BB 74s00         [12] 2645 	mov	a,#(_reg_table_433 >> 8)
   09BD 35 F0         [12] 2646 	addc	a,b
   09BF FD            [12] 2647 	mov	r5,a
   09C0 EF            [12] 2648 	mov	a,r7
   09C1 2C            [12] 2649 	add	a,r4
   09C2 F5 82         [12] 2650 	mov	dpl,a
   09C4 E4            [12] 2651 	clr	a
   09C5 3D            [12] 2652 	addc	a,r5
   09C6 F5 83         [12] 2653 	mov	dph,a
   09C8 E4            [12] 2654 	clr	a
   09C9 93            [24] 2655 	movc	a,@a+dptr
   09CA FD            [12] 2656 	mov	r5,a
                           2657 ;	radio/radio.c:837: register_write(reg_index[i],
   09CB EE            [12] 2658 	mov	a,r6
   09CC 90r00r28      [24] 2659 	mov	dptr,#_reg_index
   09CF 93            [24] 2660 	movc	a,@a+dptr
   09D0 FC            [12] 2661 	mov	r4,a
   09D1 C0 07         [24] 2662 	push	ar7
   09D3 C0 06         [24] 2663 	push	ar6
   09D5 C0 05         [24] 2664 	push	ar5
   09D7 8C 82         [24] 2665 	mov	dpl,r4
   09D9 12r0Br3F      [24] 2666 	lcall	_register_write
   09DC 15 81         [12] 2667 	dec	sp
   09DE D0 06         [24] 2668 	pop	ar6
   09E0 D0 07         [24] 2669 	pop	ar7
                           2670 ;	radio/radio.c:836: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
   09E2 0E            [12] 2671 	inc	r6
   09E3 BE 0C 00      [24] 2672 	cjne	r6,#0x0C,00215$
   09E6                    2673 00215$:
   09E6 40 CB         [24] 2674 	jc	00133$
   09E8 02r0ArA0      [24] 2675 	ljmp	00130$
   09EB                    2676 00129$:
                           2677 ;	radio/radio.c:840: } else if (g_board_frequency == FREQ_470) {
   09EB 78r00         [12] 2678 	mov	r0,#_g_board_frequency
   09ED E2            [24] 2679 	movx	a,@r0
   09EE B4 47 39      [24] 2680 	cjne	a,#0x47,00126$
                           2681 ;	radio/radio.c:841: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
   09F1 7E 00         [12] 2682 	mov	r6,#0x00
   09F3                    2683 00135$:
                           2684 ;	radio/radio.c:843: reg_table_470[i][rate_selection]);
   09F3 EE            [12] 2685 	mov	a,r6
   09F4 75 F0 0D      [24] 2686 	mov	b,#0x0D
   09F7 A4            [48] 2687 	mul	ab
   09F8 24rDD         [12] 2688 	add	a,#_reg_table_470
   09FA FC            [12] 2689 	mov	r4,a
   09FB 74s00         [12] 2690 	mov	a,#(_reg_table_470 >> 8)
   09FD 35 F0         [12] 2691 	addc	a,b
   09FF FD            [12] 2692 	mov	r5,a
   0A00 EF            [12] 2693 	mov	a,r7
   0A01 2C            [12] 2694 	add	a,r4
   0A02 F5 82         [12] 2695 	mov	dpl,a
   0A04 E4            [12] 2696 	clr	a
   0A05 3D            [12] 2697 	addc	a,r5
   0A06 F5 83         [12] 2698 	mov	dph,a
   0A08 E4            [12] 2699 	clr	a
   0A09 93            [24] 2700 	movc	a,@a+dptr
   0A0A FD            [12] 2701 	mov	r5,a
                           2702 ;	radio/radio.c:842: register_write(reg_index[i],
   0A0B EE            [12] 2703 	mov	a,r6
   0A0C 90r00r28      [24] 2704 	mov	dptr,#_reg_index
   0A0F 93            [24] 2705 	movc	a,@a+dptr
   0A10 FC            [12] 2706 	mov	r4,a
   0A11 C0 07         [24] 2707 	push	ar7
   0A13 C0 06         [24] 2708 	push	ar6
   0A15 C0 05         [24] 2709 	push	ar5
   0A17 8C 82         [24] 2710 	mov	dpl,r4
   0A19 12r0Br3F      [24] 2711 	lcall	_register_write
   0A1C 15 81         [12] 2712 	dec	sp
   0A1E D0 06         [24] 2713 	pop	ar6
   0A20 D0 07         [24] 2714 	pop	ar7
                           2715 ;	radio/radio.c:841: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
   0A22 0E            [12] 2716 	inc	r6
   0A23 BE 0C 00      [24] 2717 	cjne	r6,#0x0C,00219$
   0A26                    2718 00219$:
   0A26 40 CB         [24] 2719 	jc	00135$
   0A28 80 76         [24] 2720 	sjmp	00130$
   0A2A                    2721 00126$:
                           2722 ;	radio/radio.c:845: } else if (g_board_frequency == FREQ_868) {
   0A2A 78r00         [12] 2723 	mov	r0,#_g_board_frequency
   0A2C E2            [24] 2724 	movx	a,@r0
   0A2D B4 86 39      [24] 2725 	cjne	a,#0x86,00160$
                           2726 ;	radio/radio.c:846: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
   0A30 7E 00         [12] 2727 	mov	r6,#0x00
   0A32                    2728 00137$:
                           2729 ;	radio/radio.c:848: reg_table_868[i][rate_selection]);
   0A32 EE            [12] 2730 	mov	a,r6
   0A33 75 F0 0D      [24] 2731 	mov	b,#0x0D
   0A36 A4            [48] 2732 	mul	ab
   0A37 24r79         [12] 2733 	add	a,#_reg_table_868
   0A39 FC            [12] 2734 	mov	r4,a
   0A3A 74s01         [12] 2735 	mov	a,#(_reg_table_868 >> 8)
   0A3C 35 F0         [12] 2736 	addc	a,b
   0A3E FD            [12] 2737 	mov	r5,a
   0A3F EF            [12] 2738 	mov	a,r7
   0A40 2C            [12] 2739 	add	a,r4
   0A41 F5 82         [12] 2740 	mov	dpl,a
   0A43 E4            [12] 2741 	clr	a
   0A44 3D            [12] 2742 	addc	a,r5
   0A45 F5 83         [12] 2743 	mov	dph,a
   0A47 E4            [12] 2744 	clr	a
   0A48 93            [24] 2745 	movc	a,@a+dptr
   0A49 FD            [12] 2746 	mov	r5,a
                           2747 ;	radio/radio.c:847: register_write(reg_index[i],
   0A4A EE            [12] 2748 	mov	a,r6
   0A4B 90r00r28      [24] 2749 	mov	dptr,#_reg_index
   0A4E 93            [24] 2750 	movc	a,@a+dptr
   0A4F FC            [12] 2751 	mov	r4,a
   0A50 C0 07         [24] 2752 	push	ar7
   0A52 C0 06         [24] 2753 	push	ar6
   0A54 C0 05         [24] 2754 	push	ar5
   0A56 8C 82         [24] 2755 	mov	dpl,r4
   0A58 12r0Br3F      [24] 2756 	lcall	_register_write
   0A5B 15 81         [12] 2757 	dec	sp
   0A5D D0 06         [24] 2758 	pop	ar6
   0A5F D0 07         [24] 2759 	pop	ar7
                           2760 ;	radio/radio.c:846: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
   0A61 0E            [12] 2761 	inc	r6
   0A62 BE 0C 00      [24] 2762 	cjne	r6,#0x0C,00223$
   0A65                    2763 00223$:
   0A65 40 CB         [24] 2764 	jc	00137$
                           2765 ;	radio/radio.c:851: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
   0A67 80 37         [24] 2766 	sjmp	00130$
   0A69                    2767 00160$:
   0A69 7E 00         [12] 2768 	mov	r6,#0x00
   0A6B                    2769 00139$:
                           2770 ;	radio/radio.c:853: reg_table_915[i][rate_selection]);
   0A6B EE            [12] 2771 	mov	a,r6
   0A6C 75 F0 0D      [24] 2772 	mov	b,#0x0D
   0A6F A4            [48] 2773 	mul	ab
   0A70 24r15         [12] 2774 	add	a,#_reg_table_915
   0A72 FC            [12] 2775 	mov	r4,a
   0A73 74s02         [12] 2776 	mov	a,#(_reg_table_915 >> 8)
   0A75 35 F0         [12] 2777 	addc	a,b
   0A77 FD            [12] 2778 	mov	r5,a
   0A78 EF            [12] 2779 	mov	a,r7
   0A79 2C            [12] 2780 	add	a,r4
   0A7A F5 82         [12] 2781 	mov	dpl,a
   0A7C E4            [12] 2782 	clr	a
   0A7D 3D            [12] 2783 	addc	a,r5
   0A7E F5 83         [12] 2784 	mov	dph,a
   0A80 E4            [12] 2785 	clr	a
   0A81 93            [24] 2786 	movc	a,@a+dptr
   0A82 FD            [12] 2787 	mov	r5,a
                           2788 ;	radio/radio.c:852: register_write(reg_index[i],
   0A83 EE            [12] 2789 	mov	a,r6
   0A84 90r00r28      [24] 2790 	mov	dptr,#_reg_index
   0A87 93            [24] 2791 	movc	a,@a+dptr
   0A88 FC            [12] 2792 	mov	r4,a
   0A89 C0 07         [24] 2793 	push	ar7
   0A8B C0 06         [24] 2794 	push	ar6
   0A8D C0 05         [24] 2795 	push	ar5
   0A8F 8C 82         [24] 2796 	mov	dpl,r4
   0A91 12r0Br3F      [24] 2797 	lcall	_register_write
   0A94 15 81         [12] 2798 	dec	sp
   0A96 D0 06         [24] 2799 	pop	ar6
   0A98 D0 07         [24] 2800 	pop	ar7
                           2801 ;	radio/radio.c:851: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
   0A9A 0E            [12] 2802 	inc	r6
   0A9B BE 0C 00      [24] 2803 	cjne	r6,#0x0C,00225$
   0A9E                    2804 00225$:
   0A9E 40 CB         [24] 2805 	jc	00139$
   0AA0                    2806 00130$:
                           2807 ;	radio/radio.c:857: return true;
   0AA0 D3            [12] 2808 	setb	c
   0AA1 22            [24] 2809 	ret
                           2810 ;------------------------------------------------------------
                           2811 ;Allocation info for local variables in function 'radio_set_transmit_power'
                           2812 ;------------------------------------------------------------
                           2813 ;power                     Allocated with name '_radio_set_transmit_power_power_1_230'
                           2814 ;i                         Allocated with name '_radio_set_transmit_power_i_1_231'
                           2815 ;------------------------------------------------------------
                           2816 ;	radio/radio.c:884: radio_set_transmit_power(uint8_t power)
                           2817 ;	-----------------------------------------
                           2818 ;	 function radio_set_transmit_power
                           2819 ;	-----------------------------------------
   0AA2                    2820 _radio_set_transmit_power:
   0AA2 E5 82         [12] 2821 	mov	a,dpl
                           2822 ;	radio/radio.c:903: for (i=0; i<NUM_POWER_LEVELS; i++) {
   0AA4 90r01r08      [24] 2823 	mov	dptr,#_radio_set_transmit_power_power_1_230
   0AA7 F0            [24] 2824 	movx	@dptr,a
   0AA8 FF            [12] 2825 	mov	r7,a
   0AA9 7E 00         [12] 2826 	mov	r6,#0x00
   0AAB                    2827 00106$:
                           2828 ;	radio/radio.c:904: if (power <= power_levels[i]) break;
   0AAB EE            [12] 2829 	mov	a,r6
   0AAC 90r02rB1      [24] 2830 	mov	dptr,#_power_levels
   0AAF 93            [24] 2831 	movc	a,@a+dptr
   0AB0 FD            [12] 2832 	mov	r5,a
   0AB1 C3            [12] 2833 	clr	c
   0AB2 9F            [12] 2834 	subb	a,r7
   0AB3 50 06         [24] 2835 	jnc	00113$
                           2836 ;	radio/radio.c:903: for (i=0; i<NUM_POWER_LEVELS; i++) {
   0AB5 0E            [12] 2837 	inc	r6
   0AB6 BE 08 00      [24] 2838 	cjne	r6,#0x08,00121$
   0AB9                    2839 00121$:
   0AB9 40 F0         [24] 2840 	jc	00106$
   0ABB                    2841 00113$:
   0ABB 90r01r09      [24] 2842 	mov	dptr,#_radio_set_transmit_power_i_1_231
   0ABE EE            [12] 2843 	mov	a,r6
   0ABF F0            [24] 2844 	movx	@dptr,a
                           2845 ;	radio/radio.c:906: if (i == NUM_POWER_LEVELS) {
   0AC0 BE 08 06      [24] 2846 	cjne	r6,#0x08,00105$
                           2847 ;	radio/radio.c:907: i = NUM_POWER_LEVELS-1;
   0AC3 90r01r09      [24] 2848 	mov	dptr,#_radio_set_transmit_power_i_1_231
   0AC6 74 07         [12] 2849 	mov	a,#0x07
   0AC8 F0            [24] 2850 	movx	@dptr,a
   0AC9                    2851 00105$:
                           2852 ;	radio/radio.c:909: settings.transmit_power = power_levels[i];
   0AC9 90r01r09      [24] 2853 	mov	dptr,#_radio_set_transmit_power_i_1_231
   0ACC E0            [24] 2854 	movx	a,@dptr
   0ACD FF            [12] 2855 	mov	r7,a
   0ACE 90r02rB1      [24] 2856 	mov	dptr,#_power_levels
   0AD1 93            [24] 2857 	movc	a,@a+dptr
   0AD2 FE            [12] 2858 	mov	r6,a
   0AD3 78r0F         [12] 2859 	mov	r0,#(_settings + 0x000a)
   0AD5 EE            [12] 2860 	mov	a,r6
   0AD6 F2            [24] 2861 	movx	@r0,a
                           2862 ;	radio/radio.c:910: register_write(EZRADIOPRO_TX_POWER, i);
   0AD7 C0 07         [24] 2863 	push	ar7
   0AD9 75 82 6D      [24] 2864 	mov	dpl,#0x6D
   0ADC 12r0Br3F      [24] 2865 	lcall	_register_write
   0ADF 15 81         [12] 2866 	dec	sp
   0AE1 22            [24] 2867 	ret
                           2868 ;------------------------------------------------------------
                           2869 ;Allocation info for local variables in function 'radio_get_transmit_power'
                           2870 ;------------------------------------------------------------
                           2871 ;	radio/radio.c:917: radio_get_transmit_power(void)
                           2872 ;	-----------------------------------------
                           2873 ;	 function radio_get_transmit_power
                           2874 ;	-----------------------------------------
   0AE2                    2875 _radio_get_transmit_power:
                           2876 ;	radio/radio.c:919: return settings.transmit_power;
   0AE2 78r0F         [12] 2877 	mov	r0,#(_settings + 0x000a)
   0AE4 E2            [24] 2878 	movx	a,@r0
   0AE5 F5 82         [12] 2879 	mov	dpl,a
   0AE7 22            [24] 2880 	ret
                           2881 ;------------------------------------------------------------
                           2882 ;Allocation info for local variables in function 'radio_set_network_id'
                           2883 ;------------------------------------------------------------
                           2884 ;id                        Allocated with name '_radio_set_network_id_id_1_236'
                           2885 ;------------------------------------------------------------
                           2886 ;	radio/radio.c:925: radio_set_network_id(uint16_t id)
                           2887 ;	-----------------------------------------
                           2888 ;	 function radio_set_network_id
                           2889 ;	-----------------------------------------
   0AE8                    2890 _radio_set_network_id:
   0AE8 AF 83         [24] 2891 	mov	r7,dph
   0AEA E5 82         [12] 2892 	mov	a,dpl
   0AEC 90r01r0A      [24] 2893 	mov	dptr,#_radio_set_network_id_id_1_236
   0AEF F0            [24] 2894 	movx	@dptr,a
   0AF0 EF            [12] 2895 	mov	a,r7
   0AF1 A3            [24] 2896 	inc	dptr
   0AF2 F0            [24] 2897 	movx	@dptr,a
                           2898 ;	radio/radio.c:927: netid[0] = id&0xFF;
   0AF3 90r01r0A      [24] 2899 	mov	dptr,#_radio_set_network_id_id_1_236
   0AF6 E0            [24] 2900 	movx	a,@dptr
   0AF7 FE            [12] 2901 	mov	r6,a
   0AF8 A3            [24] 2902 	inc	dptr
   0AF9 E0            [24] 2903 	movx	a,@dptr
   0AFA FF            [12] 2904 	mov	r7,a
   0AFB 8E 04         [24] 2905 	mov	ar4,r6
   0AFD 78r03         [12] 2906 	mov	r0,#_netid
   0AFF EC            [12] 2907 	mov	a,r4
   0B00 F2            [24] 2908 	movx	@r0,a
                           2909 ;	radio/radio.c:928: netid[1] = id>>8;
   0B01 8F 05         [24] 2910 	mov	ar5,r7
   0B03 78r04         [12] 2911 	mov	r0,#(_netid + 0x0001)
   0B05 ED            [12] 2912 	mov	a,r5
   0B06 F2            [24] 2913 	movx	@r0,a
                           2914 ;	radio/radio.c:929: if (!feature_golay) {
   0B07 20*00 34      [24] 2915 	jb	_feature_golay,00103$
                           2916 ;	radio/radio.c:932: register_write(EZRADIOPRO_TRANSMIT_HEADER_3, id >> 8);
   0B0A C0 07         [24] 2917 	push	ar7
   0B0C C0 06         [24] 2918 	push	ar6
   0B0E C0 05         [24] 2919 	push	ar5
   0B10 C0 05         [24] 2920 	push	ar5
   0B12 75 82 3A      [24] 2921 	mov	dpl,#0x3A
   0B15 12r0Br3F      [24] 2922 	lcall	_register_write
   0B18 15 81         [12] 2923 	dec	sp
   0B1A D0 05         [24] 2924 	pop	ar5
   0B1C D0 06         [24] 2925 	pop	ar6
   0B1E D0 07         [24] 2926 	pop	ar7
                           2927 ;	radio/radio.c:933: register_write(EZRADIOPRO_TRANSMIT_HEADER_2, id & 0xFF);
   0B20 C0 06         [24] 2928 	push	ar6
   0B22 C0 05         [24] 2929 	push	ar5
   0B24 C0 06         [24] 2930 	push	ar6
   0B26 75 82 3B      [24] 2931 	mov	dpl,#0x3B
   0B29 12r0Br3F      [24] 2932 	lcall	_register_write
   0B2C 15 81         [12] 2933 	dec	sp
                           2934 ;	radio/radio.c:934: register_write(EZRADIOPRO_CHECK_HEADER_3, id >> 8);
   0B2E 75 82 3F      [24] 2935 	mov	dpl,#0x3F
   0B31 12r0Br3F      [24] 2936 	lcall	_register_write
   0B34 15 81         [12] 2937 	dec	sp
                           2938 ;	radio/radio.c:935: register_write(EZRADIOPRO_CHECK_HEADER_2, id & 0xFF);
   0B36 75 82 40      [24] 2939 	mov	dpl,#0x40
   0B39 12r0Br3F      [24] 2940 	lcall	_register_write
   0B3C 15 81         [12] 2941 	dec	sp
   0B3E                    2942 00103$:
   0B3E 22            [24] 2943 	ret
                           2944 ;------------------------------------------------------------
                           2945 ;Allocation info for local variables in function 'register_write'
                           2946 ;------------------------------------------------------------
                           2947 ;value                     Allocated to stack - sp -2
                           2948 ;reg                       Allocated to registers r7 
                           2949 ;EX0_saved                 Allocated to registers b0 
                           2950 ;------------------------------------------------------------
                           2951 ;	radio/radio.c:946: register_write(uint8_t reg, uint8_t value) __reentrant
                           2952 ;	-----------------------------------------
                           2953 ;	 function register_write
                           2954 ;	-----------------------------------------
   0B3F                    2955 _register_write:
   0B3F AF 82         [24] 2956 	mov	r7,dpl
                           2957 ;	radio/radio.c:948: EX0_SAVE_DISABLE;
   0B41 A2 A8         [12] 2958 	mov	c,_EX0
   0B43 92*00         [24] 2959 	mov	b0,c
   0B45 C2 A8         [12] 2960 	clr	_EX0
                           2961 ;	radio/radio.c:950: NSS1 = 0;                           // drive NSS low
   0B47 C2 94         [12] 2962 	clr	_NSS1
                           2963 ;	radio/radio.c:951: SPIF1 = 0;                          // clear SPIF
   0B49 C2 B7         [12] 2964 	clr	_SPIF1
                           2965 ;	radio/radio.c:952: SPI1DAT = (reg | 0x80);             // write reg address
   0B4B 74 80         [12] 2966 	mov	a,#0x80
   0B4D 4F            [12] 2967 	orl	a,r7
   0B4E F5 86         [12] 2968 	mov	_SPI1DAT,a
                           2969 ;	radio/radio.c:953: while (!TXBMT1);                    // wait on TXBMT
   0B50                    2970 00101$:
   0B50 30 B1 FD      [24] 2971 	jnb	_TXBMT1,00101$
                           2972 ;	radio/radio.c:954: SPI1DAT = value;                    // write value
   0B53 A8 81         [24] 2973 	mov	r0,sp
   0B55 18            [12] 2974 	dec	r0
   0B56 18            [12] 2975 	dec	r0
   0B57 86 86         [24] 2976 	mov	_SPI1DAT,@r0
                           2977 ;	radio/radio.c:955: while (!TXBMT1);                    // wait on TXBMT
   0B59                    2978 00104$:
   0B59 30 B1 FD      [24] 2979 	jnb	_TXBMT1,00104$
                           2980 ;	radio/radio.c:956: while ((SPI1CFG & 0x80) == 0x80);   // wait on SPIBSY
   0B5C                    2981 00107$:
   0B5C 74 80         [12] 2982 	mov	a,#0x80
   0B5E 55 84         [12] 2983 	anl	a,_SPI1CFG
   0B60 FF            [12] 2984 	mov	r7,a
   0B61 BF 80 02      [24] 2985 	cjne	r7,#0x80,00129$
   0B64 80 F6         [24] 2986 	sjmp	00107$
   0B66                    2987 00129$:
                           2988 ;	radio/radio.c:958: SPIF1 = 0;                          // leave SPIF cleared
   0B66 C2 B7         [12] 2989 	clr	_SPIF1
                           2990 ;	radio/radio.c:959: NSS1 = 1;                           // drive NSS high
   0B68 D2 94         [12] 2991 	setb	_NSS1
                           2992 ;	radio/radio.c:961: EX0_RESTORE;
   0B6A A2*00         [12] 2993 	mov	c,b0
   0B6C 92 A8         [24] 2994 	mov	_EX0,c
   0B6E 22            [24] 2995 	ret
                           2996 ;------------------------------------------------------------
                           2997 ;Allocation info for local variables in function 'register_read'
                           2998 ;------------------------------------------------------------
                           2999 ;reg                       Allocated to registers r7 
                           3000 ;value                     Allocated to registers r7 
                           3001 ;EX0_saved                 Allocated to registers b0 
                           3002 ;------------------------------------------------------------
                           3003 ;	radio/radio.c:971: register_read(uint8_t reg) __reentrant
                           3004 ;	-----------------------------------------
                           3005 ;	 function register_read
                           3006 ;	-----------------------------------------
   0B6F                    3007 _register_read:
   0B6F AF 82         [24] 3008 	mov	r7,dpl
                           3009 ;	radio/radio.c:974: EX0_SAVE_DISABLE;
   0B71 A2 A8         [12] 3010 	mov	c,_EX0
   0B73 92*00         [24] 3011 	mov	b0,c
   0B75 C2 A8         [12] 3012 	clr	_EX0
                           3013 ;	radio/radio.c:976: NSS1 = 0;				// dsrive NSS low
   0B77 C2 94         [12] 3014 	clr	_NSS1
                           3015 ;	radio/radio.c:977: SPIF1 = 0;				// clear SPIF
   0B79 C2 B7         [12] 3016 	clr	_SPIF1
                           3017 ;	radio/radio.c:978: SPI1DAT = (reg);			// write reg address
   0B7B 8F 86         [24] 3018 	mov	_SPI1DAT,r7
                           3019 ;	radio/radio.c:979: while (!TXBMT1);			// wait on TXBMT
   0B7D                    3020 00101$:
   0B7D 30 B1 FD      [24] 3021 	jnb	_TXBMT1,00101$
                           3022 ;	radio/radio.c:980: SPI1DAT = 0x00;				// write anything
   0B80 75 86 00      [24] 3023 	mov	_SPI1DAT,#0x00
                           3024 ;	radio/radio.c:981: while (!TXBMT1);			// wait on TXBMT
   0B83                    3025 00104$:
   0B83 30 B1 FD      [24] 3026 	jnb	_TXBMT1,00104$
                           3027 ;	radio/radio.c:982: while ((SPI1CFG & 0x80) == 0x80);	// wait on SPIBSY
   0B86                    3028 00107$:
   0B86 74 80         [12] 3029 	mov	a,#0x80
   0B88 55 84         [12] 3030 	anl	a,_SPI1CFG
   0B8A FF            [12] 3031 	mov	r7,a
   0B8B BF 80 02      [24] 3032 	cjne	r7,#0x80,00129$
   0B8E 80 F6         [24] 3033 	sjmp	00107$
   0B90                    3034 00129$:
                           3035 ;	radio/radio.c:983: value = SPI1DAT;			// read value
   0B90 AF 86         [24] 3036 	mov	r7,_SPI1DAT
                           3037 ;	radio/radio.c:984: SPIF1 = 0;				// leave SPIF cleared
   0B92 C2 B7         [12] 3038 	clr	_SPIF1
                           3039 ;	radio/radio.c:985: NSS1 = 1;				// drive NSS high
   0B94 D2 94         [12] 3040 	setb	_NSS1
                           3041 ;	radio/radio.c:987: EX0_RESTORE;
   0B96 A2*00         [12] 3042 	mov	c,b0
   0B98 92 A8         [24] 3043 	mov	_EX0,c
                           3044 ;	radio/radio.c:989: return value;
   0B9A 8F 82         [24] 3045 	mov	dpl,r7
   0B9C 22            [24] 3046 	ret
                           3047 ;------------------------------------------------------------
                           3048 ;Allocation info for local variables in function 'read_receive_fifo'
                           3049 ;------------------------------------------------------------
                           3050 ;buf                       Allocated to stack - sp -3
                           3051 ;n                         Allocated to registers r7 
                           3052 ;------------------------------------------------------------
                           3053 ;	radio/radio.c:996: read_receive_fifo(register uint8_t n, __xdata uint8_t * buf) __reentrant
                           3054 ;	-----------------------------------------
                           3055 ;	 function read_receive_fifo
                           3056 ;	-----------------------------------------
   0B9D                    3057 _read_receive_fifo:
   0B9D AF 82         [24] 3058 	mov	r7,dpl
                           3059 ;	radio/radio.c:998: NSS1 = 0;				// drive NSS low
   0B9F C2 94         [12] 3060 	clr	_NSS1
                           3061 ;	radio/radio.c:999: SPIF1 = 0;				// clear SPIF
   0BA1 C2 B7         [12] 3062 	clr	_SPIF1
                           3063 ;	radio/radio.c:1000: SPI1DAT = EZRADIOPRO_FIFO_ACCESS;
   0BA3 75 86 7F      [24] 3064 	mov	_SPI1DAT,#0x7F
                           3065 ;	radio/radio.c:1001: while (!SPIF1);				// wait on SPIF
   0BA6                    3066 00101$:
   0BA6 30 B7 FD      [24] 3067 	jnb	_SPIF1,00101$
                           3068 ;	radio/radio.c:1002: ACC = SPI1DAT;				// discard first byte
   0BA9 85 86 E0      [24] 3069 	mov	_ACC,_SPI1DAT
                           3070 ;	radio/radio.c:1004: while (n--) {
   0BAC E5 81         [12] 3071 	mov	a,sp
   0BAE 24 FD         [12] 3072 	add	a,#0xfd
   0BB0 F8            [12] 3073 	mov	r0,a
   0BB1 86 05         [24] 3074 	mov	ar5,@r0
   0BB3 08            [12] 3075 	inc	r0
   0BB4 86 06         [24] 3076 	mov	ar6,@r0
   0BB6                    3077 00107$:
   0BB6 8F 04         [24] 3078 	mov	ar4,r7
   0BB8 1F            [12] 3079 	dec	r7
   0BB9 EC            [12] 3080 	mov	a,r4
   0BBA 60 16         [24] 3081 	jz	00109$
                           3082 ;	radio/radio.c:1005: SPIF1 = 0;			// clear SPIF
   0BBC C2 B7         [12] 3083 	clr	_SPIF1
                           3084 ;	radio/radio.c:1006: SPI1DAT = 0x00;			// write anything
   0BBE 75 86 00      [24] 3085 	mov	_SPI1DAT,#0x00
                           3086 ;	radio/radio.c:1007: while (!SPIF1);			// wait on SPIF
   0BC1                    3087 00104$:
   0BC1 30 B7 FD      [24] 3088 	jnb	_SPIF1,00104$
                           3089 ;	radio/radio.c:1008: *buf++ = SPI1DAT;		// copy to buffer
   0BC4 8D 82         [24] 3090 	mov	dpl,r5
   0BC6 8E 83         [24] 3091 	mov	dph,r6
   0BC8 E5 86         [12] 3092 	mov	a,_SPI1DAT
   0BCA F0            [24] 3093 	movx	@dptr,a
   0BCB A3            [24] 3094 	inc	dptr
   0BCC AD 82         [24] 3095 	mov	r5,dpl
   0BCE AE 83         [24] 3096 	mov	r6,dph
   0BD0 80 E4         [24] 3097 	sjmp	00107$
   0BD2                    3098 00109$:
                           3099 ;	radio/radio.c:1011: SPIF1 = 0;				// leave SPIF cleared
   0BD2 C2 B7         [12] 3100 	clr	_SPIF1
                           3101 ;	radio/radio.c:1012: NSS1 = 1;				// drive NSS high
   0BD4 D2 94         [12] 3102 	setb	_NSS1
   0BD6 22            [24] 3103 	ret
                           3104 ;------------------------------------------------------------
                           3105 ;Allocation info for local variables in function 'clear_status_registers'
                           3106 ;------------------------------------------------------------
                           3107 ;	radio/radio.c:1018: clear_status_registers(void)
                           3108 ;	-----------------------------------------
                           3109 ;	 function clear_status_registers
                           3110 ;	-----------------------------------------
   0BD7                    3111 _clear_status_registers:
                           3112 ;	radio/radio.c:1020: register_read(EZRADIOPRO_INTERRUPT_STATUS_1);
   0BD7 75 82 03      [24] 3113 	mov	dpl,#0x03
   0BDA 12r0Br6F      [24] 3114 	lcall	_register_read
                           3115 ;	radio/radio.c:1021: register_read(EZRADIOPRO_INTERRUPT_STATUS_2);
   0BDD 75 82 04      [24] 3116 	mov	dpl,#0x04
   0BE0 02r0Br6F      [24] 3117 	ljmp	_register_read
                           3118 ;------------------------------------------------------------
                           3119 ;Allocation info for local variables in function 'scale_uint32'
                           3120 ;------------------------------------------------------------
                           3121 ;	radio/radio.c:1031: scale_uint32(__pdata uint32_t value, __pdata uint32_t scale)
                           3122 ;	-----------------------------------------
                           3123 ;	 function scale_uint32
                           3124 ;	-----------------------------------------
   0BE3                    3125 _scale_uint32:
   0BE3 AF 82         [24] 3126 	mov	r7,dpl
   0BE5 AE 83         [24] 3127 	mov	r6,dph
   0BE7 AD F0         [24] 3128 	mov	r5,b
   0BE9 FC            [12] 3129 	mov	r4,a
   0BEA 78r25         [12] 3130 	mov	r0,#_scale_uint32_value_1_248
   0BEC EF            [12] 3131 	mov	a,r7
   0BED F2            [24] 3132 	movx	@r0,a
   0BEE 08            [12] 3133 	inc	r0
   0BEF EE            [12] 3134 	mov	a,r6
   0BF0 F2            [24] 3135 	movx	@r0,a
   0BF1 08            [12] 3136 	inc	r0
   0BF2 ED            [12] 3137 	mov	a,r5
   0BF3 F2            [24] 3138 	movx	@r0,a
   0BF4 08            [12] 3139 	inc	r0
   0BF5 EC            [12] 3140 	mov	a,r4
   0BF6 F2            [24] 3141 	movx	@r0,a
                           3142 ;	radio/radio.c:1033: return (value + (scale >> 1)) / scale;
   0BF7 78r24         [12] 3143 	mov	r0,#(_scale_uint32_PARM_2 + 3)
   0BF9 E2            [24] 3144 	movx	a,@r0
   0BFA C3            [12] 3145 	clr	c
   0BFB 13            [12] 3146 	rrc	a
   0BFC FF            [12] 3147 	mov	r7,a
   0BFD 18            [12] 3148 	dec	r0
   0BFE E2            [24] 3149 	movx	a,@r0
   0BFF 13            [12] 3150 	rrc	a
   0C00 FE            [12] 3151 	mov	r6,a
   0C01 18            [12] 3152 	dec	r0
   0C02 E2            [24] 3153 	movx	a,@r0
   0C03 13            [12] 3154 	rrc	a
   0C04 FB            [12] 3155 	mov	r3,a
   0C05 18            [12] 3156 	dec	r0
   0C06 E2            [24] 3157 	movx	a,@r0
   0C07 13            [12] 3158 	rrc	a
   0C08 FA            [12] 3159 	mov	r2,a
   0C09 78r25         [12] 3160 	mov	r0,#_scale_uint32_value_1_248
   0C0B E2            [24] 3161 	movx	a,@r0
   0C0C 2A            [12] 3162 	add	a,r2
   0C0D FA            [12] 3163 	mov	r2,a
   0C0E 08            [12] 3164 	inc	r0
   0C0F E2            [24] 3165 	movx	a,@r0
   0C10 3B            [12] 3166 	addc	a,r3
   0C11 FB            [12] 3167 	mov	r3,a
   0C12 08            [12] 3168 	inc	r0
   0C13 E2            [24] 3169 	movx	a,@r0
   0C14 3E            [12] 3170 	addc	a,r6
   0C15 FE            [12] 3171 	mov	r6,a
   0C16 08            [12] 3172 	inc	r0
   0C17 E2            [24] 3173 	movx	a,@r0
   0C18 3F            [12] 3174 	addc	a,r7
   0C19 FF            [12] 3175 	mov	r7,a
   0C1A 78r21         [12] 3176 	mov	r0,#_scale_uint32_PARM_2
   0C1C 90r00r00      [24] 3177 	mov	dptr,#__divulong_PARM_2
   0C1F E2            [24] 3178 	movx	a,@r0
   0C20 F0            [24] 3179 	movx	@dptr,a
   0C21 08            [12] 3180 	inc	r0
   0C22 E2            [24] 3181 	movx	a,@r0
   0C23 A3            [24] 3182 	inc	dptr
   0C24 F0            [24] 3183 	movx	@dptr,a
   0C25 08            [12] 3184 	inc	r0
   0C26 E2            [24] 3185 	movx	a,@r0
   0C27 A3            [24] 3186 	inc	dptr
   0C28 F0            [24] 3187 	movx	@dptr,a
   0C29 08            [12] 3188 	inc	r0
   0C2A E2            [24] 3189 	movx	a,@r0
   0C2B A3            [24] 3190 	inc	dptr
   0C2C F0            [24] 3191 	movx	@dptr,a
   0C2D 8A 82         [24] 3192 	mov	dpl,r2
   0C2F 8B 83         [24] 3193 	mov	dph,r3
   0C31 8E F0         [24] 3194 	mov	b,r6
   0C33 EF            [12] 3195 	mov	a,r7
   0C34 02r00r00      [24] 3196 	ljmp	__divulong
                           3197 ;------------------------------------------------------------
                           3198 ;Allocation info for local variables in function 'software_reset'
                           3199 ;------------------------------------------------------------
                           3200 ;status                    Allocated with name '_software_reset_status_1_251'
                           3201 ;------------------------------------------------------------
                           3202 ;	radio/radio.c:1041: software_reset(void)
                           3203 ;	-----------------------------------------
                           3204 ;	 function software_reset
                           3205 ;	-----------------------------------------
   0C37                    3206 _software_reset:
                           3207 ;	radio/radio.c:1046: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, 0);
   0C37 E4            [12] 3208 	clr	a
   0C38 C0 E0         [24] 3209 	push	acc
   0C3A 75 82 05      [24] 3210 	mov	dpl,#0x05
   0C3D 12r0Br3F      [24] 3211 	lcall	_register_write
   0C40 15 81         [12] 3212 	dec	sp
                           3213 ;	radio/radio.c:1047: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, 0);
   0C42 E4            [12] 3214 	clr	a
   0C43 C0 E0         [24] 3215 	push	acc
   0C45 75 82 06      [24] 3216 	mov	dpl,#0x06
   0C48 12r0Br3F      [24] 3217 	lcall	_register_write
   0C4B 15 81         [12] 3218 	dec	sp
                           3219 ;	radio/radio.c:1049: clear_status_registers();
   0C4D 12r0BrD7      [24] 3220 	lcall	_clear_status_registers
                           3221 ;	radio/radio.c:1052: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_1, (EZRADIOPRO_SWRES | EZRADIOPRO_XTON));
   0C50 74 81         [12] 3222 	mov	a,#0x81
   0C52 C0 E0         [24] 3223 	push	acc
   0C54 75 82 07      [24] 3224 	mov	dpl,#0x07
   0C57 12r0Br3F      [24] 3225 	lcall	_register_write
   0C5A 15 81         [12] 3226 	dec	sp
                           3227 ;	radio/radio.c:1055: delay_set(2);
   0C5C 90 00 02      [24] 3228 	mov	dptr,#0x0002
   0C5F 12r00r00      [24] 3229 	lcall	_delay_set
                           3230 ;	radio/radio.c:1056: while (IRQ) {
   0C62                    3231 00103$:
   0C62 30 87 07      [24] 3232 	jnb	_IRQ,00105$
                           3233 ;	radio/radio.c:1057: if (delay_expired()) {
   0C65 12r00r00      [24] 3234 	lcall	_delay_expired
   0C68 50 F8         [24] 3235 	jnc	00103$
                           3236 ;	radio/radio.c:1058: return false;
   0C6A C3            [12] 3237 	clr	c
   0C6B 22            [24] 3238 	ret
   0C6C                    3239 00105$:
                           3240 ;	radio/radio.c:1063: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, 0);
   0C6C E4            [12] 3241 	clr	a
   0C6D C0 E0         [24] 3242 	push	acc
   0C6F 75 82 05      [24] 3243 	mov	dpl,#0x05
   0C72 12r0Br3F      [24] 3244 	lcall	_register_write
   0C75 15 81         [12] 3245 	dec	sp
                           3246 ;	radio/radio.c:1064: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, EZRADIOPRO_ENCHIPRDY);
   0C77 74 02         [12] 3247 	mov	a,#0x02
   0C79 C0 E0         [24] 3248 	push	acc
   0C7B 75 82 06      [24] 3249 	mov	dpl,#0x06
   0C7E 12r0Br3F      [24] 3250 	lcall	_register_write
   0C81 15 81         [12] 3251 	dec	sp
                           3252 ;	radio/radio.c:1066: delay_set(20);
   0C83 90 00 14      [24] 3253 	mov	dptr,#0x0014
   0C86 12r00r00      [24] 3254 	lcall	_delay_set
                           3255 ;	radio/radio.c:1067: while (!delay_expired()) {
   0C89                    3256 00108$:
   0C89 12r00r00      [24] 3257 	lcall	_delay_expired
   0C8C 40 13         [24] 3258 	jc	00110$
                           3259 ;	radio/radio.c:1068: status = register_read(EZRADIOPRO_INTERRUPT_STATUS_1);
   0C8E 75 82 03      [24] 3260 	mov	dpl,#0x03
   0C91 12r0Br6F      [24] 3261 	lcall	_register_read
                           3262 ;	radio/radio.c:1069: status = register_read(EZRADIOPRO_INTERRUPT_STATUS_2);
   0C94 75 82 04      [24] 3263 	mov	dpl,#0x04
   0C97 12r0Br6F      [24] 3264 	lcall	_register_read
   0C9A E5 82         [12] 3265 	mov	a,dpl
                           3266 ;	radio/radio.c:1070: if (status & EZRADIOPRO_ICHIPRDY) {
   0C9C 30 E1 EA      [24] 3267 	jnb	acc.1,00108$
                           3268 ;	radio/radio.c:1071: return true;
   0C9F D3            [12] 3269 	setb	c
   0CA0 22            [24] 3270 	ret
   0CA1                    3271 00110$:
                           3272 ;	radio/radio.c:1074: return false;
   0CA1 C3            [12] 3273 	clr	c
   0CA2 22            [24] 3274 	ret
                           3275 ;------------------------------------------------------------
                           3276 ;Allocation info for local variables in function 'set_frequency_registers'
                           3277 ;------------------------------------------------------------
                           3278 ;band                      Allocated with name '_set_frequency_registers_band_1_257'
                           3279 ;------------------------------------------------------------
                           3280 ;	radio/radio.c:1081: set_frequency_registers(__pdata uint32_t frequency)
                           3281 ;	-----------------------------------------
                           3282 ;	 function set_frequency_registers
                           3283 ;	-----------------------------------------
   0CA3                    3284 _set_frequency_registers:
   0CA3 AF 82         [24] 3285 	mov	r7,dpl
   0CA5 AE 83         [24] 3286 	mov	r6,dph
   0CA7 AD F0         [24] 3287 	mov	r5,b
   0CA9 FC            [12] 3288 	mov	r4,a
   0CAA 78r29         [12] 3289 	mov	r0,#_set_frequency_registers_frequency_1_256
   0CAC EF            [12] 3290 	mov	a,r7
   0CAD F2            [24] 3291 	movx	@r0,a
   0CAE 08            [12] 3292 	inc	r0
   0CAF EE            [12] 3293 	mov	a,r6
   0CB0 F2            [24] 3294 	movx	@r0,a
   0CB1 08            [12] 3295 	inc	r0
   0CB2 ED            [12] 3296 	mov	a,r5
   0CB3 F2            [24] 3297 	movx	@r0,a
   0CB4 08            [12] 3298 	inc	r0
   0CB5 EC            [12] 3299 	mov	a,r4
   0CB6 F2            [24] 3300 	movx	@r0,a
                           3301 ;	radio/radio.c:1086: if (frequency > 480000000UL) {
   0CB7 78r29         [12] 3302 	mov	r0,#_set_frequency_registers_frequency_1_256
   0CB9 C3            [12] 3303 	clr	c
   0CBA E2            [24] 3304 	movx	a,@r0
   0CBB F5 F0         [12] 3305 	mov	b,a
   0CBD E4            [12] 3306 	clr	a
   0CBE 95 F0         [12] 3307 	subb	a,b
   0CC0 08            [12] 3308 	inc	r0
   0CC1 E2            [24] 3309 	movx	a,@r0
   0CC2 F5 F0         [12] 3310 	mov	b,a
   0CC4 74 38         [12] 3311 	mov	a,#0x38
   0CC6 95 F0         [12] 3312 	subb	a,b
   0CC8 08            [12] 3313 	inc	r0
   0CC9 E2            [24] 3314 	movx	a,@r0
   0CCA F5 F0         [12] 3315 	mov	b,a
   0CCC 74 9C         [12] 3316 	mov	a,#0x9C
   0CCE 95 F0         [12] 3317 	subb	a,b
   0CD0 08            [12] 3318 	inc	r0
   0CD1 E2            [24] 3319 	movx	a,@r0
   0CD2 F5 F0         [12] 3320 	mov	b,a
   0CD4 74 1C         [12] 3321 	mov	a,#0x1C
   0CD6 95 F0         [12] 3322 	subb	a,b
   0CD8 40 03         [24] 3323 	jc	00109$
   0CDA 02r0Dr99      [24] 3324 	ljmp	00102$
   0CDD                    3325 00109$:
                           3326 ;	radio/radio.c:1087: frequency -= 480000000UL;
   0CDD 78r2A         [12] 3327 	mov	r0,#(_set_frequency_registers_frequency_1_256 + 1)
   0CDF E2            [24] 3328 	movx	a,@r0
   0CE0 24 C8         [12] 3329 	add	a,#0xC8
   0CE2 F2            [24] 3330 	movx	@r0,a
   0CE3 08            [12] 3331 	inc	r0
   0CE4 E2            [24] 3332 	movx	a,@r0
   0CE5 34 63         [12] 3333 	addc	a,#0x63
   0CE7 F2            [24] 3334 	movx	@r0,a
   0CE8 08            [12] 3335 	inc	r0
   0CE9 E2            [24] 3336 	movx	a,@r0
   0CEA 34 E3         [12] 3337 	addc	a,#0xE3
   0CEC F2            [24] 3338 	movx	@r0,a
                           3339 ;	radio/radio.c:1088: band  = frequency / 20000000UL;
   0CED 90r00r00      [24] 3340 	mov	dptr,#__divulong_PARM_2
   0CF0 E4            [12] 3341 	clr	a
   0CF1 F0            [24] 3342 	movx	@dptr,a
   0CF2 74 2D         [12] 3343 	mov	a,#0x2D
   0CF4 A3            [24] 3344 	inc	dptr
   0CF5 F0            [24] 3345 	movx	@dptr,a
   0CF6 74 31         [12] 3346 	mov	a,#0x31
   0CF8 A3            [24] 3347 	inc	dptr
   0CF9 F0            [24] 3348 	movx	@dptr,a
   0CFA 74 01         [12] 3349 	mov	a,#0x01
   0CFC A3            [24] 3350 	inc	dptr
   0CFD F0            [24] 3351 	movx	@dptr,a
   0CFE 78r29         [12] 3352 	mov	r0,#_set_frequency_registers_frequency_1_256
   0D00 E2            [24] 3353 	movx	a,@r0
   0D01 F5 82         [12] 3354 	mov	dpl,a
   0D03 08            [12] 3355 	inc	r0
   0D04 E2            [24] 3356 	movx	a,@r0
   0D05 F5 83         [12] 3357 	mov	dph,a
   0D07 08            [12] 3358 	inc	r0
   0D08 E2            [24] 3359 	movx	a,@r0
   0D09 F5 F0         [12] 3360 	mov	b,a
   0D0B 08            [12] 3361 	inc	r0
   0D0C E2            [24] 3362 	movx	a,@r0
   0D0D 12r00r00      [24] 3363 	lcall	__divulong
   0D10 AA 82         [24] 3364 	mov	r2,dpl
   0D12 90r01r0C      [24] 3365 	mov	dptr,#_set_frequency_registers_band_1_257
   0D15 EA            [12] 3366 	mov	a,r2
   0D16 F0            [24] 3367 	movx	@dptr,a
                           3368 ;	radio/radio.c:1089: frequency -= (uint32_t)band * 20000000UL;
   0D17 90r00r00      [24] 3369 	mov	dptr,#__mullong_PARM_2
   0D1A EA            [12] 3370 	mov	a,r2
   0D1B F0            [24] 3371 	movx	@dptr,a
   0D1C E4            [12] 3372 	clr	a
   0D1D A3            [24] 3373 	inc	dptr
   0D1E F0            [24] 3374 	movx	@dptr,a
   0D1F E4            [12] 3375 	clr	a
   0D20 A3            [24] 3376 	inc	dptr
   0D21 F0            [24] 3377 	movx	@dptr,a
   0D22 E4            [12] 3378 	clr	a
   0D23 A3            [24] 3379 	inc	dptr
   0D24 F0            [24] 3380 	movx	@dptr,a
   0D25 90 2D 00      [24] 3381 	mov	dptr,#0x2D00
   0D28 75 F0 31      [24] 3382 	mov	b,#0x31
   0D2B 74 01         [12] 3383 	mov	a,#0x01
   0D2D 12r00r00      [24] 3384 	lcall	__mullong
   0D30 AC 82         [24] 3385 	mov	r4,dpl
   0D32 AD 83         [24] 3386 	mov	r5,dph
   0D34 AE F0         [24] 3387 	mov	r6,b
   0D36 FF            [12] 3388 	mov	r7,a
   0D37 78r29         [12] 3389 	mov	r0,#_set_frequency_registers_frequency_1_256
   0D39 E2            [24] 3390 	movx	a,@r0
   0D3A C3            [12] 3391 	clr	c
   0D3B 9C            [12] 3392 	subb	a,r4
   0D3C F2            [24] 3393 	movx	@r0,a
   0D3D 08            [12] 3394 	inc	r0
   0D3E E2            [24] 3395 	movx	a,@r0
   0D3F 9D            [12] 3396 	subb	a,r5
   0D40 F2            [24] 3397 	movx	@r0,a
   0D41 08            [12] 3398 	inc	r0
   0D42 E2            [24] 3399 	movx	a,@r0
   0D43 9E            [12] 3400 	subb	a,r6
   0D44 F2            [24] 3401 	movx	@r0,a
   0D45 08            [12] 3402 	inc	r0
   0D46 E2            [24] 3403 	movx	a,@r0
   0D47 9F            [12] 3404 	subb	a,r7
   0D48 F2            [24] 3405 	movx	@r0,a
                           3406 ;	radio/radio.c:1090: frequency  = scale_uint32(frequency, 625);
   0D49 78r21         [12] 3407 	mov	r0,#_scale_uint32_PARM_2
   0D4B 74 71         [12] 3408 	mov	a,#0x71
   0D4D F2            [24] 3409 	movx	@r0,a
   0D4E 08            [12] 3410 	inc	r0
   0D4F 74 02         [12] 3411 	mov	a,#0x02
   0D51 F2            [24] 3412 	movx	@r0,a
   0D52 08            [12] 3413 	inc	r0
   0D53 E4            [12] 3414 	clr	a
   0D54 F2            [24] 3415 	movx	@r0,a
   0D55 08            [12] 3416 	inc	r0
   0D56 F2            [24] 3417 	movx	@r0,a
   0D57 78r29         [12] 3418 	mov	r0,#_set_frequency_registers_frequency_1_256
   0D59 E2            [24] 3419 	movx	a,@r0
   0D5A F5 82         [12] 3420 	mov	dpl,a
   0D5C 08            [12] 3421 	inc	r0
   0D5D E2            [24] 3422 	movx	a,@r0
   0D5E F5 83         [12] 3423 	mov	dph,a
   0D60 08            [12] 3424 	inc	r0
   0D61 E2            [24] 3425 	movx	a,@r0
   0D62 F5 F0         [12] 3426 	mov	b,a
   0D64 08            [12] 3427 	inc	r0
   0D65 E2            [24] 3428 	movx	a,@r0
   0D66 12r0BrE3      [24] 3429 	lcall	_scale_uint32
   0D69 78r29         [12] 3430 	mov	r0,#_set_frequency_registers_frequency_1_256
   0D6B C0 E0         [24] 3431 	push	acc
   0D6D E5 82         [12] 3432 	mov	a,dpl
   0D6F F2            [24] 3433 	movx	@r0,a
   0D70 08            [12] 3434 	inc	r0
   0D71 E5 83         [12] 3435 	mov	a,dph
   0D73 F2            [24] 3436 	movx	@r0,a
   0D74 08            [12] 3437 	inc	r0
   0D75 E5 F0         [12] 3438 	mov	a,b
   0D77 F2            [24] 3439 	movx	@r0,a
   0D78 D0 E0         [24] 3440 	pop	acc
   0D7A 08            [12] 3441 	inc	r0
   0D7B F2            [24] 3442 	movx	@r0,a
                           3443 ;	radio/radio.c:1091: frequency <<= 1;
   0D7C 78r29         [12] 3444 	mov	r0,#_set_frequency_registers_frequency_1_256
   0D7E E2            [24] 3445 	movx	a,@r0
   0D7F 25 E0         [12] 3446 	add	a,acc
   0D81 F2            [24] 3447 	movx	@r0,a
   0D82 08            [12] 3448 	inc	r0
   0D83 E2            [24] 3449 	movx	a,@r0
   0D84 33            [12] 3450 	rlc	a
   0D85 F2            [24] 3451 	movx	@r0,a
   0D86 08            [12] 3452 	inc	r0
   0D87 E2            [24] 3453 	movx	a,@r0
   0D88 33            [12] 3454 	rlc	a
   0D89 F2            [24] 3455 	movx	@r0,a
   0D8A 08            [12] 3456 	inc	r0
   0D8B E2            [24] 3457 	movx	a,@r0
   0D8C 33            [12] 3458 	rlc	a
   0D8D F2            [24] 3459 	movx	@r0,a
                           3460 ;	radio/radio.c:1092: band |= EZRADIOPRO_HBSEL;
   0D8E 90r01r0C      [24] 3461 	mov	dptr,#_set_frequency_registers_band_1_257
   0D91 E0            [24] 3462 	movx	a,@dptr
   0D92 FF            [12] 3463 	mov	r7,a
   0D93 44 20         [12] 3464 	orl	a,#0x20
   0D95 F0            [24] 3465 	movx	@dptr,a
   0D96 02r0Er5C      [24] 3466 	ljmp	00103$
   0D99                    3467 00102$:
                           3468 ;	radio/radio.c:1094: frequency -= 240000000UL;
   0D99 78r2A         [12] 3469 	mov	r0,#(_set_frequency_registers_frequency_1_256 + 1)
   0D9B E2            [24] 3470 	movx	a,@r0
   0D9C 24 E4         [12] 3471 	add	a,#0xE4
   0D9E F2            [24] 3472 	movx	@r0,a
   0D9F 08            [12] 3473 	inc	r0
   0DA0 E2            [24] 3474 	movx	a,@r0
   0DA1 34 B1         [12] 3475 	addc	a,#0xB1
   0DA3 F2            [24] 3476 	movx	@r0,a
   0DA4 08            [12] 3477 	inc	r0
   0DA5 E2            [24] 3478 	movx	a,@r0
   0DA6 34 F1         [12] 3479 	addc	a,#0xF1
   0DA8 F2            [24] 3480 	movx	@r0,a
                           3481 ;	radio/radio.c:1095: band  = frequency / 10000000UL;
   0DA9 90r00r00      [24] 3482 	mov	dptr,#__divulong_PARM_2
   0DAC 74 80         [12] 3483 	mov	a,#0x80
   0DAE F0            [24] 3484 	movx	@dptr,a
   0DAF 74 96         [12] 3485 	mov	a,#0x96
   0DB1 A3            [24] 3486 	inc	dptr
   0DB2 F0            [24] 3487 	movx	@dptr,a
   0DB3 74 98         [12] 3488 	mov	a,#0x98
   0DB5 A3            [24] 3489 	inc	dptr
   0DB6 F0            [24] 3490 	movx	@dptr,a
   0DB7 E4            [12] 3491 	clr	a
   0DB8 A3            [24] 3492 	inc	dptr
   0DB9 F0            [24] 3493 	movx	@dptr,a
   0DBA 78r29         [12] 3494 	mov	r0,#_set_frequency_registers_frequency_1_256
   0DBC E2            [24] 3495 	movx	a,@r0
   0DBD F5 82         [12] 3496 	mov	dpl,a
   0DBF 08            [12] 3497 	inc	r0
   0DC0 E2            [24] 3498 	movx	a,@r0
   0DC1 F5 83         [12] 3499 	mov	dph,a
   0DC3 08            [12] 3500 	inc	r0
   0DC4 E2            [24] 3501 	movx	a,@r0
   0DC5 F5 F0         [12] 3502 	mov	b,a
   0DC7 08            [12] 3503 	inc	r0
   0DC8 E2            [24] 3504 	movx	a,@r0
   0DC9 12r00r00      [24] 3505 	lcall	__divulong
   0DCC AC 82         [24] 3506 	mov	r4,dpl
   0DCE 90r01r0C      [24] 3507 	mov	dptr,#_set_frequency_registers_band_1_257
   0DD1 EC            [12] 3508 	mov	a,r4
   0DD2 F0            [24] 3509 	movx	@dptr,a
                           3510 ;	radio/radio.c:1096: frequency -= (uint32_t)band * 10000000UL;
   0DD3 90r00r00      [24] 3511 	mov	dptr,#__mullong_PARM_2
   0DD6 EC            [12] 3512 	mov	a,r4
   0DD7 F0            [24] 3513 	movx	@dptr,a
   0DD8 E4            [12] 3514 	clr	a
   0DD9 A3            [24] 3515 	inc	dptr
   0DDA F0            [24] 3516 	movx	@dptr,a
   0DDB E4            [12] 3517 	clr	a
   0DDC A3            [24] 3518 	inc	dptr
   0DDD F0            [24] 3519 	movx	@dptr,a
   0DDE E4            [12] 3520 	clr	a
   0DDF A3            [24] 3521 	inc	dptr
   0DE0 F0            [24] 3522 	movx	@dptr,a
   0DE1 90 96 80      [24] 3523 	mov	dptr,#0x9680
   0DE4 75 F0 98      [24] 3524 	mov	b,#0x98
   0DE7 E4            [12] 3525 	clr	a
   0DE8 12r00r00      [24] 3526 	lcall	__mullong
   0DEB AC 82         [24] 3527 	mov	r4,dpl
   0DED AD 83         [24] 3528 	mov	r5,dph
   0DEF AE F0         [24] 3529 	mov	r6,b
   0DF1 FF            [12] 3530 	mov	r7,a
   0DF2 78r29         [12] 3531 	mov	r0,#_set_frequency_registers_frequency_1_256
   0DF4 E2            [24] 3532 	movx	a,@r0
   0DF5 C3            [12] 3533 	clr	c
   0DF6 9C            [12] 3534 	subb	a,r4
   0DF7 F2            [24] 3535 	movx	@r0,a
   0DF8 08            [12] 3536 	inc	r0
   0DF9 E2            [24] 3537 	movx	a,@r0
   0DFA 9D            [12] 3538 	subb	a,r5
   0DFB F2            [24] 3539 	movx	@r0,a
   0DFC 08            [12] 3540 	inc	r0
   0DFD E2            [24] 3541 	movx	a,@r0
   0DFE 9E            [12] 3542 	subb	a,r6
   0DFF F2            [24] 3543 	movx	@r0,a
   0E00 08            [12] 3544 	inc	r0
   0E01 E2            [24] 3545 	movx	a,@r0
   0E02 9F            [12] 3546 	subb	a,r7
   0E03 F2            [24] 3547 	movx	@r0,a
                           3548 ;	radio/radio.c:1097: frequency  = scale_uint32(frequency, 625);
   0E04 78r21         [12] 3549 	mov	r0,#_scale_uint32_PARM_2
   0E06 74 71         [12] 3550 	mov	a,#0x71
   0E08 F2            [24] 3551 	movx	@r0,a
   0E09 08            [12] 3552 	inc	r0
   0E0A 74 02         [12] 3553 	mov	a,#0x02
   0E0C F2            [24] 3554 	movx	@r0,a
   0E0D 08            [12] 3555 	inc	r0
   0E0E E4            [12] 3556 	clr	a
   0E0F F2            [24] 3557 	movx	@r0,a
   0E10 08            [12] 3558 	inc	r0
   0E11 F2            [24] 3559 	movx	@r0,a
   0E12 78r29         [12] 3560 	mov	r0,#_set_frequency_registers_frequency_1_256
   0E14 E2            [24] 3561 	movx	a,@r0
   0E15 F5 82         [12] 3562 	mov	dpl,a
   0E17 08            [12] 3563 	inc	r0
   0E18 E2            [24] 3564 	movx	a,@r0
   0E19 F5 83         [12] 3565 	mov	dph,a
   0E1B 08            [12] 3566 	inc	r0
   0E1C E2            [24] 3567 	movx	a,@r0
   0E1D F5 F0         [12] 3568 	mov	b,a
   0E1F 08            [12] 3569 	inc	r0
   0E20 E2            [24] 3570 	movx	a,@r0
   0E21 12r0BrE3      [24] 3571 	lcall	_scale_uint32
   0E24 78r29         [12] 3572 	mov	r0,#_set_frequency_registers_frequency_1_256
   0E26 C0 E0         [24] 3573 	push	acc
   0E28 E5 82         [12] 3574 	mov	a,dpl
   0E2A F2            [24] 3575 	movx	@r0,a
   0E2B 08            [12] 3576 	inc	r0
   0E2C E5 83         [12] 3577 	mov	a,dph
   0E2E F2            [24] 3578 	movx	@r0,a
   0E2F 08            [12] 3579 	inc	r0
   0E30 E5 F0         [12] 3580 	mov	a,b
   0E32 F2            [24] 3581 	movx	@r0,a
   0E33 D0 E0         [24] 3582 	pop	acc
   0E35 08            [12] 3583 	inc	r0
   0E36 F2            [24] 3584 	movx	@r0,a
                           3585 ;	radio/radio.c:1098: frequency <<= 2;
   0E37 78r29         [12] 3586 	mov	r0,#_set_frequency_registers_frequency_1_256
   0E39 E2            [24] 3587 	movx	a,@r0
   0E3A 25 E0         [12] 3588 	add	a,acc
   0E3C F2            [24] 3589 	movx	@r0,a
   0E3D 08            [12] 3590 	inc	r0
   0E3E E2            [24] 3591 	movx	a,@r0
   0E3F 33            [12] 3592 	rlc	a
   0E40 F2            [24] 3593 	movx	@r0,a
   0E41 08            [12] 3594 	inc	r0
   0E42 E2            [24] 3595 	movx	a,@r0
   0E43 33            [12] 3596 	rlc	a
   0E44 F2            [24] 3597 	movx	@r0,a
   0E45 08            [12] 3598 	inc	r0
   0E46 E2            [24] 3599 	movx	a,@r0
   0E47 33            [12] 3600 	rlc	a
   0E48 F2            [24] 3601 	movx	@r0,a
   0E49 18            [12] 3602 	dec	r0
   0E4A 18            [12] 3603 	dec	r0
   0E4B 18            [12] 3604 	dec	r0
   0E4C E2            [24] 3605 	movx	a,@r0
   0E4D 25 E0         [12] 3606 	add	a,acc
   0E4F F2            [24] 3607 	movx	@r0,a
   0E50 08            [12] 3608 	inc	r0
   0E51 E2            [24] 3609 	movx	a,@r0
   0E52 33            [12] 3610 	rlc	a
   0E53 F2            [24] 3611 	movx	@r0,a
   0E54 08            [12] 3612 	inc	r0
   0E55 E2            [24] 3613 	movx	a,@r0
   0E56 33            [12] 3614 	rlc	a
   0E57 F2            [24] 3615 	movx	@r0,a
   0E58 08            [12] 3616 	inc	r0
   0E59 E2            [24] 3617 	movx	a,@r0
   0E5A 33            [12] 3618 	rlc	a
   0E5B F2            [24] 3619 	movx	@r0,a
   0E5C                    3620 00103$:
                           3621 ;	radio/radio.c:1101: band |= EZRADIOPRO_SBSEL;
   0E5C 90r01r0C      [24] 3622 	mov	dptr,#_set_frequency_registers_band_1_257
   0E5F E0            [24] 3623 	movx	a,@dptr
   0E60 44 40         [12] 3624 	orl	a,#0x40
   0E62 F0            [24] 3625 	movx	@dptr,a
                           3626 ;	radio/radio.c:1102: carrier = (uint16_t)frequency;
   0E63 78r29         [12] 3627 	mov	r0,#_set_frequency_registers_frequency_1_256
   0E65 E2            [24] 3628 	movx	a,@r0
   0E66 FC            [12] 3629 	mov	r4,a
   0E67 08            [12] 3630 	inc	r0
   0E68 E2            [24] 3631 	movx	a,@r0
   0E69 FD            [12] 3632 	mov	r5,a
                           3633 ;	radio/radio.c:1104: register_write(EZRADIOPRO_FREQUENCY_BAND_SELECT, band);
   0E6A C0 05         [24] 3634 	push	ar5
   0E6C C0 04         [24] 3635 	push	ar4
   0E6E 90r01r0C      [24] 3636 	mov	dptr,#_set_frequency_registers_band_1_257
   0E71 E0            [24] 3637 	movx	a,@dptr
   0E72 C0 E0         [24] 3638 	push	acc
   0E74 75 82 75      [24] 3639 	mov	dpl,#0x75
   0E77 12r0Br3F      [24] 3640 	lcall	_register_write
   0E7A 15 81         [12] 3641 	dec	sp
   0E7C D0 04         [24] 3642 	pop	ar4
   0E7E D0 05         [24] 3643 	pop	ar5
                           3644 ;	radio/radio.c:1105: register_write(EZRADIOPRO_NOMINAL_CARRIER_FREQUENCY_1, carrier >> 8);
   0E80 8D 07         [24] 3645 	mov	ar7,r5
   0E82 C0 05         [24] 3646 	push	ar5
   0E84 C0 04         [24] 3647 	push	ar4
   0E86 C0 07         [24] 3648 	push	ar7
   0E88 75 82 76      [24] 3649 	mov	dpl,#0x76
   0E8B 12r0Br3F      [24] 3650 	lcall	_register_write
   0E8E 15 81         [12] 3651 	dec	sp
   0E90 D0 04         [24] 3652 	pop	ar4
   0E92 D0 05         [24] 3653 	pop	ar5
                           3654 ;	radio/radio.c:1106: register_write(EZRADIOPRO_NOMINAL_CARRIER_FREQUENCY_0, carrier & 0xFF);
   0E94 C0 04         [24] 3655 	push	ar4
   0E96 75 82 77      [24] 3656 	mov	dpl,#0x77
   0E99 12r0Br3F      [24] 3657 	lcall	_register_write
   0E9C 15 81         [12] 3658 	dec	sp
   0E9E 22            [24] 3659 	ret
                           3660 ;------------------------------------------------------------
                           3661 ;Allocation info for local variables in function 'radio_temperature'
                           3662 ;------------------------------------------------------------
                           3663 ;temp_local                Allocated to registers r6 r7 
                           3664 ;------------------------------------------------------------
                           3665 ;	radio/radio.c:1115: radio_temperature(void)
                           3666 ;	-----------------------------------------
                           3667 ;	 function radio_temperature
                           3668 ;	-----------------------------------------
   0E9F                    3669 _radio_temperature:
                           3670 ;	radio/radio.c:1119: AD0BUSY = 1;		// Start ADC conversion
   0E9F D2 EC         [12] 3671 	setb	_AD0BUSY
                           3672 ;	radio/radio.c:1120: while (AD0BUSY) ;  	// Wait for completion of conversion
   0EA1                    3673 00101$:
   0EA1 20 EC FD      [24] 3674 	jb	_AD0BUSY,00101$
                           3675 ;	radio/radio.c:1122: temp_local = (ADC0H << 8) | ADC0L;
   0EA4 AF BE         [24] 3676 	mov	r7,_ADC0H
   0EA6 7E 00         [12] 3677 	mov	r6,#0x00
   0EA8 AC BD         [24] 3678 	mov	r4,_ADC0L
   0EAA 7D 00         [12] 3679 	mov	r5,#0x00
   0EAC EC            [12] 3680 	mov	a,r4
   0EAD 42 06         [12] 3681 	orl	ar6,a
   0EAF ED            [12] 3682 	mov	a,r5
   0EB0 42 07         [12] 3683 	orl	ar7,a
                           3684 ;	radio/radio.c:1123: temp_local *= 1.64060;  // convert reading into mV ( (val/1024) * 1680 )  vref=1680mV
   0EB2 8E 82         [24] 3685 	mov	dpl,r6
   0EB4 8F 83         [24] 3686 	mov	dph,r7
   0EB6 12r00r00      [24] 3687 	lcall	___sint2fs
   0EB9 AA 82         [24] 3688 	mov	r2,dpl
   0EBB AB 83         [24] 3689 	mov	r3,dph
   0EBD AC F0         [24] 3690 	mov	r4,b
   0EBF FD            [12] 3691 	mov	r5,a
   0EC0 C0 02         [24] 3692 	push	ar2
   0EC2 C0 03         [24] 3693 	push	ar3
   0EC4 C0 04         [24] 3694 	push	ar4
   0EC6 C0 05         [24] 3695 	push	ar5
   0EC8 90 FF 2E      [24] 3696 	mov	dptr,#0xFF2E
   0ECB 75 F0 D1      [24] 3697 	mov	b,#0xD1
   0ECE 74 3F         [12] 3698 	mov	a,#0x3F
   0ED0 12r00r00      [24] 3699 	lcall	___fsmul
   0ED3 AA 82         [24] 3700 	mov	r2,dpl
   0ED5 AB 83         [24] 3701 	mov	r3,dph
   0ED7 AC F0         [24] 3702 	mov	r4,b
   0ED9 FD            [12] 3703 	mov	r5,a
   0EDA E5 81         [12] 3704 	mov	a,sp
   0EDC 24 FC         [12] 3705 	add	a,#0xfc
   0EDE F5 81         [12] 3706 	mov	sp,a
   0EE0 8A 82         [24] 3707 	mov	dpl,r2
   0EE2 8B 83         [24] 3708 	mov	dph,r3
   0EE4 8C F0         [24] 3709 	mov	b,r4
   0EE6 ED            [12] 3710 	mov	a,r5
   0EE7 12r00r00      [24] 3711 	lcall	___fs2sint
   0EEA AE 82         [24] 3712 	mov	r6,dpl
   0EEC AF 83         [24] 3713 	mov	r7,dph
                           3714 ;	radio/radio.c:1124: temp_local = 25.0 + (temp_local - 1025) / 3.4; // convert mV reading into degC.
   0EEE EE            [12] 3715 	mov	a,r6
   0EEF 24 FF         [12] 3716 	add	a,#0xFF
   0EF1 FC            [12] 3717 	mov	r4,a
   0EF2 EF            [12] 3718 	mov	a,r7
   0EF3 34 FB         [12] 3719 	addc	a,#0xFB
   0EF5 FD            [12] 3720 	mov	r5,a
   0EF6 8C 82         [24] 3721 	mov	dpl,r4
   0EF8 8D 83         [24] 3722 	mov	dph,r5
   0EFA 12r00r00      [24] 3723 	lcall	___sint2fs
   0EFD AA 82         [24] 3724 	mov	r2,dpl
   0EFF AB 83         [24] 3725 	mov	r3,dph
   0F01 AC F0         [24] 3726 	mov	r4,b
   0F03 FD            [12] 3727 	mov	r5,a
   0F04 74 9A         [12] 3728 	mov	a,#0x9A
   0F06 C0 E0         [24] 3729 	push	acc
   0F08 74 99         [12] 3730 	mov	a,#0x99
   0F0A C0 E0         [24] 3731 	push	acc
   0F0C 74 59         [12] 3732 	mov	a,#0x59
   0F0E C0 E0         [24] 3733 	push	acc
   0F10 74 40         [12] 3734 	mov	a,#0x40
   0F12 C0 E0         [24] 3735 	push	acc
   0F14 8A 82         [24] 3736 	mov	dpl,r2
   0F16 8B 83         [24] 3737 	mov	dph,r3
   0F18 8C F0         [24] 3738 	mov	b,r4
   0F1A ED            [12] 3739 	mov	a,r5
   0F1B 12r00r00      [24] 3740 	lcall	___fsdiv
   0F1E AA 82         [24] 3741 	mov	r2,dpl
   0F20 AB 83         [24] 3742 	mov	r3,dph
   0F22 AC F0         [24] 3743 	mov	r4,b
   0F24 FD            [12] 3744 	mov	r5,a
   0F25 E5 81         [12] 3745 	mov	a,sp
   0F27 24 FC         [12] 3746 	add	a,#0xfc
   0F29 F5 81         [12] 3747 	mov	sp,a
   0F2B E4            [12] 3748 	clr	a
   0F2C C0 E0         [24] 3749 	push	acc
   0F2E C0 E0         [24] 3750 	push	acc
   0F30 74 C8         [12] 3751 	mov	a,#0xC8
   0F32 C0 E0         [24] 3752 	push	acc
   0F34 74 41         [12] 3753 	mov	a,#0x41
   0F36 C0 E0         [24] 3754 	push	acc
   0F38 8A 82         [24] 3755 	mov	dpl,r2
   0F3A 8B 83         [24] 3756 	mov	dph,r3
   0F3C 8C F0         [24] 3757 	mov	b,r4
   0F3E ED            [12] 3758 	mov	a,r5
   0F3F 12r00r00      [24] 3759 	lcall	___fsadd
   0F42 AA 82         [24] 3760 	mov	r2,dpl
   0F44 AB 83         [24] 3761 	mov	r3,dph
   0F46 AC F0         [24] 3762 	mov	r4,b
   0F48 FD            [12] 3763 	mov	r5,a
   0F49 E5 81         [12] 3764 	mov	a,sp
   0F4B 24 FC         [12] 3765 	add	a,#0xfc
   0F4D F5 81         [12] 3766 	mov	sp,a
   0F4F 8A 82         [24] 3767 	mov	dpl,r2
   0F51 8B 83         [24] 3768 	mov	dph,r3
   0F53 8C F0         [24] 3769 	mov	b,r4
   0F55 ED            [12] 3770 	mov	a,r5
                           3771 ;	radio/radio.c:1126: return temp_local;
   0F56 02r00r00      [24] 3772 	ljmp	___fs2sint
                           3773 ;------------------------------------------------------------
                           3774 ;Allocation info for local variables in function 'radio_set_diversity'
                           3775 ;------------------------------------------------------------
                           3776 ;	radio/radio.c:1132: radio_set_diversity(bool enable)
                           3777 ;	-----------------------------------------
                           3778 ;	 function radio_set_diversity
                           3779 ;	-----------------------------------------
   0F59                    3780 _radio_set_diversity:
                           3781 ;	radio/radio.c:1134: if (enable)
   0F59 30*08 25      [24] 3782 	jnb	_radio_set_diversity_PARM_1,00102$
                           3783 ;	radio/radio.c:1136: register_write(EZRADIOPRO_GPIO2_CONFIGURATION, 0x18);
   0F5C 74 18         [12] 3784 	mov	a,#0x18
   0F5E C0 E0         [24] 3785 	push	acc
   0F60 75 82 0D      [24] 3786 	mov	dpl,#0x0D
   0F63 12r0Br3F      [24] 3787 	lcall	_register_write
   0F66 15 81         [12] 3788 	dec	sp
                           3789 ;	radio/radio.c:1138: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, (register_read(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2) & ~EZRADIOPRO_ANTDIV_MASK) | 0x80);
   0F68 75 82 08      [24] 3790 	mov	dpl,#0x08
   0F6B 12r0Br6F      [24] 3791 	lcall	_register_read
   0F6E AF 82         [24] 3792 	mov	r7,dpl
   0F70 74 1F         [12] 3793 	mov	a,#0x1F
   0F72 5F            [12] 3794 	anl	a,r7
   0F73 44 80         [12] 3795 	orl	a,#0x80
   0F75 FF            [12] 3796 	mov	r7,a
   0F76 C0 07         [24] 3797 	push	ar7
   0F78 75 82 08      [24] 3798 	mov	dpl,#0x08
   0F7B 12r0Br3F      [24] 3799 	lcall	_register_write
   0F7E 15 81         [12] 3800 	dec	sp
   0F80 22            [24] 3801 	ret
   0F81                    3802 00102$:
                           3803 ;	radio/radio.c:1143: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, (register_read(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2) & ~EZRADIOPRO_ANTDIV_MASK));
   0F81 75 82 08      [24] 3804 	mov	dpl,#0x08
   0F84 12r0Br6F      [24] 3805 	lcall	_register_read
   0F87 AF 82         [24] 3806 	mov	r7,dpl
   0F89 53 07 1F      [24] 3807 	anl	ar7,#0x1F
   0F8C C0 07         [24] 3808 	push	ar7
   0F8E 75 82 08      [24] 3809 	mov	dpl,#0x08
   0F91 12r0Br3F      [24] 3810 	lcall	_register_write
   0F94 15 81         [12] 3811 	dec	sp
                           3812 ;	radio/radio.c:1145: register_write(EZRADIOPRO_GPIO2_CONFIGURATION, 0x0A);	// GPIO2 (ANT1) output set high fixed
   0F96 74 0A         [12] 3813 	mov	a,#0x0A
   0F98 C0 E0         [24] 3814 	push	acc
   0F9A 75 82 0D      [24] 3815 	mov	dpl,#0x0D
   0F9D 12r0Br3F      [24] 3816 	lcall	_register_write
   0FA0 15 81         [12] 3817 	dec	sp
                           3818 ;	radio/radio.c:1146: register_write(EZRADIOPRO_IO_PORT_CONFIGURATION, 0x04);	// GPIO2 output set high (fixed on ant 1)
   0FA2 74 04         [12] 3819 	mov	a,#0x04
   0FA4 C0 E0         [24] 3820 	push	acc
   0FA6 75 82 0E      [24] 3821 	mov	dpl,#0x0E
   0FA9 12r0Br3F      [24] 3822 	lcall	_register_write
   0FAC 15 81         [12] 3823 	dec	sp
   0FAE 22            [24] 3824 	ret
                           3825 ;------------------------------------------------------------
                           3826 ;Allocation info for local variables in function 'Receiver_ISR'
                           3827 ;------------------------------------------------------------
                           3828 ;status                    Allocated to registers r6 
                           3829 ;status2                   Allocated to registers r7 
                           3830 ;len                       Allocated to registers r7 
                           3831 ;------------------------------------------------------------
                           3832 ;	radio/radio.c:1158: INTERRUPT(Receiver_ISR, INTERRUPT_INT0)
                           3833 ;	-----------------------------------------
                           3834 ;	 function Receiver_ISR
                           3835 ;	-----------------------------------------
   0FAF                    3836 _Receiver_ISR:
   0FAF C0*00         [24] 3837 	push	bits
   0FB1 C0 E0         [24] 3838 	push	acc
   0FB3 C0 F0         [24] 3839 	push	b
   0FB5 C0 82         [24] 3840 	push	dpl
   0FB7 C0 83         [24] 3841 	push	dph
   0FB9 C0 07         [24] 3842 	push	(0+7)
   0FBB C0 06         [24] 3843 	push	(0+6)
   0FBD C0 05         [24] 3844 	push	(0+5)
   0FBF C0 04         [24] 3845 	push	(0+4)
   0FC1 C0 03         [24] 3846 	push	(0+3)
   0FC3 C0 02         [24] 3847 	push	(0+2)
   0FC5 C0 01         [24] 3848 	push	(0+1)
   0FC7 C0 00         [24] 3849 	push	(0+0)
   0FC9 C0 D0         [24] 3850 	push	psw
   0FCB 75 D0 00      [24] 3851 	mov	psw,#0x00
                           3852 ;	radio/radio.c:1162: status2 = register_read(EZRADIOPRO_INTERRUPT_STATUS_2);
   0FCE 75 82 04      [24] 3853 	mov	dpl,#0x04
   0FD1 12r0Br6F      [24] 3854 	lcall	_register_read
   0FD4 AF 82         [24] 3855 	mov	r7,dpl
                           3856 ;	radio/radio.c:1163: status  = register_read(EZRADIOPRO_INTERRUPT_STATUS_1);
   0FD6 75 82 03      [24] 3857 	mov	dpl,#0x03
   0FD9 C0 07         [24] 3858 	push	ar7
   0FDB 12r0Br6F      [24] 3859 	lcall	_register_read
   0FDE AE 82         [24] 3860 	mov	r6,dpl
   0FE0 D0 07         [24] 3861 	pop	ar7
                           3862 ;	radio/radio.c:1165: if (status & EZRADIOPRO_IRXFFAFULL) {
   0FE2 EE            [12] 3863 	mov	a,r6
   0FE3 30 E4 49      [24] 3864 	jnb	acc.4,00104$
                           3865 ;	radio/radio.c:1166: if (RX_FIFO_THRESHOLD_HIGH + (uint16_t)partial_packet_length > MAX_PACKET_LENGTH) {
   0FE6 78r01         [12] 3866 	mov	r0,#_partial_packet_length
   0FE8 E2            [24] 3867 	movx	a,@r0
   0FE9 FC            [12] 3868 	mov	r4,a
   0FEA 7D 00         [12] 3869 	mov	r5,#0x00
   0FEC 74 32         [12] 3870 	mov	a,#0x32
   0FEE 2C            [12] 3871 	add	a,r4
   0FEF FC            [12] 3872 	mov	r4,a
   0FF0 E4            [12] 3873 	clr	a
   0FF1 3D            [12] 3874 	addc	a,r5
   0FF2 FD            [12] 3875 	mov	r5,a
   0FF3 C3            [12] 3876 	clr	c
   0FF4 74 FC         [12] 3877 	mov	a,#0xFC
   0FF6 9C            [12] 3878 	subb	a,r4
   0FF7 E4            [12] 3879 	clr	a
   0FF8 9D            [12] 3880 	subb	a,r5
   0FF9 50 03         [24] 3881 	jnc	00150$
   0FFB 02r10rBA      [24] 3882 	ljmp	00117$
   0FFE                    3883 00150$:
                           3884 ;	radio/radio.c:1170: read_receive_fifo(RX_FIFO_THRESHOLD_HIGH, &radio_buffer[partial_packet_length]);
   0FFE 78r01         [12] 3885 	mov	r0,#_partial_packet_length
   1000 E2            [24] 3886 	movx	a,@r0
   1001 24r00         [12] 3887 	add	a,#_radio_buffer
   1003 FC            [12] 3888 	mov	r4,a
   1004 E4            [12] 3889 	clr	a
   1005 34s00         [12] 3890 	addc	a,#(_radio_buffer >> 8)
   1007 FD            [12] 3891 	mov	r5,a
   1008 C0 07         [24] 3892 	push	ar7
   100A C0 06         [24] 3893 	push	ar6
   100C C0 04         [24] 3894 	push	ar4
   100E C0 05         [24] 3895 	push	ar5
   1010 75 82 32      [24] 3896 	mov	dpl,#0x32
   1013 12r0Br9D      [24] 3897 	lcall	_read_receive_fifo
   1016 15 81         [12] 3898 	dec	sp
   1018 15 81         [12] 3899 	dec	sp
                           3900 ;	radio/radio.c:1171: partial_packet_length += RX_FIFO_THRESHOLD_HIGH;
   101A 78r01         [12] 3901 	mov	r0,#_partial_packet_length
   101C E2            [24] 3902 	movx	a,@r0
   101D 24 32         [12] 3903 	add	a,#0x32
   101F F2            [24] 3904 	movx	@r0,a
                           3905 ;	radio/radio.c:1172: last_rssi = register_read(EZRADIOPRO_RECEIVED_SIGNAL_STRENGTH_INDICATOR);
   1020 75 82 26      [24] 3906 	mov	dpl,#0x26
   1023 12r0Br6F      [24] 3907 	lcall	_register_read
   1026 E5 82         [12] 3908 	mov	a,dpl
   1028 D0 06         [24] 3909 	pop	ar6
   102A D0 07         [24] 3910 	pop	ar7
   102C 78r02         [12] 3911 	mov	r0,#_last_rssi
   102E F2            [24] 3912 	movx	@r0,a
   102F                    3913 00104$:
                           3914 ;	radio/radio.c:1175: if (status2 & EZRADIOPRO_IPREAVAL) {
   102F EF            [12] 3915 	mov	a,r7
   1030 30 E6 11      [24] 3916 	jnb	acc.6,00106$
                           3917 ;	radio/radio.c:1177: preamble_detected = true;
   1033 D2*01         [12] 3918 	setb	_preamble_detected
                           3919 ;	radio/radio.c:1180: last_rssi = register_read(EZRADIOPRO_RECEIVED_SIGNAL_STRENGTH_INDICATOR);
   1035 75 82 26      [24] 3920 	mov	dpl,#0x26
   1038 C0 06         [24] 3921 	push	ar6
   103A 12r0Br6F      [24] 3922 	lcall	_register_read
   103D E5 82         [12] 3923 	mov	a,dpl
   103F D0 06         [24] 3924 	pop	ar6
   1041 78r02         [12] 3925 	mov	r0,#_last_rssi
   1043 F2            [24] 3926 	movx	@r0,a
   1044                    3927 00106$:
                           3928 ;	radio/radio.c:1183: if (feature_golay == false && (status & EZRADIOPRO_ICRCERROR)) {
   1044 20*00 04      [24] 3929 	jb	_feature_golay,00108$
   1047 EE            [12] 3930 	mov	a,r6
   1048 20 E0 6F      [24] 3931 	jb	acc.0,00117$
                           3932 ;	radio/radio.c:1184: goto rxfail;
   104B                    3933 00108$:
                           3934 ;	radio/radio.c:1187: if (status & EZRADIOPRO_IPKVALID) {
   104B EE            [12] 3935 	mov	a,r6
   104C 30 E1 69      [24] 3936 	jnb	acc.1,00116$
                           3937 ;	radio/radio.c:1188: __data uint8_t len = register_read(EZRADIOPRO_RECEIVED_PACKET_LENGTH);
   104F 75 82 4B      [24] 3938 	mov	dpl,#0x4B
   1052 12r0Br6F      [24] 3939 	lcall	_register_read
                           3940 ;	radio/radio.c:1189: if (len > MAX_PACKET_LENGTH || partial_packet_length > len) {
   1055 E5 82         [12] 3941 	mov	a,dpl
   1057 FF            [12] 3942 	mov	r7,a
   1058 24 03         [12] 3943 	add	a,#0xff - 0xFC
   105A 40 5E         [24] 3944 	jc	00117$
   105C 78r01         [12] 3945 	mov	r0,#_partial_packet_length
   105E C3            [12] 3946 	clr	c
   105F E2            [24] 3947 	movx	a,@r0
   1060 F5 F0         [12] 3948 	mov	b,a
   1062 EF            [12] 3949 	mov	a,r7
   1063 95 F0         [12] 3950 	subb	a,b
   1065 40 53         [24] 3951 	jc	00117$
                           3952 ;	radio/radio.c:1193: if (partial_packet_length < len) {
   1067 78r01         [12] 3953 	mov	r0,#_partial_packet_length
   1069 C3            [12] 3954 	clr	c
   106A E2            [24] 3955 	movx	a,@r0
   106B 9F            [12] 3956 	subb	a,r7
   106C 50 22         [24] 3957 	jnc	00114$
                           3958 ;	radio/radio.c:1194: read_receive_fifo(len-partial_packet_length, &radio_buffer[partial_packet_length]);
   106E 78r01         [12] 3959 	mov	r0,#_partial_packet_length
   1070 E2            [24] 3960 	movx	a,@r0
   1071 24r00         [12] 3961 	add	a,#_radio_buffer
   1073 FD            [12] 3962 	mov	r5,a
   1074 E4            [12] 3963 	clr	a
   1075 34s00         [12] 3964 	addc	a,#(_radio_buffer >> 8)
   1077 FE            [12] 3965 	mov	r6,a
   1078 78r01         [12] 3966 	mov	r0,#_partial_packet_length
   107A D3            [12] 3967 	setb	c
   107B E2            [24] 3968 	movx	a,@r0
   107C 9F            [12] 3969 	subb	a,r7
   107D F4            [12] 3970 	cpl	a
   107E FC            [12] 3971 	mov	r4,a
   107F C0 07         [24] 3972 	push	ar7
   1081 C0 05         [24] 3973 	push	ar5
   1083 C0 06         [24] 3974 	push	ar6
   1085 8C 82         [24] 3975 	mov	dpl,r4
   1087 12r0Br9D      [24] 3976 	lcall	_read_receive_fifo
   108A 15 81         [12] 3977 	dec	sp
   108C 15 81         [12] 3978 	dec	sp
   108E D0 07         [24] 3979 	pop	ar7
   1090                    3980 00114$:
                           3981 ;	radio/radio.c:1196: receive_packet_length = len;
   1090 78r00         [12] 3982 	mov	r0,#_receive_packet_length
   1092 EF            [12] 3983 	mov	a,r7
   1093 F2            [24] 3984 	movx	@r0,a
                           3985 ;	radio/radio.c:1199: packet_received = true;
   1094 D2*00         [12] 3986 	setb	_packet_received
                           3987 ;	radio/radio.c:1202: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, 0);
   1096 E4            [12] 3988 	clr	a
   1097 C0 E0         [24] 3989 	push	acc
   1099 75 82 05      [24] 3990 	mov	dpl,#0x05
   109C 12r0Br3F      [24] 3991 	lcall	_register_write
   109F 15 81         [12] 3992 	dec	sp
                           3993 ;	radio/radio.c:1203: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, 0);
   10A1 E4            [12] 3994 	clr	a
   10A2 C0 E0         [24] 3995 	push	acc
   10A4 75 82 06      [24] 3996 	mov	dpl,#0x06
   10A7 12r0Br3F      [24] 3997 	lcall	_register_write
   10AA 15 81         [12] 3998 	dec	sp
                           3999 ;	radio/radio.c:1206: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_1, EZRADIOPRO_PLLON);
   10AC 74 02         [12] 4000 	mov	a,#0x02
   10AE C0 E0         [24] 4001 	push	acc
   10B0 75 82 07      [24] 4002 	mov	dpl,#0x07
   10B3 12r0Br3F      [24] 4003 	lcall	_register_write
   10B6 15 81         [12] 4004 	dec	sp
   10B8                    4005 00116$:
                           4006 ;	radio/radio.c:1208: return;
                           4007 ;	radio/radio.c:1210: rxfail:
   10B8 80 1E         [24] 4008 	sjmp	00120$
   10BA                    4009 00117$:
                           4010 ;	radio/radio.c:1211: if (errors.rx_errors != 0xFFFF) {
   10BA 78r00         [12] 4011 	mov	r0,#_errors
   10BC E2            [24] 4012 	movx	a,@r0
   10BD FE            [12] 4013 	mov	r6,a
   10BE 08            [12] 4014 	inc	r0
   10BF E2            [24] 4015 	movx	a,@r0
   10C0 FF            [12] 4016 	mov	r7,a
   10C1 BE FF 05      [24] 4017 	cjne	r6,#0xFF,00158$
   10C4 BF FF 02      [24] 4018 	cjne	r7,#0xFF,00158$
   10C7 80 0C         [24] 4019 	sjmp	00119$
   10C9                    4020 00158$:
                           4021 ;	radio/radio.c:1212: errors.rx_errors++;
   10C9 0E            [12] 4022 	inc	r6
   10CA BE 00 01      [24] 4023 	cjne	r6,#0x00,00159$
   10CD 0F            [12] 4024 	inc	r7
   10CE                    4025 00159$:
   10CE 78r00         [12] 4026 	mov	r0,#_errors
   10D0 EE            [12] 4027 	mov	a,r6
   10D1 F2            [24] 4028 	movx	@r0,a
   10D2 08            [12] 4029 	inc	r0
   10D3 EF            [12] 4030 	mov	a,r7
   10D4 F2            [24] 4031 	movx	@r0,a
   10D5                    4032 00119$:
                           4033 ;	radio/radio.c:1214: radio_receiver_on();
   10D5 12r06r70      [24] 4034 	lcall	_radio_receiver_on
   10D8                    4035 00120$:
   10D8 D0 D0         [24] 4036 	pop	psw
   10DA D0 00         [24] 4037 	pop	(0+0)
   10DC D0 01         [24] 4038 	pop	(0+1)
   10DE D0 02         [24] 4039 	pop	(0+2)
   10E0 D0 03         [24] 4040 	pop	(0+3)
   10E2 D0 04         [24] 4041 	pop	(0+4)
   10E4 D0 05         [24] 4042 	pop	(0+5)
   10E6 D0 06         [24] 4043 	pop	(0+6)
   10E8 D0 07         [24] 4044 	pop	(0+7)
   10EA D0 83         [24] 4045 	pop	dph
   10EC D0 82         [24] 4046 	pop	dpl
   10EE D0 F0         [24] 4047 	pop	b
   10F0 D0 E0         [24] 4048 	pop	acc
   10F2 D0*00         [24] 4049 	pop	bits
   10F4 32            [24] 4050 	reti
                           4051 	.area CSEG    (CODE)
                           4052 	.area CONST   (CODE)
   0000                    4053 __str_0:
   0000 6F 76 65 72 73 69  4054 	.ascii "oversized packet"
        7A 65 64 20 70 61
        63 6B 65 74
   0010 00                 4055 	.db 0x00
   0011                    4056 __str_1:
   0011 6F 76 65 72 73 69  4057 	.ascii "oversized golay packet"
        7A 65 64 20 67 6F
        6C 61 79 20 70 61
        63 6B 65 74
   0027 00                 4058 	.db 0x00
   0028                    4059 _reg_index:
   0028 1C                 4060 	.db #0x1C	; 28
   0029 1F                 4061 	.db #0x1F	; 31
   002A 20                 4062 	.db #0x20	; 32
   002B 21                 4063 	.db #0x21	; 33
   002C 22                 4064 	.db #0x22	; 34
   002D 23                 4065 	.db #0x23	; 35
   002E 24                 4066 	.db #0x24	; 36
   002F 25                 4067 	.db #0x25	; 37
   0030 2A                 4068 	.db #0x2A	; 42
   0031 6E                 4069 	.db #0x6E	; 110	'n'
   0032 6F                 4070 	.db #0x6F	; 111	'o'
   0033 72                 4071 	.db #0x72	; 114	'r'
   0034                    4072 _air_data_rates:
   0034 02                 4073 	.db #0x02	; 2
   0035 04                 4074 	.db #0x04	; 4
   0036 08                 4075 	.db #0x08	; 8
   0037 10                 4076 	.db #0x10	; 16
   0038 13                 4077 	.db #0x13	; 19
   0039 18                 4078 	.db #0x18	; 24
   003A 20                 4079 	.db #0x20	; 32
   003B 30                 4080 	.db #0x30	; 48	'0'
   003C 40                 4081 	.db #0x40	; 64
   003D 60                 4082 	.db #0x60	; 96
   003E 80                 4083 	.db #0x80	; 128
   003F C0                 4084 	.db #0xC0	; 192
   0040 FA                 4085 	.db #0xFA	; 250
   0041                    4086 _reg_table_433:
   0041 27                 4087 	.db #0x27	; 39
   0042 27                 4088 	.db #0x27	; 39
   0043 27                 4089 	.db #0x27	; 39
   0044 2E                 4090 	.db #0x2E	; 46
   0045 16                 4091 	.db #0x16	; 22
   0046 01                 4092 	.db #0x01	; 1
   0047 05                 4093 	.db #0x05	; 5
   0048 0B                 4094 	.db #0x0B	; 11
   0049 9A                 4095 	.db #0x9A	; 154
   004A 88                 4096 	.db #0x88	; 136
   004B 8A                 4097 	.db #0x8A	; 138
   004C 8C                 4098 	.db #0x8C	; 140
   004D 8D                 4099 	.db #0x8D	; 141
   004E 03                 4100 	.db #0x03	; 3
   004F 03                 4101 	.db #0x03	; 3
   0050 03                 4102 	.db #0x03	; 3
   0051 03                 4103 	.db #0x03	; 3
   0052 03                 4104 	.db #0x03	; 3
   0053 03                 4105 	.db #0x03	; 3
   0054 03                 4106 	.db #0x03	; 3
   0055 03                 4107 	.db #0x03	; 3
   0056 03                 4108 	.db #0x03	; 3
   0057 03                 4109 	.db #0x03	; 3
   0058 03                 4110 	.db #0x03	; 3
   0059 03                 4111 	.db #0x03	; 3
   005A 03                 4112 	.db #0x03	; 3
   005B F4                 4113 	.db #0xF4	; 244
   005C FA                 4114 	.db #0xFA	; 250
   005D 7D                 4115 	.db #0x7D	; 125
   005E 3F                 4116 	.db #0x3F	; 63
   005F 69                 4117 	.db #0x69	; 105	'i'
   0060 A7                 4118 	.db #0xA7	; 167
   0061 7D                 4119 	.db #0x7D	; 125
   0062 53                 4120 	.db #0x53	; 83	'S'
   0063 5E                 4121 	.db #0x5E	; 94
   0064 7D                 4122 	.db #0x7D	; 125
   0065 5E                 4123 	.db #0x5E	; 94
   0066 3F                 4124 	.db #0x3F	; 63
   0067 30                 4125 	.db #0x30	; 48	'0'
   0068 20                 4126 	.db #0x20	; 32
   0069 00                 4127 	.db #0x00	; 0
   006A 01                 4128 	.db #0x01	; 1
   006B 02                 4129 	.db #0x02	; 2
   006C 01                 4130 	.db #0x01	; 1
   006D 00                 4131 	.db #0x00	; 0
   006E 01                 4132 	.db #0x01	; 1
   006F 01                 4133 	.db #0x01	; 1
   0070 01                 4134 	.db #0x01	; 1
   0071 01                 4135 	.db #0x01	; 1
   0072 01                 4136 	.db #0x01	; 1
   0073 02                 4137 	.db #0x02	; 2
   0074 02                 4138 	.db #0x02	; 2
   0075 41                 4139 	.db #0x41	; 65	'A'
   0076 83                 4140 	.db #0x83	; 131
   0077 06                 4141 	.db #0x06	; 6
   0078 0C                 4142 	.db #0x0C	; 12
   0079 37                 4143 	.db #0x37	; 55	'7'
   007A C4                 4144 	.db #0xC4	; 196
   007B 06                 4145 	.db #0x06	; 6
   007C 89                 4146 	.db #0x89	; 137
   007D 5D                 4147 	.db #0x5D	; 93
   007E 06                 4148 	.db #0x06	; 6
   007F 5D                 4149 	.db #0x5D	; 93
   0080 0C                 4150 	.db #0x0C	; 12
   0081 AA                 4151 	.db #0xAA	; 170
   0082 89                 4152 	.db #0x89	; 137
   0083 12                 4153 	.db #0x12	; 18
   0084 25                 4154 	.db #0x25	; 37
   0085 4A                 4155 	.db #0x4A	; 74	'J'
   0086 4C                 4156 	.db #0x4C	; 76	'L'
   0087 9C                 4157 	.db #0x9C	; 156
   0088 25                 4158 	.db #0x25	; 37
   0089 37                 4159 	.db #0x37	; 55	'7'
   008A 86                 4160 	.db #0x86	; 134
   008B 25                 4161 	.db #0x25	; 37
   008C 86                 4162 	.db #0x86	; 134
   008D 4A                 4163 	.db #0x4A	; 74	'J'
   008E AB                 4164 	.db #0xAB	; 171
   008F 00                 4165 	.db #0x00	; 0
   0090 01                 4166 	.db #0x01	; 1
   0091 02                 4167 	.db #0x02	; 2
   0092 04                 4168 	.db #0x04	; 4
   0093 02                 4169 	.db #0x02	; 2
   0094 01                 4170 	.db #0x01	; 1
   0095 02                 4171 	.db #0x02	; 2
   0096 03                 4172 	.db #0x03	; 3
   0097 02                 4173 	.db #0x02	; 2
   0098 02                 4174 	.db #0x02	; 2
   0099 02                 4175 	.db #0x02	; 2
   009A 04                 4176 	.db #0x04	; 4
   009B 07                 4177 	.db #0x07	; 7
   009C 85                 4178 	.db #0x85	; 133
   009D 08                 4179 	.db #0x08	; 8
   009E 0E                 4180 	.db #0x0E	; 14
   009F 12                 4181 	.db #0x12	; 18
   00A0 72                 4182 	.db #0x72	; 114	'r'
   00A1 8A                 4183 	.db #0x8A	; 138
   00A2 0E                 4184 	.db #0x0E	; 14
   00A3 18                 4185 	.db #0x18	; 24
   00A4 BB                 4186 	.db #0xBB	; 187
   00A5 0E                 4187 	.db #0x0E	; 14
   00A6 BB                 4188 	.db #0xBB	; 187
   00A7 EA                 4189 	.db #0xEA	; 234
   00A8 FF                 4190 	.db #0xFF	; 255
   00A9 1D                 4191 	.db #0x1D	; 29
   00AA 1D                 4192 	.db #0x1D	; 29
   00AB 1D                 4193 	.db #0x1D	; 29
   00AC 1E                 4194 	.db #0x1E	; 30
   00AD 1E                 4195 	.db #0x1E	; 30
   00AE 1E                 4196 	.db #0x1E	; 30
   00AF 20                 4197 	.db #0x20	; 32
   00B0 30                 4198 	.db #0x30	; 48	'0'
   00B1 41                 4199 	.db #0x41	; 65	'A'
   00B2 50                 4200 	.db #0x50	; 80	'P'
   00B3 50                 4201 	.db #0x50	; 80	'P'
   00B4 50                 4202 	.db #0x50	; 80	'P'
   00B5 50                 4203 	.db #0x50	; 80	'P'
   00B6 10                 4204 	.db #0x10	; 16
   00B7 20                 4205 	.db #0x20	; 32
   00B8 41                 4206 	.db #0x41	; 65	'A'
   00B9 83                 4207 	.db #0x83	; 131
   00BA 9B                 4208 	.db #0x9B	; 155
   00BB C4                 4209 	.db #0xC4	; 196
   00BC 08                 4210 	.db #0x08	; 8
   00BD 0C                 4211 	.db #0x0C	; 12
   00BE 10                 4212 	.db #0x10	; 16
   00BF 18                 4213 	.db #0x18	; 24
   00C0 20                 4214 	.db #0x20	; 32
   00C1 31                 4215 	.db #0x31	; 49	'1'
   00C2 40                 4216 	.db #0x40	; 64
   00C3 62                 4217 	.db #0x62	; 98	'b'
   00C4 C5                 4218 	.db #0xC5	; 197
   00C5 89                 4219 	.db #0x89	; 137
   00C6 12                 4220 	.db #0x12	; 18
   00C7 A6                 4221 	.db #0xA6	; 166
   00C8 9C                 4222 	.db #0x9C	; 156
   00C9 31                 4223 	.db #0x31	; 49	'1'
   00CA 4A                 4224 	.db #0x4A	; 74	'J'
   00CB 62                 4225 	.db #0x62	; 98	'b'
   00CC 93                 4226 	.db #0x93	; 147
   00CD C5                 4227 	.db #0xC5	; 197
   00CE 27                 4228 	.db #0x27	; 39
   00CF 00                 4229 	.db #0x00	; 0
   00D0 03                 4230 	.db #0x03	; 3
   00D1 06                 4231 	.db #0x06	; 6
   00D2 0D                 4232 	.db #0x0D	; 13
   00D3 1A                 4233 	.db #0x1A	; 26
   00D4 1E                 4234 	.db #0x1E	; 30
   00D5 26                 4235 	.db #0x26	; 38
   00D6 33                 4236 	.db #0x33	; 51	'3'
   00D7 4D                 4237 	.db #0x4D	; 77	'M'
   00D8 66                 4238 	.db #0x66	; 102	'f'
   00D9 9A                 4239 	.db #0x9A	; 154
   00DA CD                 4240 	.db #0xCD	; 205
   00DB FE                 4241 	.db #0xFE	; 254
   00DC FE                 4242 	.db #0xFE	; 254
   00DD                    4243 _reg_table_470:
   00DD 2B                 4244 	.db #0x2B	; 43
   00DE 2B                 4245 	.db #0x2B	; 43
   00DF 2B                 4246 	.db #0x2B	; 43
   00E0 2E                 4247 	.db #0x2E	; 46
   00E1 16                 4248 	.db #0x16	; 22
   00E2 01                 4249 	.db #0x01	; 1
   00E3 05                 4250 	.db #0x05	; 5
   00E4 0B                 4251 	.db #0x0B	; 11
   00E5 9A                 4252 	.db #0x9A	; 154
   00E6 88                 4253 	.db #0x88	; 136
   00E7 8A                 4254 	.db #0x8A	; 138
   00E8 8C                 4255 	.db #0x8C	; 140
   00E9 8D                 4256 	.db #0x8D	; 141
   00EA 03                 4257 	.db #0x03	; 3
   00EB 03                 4258 	.db #0x03	; 3
   00EC 03                 4259 	.db #0x03	; 3
   00ED 03                 4260 	.db #0x03	; 3
   00EE 03                 4261 	.db #0x03	; 3
   00EF 03                 4262 	.db #0x03	; 3
   00F0 03                 4263 	.db #0x03	; 3
   00F1 03                 4264 	.db #0x03	; 3
   00F2 03                 4265 	.db #0x03	; 3
   00F3 03                 4266 	.db #0x03	; 3
   00F4 03                 4267 	.db #0x03	; 3
   00F5 03                 4268 	.db #0x03	; 3
   00F6 03                 4269 	.db #0x03	; 3
   00F7 F4                 4270 	.db #0xF4	; 244
   00F8 FA                 4271 	.db #0xFA	; 250
   00F9 7D                 4272 	.db #0x7D	; 125
   00FA 3F                 4273 	.db #0x3F	; 63
   00FB 69                 4274 	.db #0x69	; 105	'i'
   00FC A7                 4275 	.db #0xA7	; 167
   00FD 7D                 4276 	.db #0x7D	; 125
   00FE 53                 4277 	.db #0x53	; 83	'S'
   00FF 5E                 4278 	.db #0x5E	; 94
   0100 7D                 4279 	.db #0x7D	; 125
   0101 5E                 4280 	.db #0x5E	; 94
   0102 3F                 4281 	.db #0x3F	; 63
   0103 30                 4282 	.db #0x30	; 48	'0'
   0104 20                 4283 	.db #0x20	; 32
   0105 00                 4284 	.db #0x00	; 0
   0106 01                 4285 	.db #0x01	; 1
   0107 02                 4286 	.db #0x02	; 2
   0108 01                 4287 	.db #0x01	; 1
   0109 00                 4288 	.db #0x00	; 0
   010A 01                 4289 	.db #0x01	; 1
   010B 01                 4290 	.db #0x01	; 1
   010C 01                 4291 	.db #0x01	; 1
   010D 01                 4292 	.db #0x01	; 1
   010E 01                 4293 	.db #0x01	; 1
   010F 02                 4294 	.db #0x02	; 2
   0110 02                 4295 	.db #0x02	; 2
   0111 41                 4296 	.db #0x41	; 65	'A'
   0112 83                 4297 	.db #0x83	; 131
   0113 06                 4298 	.db #0x06	; 6
   0114 0C                 4299 	.db #0x0C	; 12
   0115 37                 4300 	.db #0x37	; 55	'7'
   0116 C4                 4301 	.db #0xC4	; 196
   0117 06                 4302 	.db #0x06	; 6
   0118 89                 4303 	.db #0x89	; 137
   0119 5D                 4304 	.db #0x5D	; 93
   011A 06                 4305 	.db #0x06	; 6
   011B 5D                 4306 	.db #0x5D	; 93
   011C 0C                 4307 	.db #0x0C	; 12
   011D AA                 4308 	.db #0xAA	; 170
   011E 89                 4309 	.db #0x89	; 137
   011F 12                 4310 	.db #0x12	; 18
   0120 25                 4311 	.db #0x25	; 37
   0121 4A                 4312 	.db #0x4A	; 74	'J'
   0122 4C                 4313 	.db #0x4C	; 76	'L'
   0123 9C                 4314 	.db #0x9C	; 156
   0124 25                 4315 	.db #0x25	; 37
   0125 37                 4316 	.db #0x37	; 55	'7'
   0126 86                 4317 	.db #0x86	; 134
   0127 25                 4318 	.db #0x25	; 37
   0128 86                 4319 	.db #0x86	; 134
   0129 4A                 4320 	.db #0x4A	; 74	'J'
   012A AB                 4321 	.db #0xAB	; 171
   012B 00                 4322 	.db #0x00	; 0
   012C 01                 4323 	.db #0x01	; 1
   012D 02                 4324 	.db #0x02	; 2
   012E 04                 4325 	.db #0x04	; 4
   012F 02                 4326 	.db #0x02	; 2
   0130 01                 4327 	.db #0x01	; 1
   0131 02                 4328 	.db #0x02	; 2
   0132 03                 4329 	.db #0x03	; 3
   0133 02                 4330 	.db #0x02	; 2
   0134 02                 4331 	.db #0x02	; 2
   0135 02                 4332 	.db #0x02	; 2
   0136 04                 4333 	.db #0x04	; 4
   0137 07                 4334 	.db #0x07	; 7
   0138 85                 4335 	.db #0x85	; 133
   0139 08                 4336 	.db #0x08	; 8
   013A 0E                 4337 	.db #0x0E	; 14
   013B 12                 4338 	.db #0x12	; 18
   013C 72                 4339 	.db #0x72	; 114	'r'
   013D 8A                 4340 	.db #0x8A	; 138
   013E 0E                 4341 	.db #0x0E	; 14
   013F 18                 4342 	.db #0x18	; 24
   0140 BB                 4343 	.db #0xBB	; 187
   0141 0E                 4344 	.db #0x0E	; 14
   0142 BB                 4345 	.db #0xBB	; 187
   0143 EA                 4346 	.db #0xEA	; 234
   0144 FF                 4347 	.db #0xFF	; 255
   0145 1E                 4348 	.db #0x1E	; 30
   0146 1E                 4349 	.db #0x1E	; 30
   0147 1E                 4350 	.db #0x1E	; 30
   0148 21                 4351 	.db #0x21	; 33
   0149 21                 4352 	.db #0x21	; 33
   014A 21                 4353 	.db #0x21	; 33
   014B 21                 4354 	.db #0x21	; 33
   014C 30                 4355 	.db #0x30	; 48	'0'
   014D 41                 4356 	.db #0x41	; 65	'A'
   014E 50                 4357 	.db #0x50	; 80	'P'
   014F 50                 4358 	.db #0x50	; 80	'P'
   0150 50                 4359 	.db #0x50	; 80	'P'
   0151 50                 4360 	.db #0x50	; 80	'P'
   0152 10                 4361 	.db #0x10	; 16
   0153 20                 4362 	.db #0x20	; 32
   0154 41                 4363 	.db #0x41	; 65	'A'
   0155 83                 4364 	.db #0x83	; 131
   0156 9B                 4365 	.db #0x9B	; 155
   0157 C4                 4366 	.db #0xC4	; 196
   0158 08                 4367 	.db #0x08	; 8
   0159 0C                 4368 	.db #0x0C	; 12
   015A 10                 4369 	.db #0x10	; 16
   015B 18                 4370 	.db #0x18	; 24
   015C 20                 4371 	.db #0x20	; 32
   015D 31                 4372 	.db #0x31	; 49	'1'
   015E 40                 4373 	.db #0x40	; 64
   015F 62                 4374 	.db #0x62	; 98	'b'
   0160 C5                 4375 	.db #0xC5	; 197
   0161 89                 4376 	.db #0x89	; 137
   0162 12                 4377 	.db #0x12	; 18
   0163 A6                 4378 	.db #0xA6	; 166
   0164 9C                 4379 	.db #0x9C	; 156
   0165 31                 4380 	.db #0x31	; 49	'1'
   0166 4A                 4381 	.db #0x4A	; 74	'J'
   0167 62                 4382 	.db #0x62	; 98	'b'
   0168 93                 4383 	.db #0x93	; 147
   0169 C5                 4384 	.db #0xC5	; 197
   016A 27                 4385 	.db #0x27	; 39
   016B 00                 4386 	.db #0x00	; 0
   016C 03                 4387 	.db #0x03	; 3
   016D 06                 4388 	.db #0x06	; 6
   016E 0D                 4389 	.db #0x0D	; 13
   016F 1A                 4390 	.db #0x1A	; 26
   0170 1E                 4391 	.db #0x1E	; 30
   0171 26                 4392 	.db #0x26	; 38
   0172 33                 4393 	.db #0x33	; 51	'3'
   0173 4D                 4394 	.db #0x4D	; 77	'M'
   0174 66                 4395 	.db #0x66	; 102	'f'
   0175 9A                 4396 	.db #0x9A	; 154
   0176 CD                 4397 	.db #0xCD	; 205
   0177 FE                 4398 	.db #0xFE	; 254
   0178 FE                 4399 	.db #0xFE	; 254
   0179                    4400 _reg_table_868:
   0179 01                 4401 	.db #0x01	; 1
   017A 01                 4402 	.db #0x01	; 1
   017B 01                 4403 	.db #0x01	; 1
   017C 01                 4404 	.db #0x01	; 1
   017D 01                 4405 	.db #0x01	; 1
   017E 01                 4406 	.db #0x01	; 1
   017F 05                 4407 	.db #0x05	; 5
   0180 0B                 4408 	.db #0x0B	; 11
   0181 9A                 4409 	.db #0x9A	; 154
   0182 88                 4410 	.db #0x88	; 136
   0183 8A                 4411 	.db #0x8A	; 138
   0184 8C                 4412 	.db #0x8C	; 140
   0185 8D                 4413 	.db #0x8D	; 141
   0186 03                 4414 	.db #0x03	; 3
   0187 03                 4415 	.db #0x03	; 3
   0188 03                 4416 	.db #0x03	; 3
   0189 03                 4417 	.db #0x03	; 3
   018A 03                 4418 	.db #0x03	; 3
   018B 03                 4419 	.db #0x03	; 3
   018C 03                 4420 	.db #0x03	; 3
   018D 03                 4421 	.db #0x03	; 3
   018E 03                 4422 	.db #0x03	; 3
   018F 03                 4423 	.db #0x03	; 3
   0190 03                 4424 	.db #0x03	; 3
   0191 03                 4425 	.db #0x03	; 3
   0192 03                 4426 	.db #0x03	; 3
   0193 D0                 4427 	.db #0xD0	; 208
   0194 E8                 4428 	.db #0xE8	; 232
   0195 F4                 4429 	.db #0xF4	; 244
   0196 FA                 4430 	.db #0xFA	; 250
   0197 D3                 4431 	.db #0xD3	; 211
   0198 A7                 4432 	.db #0xA7	; 167
   0199 7D                 4433 	.db #0x7D	; 125
   019A 53                 4434 	.db #0x53	; 83	'S'
   019B 5E                 4435 	.db #0x5E	; 94
   019C 7D                 4436 	.db #0x7D	; 125
   019D 5E                 4437 	.db #0x5E	; 94
   019E 3F                 4438 	.db #0x3F	; 63
   019F 30                 4439 	.db #0x30	; 48	'0'
   01A0 E0                 4440 	.db #0xE0	; 224
   01A1 60                 4441 	.db #0x60	; 96
   01A2 20                 4442 	.db #0x20	; 32
   01A3 00                 4443 	.db #0x00	; 0
   01A4 00                 4444 	.db #0x00	; 0
   01A5 00                 4445 	.db #0x00	; 0
   01A6 01                 4446 	.db #0x01	; 1
   01A7 01                 4447 	.db #0x01	; 1
   01A8 01                 4448 	.db #0x01	; 1
   01A9 01                 4449 	.db #0x01	; 1
   01AA 01                 4450 	.db #0x01	; 1
   01AB 02                 4451 	.db #0x02	; 2
   01AC 02                 4452 	.db #0x02	; 2
   01AD 10                 4453 	.db #0x10	; 16
   01AE 20                 4454 	.db #0x20	; 32
   01AF 41                 4455 	.db #0x41	; 65	'A'
   01B0 83                 4456 	.db #0x83	; 131
   01B1 9B                 4457 	.db #0x9B	; 155
   01B2 C4                 4458 	.db #0xC4	; 196
   01B3 06                 4459 	.db #0x06	; 6
   01B4 89                 4460 	.db #0x89	; 137
   01B5 5D                 4461 	.db #0x5D	; 93
   01B6 06                 4462 	.db #0x06	; 6
   01B7 5D                 4463 	.db #0x5D	; 93
   01B8 0C                 4464 	.db #0x0C	; 12
   01B9 AA                 4465 	.db #0xAA	; 170
   01BA 62                 4466 	.db #0x62	; 98	'b'
   01BB C5                 4467 	.db #0xC5	; 197
   01BC 89                 4468 	.db #0x89	; 137
   01BD 12                 4469 	.db #0x12	; 18
   01BE A6                 4470 	.db #0xA6	; 166
   01BF 9C                 4471 	.db #0x9C	; 156
   01C0 25                 4472 	.db #0x25	; 37
   01C1 37                 4473 	.db #0x37	; 55	'7'
   01C2 86                 4474 	.db #0x86	; 134
   01C3 25                 4475 	.db #0x25	; 37
   01C4 86                 4476 	.db #0x86	; 134
   01C5 4A                 4477 	.db #0x4A	; 74	'J'
   01C6 AB                 4478 	.db #0xAB	; 171
   01C7 00                 4479 	.db #0x00	; 0
   01C8 00                 4480 	.db #0x00	; 0
   01C9 00                 4481 	.db #0x00	; 0
   01CA 01                 4482 	.db #0x01	; 1
   01CB 01                 4483 	.db #0x01	; 1
   01CC 01                 4484 	.db #0x01	; 1
   01CD 02                 4485 	.db #0x02	; 2
   01CE 03                 4486 	.db #0x03	; 3
   01CF 02                 4487 	.db #0x02	; 2
   01D0 02                 4488 	.db #0x02	; 2
   01D1 02                 4489 	.db #0x02	; 2
   01D2 04                 4490 	.db #0x04	; 4
   01D3 07                 4491 	.db #0x07	; 7
   01D4 23                 4492 	.db #0x23	; 35
   01D5 44                 4493 	.db #0x44	; 68	'D'
   01D6 85                 4494 	.db #0x85	; 133
   01D7 08                 4495 	.db #0x08	; 8
   01D8 39                 4496 	.db #0x39	; 57	'9'
   01D9 8A                 4497 	.db #0x8A	; 138
   01DA 0E                 4498 	.db #0x0E	; 14
   01DB 18                 4499 	.db #0x18	; 24
   01DC BB                 4500 	.db #0xBB	; 187
   01DD 0E                 4501 	.db #0x0E	; 14
   01DE BB                 4502 	.db #0xBB	; 187
   01DF EA                 4503 	.db #0xEA	; 234
   01E0 FF                 4504 	.db #0xFF	; 255
   01E1 1C                 4505 	.db #0x1C	; 28
   01E2 1C                 4506 	.db #0x1C	; 28
   01E3 1C                 4507 	.db #0x1C	; 28
   01E4 1C                 4508 	.db #0x1C	; 28
   01E5 1C                 4509 	.db #0x1C	; 28
   01E6 1E                 4510 	.db #0x1E	; 30
   01E7 20                 4511 	.db #0x20	; 32
   01E8 30                 4512 	.db #0x30	; 48	'0'
   01E9 41                 4513 	.db #0x41	; 65	'A'
   01EA 50                 4514 	.db #0x50	; 80	'P'
   01EB 50                 4515 	.db #0x50	; 80	'P'
   01EC 50                 4516 	.db #0x50	; 80	'P'
   01ED 50                 4517 	.db #0x50	; 80	'P'
   01EE 10                 4518 	.db #0x10	; 16
   01EF 20                 4519 	.db #0x20	; 32
   01F0 41                 4520 	.db #0x41	; 65	'A'
   01F1 83                 4521 	.db #0x83	; 131
   01F2 9B                 4522 	.db #0x9B	; 155
   01F3 C4                 4523 	.db #0xC4	; 196
   01F4 08                 4524 	.db #0x08	; 8
   01F5 0C                 4525 	.db #0x0C	; 12
   01F6 10                 4526 	.db #0x10	; 16
   01F7 18                 4527 	.db #0x18	; 24
   01F8 20                 4528 	.db #0x20	; 32
   01F9 31                 4529 	.db #0x31	; 49	'1'
   01FA 40                 4530 	.db #0x40	; 64
   01FB 62                 4531 	.db #0x62	; 98	'b'
   01FC C5                 4532 	.db #0xC5	; 197
   01FD 89                 4533 	.db #0x89	; 137
   01FE 12                 4534 	.db #0x12	; 18
   01FF A6                 4535 	.db #0xA6	; 166
   0200 9C                 4536 	.db #0x9C	; 156
   0201 31                 4537 	.db #0x31	; 49	'1'
   0202 4A                 4538 	.db #0x4A	; 74	'J'
   0203 62                 4539 	.db #0x62	; 98	'b'
   0204 93                 4540 	.db #0x93	; 147
   0205 C5                 4541 	.db #0xC5	; 197
   0206 27                 4542 	.db #0x27	; 39
   0207 00                 4543 	.db #0x00	; 0
   0208 03                 4544 	.db #0x03	; 3
   0209 06                 4545 	.db #0x06	; 6
   020A 0D                 4546 	.db #0x0D	; 13
   020B 1A                 4547 	.db #0x1A	; 26
   020C 1E                 4548 	.db #0x1E	; 30
   020D 26                 4549 	.db #0x26	; 38
   020E 33                 4550 	.db #0x33	; 51	'3'
   020F 4D                 4551 	.db #0x4D	; 77	'M'
   0210 66                 4552 	.db #0x66	; 102	'f'
   0211 9A                 4553 	.db #0x9A	; 154
   0212 CD                 4554 	.db #0xCD	; 205
   0213 FE                 4555 	.db #0xFE	; 254
   0214 FE                 4556 	.db #0xFE	; 254
   0215                    4557 _reg_table_915:
   0215 01                 4558 	.db #0x01	; 1
   0216 01                 4559 	.db #0x01	; 1
   0217 01                 4560 	.db #0x01	; 1
   0218 01                 4561 	.db #0x01	; 1
   0219 01                 4562 	.db #0x01	; 1
   021A 01                 4563 	.db #0x01	; 1
   021B 05                 4564 	.db #0x05	; 5
   021C 0B                 4565 	.db #0x0B	; 11
   021D 9A                 4566 	.db #0x9A	; 154
   021E 88                 4567 	.db #0x88	; 136
   021F 8A                 4568 	.db #0x8A	; 138
   0220 8C                 4569 	.db #0x8C	; 140
   0221 8D                 4570 	.db #0x8D	; 141
   0222 03                 4571 	.db #0x03	; 3
   0223 03                 4572 	.db #0x03	; 3
   0224 03                 4573 	.db #0x03	; 3
   0225 03                 4574 	.db #0x03	; 3
   0226 03                 4575 	.db #0x03	; 3
   0227 03                 4576 	.db #0x03	; 3
   0228 03                 4577 	.db #0x03	; 3
   0229 03                 4578 	.db #0x03	; 3
   022A 03                 4579 	.db #0x03	; 3
   022B 03                 4580 	.db #0x03	; 3
   022C 03                 4581 	.db #0x03	; 3
   022D 03                 4582 	.db #0x03	; 3
   022E 03                 4583 	.db #0x03	; 3
   022F D0                 4584 	.db #0xD0	; 208
   0230 E8                 4585 	.db #0xE8	; 232
   0231 F4                 4586 	.db #0xF4	; 244
   0232 FA                 4587 	.db #0xFA	; 250
   0233 D3                 4588 	.db #0xD3	; 211
   0234 A7                 4589 	.db #0xA7	; 167
   0235 7D                 4590 	.db #0x7D	; 125
   0236 53                 4591 	.db #0x53	; 83	'S'
   0237 5E                 4592 	.db #0x5E	; 94
   0238 7D                 4593 	.db #0x7D	; 125
   0239 5E                 4594 	.db #0x5E	; 94
   023A 3F                 4595 	.db #0x3F	; 63
   023B 30                 4596 	.db #0x30	; 48	'0'
   023C E0                 4597 	.db #0xE0	; 224
   023D 60                 4598 	.db #0x60	; 96
   023E 20                 4599 	.db #0x20	; 32
   023F 00                 4600 	.db #0x00	; 0
   0240 00                 4601 	.db #0x00	; 0
   0241 00                 4602 	.db #0x00	; 0
   0242 01                 4603 	.db #0x01	; 1
   0243 01                 4604 	.db #0x01	; 1
   0244 01                 4605 	.db #0x01	; 1
   0245 01                 4606 	.db #0x01	; 1
   0246 01                 4607 	.db #0x01	; 1
   0247 02                 4608 	.db #0x02	; 2
   0248 02                 4609 	.db #0x02	; 2
   0249 10                 4610 	.db #0x10	; 16
   024A 20                 4611 	.db #0x20	; 32
   024B 41                 4612 	.db #0x41	; 65	'A'
   024C 83                 4613 	.db #0x83	; 131
   024D 9B                 4614 	.db #0x9B	; 155
   024E C4                 4615 	.db #0xC4	; 196
   024F 06                 4616 	.db #0x06	; 6
   0250 89                 4617 	.db #0x89	; 137
   0251 5D                 4618 	.db #0x5D	; 93
   0252 06                 4619 	.db #0x06	; 6
   0253 5D                 4620 	.db #0x5D	; 93
   0254 0C                 4621 	.db #0x0C	; 12
   0255 AA                 4622 	.db #0xAA	; 170
   0256 62                 4623 	.db #0x62	; 98	'b'
   0257 C5                 4624 	.db #0xC5	; 197
   0258 89                 4625 	.db #0x89	; 137
   0259 12                 4626 	.db #0x12	; 18
   025A A6                 4627 	.db #0xA6	; 166
   025B 9C                 4628 	.db #0x9C	; 156
   025C 25                 4629 	.db #0x25	; 37
   025D 37                 4630 	.db #0x37	; 55	'7'
   025E 86                 4631 	.db #0x86	; 134
   025F 25                 4632 	.db #0x25	; 37
   0260 86                 4633 	.db #0x86	; 134
   0261 4A                 4634 	.db #0x4A	; 74	'J'
   0262 AB                 4635 	.db #0xAB	; 171
   0263 00                 4636 	.db #0x00	; 0
   0264 00                 4637 	.db #0x00	; 0
   0265 00                 4638 	.db #0x00	; 0
   0266 01                 4639 	.db #0x01	; 1
   0267 01                 4640 	.db #0x01	; 1
   0268 01                 4641 	.db #0x01	; 1
   0269 02                 4642 	.db #0x02	; 2
   026A 03                 4643 	.db #0x03	; 3
   026B 02                 4644 	.db #0x02	; 2
   026C 02                 4645 	.db #0x02	; 2
   026D 02                 4646 	.db #0x02	; 2
   026E 04                 4647 	.db #0x04	; 4
   026F 07                 4648 	.db #0x07	; 7
   0270 23                 4649 	.db #0x23	; 35
   0271 44                 4650 	.db #0x44	; 68	'D'
   0272 85                 4651 	.db #0x85	; 133
   0273 08                 4652 	.db #0x08	; 8
   0274 39                 4653 	.db #0x39	; 57	'9'
   0275 8A                 4654 	.db #0x8A	; 138
   0276 0E                 4655 	.db #0x0E	; 14
   0277 18                 4656 	.db #0x18	; 24
   0278 BB                 4657 	.db #0xBB	; 187
   0279 0E                 4658 	.db #0x0E	; 14
   027A BB                 4659 	.db #0xBB	; 187
   027B EA                 4660 	.db #0xEA	; 234
   027C FF                 4661 	.db #0xFF	; 255
   027D 1E                 4662 	.db #0x1E	; 30
   027E 1E                 4663 	.db #0x1E	; 30
   027F 1E                 4664 	.db #0x1E	; 30
   0280 1E                 4665 	.db #0x1E	; 30
   0281 1E                 4666 	.db #0x1E	; 30
   0282 1E                 4667 	.db #0x1E	; 30
   0283 20                 4668 	.db #0x20	; 32
   0284 30                 4669 	.db #0x30	; 48	'0'
   0285 41                 4670 	.db #0x41	; 65	'A'
   0286 50                 4671 	.db #0x50	; 80	'P'
   0287 50                 4672 	.db #0x50	; 80	'P'
   0288 50                 4673 	.db #0x50	; 80	'P'
   0289 50                 4674 	.db #0x50	; 80	'P'
   028A 10                 4675 	.db #0x10	; 16
   028B 20                 4676 	.db #0x20	; 32
   028C 41                 4677 	.db #0x41	; 65	'A'
   028D 83                 4678 	.db #0x83	; 131
   028E 9B                 4679 	.db #0x9B	; 155
   028F C4                 4680 	.db #0xC4	; 196
   0290 08                 4681 	.db #0x08	; 8
   0291 0C                 4682 	.db #0x0C	; 12
   0292 10                 4683 	.db #0x10	; 16
   0293 18                 4684 	.db #0x18	; 24
   0294 20                 4685 	.db #0x20	; 32
   0295 31                 4686 	.db #0x31	; 49	'1'
   0296 40                 4687 	.db #0x40	; 64
   0297 62                 4688 	.db #0x62	; 98	'b'
   0298 C5                 4689 	.db #0xC5	; 197
   0299 89                 4690 	.db #0x89	; 137
   029A 12                 4691 	.db #0x12	; 18
   029B A6                 4692 	.db #0xA6	; 166
   029C 9C                 4693 	.db #0x9C	; 156
   029D 31                 4694 	.db #0x31	; 49	'1'
   029E 4A                 4695 	.db #0x4A	; 74	'J'
   029F 62                 4696 	.db #0x62	; 98	'b'
   02A0 93                 4697 	.db #0x93	; 147
   02A1 C5                 4698 	.db #0xC5	; 197
   02A2 27                 4699 	.db #0x27	; 39
   02A3 00                 4700 	.db #0x00	; 0
   02A4 03                 4701 	.db #0x03	; 3
   02A5 06                 4702 	.db #0x06	; 6
   02A6 0D                 4703 	.db #0x0D	; 13
   02A7 1A                 4704 	.db #0x1A	; 26
   02A8 1E                 4705 	.db #0x1E	; 30
   02A9 26                 4706 	.db #0x26	; 38
   02AA 33                 4707 	.db #0x33	; 51	'3'
   02AB 4D                 4708 	.db #0x4D	; 77	'M'
   02AC 66                 4709 	.db #0x66	; 102	'f'
   02AD 9A                 4710 	.db #0x9A	; 154
   02AE CD                 4711 	.db #0xCD	; 205
   02AF FE                 4712 	.db #0xFE	; 254
   02B0 FE                 4713 	.db #0xFE	; 254
   02B1                    4714 _power_levels:
   02B1 01                 4715 	.db #0x01	; 1
   02B2 02                 4716 	.db #0x02	; 2
   02B3 05                 4717 	.db #0x05	; 5
   02B4 08                 4718 	.db #0x08	; 8
   02B5 0B                 4719 	.db #0x0B	; 11
   02B6 0E                 4720 	.db #0x0E	; 14
   02B7 11                 4721 	.db #0x11	; 17
   02B8 14                 4722 	.db #0x14	; 20
                           4723 	.area XINIT   (CODE)
                           4724 	.area CABS    (ABS,CODE)
