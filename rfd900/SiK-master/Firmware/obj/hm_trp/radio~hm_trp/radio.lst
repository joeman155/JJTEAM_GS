                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.3.0 #8604 (May 11 2013) (Linux)
                              4 ; This file was generated Sun Nov 24 17:43:04 2013
                              5 ;--------------------------------------------------------
                              6 	.module radio
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _Receiver_ISR
                             13 	.globl _crc16
                             14 	.globl _golay_decode
                             15 	.globl _golay_encode
                             16 	.globl _delay_msec
                             17 	.globl _delay_expired
                             18 	.globl _delay_set
                             19 	.globl _timer2_tick
                             20 	.globl _panic
                             21 	.globl _param_get
                             22 	.globl _memcpy
                             23 	.globl _SDN
                             24 	.globl _NSS1
                             25 	.globl _IRQ
                             26 	.globl _PIN_ENABLE
                             27 	.globl _PIN_CONFIG
                             28 	.globl _LED_GREEN
                             29 	.globl _LED_RED
                             30 	.globl _SPI0EN
                             31 	.globl _TXBMT0
                             32 	.globl _NSS0MD0
                             33 	.globl _NSS0MD1
                             34 	.globl _RXOVRN0
                             35 	.globl _MODF0
                             36 	.globl _WCOL0
                             37 	.globl _SPIF0
                             38 	.globl _AD0CM0
                             39 	.globl _AD0CM1
                             40 	.globl _AD0CM2
                             41 	.globl _AD0WINT
                             42 	.globl _AD0BUSY
                             43 	.globl _AD0INT
                             44 	.globl _BURSTEN
                             45 	.globl _AD0EN
                             46 	.globl _CCF0
                             47 	.globl _CCF1
                             48 	.globl _CCF2
                             49 	.globl _CCF3
                             50 	.globl _CCF4
                             51 	.globl _CCF5
                             52 	.globl _CR
                             53 	.globl _CF
                             54 	.globl _P
                             55 	.globl _F1
                             56 	.globl _OV
                             57 	.globl _RS0
                             58 	.globl _RS1
                             59 	.globl _F0
                             60 	.globl _AC
                             61 	.globl _CY
                             62 	.globl _T2XCLK
                             63 	.globl _T2RCLK
                             64 	.globl _TR2
                             65 	.globl _T2SPLIT
                             66 	.globl _TF2CEN
                             67 	.globl _TF2LEN
                             68 	.globl _TF2L
                             69 	.globl _TF2H
                             70 	.globl _SI
                             71 	.globl _ACK
                             72 	.globl _ARBLOST
                             73 	.globl _ACKRQ
                             74 	.globl _STO
                             75 	.globl _STA
                             76 	.globl _TXMODE
                             77 	.globl _MASTER
                             78 	.globl _PX0
                             79 	.globl _PT0
                             80 	.globl _PX1
                             81 	.globl _PT1
                             82 	.globl _PS0
                             83 	.globl _PT2
                             84 	.globl _PSPI0
                             85 	.globl _SPI1EN
                             86 	.globl _TXBMT1
                             87 	.globl _NSS1MD0
                             88 	.globl _NSS1MD1
                             89 	.globl _RXOVRN1
                             90 	.globl _MODF1
                             91 	.globl _WCOL1
                             92 	.globl _SPIF1
                             93 	.globl _EX0
                             94 	.globl _ET0
                             95 	.globl _EX1
                             96 	.globl _ET1
                             97 	.globl _ES0
                             98 	.globl _ET2
                             99 	.globl _ESPI0
                            100 	.globl _EA
                            101 	.globl _RI0
                            102 	.globl _TI0
                            103 	.globl _RB80
                            104 	.globl _TB80
                            105 	.globl _REN0
                            106 	.globl _MCE0
                            107 	.globl _S0MODE
                            108 	.globl _CRC0VAL
                            109 	.globl _CRC0INIT
                            110 	.globl _CRC0SEL
                            111 	.globl _IT0
                            112 	.globl _IE0
                            113 	.globl _IT1
                            114 	.globl _IE1
                            115 	.globl _TR0
                            116 	.globl _TF0
                            117 	.globl _TR1
                            118 	.globl _TF1
                            119 	.globl _PCA0CP4
                            120 	.globl _PCA0CP0
                            121 	.globl _PCA0
                            122 	.globl _PCA0CP3
                            123 	.globl _PCA0CP2
                            124 	.globl _PCA0CP1
                            125 	.globl _PCA0CP5
                            126 	.globl _TMR2
                            127 	.globl _TMR2RL
                            128 	.globl _ADC0LT
                            129 	.globl _ADC0GT
                            130 	.globl _ADC0
                            131 	.globl _TMR3
                            132 	.globl _TMR3RL
                            133 	.globl _TOFF
                            134 	.globl _DP
                            135 	.globl _VDM0CN
                            136 	.globl _PCA0CPH4
                            137 	.globl _PCA0CPL4
                            138 	.globl _PCA0CPH0
                            139 	.globl _PCA0CPL0
                            140 	.globl _PCA0H
                            141 	.globl _PCA0L
                            142 	.globl _SPI0CN
                            143 	.globl _EIP2
                            144 	.globl _EIP1
                            145 	.globl _SMB0ADM
                            146 	.globl _SMB0ADR
                            147 	.globl _P2MDIN
                            148 	.globl _P1MDIN
                            149 	.globl _P0MDIN
                            150 	.globl _B
                            151 	.globl _RSTSRC
                            152 	.globl _PCA0CPH3
                            153 	.globl _PCA0CPL3
                            154 	.globl _PCA0CPH2
                            155 	.globl _PCA0CPL2
                            156 	.globl _PCA0CPH1
                            157 	.globl _PCA0CPL1
                            158 	.globl _ADC0CN
                            159 	.globl _EIE2
                            160 	.globl _EIE1
                            161 	.globl _FLWR
                            162 	.globl _IT01CF
                            163 	.globl _XBR2
                            164 	.globl _XBR1
                            165 	.globl _XBR0
                            166 	.globl _ACC
                            167 	.globl _PCA0PWM
                            168 	.globl _PCA0CPM4
                            169 	.globl _PCA0CPM3
                            170 	.globl _PCA0CPM2
                            171 	.globl _PCA0CPM1
                            172 	.globl _PCA0CPM0
                            173 	.globl _PCA0MD
                            174 	.globl _PCA0CN
                            175 	.globl _P0MAT
                            176 	.globl _P2SKIP
                            177 	.globl _P1SKIP
                            178 	.globl _P0SKIP
                            179 	.globl _PCA0CPH5
                            180 	.globl _PCA0CPL5
                            181 	.globl _REF0CN
                            182 	.globl _PSW
                            183 	.globl _P1MAT
                            184 	.globl _PCA0CPM5
                            185 	.globl _TMR2H
                            186 	.globl _TMR2L
                            187 	.globl _TMR2RLH
                            188 	.globl _TMR2RLL
                            189 	.globl _REG0CN
                            190 	.globl _TMR2CN
                            191 	.globl _P0MASK
                            192 	.globl _ADC0LTH
                            193 	.globl _ADC0LTL
                            194 	.globl _ADC0GTH
                            195 	.globl _ADC0GTL
                            196 	.globl _SMB0DAT
                            197 	.globl _SMB0CF
                            198 	.globl _SMB0CN
                            199 	.globl _P1MASK
                            200 	.globl _ADC0H
                            201 	.globl _ADC0L
                            202 	.globl _ADC0TK
                            203 	.globl _ADC0CF
                            204 	.globl _ADC0MX
                            205 	.globl _ADC0PWR
                            206 	.globl _ADC0AC
                            207 	.globl _IREF0CN
                            208 	.globl _IP
                            209 	.globl _FLKEY
                            210 	.globl _FLSCL
                            211 	.globl _PMU0CF
                            212 	.globl _OSCICL
                            213 	.globl _OSCICN
                            214 	.globl _OSCXCN
                            215 	.globl _SPI1CN
                            216 	.globl _ONESHOT
                            217 	.globl _EMI0TC
                            218 	.globl _RTC0KEY
                            219 	.globl _RTC0DAT
                            220 	.globl _RTC0ADR
                            221 	.globl _EMI0CF
                            222 	.globl _EMI0CN
                            223 	.globl _CLKSEL
                            224 	.globl _IE
                            225 	.globl _SFRPAGE
                            226 	.globl _P2DRV
                            227 	.globl _P2MDOUT
                            228 	.globl _P1DRV
                            229 	.globl _P1MDOUT
                            230 	.globl _P0DRV
                            231 	.globl _P0MDOUT
                            232 	.globl _SPI0DAT
                            233 	.globl _SPI0CKR
                            234 	.globl _SPI0CFG
                            235 	.globl _P2
                            236 	.globl _CPT0MX
                            237 	.globl _CPT1MX
                            238 	.globl _CPT0MD
                            239 	.globl _CPT1MD
                            240 	.globl _CPT0CN
                            241 	.globl _CPT1CN
                            242 	.globl _SBUF0
                            243 	.globl _SCON0
                            244 	.globl _CRC0CNT
                            245 	.globl _DC0CN
                            246 	.globl _CRC0AUTO
                            247 	.globl _DC0CF
                            248 	.globl _TMR3H
                            249 	.globl _CRC0FLIP
                            250 	.globl _TMR3L
                            251 	.globl _CRC0IN
                            252 	.globl _TMR3RLH
                            253 	.globl _CRC0CN
                            254 	.globl _TMR3RLL
                            255 	.globl _CRC0DAT
                            256 	.globl _TMR3CN
                            257 	.globl _P1
                            258 	.globl _PSCTL
                            259 	.globl _CKCON
                            260 	.globl _TH1
                            261 	.globl _TH0
                            262 	.globl _TL1
                            263 	.globl _TL0
                            264 	.globl _TMOD
                            265 	.globl _TCON
                            266 	.globl _PCON
                            267 	.globl _TOFFH
                            268 	.globl _SPI1DAT
                            269 	.globl _TOFFL
                            270 	.globl _SPI1CKR
                            271 	.globl _SPI1CFG
                            272 	.globl _DPH
                            273 	.globl _DPL
                            274 	.globl _SP
                            275 	.globl _P0
                            276 	.globl _radio_buffer
                            277 	.globl _radio_transmit_PARM_3
                            278 	.globl _radio_transmit_PARM_2
                            279 	.globl _radio_receive_packet_PARM_2
                            280 	.globl _settings
                            281 	.globl _netid
                            282 	.globl _last_rssi
                            283 	.globl _partial_packet_length
                            284 	.globl _receive_packet_length
                            285 	.globl _radio_set_diversity_PARM_1
                            286 	.globl _radio_receive_packet
                            287 	.globl _radio_receive_in_progress
                            288 	.globl _radio_preamble_detected
                            289 	.globl _radio_last_rssi
                            290 	.globl _radio_current_rssi
                            291 	.globl _radio_air_rate
                            292 	.globl _radio_transmit
                            293 	.globl _radio_receiver_on
                            294 	.globl _radio_initialise
                            295 	.globl _radio_set_frequency
                            296 	.globl _radio_set_channel_spacing
                            297 	.globl _radio_set_channel
                            298 	.globl _radio_get_channel
                            299 	.globl _radio_configure
                            300 	.globl _radio_set_transmit_power
                            301 	.globl _radio_get_transmit_power
                            302 	.globl _radio_set_network_id
                            303 	.globl _radio_temperature
                            304 	.globl _radio_set_diversity
                            305 ;--------------------------------------------------------
                            306 ; special function registers
                            307 ;--------------------------------------------------------
                            308 	.area RSEG    (ABS,DATA)
   0000                     309 	.org 0x0000
                     0080   310 _P0	=	0x0080
                     0081   311 _SP	=	0x0081
                     0082   312 _DPL	=	0x0082
                     0083   313 _DPH	=	0x0083
                     0084   314 _SPI1CFG	=	0x0084
                     0085   315 _SPI1CKR	=	0x0085
                     0085   316 _TOFFL	=	0x0085
                     0086   317 _SPI1DAT	=	0x0086
                     0086   318 _TOFFH	=	0x0086
                     0087   319 _PCON	=	0x0087
                     0088   320 _TCON	=	0x0088
                     0089   321 _TMOD	=	0x0089
                     008A   322 _TL0	=	0x008a
                     008B   323 _TL1	=	0x008b
                     008C   324 _TH0	=	0x008c
                     008D   325 _TH1	=	0x008d
                     008E   326 _CKCON	=	0x008e
                     008F   327 _PSCTL	=	0x008f
                     0090   328 _P1	=	0x0090
                     0091   329 _TMR3CN	=	0x0091
                     0091   330 _CRC0DAT	=	0x0091
                     0092   331 _TMR3RLL	=	0x0092
                     0092   332 _CRC0CN	=	0x0092
                     0093   333 _TMR3RLH	=	0x0093
                     0093   334 _CRC0IN	=	0x0093
                     0094   335 _TMR3L	=	0x0094
                     0095   336 _CRC0FLIP	=	0x0095
                     0095   337 _TMR3H	=	0x0095
                     0096   338 _DC0CF	=	0x0096
                     0096   339 _CRC0AUTO	=	0x0096
                     0097   340 _DC0CN	=	0x0097
                     0097   341 _CRC0CNT	=	0x0097
                     0098   342 _SCON0	=	0x0098
                     0099   343 _SBUF0	=	0x0099
                     009A   344 _CPT1CN	=	0x009a
                     009B   345 _CPT0CN	=	0x009b
                     009C   346 _CPT1MD	=	0x009c
                     009D   347 _CPT0MD	=	0x009d
                     009E   348 _CPT1MX	=	0x009e
                     009F   349 _CPT0MX	=	0x009f
                     00A0   350 _P2	=	0x00a0
                     00A1   351 _SPI0CFG	=	0x00a1
                     00A2   352 _SPI0CKR	=	0x00a2
                     00A3   353 _SPI0DAT	=	0x00a3
                     00A4   354 _P0MDOUT	=	0x00a4
                     00A4   355 _P0DRV	=	0x00a4
                     00A5   356 _P1MDOUT	=	0x00a5
                     00A5   357 _P1DRV	=	0x00a5
                     00A6   358 _P2MDOUT	=	0x00a6
                     00A6   359 _P2DRV	=	0x00a6
                     00A7   360 _SFRPAGE	=	0x00a7
                     00A8   361 _IE	=	0x00a8
                     00A9   362 _CLKSEL	=	0x00a9
                     00AA   363 _EMI0CN	=	0x00aa
                     00AB   364 _EMI0CF	=	0x00ab
                     00AC   365 _RTC0ADR	=	0x00ac
                     00AD   366 _RTC0DAT	=	0x00ad
                     00AE   367 _RTC0KEY	=	0x00ae
                     00AF   368 _EMI0TC	=	0x00af
                     00AF   369 _ONESHOT	=	0x00af
                     00B0   370 _SPI1CN	=	0x00b0
                     00B1   371 _OSCXCN	=	0x00b1
                     00B2   372 _OSCICN	=	0x00b2
                     00B3   373 _OSCICL	=	0x00b3
                     00B5   374 _PMU0CF	=	0x00b5
                     00B6   375 _FLSCL	=	0x00b6
                     00B7   376 _FLKEY	=	0x00b7
                     00B8   377 _IP	=	0x00b8
                     00B9   378 _IREF0CN	=	0x00b9
                     00BA   379 _ADC0AC	=	0x00ba
                     00BA   380 _ADC0PWR	=	0x00ba
                     00BB   381 _ADC0MX	=	0x00bb
                     00BC   382 _ADC0CF	=	0x00bc
                     00BD   383 _ADC0TK	=	0x00bd
                     00BD   384 _ADC0L	=	0x00bd
                     00BE   385 _ADC0H	=	0x00be
                     00BF   386 _P1MASK	=	0x00bf
                     00C0   387 _SMB0CN	=	0x00c0
                     00C1   388 _SMB0CF	=	0x00c1
                     00C2   389 _SMB0DAT	=	0x00c2
                     00C3   390 _ADC0GTL	=	0x00c3
                     00C4   391 _ADC0GTH	=	0x00c4
                     00C5   392 _ADC0LTL	=	0x00c5
                     00C6   393 _ADC0LTH	=	0x00c6
                     00C7   394 _P0MASK	=	0x00c7
                     00C8   395 _TMR2CN	=	0x00c8
                     00C9   396 _REG0CN	=	0x00c9
                     00CA   397 _TMR2RLL	=	0x00ca
                     00CB   398 _TMR2RLH	=	0x00cb
                     00CC   399 _TMR2L	=	0x00cc
                     00CD   400 _TMR2H	=	0x00cd
                     00CE   401 _PCA0CPM5	=	0x00ce
                     00CF   402 _P1MAT	=	0x00cf
                     00D0   403 _PSW	=	0x00d0
                     00D1   404 _REF0CN	=	0x00d1
                     00D2   405 _PCA0CPL5	=	0x00d2
                     00D3   406 _PCA0CPH5	=	0x00d3
                     00D4   407 _P0SKIP	=	0x00d4
                     00D5   408 _P1SKIP	=	0x00d5
                     00D6   409 _P2SKIP	=	0x00d6
                     00D7   410 _P0MAT	=	0x00d7
                     00D8   411 _PCA0CN	=	0x00d8
                     00D9   412 _PCA0MD	=	0x00d9
                     00DA   413 _PCA0CPM0	=	0x00da
                     00DB   414 _PCA0CPM1	=	0x00db
                     00DC   415 _PCA0CPM2	=	0x00dc
                     00DD   416 _PCA0CPM3	=	0x00dd
                     00DE   417 _PCA0CPM4	=	0x00de
                     00DF   418 _PCA0PWM	=	0x00df
                     00E0   419 _ACC	=	0x00e0
                     00E1   420 _XBR0	=	0x00e1
                     00E2   421 _XBR1	=	0x00e2
                     00E3   422 _XBR2	=	0x00e3
                     00E4   423 _IT01CF	=	0x00e4
                     00E5   424 _FLWR	=	0x00e5
                     00E6   425 _EIE1	=	0x00e6
                     00E7   426 _EIE2	=	0x00e7
                     00E8   427 _ADC0CN	=	0x00e8
                     00E9   428 _PCA0CPL1	=	0x00e9
                     00EA   429 _PCA0CPH1	=	0x00ea
                     00EB   430 _PCA0CPL2	=	0x00eb
                     00EC   431 _PCA0CPH2	=	0x00ec
                     00ED   432 _PCA0CPL3	=	0x00ed
                     00EE   433 _PCA0CPH3	=	0x00ee
                     00EF   434 _RSTSRC	=	0x00ef
                     00F0   435 _B	=	0x00f0
                     00F1   436 _P0MDIN	=	0x00f1
                     00F2   437 _P1MDIN	=	0x00f2
                     00F3   438 _P2MDIN	=	0x00f3
                     00F4   439 _SMB0ADR	=	0x00f4
                     00F5   440 _SMB0ADM	=	0x00f5
                     00F6   441 _EIP1	=	0x00f6
                     00F7   442 _EIP2	=	0x00f7
                     00F8   443 _SPI0CN	=	0x00f8
                     00F9   444 _PCA0L	=	0x00f9
                     00FA   445 _PCA0H	=	0x00fa
                     00FB   446 _PCA0CPL0	=	0x00fb
                     00FC   447 _PCA0CPH0	=	0x00fc
                     00FD   448 _PCA0CPL4	=	0x00fd
                     00FE   449 _PCA0CPH4	=	0x00fe
                     00FF   450 _VDM0CN	=	0x00ff
                     8382   451 _DP	=	0x8382
                     8685   452 _TOFF	=	0x8685
                     9392   453 _TMR3RL	=	0x9392
                     9594   454 _TMR3	=	0x9594
                     BEBD   455 _ADC0	=	0xbebd
                     C4C3   456 _ADC0GT	=	0xc4c3
                     C6C5   457 _ADC0LT	=	0xc6c5
                     CBCA   458 _TMR2RL	=	0xcbca
                     CDCC   459 _TMR2	=	0xcdcc
                     D3D2   460 _PCA0CP5	=	0xd3d2
                     EAE9   461 _PCA0CP1	=	0xeae9
                     ECEB   462 _PCA0CP2	=	0xeceb
                     EEED   463 _PCA0CP3	=	0xeeed
                     FAF9   464 _PCA0	=	0xfaf9
                     FCFB   465 _PCA0CP0	=	0xfcfb
                     FEFD   466 _PCA0CP4	=	0xfefd
                            467 ;--------------------------------------------------------
                            468 ; special function bits
                            469 ;--------------------------------------------------------
                            470 	.area RSEG    (ABS,DATA)
   0000                     471 	.org 0x0000
                     008F   472 _TF1	=	0x008f
                     008E   473 _TR1	=	0x008e
                     008D   474 _TF0	=	0x008d
                     008C   475 _TR0	=	0x008c
                     008B   476 _IE1	=	0x008b
                     008A   477 _IT1	=	0x008a
                     0089   478 _IE0	=	0x0089
                     0088   479 _IT0	=	0x0088
                     0096   480 _CRC0SEL	=	0x0096
                     0095   481 _CRC0INIT	=	0x0095
                     0094   482 _CRC0VAL	=	0x0094
                     009F   483 _S0MODE	=	0x009f
                     009D   484 _MCE0	=	0x009d
                     009C   485 _REN0	=	0x009c
                     009B   486 _TB80	=	0x009b
                     009A   487 _RB80	=	0x009a
                     0099   488 _TI0	=	0x0099
                     0098   489 _RI0	=	0x0098
                     00AF   490 _EA	=	0x00af
                     00AE   491 _ESPI0	=	0x00ae
                     00AD   492 _ET2	=	0x00ad
                     00AC   493 _ES0	=	0x00ac
                     00AB   494 _ET1	=	0x00ab
                     00AA   495 _EX1	=	0x00aa
                     00A9   496 _ET0	=	0x00a9
                     00A8   497 _EX0	=	0x00a8
                     00B7   498 _SPIF1	=	0x00b7
                     00B6   499 _WCOL1	=	0x00b6
                     00B5   500 _MODF1	=	0x00b5
                     00B4   501 _RXOVRN1	=	0x00b4
                     00B3   502 _NSS1MD1	=	0x00b3
                     00B2   503 _NSS1MD0	=	0x00b2
                     00B1   504 _TXBMT1	=	0x00b1
                     00B0   505 _SPI1EN	=	0x00b0
                     00BE   506 _PSPI0	=	0x00be
                     00BD   507 _PT2	=	0x00bd
                     00BC   508 _PS0	=	0x00bc
                     00BB   509 _PT1	=	0x00bb
                     00BA   510 _PX1	=	0x00ba
                     00B9   511 _PT0	=	0x00b9
                     00B8   512 _PX0	=	0x00b8
                     00C7   513 _MASTER	=	0x00c7
                     00C6   514 _TXMODE	=	0x00c6
                     00C5   515 _STA	=	0x00c5
                     00C4   516 _STO	=	0x00c4
                     00C3   517 _ACKRQ	=	0x00c3
                     00C2   518 _ARBLOST	=	0x00c2
                     00C1   519 _ACK	=	0x00c1
                     00C0   520 _SI	=	0x00c0
                     00CF   521 _TF2H	=	0x00cf
                     00CE   522 _TF2L	=	0x00ce
                     00CD   523 _TF2LEN	=	0x00cd
                     00CC   524 _TF2CEN	=	0x00cc
                     00CB   525 _T2SPLIT	=	0x00cb
                     00CA   526 _TR2	=	0x00ca
                     00C9   527 _T2RCLK	=	0x00c9
                     00C8   528 _T2XCLK	=	0x00c8
                     00D7   529 _CY	=	0x00d7
                     00D6   530 _AC	=	0x00d6
                     00D5   531 _F0	=	0x00d5
                     00D4   532 _RS1	=	0x00d4
                     00D3   533 _RS0	=	0x00d3
                     00D2   534 _OV	=	0x00d2
                     00D1   535 _F1	=	0x00d1
                     00D0   536 _P	=	0x00d0
                     00DF   537 _CF	=	0x00df
                     00DE   538 _CR	=	0x00de
                     00DD   539 _CCF5	=	0x00dd
                     00DC   540 _CCF4	=	0x00dc
                     00DB   541 _CCF3	=	0x00db
                     00DA   542 _CCF2	=	0x00da
                     00D9   543 _CCF1	=	0x00d9
                     00D8   544 _CCF0	=	0x00d8
                     00EF   545 _AD0EN	=	0x00ef
                     00EE   546 _BURSTEN	=	0x00ee
                     00ED   547 _AD0INT	=	0x00ed
                     00EC   548 _AD0BUSY	=	0x00ec
                     00EB   549 _AD0WINT	=	0x00eb
                     00EA   550 _AD0CM2	=	0x00ea
                     00E9   551 _AD0CM1	=	0x00e9
                     00E8   552 _AD0CM0	=	0x00e8
                     00FF   553 _SPIF0	=	0x00ff
                     00FE   554 _WCOL0	=	0x00fe
                     00FD   555 _MODF0	=	0x00fd
                     00FC   556 _RXOVRN0	=	0x00fc
                     00FB   557 _NSS0MD1	=	0x00fb
                     00FA   558 _NSS0MD0	=	0x00fa
                     00F9   559 _TXBMT0	=	0x00f9
                     00F8   560 _SPI0EN	=	0x00f8
                     0096   561 _LED_RED	=	0x0096
                     0095   562 _LED_GREEN	=	0x0095
                     0082   563 _PIN_CONFIG	=	0x0082
                     0083   564 _PIN_ENABLE	=	0x0083
                     0087   565 _IRQ	=	0x0087
                     0094   566 _NSS1	=	0x0094
                     00A6   567 _SDN	=	0x00a6
                            568 ;--------------------------------------------------------
                            569 ; overlayable register banks
                            570 ;--------------------------------------------------------
                            571 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     572 	.ds 8
                            573 ;--------------------------------------------------------
                            574 ; overlayable bit register bank
                            575 ;--------------------------------------------------------
                            576 	.area BIT_BANK	(REL,OVR,DATA)
   0000                     577 bits:
   0000                     578 	.ds 1
                     8000   579 	b0 = bits[0]
                     8100   580 	b1 = bits[1]
                     8200   581 	b2 = bits[2]
                     8300   582 	b3 = bits[3]
                     8400   583 	b4 = bits[4]
                     8500   584 	b5 = bits[5]
                     8600   585 	b6 = bits[6]
                     8700   586 	b7 = bits[7]
                            587 ;--------------------------------------------------------
                            588 ; internal ram data
                            589 ;--------------------------------------------------------
                            590 	.area DSEG    (DATA)
   0000                     591 _radio_receive_packet_crc1_1_135:
   0000                     592 	.ds 2
   0002                     593 _radio_transmit_golay_elen_1_186:
   0002                     594 	.ds 1
                            595 ;--------------------------------------------------------
                            596 ; overlayable items in internal ram 
                            597 ;--------------------------------------------------------
                            598 	.area	OSEG    (OVR,DATA)
                            599 ;--------------------------------------------------------
                            600 ; indirectly addressable internal ram data
                            601 ;--------------------------------------------------------
                            602 	.area ISEG    (DATA)
                            603 ;--------------------------------------------------------
                            604 ; absolute internal ram data
                            605 ;--------------------------------------------------------
                            606 	.area IABS    (ABS,DATA)
                            607 	.area IABS    (ABS,DATA)
                            608 ;--------------------------------------------------------
                            609 ; bit data
                            610 ;--------------------------------------------------------
                            611 	.area BSEG    (BIT)
   0000                     612 _packet_received:
   0000                     613 	.ds 1
   0001                     614 _preamble_detected:
   0001                     615 	.ds 1
   0002                     616 _radio_preamble_detected_EX0_saved_1_157:
   0002                     617 	.ds 1
   0003                     618 _radio_transmit_simple_transmit_started_1_170:
   0003                     619 	.ds 1
   0004                     620 _radio_transmit_golay_sloc0_1_0:
   0004                     621 	.ds 1
   0005                     622 _radio_transmit_EX0_saved_1_189:
   0005                     623 	.ds 1
   0006                     624 _radio_transmit_sloc0_1_0:
   0006                     625 	.ds 1
   0007                     626 _radio_initialise_sloc0_1_0:
   0007                     627 	.ds 1
   0008                     628 _radio_set_diversity_PARM_1:
   0008                     629 	.ds 1
                            630 ;--------------------------------------------------------
                            631 ; paged external ram data
                            632 ;--------------------------------------------------------
                            633 	.area PSEG    (PAG,XDATA)
   0000                     634 _receive_packet_length::
   0000                     635 	.ds 1
   0001                     636 _partial_packet_length::
   0001                     637 	.ds 1
   0002                     638 _last_rssi::
   0002                     639 	.ds 1
   0003                     640 _netid::
   0003                     641 	.ds 2
   0005                     642 _settings::
   0005                     643 	.ds 12
   0011                     644 _radio_receive_packet_PARM_2:
   0011                     645 	.ds 2
   0013                     646 _radio_write_transmit_fifo_PARM_2:
   0013                     647 	.ds 2
   0015                     648 _radio_transmit_simple_PARM_2:
   0015                     649 	.ds 2
   0017                     650 _radio_transmit_simple_PARM_3:
   0017                     651 	.ds 2
   0019                     652 _radio_transmit_golay_PARM_2:
   0019                     653 	.ds 2
   001B                     654 _radio_transmit_golay_PARM_3:
   001B                     655 	.ds 2
   001D                     656 _radio_transmit_PARM_2:
   001D                     657 	.ds 2
   001F                     658 _radio_transmit_PARM_3:
   001F                     659 	.ds 2
   0021                     660 _scale_uint32_PARM_2:
   0021                     661 	.ds 4
   0025                     662 _scale_uint32_value_1_248:
   0025                     663 	.ds 4
   0029                     664 _set_frequency_registers_frequency_1_256:
   0029                     665 	.ds 4
                            666 ;--------------------------------------------------------
                            667 ; external ram data
                            668 ;--------------------------------------------------------
                            669 	.area XSEG    (XDATA)
   0000                     670 _radio_buffer::
   0000                     671 	.ds 252
   00FC                     672 _radio_receive_packet_length_1_134:
   00FC                     673 	.ds 3
   00FF                     674 _radio_receive_packet_gout_1_135:
   00FF                     675 	.ds 3
   0102                     676 _radio_transmit_golay_length_1_185:
   0102                     677 	.ds 1
   0103                     678 _radio_transmit_golay_gin_1_186:
   0103                     679 	.ds 3
   0106                     680 _radio_transmit_length_1_188:
   0106                     681 	.ds 1
   0107                     682 _radio_set_channel_channel_1_206:
   0107                     683 	.ds 1
   0108                     684 _radio_set_transmit_power_power_1_230:
   0108                     685 	.ds 1
   0109                     686 _radio_set_transmit_power_i_1_231:
   0109                     687 	.ds 1
   010A                     688 _radio_set_network_id_id_1_236:
   010A                     689 	.ds 2
   010C                     690 _set_frequency_registers_band_1_257:
   010C                     691 	.ds 1
                            692 ;--------------------------------------------------------
                            693 ; absolute external ram data
                            694 ;--------------------------------------------------------
                            695 	.area XABS    (ABS,XDATA)
                            696 ;--------------------------------------------------------
                            697 ; external initialized ram data
                            698 ;--------------------------------------------------------
                            699 	.area XISEG   (XDATA)
                            700 	.area HOME    (CODE)
                            701 	.area GSINIT0 (CODE)
                            702 	.area GSINIT1 (CODE)
                            703 	.area GSINIT2 (CODE)
                            704 	.area GSINIT3 (CODE)
                            705 	.area GSINIT4 (CODE)
                            706 	.area GSINIT5 (CODE)
                            707 	.area GSINIT  (CODE)
                            708 	.area GSFINAL (CODE)
                            709 	.area CSEG    (CODE)
                            710 ;--------------------------------------------------------
                            711 ; global & static initialisations
                            712 ;--------------------------------------------------------
                            713 	.area HOME    (CODE)
                            714 	.area GSINIT  (CODE)
                            715 	.area GSFINAL (CODE)
                            716 	.area GSINIT  (CODE)
                            717 ;--------------------------------------------------------
                            718 ; Home
                            719 ;--------------------------------------------------------
                            720 	.area HOME    (CODE)
                            721 	.area HOME    (CODE)
                            722 ;--------------------------------------------------------
                            723 ; code
                            724 ;--------------------------------------------------------
                            725 	.area CSEG    (CODE)
                            726 ;------------------------------------------------------------
                            727 ;Allocation info for local variables in function 'radio_receive_packet'
                            728 ;------------------------------------------------------------
                            729 ;crc1                      Allocated with name '_radio_receive_packet_crc1_1_135'
                            730 ;crc2                      Allocated to registers r5 r7 
                            731 ;errcount                  Allocated to registers r6 
                            732 ;elen                      Allocated to registers r7 
                            733 ;length                    Allocated with name '_radio_receive_packet_length_1_134'
                            734 ;gout                      Allocated with name '_radio_receive_packet_gout_1_135'
                            735 ;------------------------------------------------------------
                            736 ;	radio/radio.c:77: radio_receive_packet(uint8_t *length, __xdata uint8_t * __pdata buf)
                            737 ;	-----------------------------------------
                            738 ;	 function radio_receive_packet
                            739 ;	-----------------------------------------
   0000                     740 _radio_receive_packet:
                     0007   741 	ar7 = 0x07
                     0006   742 	ar6 = 0x06
                     0005   743 	ar5 = 0x05
                     0004   744 	ar4 = 0x04
                     0003   745 	ar3 = 0x03
                     0002   746 	ar2 = 0x02
                     0001   747 	ar1 = 0x01
                     0000   748 	ar0 = 0x00
   0000 AF F0         [24]  749 	mov	r7,b
   0002 AE 83         [24]  750 	mov	r6,dph
   0004 E5 82         [12]  751 	mov	a,dpl
   0006 90r00rFC      [24]  752 	mov	dptr,#_radio_receive_packet_length_1_134
   0009 F0            [24]  753 	movx	@dptr,a
   000A EE            [12]  754 	mov	a,r6
   000B A3            [24]  755 	inc	dptr
   000C F0            [24]  756 	movx	@dptr,a
   000D EF            [12]  757 	mov	a,r7
   000E A3            [24]  758 	inc	dptr
   000F F0            [24]  759 	movx	@dptr,a
                            760 ;	radio/radio.c:84: if (!packet_received) {
   0010 20*00 02      [24]  761 	jb	_packet_received,00102$
                            762 ;	radio/radio.c:85: return false;
   0013 C3            [12]  763 	clr	c
   0014 22            [24]  764 	ret
   0015                     765 00102$:
                            766 ;	radio/radio.c:88: if (receive_packet_length > MAX_PACKET_LENGTH) {
   0015 78r00         [12]  767 	mov	r0,#_receive_packet_length
   0017 C3            [12]  768 	clr	c
   0018 E2            [24]  769 	movx	a,@r0
   0019 F5 F0         [12]  770 	mov	b,a
   001B 74 FC         [12]  771 	mov	a,#0xFC
   001D 95 F0         [12]  772 	subb	a,b
   001F 50 06         [24]  773 	jnc	00104$
                            774 ;	radio/radio.c:89: radio_receiver_on();
   0021 12r06r70      [24]  775 	lcall	_radio_receiver_on
                            776 ;	radio/radio.c:90: goto failed;
   0024 02r02r40      [24]  777 	ljmp	00126$
   0027                     778 00104$:
                            779 ;	radio/radio.c:101: if (!feature_golay) {
   0027 20*00 45      [24]  780 	jb	_feature_golay,00106$
                            781 ;	radio/radio.c:103: *length = receive_packet_length;
   002A 90r00rFC      [24]  782 	mov	dptr,#_radio_receive_packet_length_1_134
   002D E0            [24]  783 	movx	a,@dptr
   002E FD            [12]  784 	mov	r5,a
   002F A3            [24]  785 	inc	dptr
   0030 E0            [24]  786 	movx	a,@dptr
   0031 FE            [12]  787 	mov	r6,a
   0032 A3            [24]  788 	inc	dptr
   0033 E0            [24]  789 	movx	a,@dptr
   0034 FF            [12]  790 	mov	r7,a
   0035 8D 82         [24]  791 	mov	dpl,r5
   0037 8E 83         [24]  792 	mov	dph,r6
   0039 8F F0         [24]  793 	mov	b,r7
   003B 78r00         [12]  794 	mov	r0,#_receive_packet_length
   003D E2            [24]  795 	movx	a,@r0
   003E 12r00r00      [24]  796 	lcall	__gptrput
                            797 ;	radio/radio.c:104: memcpy(buf, radio_buffer, receive_packet_length);
   0041 78r11         [12]  798 	mov	r0,#_radio_receive_packet_PARM_2
   0043 E2            [24]  799 	movx	a,@r0
   0044 FD            [12]  800 	mov	r5,a
   0045 08            [12]  801 	inc	r0
   0046 E2            [24]  802 	movx	a,@r0
   0047 FE            [12]  803 	mov	r6,a
   0048 7F 00         [12]  804 	mov	r7,#0x00
   004A 90r00r00      [24]  805 	mov	dptr,#_memcpy_PARM_2
   004D 74r00         [12]  806 	mov	a,#_radio_buffer
   004F F0            [24]  807 	movx	@dptr,a
   0050 74s00         [12]  808 	mov	a,#(_radio_buffer >> 8)
   0052 A3            [24]  809 	inc	dptr
   0053 F0            [24]  810 	movx	@dptr,a
   0054 E4            [12]  811 	clr	a
   0055 A3            [24]  812 	inc	dptr
   0056 F0            [24]  813 	movx	@dptr,a
   0057 78r00         [12]  814 	mov	r0,#_receive_packet_length
   0059 90r00r00      [24]  815 	mov	dptr,#_memcpy_PARM_3
   005C E2            [24]  816 	movx	a,@r0
   005D F0            [24]  817 	movx	@dptr,a
   005E E4            [12]  818 	clr	a
   005F A3            [24]  819 	inc	dptr
   0060 F0            [24]  820 	movx	@dptr,a
   0061 8D 82         [24]  821 	mov	dpl,r5
   0063 8E 83         [24]  822 	mov	dph,r6
   0065 8F F0         [24]  823 	mov	b,r7
   0067 12r00r00      [24]  824 	lcall	_memcpy
                            825 ;	radio/radio.c:105: radio_receiver_on();
   006A 12r06r70      [24]  826 	lcall	_radio_receiver_on
                            827 ;	radio/radio.c:106: return true;
   006D D3            [12]  828 	setb	c
   006E 22            [24]  829 	ret
   006F                     830 00106$:
                            831 ;	radio/radio.c:112: memcpy(buf, radio_buffer, receive_packet_length);
   006F 78r11         [12]  832 	mov	r0,#_radio_receive_packet_PARM_2
   0071 E2            [24]  833 	movx	a,@r0
   0072 FD            [12]  834 	mov	r5,a
   0073 08            [12]  835 	inc	r0
   0074 E2            [24]  836 	movx	a,@r0
   0075 FE            [12]  837 	mov	r6,a
   0076 7F 00         [12]  838 	mov	r7,#0x00
   0078 90r00r00      [24]  839 	mov	dptr,#_memcpy_PARM_2
   007B 74r00         [12]  840 	mov	a,#_radio_buffer
   007D F0            [24]  841 	movx	@dptr,a
   007E 74s00         [12]  842 	mov	a,#(_radio_buffer >> 8)
   0080 A3            [24]  843 	inc	dptr
   0081 F0            [24]  844 	movx	@dptr,a
   0082 E4            [12]  845 	clr	a
   0083 A3            [24]  846 	inc	dptr
   0084 F0            [24]  847 	movx	@dptr,a
   0085 78r00         [12]  848 	mov	r0,#_receive_packet_length
   0087 90r00r00      [24]  849 	mov	dptr,#_memcpy_PARM_3
   008A E2            [24]  850 	movx	a,@r0
   008B F0            [24]  851 	movx	@dptr,a
   008C E4            [12]  852 	clr	a
   008D A3            [24]  853 	inc	dptr
   008E F0            [24]  854 	movx	@dptr,a
   008F 8D 82         [24]  855 	mov	dpl,r5
   0091 8E 83         [24]  856 	mov	dph,r6
   0093 8F F0         [24]  857 	mov	b,r7
   0095 12r00r00      [24]  858 	lcall	_memcpy
                            859 ;	radio/radio.c:116: elen = receive_packet_length;
   0098 78r00         [12]  860 	mov	r0,#_receive_packet_length
   009A E2            [24]  861 	movx	a,@r0
   009B FF            [12]  862 	mov	r7,a
                            863 ;	radio/radio.c:117: radio_receiver_on();	
   009C C0 07         [24]  864 	push	ar7
   009E 12r06r70      [24]  865 	lcall	_radio_receiver_on
   00A1 D0 07         [24]  866 	pop	ar7
                            867 ;	radio/radio.c:119: if (elen < 12 || (elen%6) != 0) {
   00A3 BF 0C 00      [24]  868 	cjne	r7,#0x0C,00176$
   00A6                     869 00176$:
   00A6 50 03         [24]  870 	jnc	00177$
   00A8 02r02r40      [24]  871 	ljmp	00126$
   00AB                     872 00177$:
   00AB 75 F0 06      [24]  873 	mov	b,#0x06
   00AE EF            [12]  874 	mov	a,r7
   00AF 84            [48]  875 	div	ab
   00B0 E5 F0         [12]  876 	mov	a,b
   00B2 60 03         [24]  877 	jz	00178$
   00B4 02r02r40      [24]  878 	ljmp	00126$
   00B7                     879 00178$:
                            880 ;	radio/radio.c:126: errcount = golay_decode(6, buf, gout);
   00B7 78r11         [12]  881 	mov	r0,#_radio_receive_packet_PARM_2
   00B9 79r00         [12]  882 	mov	r1,#_golay_decode_PARM_2
   00BB E2            [24]  883 	movx	a,@r0
   00BC F3            [24]  884 	movx	@r1,a
   00BD 08            [12]  885 	inc	r0
   00BE E2            [24]  886 	movx	a,@r0
   00BF 09            [12]  887 	inc	r1
   00C0 F3            [24]  888 	movx	@r1,a
   00C1 78r00         [12]  889 	mov	r0,#_golay_decode_PARM_3
   00C3 74rFF         [12]  890 	mov	a,#_radio_receive_packet_gout_1_135
   00C5 F2            [24]  891 	movx	@r0,a
   00C6 08            [12]  892 	inc	r0
   00C7 74s00         [12]  893 	mov	a,#(_radio_receive_packet_gout_1_135 >> 8)
   00C9 F2            [24]  894 	movx	@r0,a
   00CA 75 82 06      [24]  895 	mov	dpl,#0x06
   00CD C0 07         [24]  896 	push	ar7
   00CF 12r00r00      [24]  897 	lcall	_golay_decode
   00D2 AE 82         [24]  898 	mov	r6,dpl
   00D4 D0 07         [24]  899 	pop	ar7
                            900 ;	radio/radio.c:127: if (gout[0] != netid[0] ||
   00D6 90r00rFF      [24]  901 	mov	dptr,#_radio_receive_packet_gout_1_135
   00D9 E0            [24]  902 	movx	a,@dptr
   00DA FD            [12]  903 	mov	r5,a
   00DB 78r03         [12]  904 	mov	r0,#_netid
   00DD E2            [24]  905 	movx	a,@r0
   00DE FC            [12]  906 	mov	r4,a
   00DF ED            [12]  907 	mov	a,r5
   00E0 B5 04 02      [24]  908 	cjne	a,ar4,00179$
   00E3 80 03         [24]  909 	sjmp	00180$
   00E5                     910 00179$:
   00E5 02r02r40      [24]  911 	ljmp	00126$
   00E8                     912 00180$:
                            913 ;	radio/radio.c:128: gout[1] != netid[1]) {
   00E8 90r01r00      [24]  914 	mov	dptr,#(_radio_receive_packet_gout_1_135 + 0x0001)
   00EB E0            [24]  915 	movx	a,@dptr
   00EC FD            [12]  916 	mov	r5,a
   00ED 78r04         [12]  917 	mov	r0,#(_netid + 0x0001)
   00EF E2            [24]  918 	movx	a,@r0
   00F0 FC            [12]  919 	mov	r4,a
   00F1 ED            [12]  920 	mov	a,r5
   00F2 B5 04 02      [24]  921 	cjne	a,ar4,00181$
   00F5 80 03         [24]  922 	sjmp	00182$
   00F7                     923 00181$:
   00F7 02r02r40      [24]  924 	ljmp	00126$
   00FA                     925 00182$:
                            926 ;	radio/radio.c:136: if (6*((gout[2]+2)/3+2) != elen) {
   00FA 90r01r01      [24]  927 	mov	dptr,#(_radio_receive_packet_gout_1_135 + 0x0002)
   00FD E0            [24]  928 	movx	a,@dptr
   00FE FD            [12]  929 	mov	r5,a
   00FF 7C 00         [12]  930 	mov	r4,#0x00
   0101 74 02         [12]  931 	mov	a,#0x02
   0103 2D            [12]  932 	add	a,r5
   0104 FD            [12]  933 	mov	r5,a
   0105 E4            [12]  934 	clr	a
   0106 3C            [12]  935 	addc	a,r4
   0107 FC            [12]  936 	mov	r4,a
   0108 90r00r00      [24]  937 	mov	dptr,#__divsint_PARM_2
   010B 74 03         [12]  938 	mov	a,#0x03
   010D F0            [24]  939 	movx	@dptr,a
   010E E4            [12]  940 	clr	a
   010F A3            [24]  941 	inc	dptr
   0110 F0            [24]  942 	movx	@dptr,a
   0111 8D 82         [24]  943 	mov	dpl,r5
   0113 8C 83         [24]  944 	mov	dph,r4
   0115 C0 07         [24]  945 	push	ar7
   0117 C0 06         [24]  946 	push	ar6
   0119 12r00r00      [24]  947 	lcall	__divsint
   011C E5 82         [12]  948 	mov	a,dpl
   011E 85 83 F0      [24]  949 	mov	b,dph
   0121 90r00r00      [24]  950 	mov	dptr,#__mulint_PARM_2
   0124 24 02         [12]  951 	add	a,#0x02
   0126 F0            [24]  952 	movx	@dptr,a
   0127 E4            [12]  953 	clr	a
   0128 35 F0         [12]  954 	addc	a,b
   012A A3            [24]  955 	inc	dptr
   012B F0            [24]  956 	movx	@dptr,a
   012C 90 00 06      [24]  957 	mov	dptr,#0x0006
   012F 12r00r00      [24]  958 	lcall	__mulint
   0132 AC 82         [24]  959 	mov	r4,dpl
   0134 AD 83         [24]  960 	mov	r5,dph
   0136 D0 06         [24]  961 	pop	ar6
   0138 D0 07         [24]  962 	pop	ar7
   013A 8F 02         [24]  963 	mov	ar2,r7
   013C 7B 00         [12]  964 	mov	r3,#0x00
   013E EC            [12]  965 	mov	a,r4
   013F B5 02 06      [24]  966 	cjne	a,ar2,00183$
   0142 ED            [12]  967 	mov	a,r5
   0143 B5 03 02      [24]  968 	cjne	a,ar3,00183$
   0146 80 03         [24]  969 	sjmp	00184$
   0148                     970 00183$:
   0148 02r02r40      [24]  971 	ljmp	00126$
   014B                     972 00184$:
                            973 ;	radio/radio.c:144: errcount += golay_decode(6, &buf[6], gout);
   014B 78r11         [12]  974 	mov	r0,#_radio_receive_packet_PARM_2
   014D 79r00         [12]  975 	mov	r1,#_golay_decode_PARM_2
   014F E2            [24]  976 	movx	a,@r0
   0150 24 06         [12]  977 	add	a,#0x06
   0152 F3            [24]  978 	movx	@r1,a
   0153 08            [12]  979 	inc	r0
   0154 E2            [24]  980 	movx	a,@r0
   0155 34 00         [12]  981 	addc	a,#0x00
   0157 09            [12]  982 	inc	r1
   0158 F3            [24]  983 	movx	@r1,a
   0159 78r00         [12]  984 	mov	r0,#_golay_decode_PARM_3
   015B 74rFF         [12]  985 	mov	a,#_radio_receive_packet_gout_1_135
   015D F2            [24]  986 	movx	@r0,a
   015E 08            [12]  987 	inc	r0
   015F 74s00         [12]  988 	mov	a,#(_radio_receive_packet_gout_1_135 >> 8)
   0161 F2            [24]  989 	movx	@r0,a
   0162 75 82 06      [24]  990 	mov	dpl,#0x06
   0165 C0 07         [24]  991 	push	ar7
   0167 C0 06         [24]  992 	push	ar6
   0169 12r00r00      [24]  993 	lcall	_golay_decode
   016C AD 82         [24]  994 	mov	r5,dpl
   016E D0 06         [24]  995 	pop	ar6
   0170 D0 07         [24]  996 	pop	ar7
   0172 ED            [12]  997 	mov	a,r5
   0173 2E            [12]  998 	add	a,r6
   0174 FE            [12]  999 	mov	r6,a
                           1000 ;	radio/radio.c:145: crc1 = gout[0] | (((uint16_t)gout[1])<<8);
   0175 90r00rFF      [24] 1001 	mov	dptr,#_radio_receive_packet_gout_1_135
   0178 E0            [24] 1002 	movx	a,@dptr
   0179 FD            [12] 1003 	mov	r5,a
   017A 90r01r00      [24] 1004 	mov	dptr,#(_radio_receive_packet_gout_1_135 + 0x0001)
   017D E0            [24] 1005 	movx	a,@dptr
   017E FB            [12] 1006 	mov	r3,a
   017F E4            [12] 1007 	clr	a
   0180 FC            [12] 1008 	mov	r4,a
   0181 FA            [12] 1009 	mov	r2,a
   0182 4D            [12] 1010 	orl	a,r5
   0183 F5*00         [12] 1011 	mov	_radio_receive_packet_crc1_1_135,a
   0185 EB            [12] 1012 	mov	a,r3
   0186 4A            [12] 1013 	orl	a,r2
   0187 F5*01         [12] 1014 	mov	(_radio_receive_packet_crc1_1_135 + 1),a
                           1015 ;	radio/radio.c:147: if (elen != 12) {
   0189 BF 0C 02      [24] 1016 	cjne	r7,#0x0C,00185$
   018C 80 2A         [24] 1017 	sjmp	00116$
   018E                    1018 00185$:
                           1019 ;	radio/radio.c:148: errcount += golay_decode(elen-12, &buf[12], buf);
   018E EF            [12] 1020 	mov	a,r7
   018F 24 F4         [12] 1021 	add	a,#0xF4
   0191 FF            [12] 1022 	mov	r7,a
   0192 78r11         [12] 1023 	mov	r0,#_radio_receive_packet_PARM_2
   0194 79r00         [12] 1024 	mov	r1,#_golay_decode_PARM_2
   0196 E2            [24] 1025 	movx	a,@r0
   0197 24 0C         [12] 1026 	add	a,#0x0C
   0199 F3            [24] 1027 	movx	@r1,a
   019A 08            [12] 1028 	inc	r0
   019B E2            [24] 1029 	movx	a,@r0
   019C 34 00         [12] 1030 	addc	a,#0x00
   019E 09            [12] 1031 	inc	r1
   019F F3            [24] 1032 	movx	@r1,a
   01A0 78r11         [12] 1033 	mov	r0,#_radio_receive_packet_PARM_2
   01A2 79r00         [12] 1034 	mov	r1,#_golay_decode_PARM_3
   01A4 E2            [24] 1035 	movx	a,@r0
   01A5 F3            [24] 1036 	movx	@r1,a
   01A6 08            [12] 1037 	inc	r0
   01A7 E2            [24] 1038 	movx	a,@r0
   01A8 09            [12] 1039 	inc	r1
   01A9 F3            [24] 1040 	movx	@r1,a
   01AA 8F 82         [24] 1041 	mov	dpl,r7
   01AC C0 06         [24] 1042 	push	ar6
   01AE 12r00r00      [24] 1043 	lcall	_golay_decode
   01B1 AF 82         [24] 1044 	mov	r7,dpl
   01B3 D0 06         [24] 1045 	pop	ar6
   01B5 EF            [12] 1046 	mov	a,r7
   01B6 2E            [12] 1047 	add	a,r6
   01B7 FE            [12] 1048 	mov	r6,a
   01B8                    1049 00116$:
                           1050 ;	radio/radio.c:151: *length = gout[2];
   01B8 90r00rFC      [24] 1051 	mov	dptr,#_radio_receive_packet_length_1_134
   01BB E0            [24] 1052 	movx	a,@dptr
   01BC FA            [12] 1053 	mov	r2,a
   01BD A3            [24] 1054 	inc	dptr
   01BE E0            [24] 1055 	movx	a,@dptr
   01BF FB            [12] 1056 	mov	r3,a
   01C0 A3            [24] 1057 	inc	dptr
   01C1 E0            [24] 1058 	movx	a,@dptr
   01C2 FF            [12] 1059 	mov	r7,a
   01C3 90r01r01      [24] 1060 	mov	dptr,#(_radio_receive_packet_gout_1_135 + 0x0002)
   01C6 E0            [24] 1061 	movx	a,@dptr
   01C7 FD            [12] 1062 	mov	r5,a
   01C8 8A 82         [24] 1063 	mov	dpl,r2
   01CA 8B 83         [24] 1064 	mov	dph,r3
   01CC 8F F0         [24] 1065 	mov	b,r7
   01CE 12r00r00      [24] 1066 	lcall	__gptrput
                           1067 ;	radio/radio.c:153: crc2 = crc16(*length, buf);
   01D1 78r11         [12] 1068 	mov	r0,#_radio_receive_packet_PARM_2
   01D3 E2            [24] 1069 	movx	a,@r0
   01D4 F5*00         [12] 1070 	mov	_crc16_PARM_2,a
   01D6 08            [12] 1071 	inc	r0
   01D7 E2            [24] 1072 	movx	a,@r0
   01D8 F5*01         [12] 1073 	mov	(_crc16_PARM_2 + 1),a
   01DA 8D 82         [24] 1074 	mov	dpl,r5
   01DC C0 06         [24] 1075 	push	ar6
   01DE 12r00r00      [24] 1076 	lcall	_crc16
   01E1 AD 82         [24] 1077 	mov	r5,dpl
   01E3 AF 83         [24] 1078 	mov	r7,dph
   01E5 D0 06         [24] 1079 	pop	ar6
                           1080 ;	radio/radio.c:155: if (crc1 != crc2) {
   01E7 ED            [12] 1081 	mov	a,r5
   01E8 B5*00 55      [24] 1082 	cjne	a,_radio_receive_packet_crc1_1_135,00126$
   01EB EF            [12] 1083 	mov	a,r7
   01EC B5*01 51      [24] 1084 	cjne	a,(_radio_receive_packet_crc1_1_135 + 1),00126$
                           1085 ;	radio/radio.c:165: if (errcount != 0) {
   01EF EE            [12] 1086 	mov	a,r6
   01F0 60 4C         [24] 1087 	jz	00125$
                           1088 ;	radio/radio.c:166: if ((uint16_t)(0xFFFF - errcount) > errors.corrected_errors) {
   01F2 7F 00         [12] 1089 	mov	r7,#0x00
   01F4 74 FF         [12] 1090 	mov	a,#0xFF
   01F6 C3            [12] 1091 	clr	c
   01F7 9E            [12] 1092 	subb	a,r6
   01F8 FC            [12] 1093 	mov	r4,a
   01F9 74 FF         [12] 1094 	mov	a,#0xFF
   01FB 9F            [12] 1095 	subb	a,r7
   01FC FD            [12] 1096 	mov	r5,a
   01FD 78r08         [12] 1097 	mov	r0,#(_errors + 0x0008)
   01FF E2            [24] 1098 	movx	a,@r0
   0200 FA            [12] 1099 	mov	r2,a
   0201 08            [12] 1100 	inc	r0
   0202 E2            [24] 1101 	movx	a,@r0
   0203 FB            [12] 1102 	mov	r3,a
   0204 C3            [12] 1103 	clr	c
   0205 EA            [12] 1104 	mov	a,r2
   0206 9C            [12] 1105 	subb	a,r4
   0207 EB            [12] 1106 	mov	a,r3
   0208 9D            [12] 1107 	subb	a,r5
   0209 50 0F         [24] 1108 	jnc	00120$
                           1109 ;	radio/radio.c:167: errors.corrected_errors += errcount;
   020B EE            [12] 1110 	mov	a,r6
   020C 2A            [12] 1111 	add	a,r2
   020D FE            [12] 1112 	mov	r6,a
   020E EF            [12] 1113 	mov	a,r7
   020F 3B            [12] 1114 	addc	a,r3
   0210 FF            [12] 1115 	mov	r7,a
   0211 78r08         [12] 1116 	mov	r0,#(_errors + 0x0008)
   0213 EE            [12] 1117 	mov	a,r6
   0214 F2            [24] 1118 	movx	@r0,a
   0215 08            [12] 1119 	inc	r0
   0216 EF            [12] 1120 	mov	a,r7
   0217 F2            [24] 1121 	movx	@r0,a
   0218 80 09         [24] 1122 	sjmp	00121$
   021A                    1123 00120$:
                           1124 ;	radio/radio.c:169: errors.corrected_errors = 0xFFFF;
   021A 78r08         [12] 1125 	mov	r0,#(_errors + 0x0008)
   021C 74 FF         [12] 1126 	mov	a,#0xFF
   021E F2            [24] 1127 	movx	@r0,a
   021F 08            [12] 1128 	inc	r0
   0220 74 FF         [12] 1129 	mov	a,#0xFF
   0222 F2            [24] 1130 	movx	@r0,a
   0223                    1131 00121$:
                           1132 ;	radio/radio.c:171: if (errors.corrected_packets != 0xFFFF) {
   0223 78r0A         [12] 1133 	mov	r0,#(_errors + 0x000a)
   0225 E2            [24] 1134 	movx	a,@r0
   0226 FE            [12] 1135 	mov	r6,a
   0227 08            [12] 1136 	inc	r0
   0228 E2            [24] 1137 	movx	a,@r0
   0229 FF            [12] 1138 	mov	r7,a
   022A BE FF 05      [24] 1139 	cjne	r6,#0xFF,00190$
   022D BF FF 02      [24] 1140 	cjne	r7,#0xFF,00190$
   0230 80 0C         [24] 1141 	sjmp	00125$
   0232                    1142 00190$:
                           1143 ;	radio/radio.c:172: errors.corrected_packets++;
   0232 0E            [12] 1144 	inc	r6
   0233 BE 00 01      [24] 1145 	cjne	r6,#0x00,00191$
   0236 0F            [12] 1146 	inc	r7
   0237                    1147 00191$:
   0237 78r0A         [12] 1148 	mov	r0,#(_errors + 0x000a)
   0239 EE            [12] 1149 	mov	a,r6
   023A F2            [24] 1150 	movx	@r0,a
   023B 08            [12] 1151 	inc	r0
   023C EF            [12] 1152 	mov	a,r7
   023D F2            [24] 1153 	movx	@r0,a
   023E                    1154 00125$:
                           1155 ;	radio/radio.c:176: return true;
   023E D3            [12] 1156 	setb	c
                           1157 ;	radio/radio.c:178: failed:
   023F 22            [24] 1158 	ret
   0240                    1159 00126$:
                           1160 ;	radio/radio.c:179: if (errors.rx_errors != 0xFFFF) {
   0240 78r00         [12] 1161 	mov	r0,#_errors
   0242 E2            [24] 1162 	movx	a,@r0
   0243 FE            [12] 1163 	mov	r6,a
   0244 08            [12] 1164 	inc	r0
   0245 E2            [24] 1165 	movx	a,@r0
   0246 FF            [12] 1166 	mov	r7,a
   0247 BE FF 05      [24] 1167 	cjne	r6,#0xFF,00192$
   024A BF FF 02      [24] 1168 	cjne	r7,#0xFF,00192$
   024D 80 0C         [24] 1169 	sjmp	00128$
   024F                    1170 00192$:
                           1171 ;	radio/radio.c:180: errors.rx_errors++;
   024F 0E            [12] 1172 	inc	r6
   0250 BE 00 01      [24] 1173 	cjne	r6,#0x00,00193$
   0253 0F            [12] 1174 	inc	r7
   0254                    1175 00193$:
   0254 78r00         [12] 1176 	mov	r0,#_errors
   0256 EE            [12] 1177 	mov	a,r6
   0257 F2            [24] 1178 	movx	@r0,a
   0258 08            [12] 1179 	inc	r0
   0259 EF            [12] 1180 	mov	a,r7
   025A F2            [24] 1181 	movx	@r0,a
   025B                    1182 00128$:
                           1183 ;	radio/radio.c:182: return false;
   025B C3            [12] 1184 	clr	c
   025C 22            [24] 1185 	ret
                           1186 ;------------------------------------------------------------
                           1187 ;Allocation info for local variables in function 'radio_write_transmit_fifo'
                           1188 ;------------------------------------------------------------
                           1189 ;n                         Allocated to registers r7 
                           1190 ;------------------------------------------------------------
                           1191 ;	radio/radio.c:189: radio_write_transmit_fifo(register uint8_t n, __xdata uint8_t * __pdata buffer)
                           1192 ;	-----------------------------------------
                           1193 ;	 function radio_write_transmit_fifo
                           1194 ;	-----------------------------------------
   025D                    1195 _radio_write_transmit_fifo:
   025D AF 82         [24] 1196 	mov	r7,dpl
                           1197 ;	radio/radio.c:191: NSS1 = 0;
   025F C2 94         [12] 1198 	clr	_NSS1
                           1199 ;	radio/radio.c:192: SPIF1 = 0;
   0261 C2 B7         [12] 1200 	clr	_SPIF1
                           1201 ;	radio/radio.c:193: SPI1DAT = (0x80 | EZRADIOPRO_FIFO_ACCESS);
   0263 75 86 FF      [24] 1202 	mov	_SPI1DAT,#0xFF
                           1203 ;	radio/radio.c:195: while (n--) {
   0266 78r13         [12] 1204 	mov	r0,#_radio_write_transmit_fifo_PARM_2
   0268 E2            [24] 1205 	movx	a,@r0
   0269 FD            [12] 1206 	mov	r5,a
   026A 08            [12] 1207 	inc	r0
   026B E2            [24] 1208 	movx	a,@r0
   026C FE            [12] 1209 	mov	r6,a
   026D                    1210 00104$:
   026D 8F 04         [24] 1211 	mov	ar4,r7
   026F 1F            [12] 1212 	dec	r7
   0270 EC            [12] 1213 	mov	a,r4
   0271 60 11         [24] 1214 	jz	00107$
                           1215 ;	radio/radio.c:196: while (!TXBMT1) /* noop */;
   0273                    1216 00101$:
   0273 30 B1 FD      [24] 1217 	jnb	_TXBMT1,00101$
                           1218 ;	radio/radio.c:197: SPI1DAT = *buffer++;
   0276 8D 82         [24] 1219 	mov	dpl,r5
   0278 8E 83         [24] 1220 	mov	dph,r6
   027A E0            [24] 1221 	movx	a,@dptr
   027B F5 86         [12] 1222 	mov	_SPI1DAT,a
   027D A3            [24] 1223 	inc	dptr
   027E AD 82         [24] 1224 	mov	r5,dpl
   0280 AE 83         [24] 1225 	mov	r6,dph
                           1226 ;	radio/radio.c:200: while (!TXBMT1) /* noop */;
   0282 80 E9         [24] 1227 	sjmp	00104$
   0284                    1228 00107$:
   0284 30 B1 FD      [24] 1229 	jnb	_TXBMT1,00107$
                           1230 ;	radio/radio.c:201: while ((SPI1CFG & 0x80) == 0x80);
   0287                    1231 00110$:
   0287 74 80         [12] 1232 	mov	a,#0x80
   0289 55 84         [12] 1233 	anl	a,_SPI1CFG
   028B FF            [12] 1234 	mov	r7,a
   028C BF 80 02      [24] 1235 	cjne	r7,#0x80,00137$
   028F 80 F6         [24] 1236 	sjmp	00110$
   0291                    1237 00137$:
                           1238 ;	radio/radio.c:203: SPIF1 = 0;
   0291 C2 B7         [12] 1239 	clr	_SPIF1
                           1240 ;	radio/radio.c:204: NSS1 = 1;
   0293 D2 94         [12] 1241 	setb	_NSS1
   0295 22            [24] 1242 	ret
                           1243 ;------------------------------------------------------------
                           1244 ;Allocation info for local variables in function 'radio_receive_in_progress'
                           1245 ;------------------------------------------------------------
                           1246 ;	radio/radio.c:210: radio_receive_in_progress(void)
                           1247 ;	-----------------------------------------
                           1248 ;	 function radio_receive_in_progress
                           1249 ;	-----------------------------------------
   0296                    1250 _radio_receive_in_progress:
                           1251 ;	radio/radio.c:212: if (packet_received ||
   0296 20*00 05      [24] 1252 	jb	_packet_received,00101$
                           1253 ;	radio/radio.c:213: partial_packet_length != 0) {
   0299 78r01         [12] 1254 	mov	r0,#_partial_packet_length
   029B E2            [24] 1255 	movx	a,@r0
   029C 60 02         [24] 1256 	jz	00102$
   029E                    1257 00101$:
                           1258 ;	radio/radio.c:214: return true;
   029E D3            [12] 1259 	setb	c
   029F 22            [24] 1260 	ret
   02A0                    1261 00102$:
                           1262 ;	radio/radio.c:218: if (register_read(EZRADIOPRO_EZMAC_STATUS) & EZRADIOPRO_PKRX) {
   02A0 75 82 31      [24] 1263 	mov	dpl,#0x31
   02A3 12r0Br6F      [24] 1264 	lcall	_register_read
   02A6 E5 82         [12] 1265 	mov	a,dpl
   02A8 30 E4 02      [24] 1266 	jnb	acc.4,00105$
                           1267 ;	radio/radio.c:219: return true;
   02AB D3            [12] 1268 	setb	c
   02AC 22            [24] 1269 	ret
   02AD                    1270 00105$:
                           1271 ;	radio/radio.c:221: return false;
   02AD C3            [12] 1272 	clr	c
   02AE 22            [24] 1273 	ret
                           1274 ;------------------------------------------------------------
                           1275 ;Allocation info for local variables in function 'radio_preamble_detected'
                           1276 ;------------------------------------------------------------
                           1277 ;	radio/radio.c:228: radio_preamble_detected(void)
                           1278 ;	-----------------------------------------
                           1279 ;	 function radio_preamble_detected
                           1280 ;	-----------------------------------------
   02AF                    1281 _radio_preamble_detected:
                           1282 ;	radio/radio.c:230: EX0_SAVE_DISABLE;
   02AF A2 A8         [12] 1283 	mov	c,_EX0
   02B1 92*02         [24] 1284 	mov	_radio_preamble_detected_EX0_saved_1_157,c
   02B3 C2 A8         [12] 1285 	clr	_EX0
                           1286 ;	radio/radio.c:231: if (preamble_detected) {
                           1287 ;	radio/radio.c:232: preamble_detected = 0;
   02B5 10*01 02      [24] 1288 	jbc	_preamble_detected,00108$
   02B8 80 06         [24] 1289 	sjmp	00102$
   02BA                    1290 00108$:
                           1291 ;	radio/radio.c:233: EX0_RESTORE;
   02BA A2*02         [12] 1292 	mov	c,_radio_preamble_detected_EX0_saved_1_157
   02BC 92 A8         [24] 1293 	mov	_EX0,c
                           1294 ;	radio/radio.c:234: return true;
   02BE D3            [12] 1295 	setb	c
   02BF 22            [24] 1296 	ret
   02C0                    1297 00102$:
                           1298 ;	radio/radio.c:236: EX0_RESTORE;
   02C0 A2*02         [12] 1299 	mov	c,_radio_preamble_detected_EX0_saved_1_157
   02C2 92 A8         [24] 1300 	mov	_EX0,c
                           1301 ;	radio/radio.c:237: return false;
   02C4 C3            [12] 1302 	clr	c
   02C5 22            [24] 1303 	ret
                           1304 ;------------------------------------------------------------
                           1305 ;Allocation info for local variables in function 'radio_last_rssi'
                           1306 ;------------------------------------------------------------
                           1307 ;	radio/radio.c:245: radio_last_rssi(void)
                           1308 ;	-----------------------------------------
                           1309 ;	 function radio_last_rssi
                           1310 ;	-----------------------------------------
   02C6                    1311 _radio_last_rssi:
                           1312 ;	radio/radio.c:247: return last_rssi;
   02C6 78r02         [12] 1313 	mov	r0,#_last_rssi
   02C8 E2            [24] 1314 	movx	a,@r0
   02C9 F5 82         [12] 1315 	mov	dpl,a
   02CB 22            [24] 1316 	ret
                           1317 ;------------------------------------------------------------
                           1318 ;Allocation info for local variables in function 'radio_current_rssi'
                           1319 ;------------------------------------------------------------
                           1320 ;	radio/radio.c:253: radio_current_rssi(void)
                           1321 ;	-----------------------------------------
                           1322 ;	 function radio_current_rssi
                           1323 ;	-----------------------------------------
   02CC                    1324 _radio_current_rssi:
                           1325 ;	radio/radio.c:255: return register_read(EZRADIOPRO_RECEIVED_SIGNAL_STRENGTH_INDICATOR);
   02CC 75 82 26      [24] 1326 	mov	dpl,#0x26
   02CF 02r0Br6F      [24] 1327 	ljmp	_register_read
                           1328 ;------------------------------------------------------------
                           1329 ;Allocation info for local variables in function 'radio_air_rate'
                           1330 ;------------------------------------------------------------
                           1331 ;	radio/radio.c:261: radio_air_rate(void)
                           1332 ;	-----------------------------------------
                           1333 ;	 function radio_air_rate
                           1334 ;	-----------------------------------------
   02D2                    1335 _radio_air_rate:
                           1336 ;	radio/radio.c:263: return settings.air_data_rate;
   02D2 78r0D         [12] 1337 	mov	r0,#(_settings + 0x0008)
   02D4 E2            [24] 1338 	movx	a,@r0
   02D5 F5 82         [12] 1339 	mov	dpl,a
   02D7 22            [24] 1340 	ret
                           1341 ;------------------------------------------------------------
                           1342 ;Allocation info for local variables in function 'radio_clear_transmit_fifo'
                           1343 ;------------------------------------------------------------
                           1344 ;control                   Allocated to registers r7 
                           1345 ;------------------------------------------------------------
                           1346 ;	radio/radio.c:269: radio_clear_transmit_fifo(void)
                           1347 ;	-----------------------------------------
                           1348 ;	 function radio_clear_transmit_fifo
                           1349 ;	-----------------------------------------
   02D8                    1350 _radio_clear_transmit_fifo:
                           1351 ;	radio/radio.c:272: control = register_read(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2);
   02D8 75 82 08      [24] 1352 	mov	dpl,#0x08
   02DB 12r0Br6F      [24] 1353 	lcall	_register_read
   02DE AF 82         [24] 1354 	mov	r7,dpl
                           1355 ;	radio/radio.c:273: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, control | EZRADIOPRO_FFCLRTX);
   02E0 74 01         [12] 1356 	mov	a,#0x01
   02E2 4F            [12] 1357 	orl	a,r7
   02E3 FE            [12] 1358 	mov	r6,a
   02E4 C0 07         [24] 1359 	push	ar7
   02E6 C0 06         [24] 1360 	push	ar6
   02E8 75 82 08      [24] 1361 	mov	dpl,#0x08
   02EB 12r0Br3F      [24] 1362 	lcall	_register_write
   02EE 15 81         [12] 1363 	dec	sp
   02F0 D0 07         [24] 1364 	pop	ar7
                           1365 ;	radio/radio.c:274: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, control & ~EZRADIOPRO_FFCLRTX);
   02F2 53 07 FE      [24] 1366 	anl	ar7,#0xFE
   02F5 C0 07         [24] 1367 	push	ar7
   02F7 75 82 08      [24] 1368 	mov	dpl,#0x08
   02FA 12r0Br3F      [24] 1369 	lcall	_register_write
   02FD 15 81         [12] 1370 	dec	sp
   02FF 22            [24] 1371 	ret
                           1372 ;------------------------------------------------------------
                           1373 ;Allocation info for local variables in function 'radio_clear_receive_fifo'
                           1374 ;------------------------------------------------------------
                           1375 ;control                   Allocated to registers r7 
                           1376 ;------------------------------------------------------------
                           1377 ;	radio/radio.c:281: radio_clear_receive_fifo(void) __reentrant
                           1378 ;	-----------------------------------------
                           1379 ;	 function radio_clear_receive_fifo
                           1380 ;	-----------------------------------------
   0300                    1381 _radio_clear_receive_fifo:
                           1382 ;	radio/radio.c:284: control = register_read(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2);
   0300 75 82 08      [24] 1383 	mov	dpl,#0x08
   0303 12r0Br6F      [24] 1384 	lcall	_register_read
   0306 AF 82         [24] 1385 	mov	r7,dpl
                           1386 ;	radio/radio.c:285: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, control | EZRADIOPRO_FFCLRRX);
   0308 74 02         [12] 1387 	mov	a,#0x02
   030A 4F            [12] 1388 	orl	a,r7
   030B FE            [12] 1389 	mov	r6,a
   030C C0 07         [24] 1390 	push	ar7
   030E C0 06         [24] 1391 	push	ar6
   0310 75 82 08      [24] 1392 	mov	dpl,#0x08
   0313 12r0Br3F      [24] 1393 	lcall	_register_write
   0316 15 81         [12] 1394 	dec	sp
   0318 D0 07         [24] 1395 	pop	ar7
                           1396 ;	radio/radio.c:286: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, control & ~EZRADIOPRO_FFCLRRX);
   031A 53 07 FD      [24] 1397 	anl	ar7,#0xFD
   031D C0 07         [24] 1398 	push	ar7
   031F 75 82 08      [24] 1399 	mov	dpl,#0x08
   0322 12r0Br3F      [24] 1400 	lcall	_register_write
   0325 15 81         [12] 1401 	dec	sp
   0327 22            [24] 1402 	ret
                           1403 ;------------------------------------------------------------
                           1404 ;Allocation info for local variables in function 'radio_transmit_simple'
                           1405 ;------------------------------------------------------------
                           1406 ;length                    Allocated to registers r7 
                           1407 ;n                         Allocated to registers r6 
                           1408 ;status                    Allocated to registers r3 
                           1409 ;------------------------------------------------------------
                           1410 ;	radio/radio.c:298: radio_transmit_simple(__data uint8_t length, __xdata uint8_t * __pdata buf, __pdata uint16_t timeout_ticks)
                           1411 ;	-----------------------------------------
                           1412 ;	 function radio_transmit_simple
                           1413 ;	-----------------------------------------
   0328                    1414 _radio_transmit_simple:
                           1415 ;	radio/radio.c:304: if (length > sizeof(radio_buffer)) {
   0328 E5 82         [12] 1416 	mov	a,dpl
   032A FF            [12] 1417 	mov	r7,a
   032B 24 03         [12] 1418 	add	a,#0xff - 0xFC
   032D 50 19         [24] 1419 	jnc	00102$
                           1420 ;	radio/radio.c:305: panic("oversized packet");
   032F C0 07         [24] 1421 	push	ar7
   0331 74r00         [12] 1422 	mov	a,#__str_0
   0333 C0 E0         [24] 1423 	push	acc
   0335 74s00         [12] 1424 	mov	a,#(__str_0 >> 8)
   0337 C0 E0         [24] 1425 	push	acc
   0339 74 80         [12] 1426 	mov	a,#0x80
   033B C0 E0         [24] 1427 	push	acc
   033D 12r00r00      [24] 1428 	lcall	_panic
   0340 15 81         [12] 1429 	dec	sp
   0342 15 81         [12] 1430 	dec	sp
   0344 15 81         [12] 1431 	dec	sp
   0346 D0 07         [24] 1432 	pop	ar7
   0348                    1433 00102$:
                           1434 ;	radio/radio.c:308: radio_clear_transmit_fifo();
   0348 C0 07         [24] 1435 	push	ar7
   034A 12r02rD8      [24] 1436 	lcall	_radio_clear_transmit_fifo
   034D D0 07         [24] 1437 	pop	ar7
                           1438 ;	radio/radio.c:310: register_write(EZRADIOPRO_TRANSMIT_PACKET_LENGTH, length);
   034F C0 07         [24] 1439 	push	ar7
   0351 C0 07         [24] 1440 	push	ar7
   0353 75 82 3E      [24] 1441 	mov	dpl,#0x3E
   0356 12r0Br3F      [24] 1442 	lcall	_register_write
   0359 15 81         [12] 1443 	dec	sp
   035B D0 07         [24] 1444 	pop	ar7
                           1445 ;	radio/radio.c:313: n = length;
                           1446 ;	radio/radio.c:314: if (n > TX_FIFO_THRESHOLD_LOW) {
   035D EF            [12] 1447 	mov	a,r7
   035E FE            [12] 1448 	mov	r6,a
   035F 24 DF         [12] 1449 	add	a,#0xff - 0x20
   0361 50 02         [24] 1450 	jnc	00104$
                           1451 ;	radio/radio.c:315: n = TX_FIFO_THRESHOLD_LOW;
   0363 7E 20         [12] 1452 	mov	r6,#0x20
   0365                    1453 00104$:
                           1454 ;	radio/radio.c:317: radio_write_transmit_fifo(n, buf);
   0365 78r15         [12] 1455 	mov	r0,#_radio_transmit_simple_PARM_2
   0367 79r13         [12] 1456 	mov	r1,#_radio_write_transmit_fifo_PARM_2
   0369 E2            [24] 1457 	movx	a,@r0
   036A F3            [24] 1458 	movx	@r1,a
   036B 08            [12] 1459 	inc	r0
   036C E2            [24] 1460 	movx	a,@r0
   036D 09            [12] 1461 	inc	r1
   036E F3            [24] 1462 	movx	@r1,a
   036F 8E 82         [24] 1463 	mov	dpl,r6
   0371 C0 07         [24] 1464 	push	ar7
   0373 C0 06         [24] 1465 	push	ar6
   0375 12r02r5D      [24] 1466 	lcall	_radio_write_transmit_fifo
   0378 D0 06         [24] 1467 	pop	ar6
   037A D0 07         [24] 1468 	pop	ar7
                           1469 ;	radio/radio.c:318: length -= n;
   037C EF            [12] 1470 	mov	a,r7
   037D C3            [12] 1471 	clr	c
   037E 9E            [12] 1472 	subb	a,r6
   037F FF            [12] 1473 	mov	r7,a
                           1474 ;	radio/radio.c:319: buf += n;
   0380 78r15         [12] 1475 	mov	r0,#_radio_transmit_simple_PARM_2
   0382 E2            [24] 1476 	movx	a,@r0
   0383 2E            [12] 1477 	add	a,r6
   0384 F2            [24] 1478 	movx	@r0,a
   0385 08            [12] 1479 	inc	r0
   0386 E2            [24] 1480 	movx	a,@r0
   0387 34 00         [12] 1481 	addc	a,#0x00
   0389 F2            [24] 1482 	movx	@r0,a
                           1483 ;	radio/radio.c:322: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, 0);
   038A C0 07         [24] 1484 	push	ar7
   038C E4            [12] 1485 	clr	a
   038D C0 E0         [24] 1486 	push	acc
   038F 75 82 05      [24] 1487 	mov	dpl,#0x05
   0392 12r0Br3F      [24] 1488 	lcall	_register_write
   0395 15 81         [12] 1489 	dec	sp
                           1490 ;	radio/radio.c:323: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, 0);
   0397 E4            [12] 1491 	clr	a
   0398 C0 E0         [24] 1492 	push	acc
   039A 75 82 06      [24] 1493 	mov	dpl,#0x06
   039D 12r0Br3F      [24] 1494 	lcall	_register_write
   03A0 15 81         [12] 1495 	dec	sp
                           1496 ;	radio/radio.c:325: preamble_detected = 0;
   03A2 C2*01         [12] 1497 	clr	_preamble_detected
                           1498 ;	radio/radio.c:326: transmit_started = false;
   03A4 C2*03         [12] 1499 	clr	_radio_transmit_simple_transmit_started_1_170
                           1500 ;	radio/radio.c:329: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_1, EZRADIOPRO_TXON | EZRADIOPRO_XTON);
   03A6 74 09         [12] 1501 	mov	a,#0x09
   03A8 C0 E0         [24] 1502 	push	acc
   03AA 75 82 07      [24] 1503 	mov	dpl,#0x07
   03AD 12r0Br3F      [24] 1504 	lcall	_register_write
   03B0 15 81         [12] 1505 	dec	sp
                           1506 ;	radio/radio.c:332: tstart = timer2_tick();
   03B2 12r00r00      [24] 1507 	lcall	_timer2_tick
   03B5 AC 82         [24] 1508 	mov	r4,dpl
   03B7 AD 83         [24] 1509 	mov	r5,dph
   03B9 D0 07         [24] 1510 	pop	ar7
                           1511 ;	radio/radio.c:333: while ((uint16_t)(timer2_tick() - tstart) < timeout_ticks) {
   03BB                    1512 00130$:
   03BB C0 07         [24] 1513 	push	ar7
   03BD C0 05         [24] 1514 	push	ar5
   03BF C0 04         [24] 1515 	push	ar4
   03C1 12r00r00      [24] 1516 	lcall	_timer2_tick
   03C4 AA 82         [24] 1517 	mov	r2,dpl
   03C6 AB 83         [24] 1518 	mov	r3,dph
   03C8 D0 04         [24] 1519 	pop	ar4
   03CA D0 05         [24] 1520 	pop	ar5
   03CC D0 07         [24] 1521 	pop	ar7
   03CE EA            [12] 1522 	mov	a,r2
   03CF C3            [12] 1523 	clr	c
   03D0 9C            [12] 1524 	subb	a,r4
   03D1 FA            [12] 1525 	mov	r2,a
   03D2 EB            [12] 1526 	mov	a,r3
   03D3 9D            [12] 1527 	subb	a,r5
   03D4 FB            [12] 1528 	mov	r3,a
   03D5 78r17         [12] 1529 	mov	r0,#_radio_transmit_simple_PARM_3
   03D7 C3            [12] 1530 	clr	c
   03D8 E2            [24] 1531 	movx	a,@r0
   03D9 F5 F0         [12] 1532 	mov	b,a
   03DB EA            [12] 1533 	mov	a,r2
   03DC 95 F0         [12] 1534 	subb	a,b
   03DE 08            [12] 1535 	inc	r0
   03DF E2            [24] 1536 	movx	a,@r0
   03E0 F5 F0         [12] 1537 	mov	b,a
   03E2 EB            [12] 1538 	mov	a,r3
   03E3 95 F0         [12] 1539 	subb	a,b
   03E5 40 03         [24] 1540 	jc	00199$
   03E7 02r04rF4      [24] 1541 	ljmp	00132$
   03EA                    1542 00199$:
                           1543 ;	radio/radio.c:337: status = register_read(EZRADIOPRO_INTERRUPT_STATUS_1);
   03EA 75 82 03      [24] 1544 	mov	dpl,#0x03
   03ED C0 07         [24] 1545 	push	ar7
   03EF C0 05         [24] 1546 	push	ar5
   03F1 C0 04         [24] 1547 	push	ar4
   03F3 12r0Br6F      [24] 1548 	lcall	_register_read
   03F6 AB 82         [24] 1549 	mov	r3,dpl
   03F8 D0 04         [24] 1550 	pop	ar4
   03FA D0 05         [24] 1551 	pop	ar5
   03FC D0 07         [24] 1552 	pop	ar7
                           1553 ;	radio/radio.c:338: if (transmit_started && length != 0 && (status & EZRADIOPRO_ITXFFAEM)) {
   03FE 30*03 40      [24] 1554 	jnb	_radio_transmit_simple_transmit_started_1_170,00108$
   0401 EF            [12] 1555 	mov	a,r7
   0402 60 3D         [24] 1556 	jz	00108$
   0404 EB            [12] 1557 	mov	a,r3
   0405 30 E5 39      [24] 1558 	jnb	acc.5,00108$
                           1559 ;	radio/radio.c:345: n = 4;
   0408 7E 04         [12] 1560 	mov	r6,#0x04
                           1561 ;	radio/radio.c:346: if (n > length) {
   040A BF 04 00      [24] 1562 	cjne	r7,#0x04,00203$
   040D                    1563 00203$:
   040D 50 02         [24] 1564 	jnc	00106$
                           1565 ;	radio/radio.c:347: n = length;
   040F 8F 06         [24] 1566 	mov	ar6,r7
   0411                    1567 00106$:
                           1568 ;	radio/radio.c:349: radio_write_transmit_fifo(n, buf);
   0411 78r15         [12] 1569 	mov	r0,#_radio_transmit_simple_PARM_2
   0413 79r13         [12] 1570 	mov	r1,#_radio_write_transmit_fifo_PARM_2
   0415 E2            [24] 1571 	movx	a,@r0
   0416 F3            [24] 1572 	movx	@r1,a
   0417 08            [12] 1573 	inc	r0
   0418 E2            [24] 1574 	movx	a,@r0
   0419 09            [12] 1575 	inc	r1
   041A F3            [24] 1576 	movx	@r1,a
   041B 8E 82         [24] 1577 	mov	dpl,r6
   041D C0 07         [24] 1578 	push	ar7
   041F C0 06         [24] 1579 	push	ar6
   0421 C0 05         [24] 1580 	push	ar5
   0423 C0 04         [24] 1581 	push	ar4
   0425 12r02r5D      [24] 1582 	lcall	_radio_write_transmit_fifo
   0428 D0 04         [24] 1583 	pop	ar4
   042A D0 05         [24] 1584 	pop	ar5
   042C D0 06         [24] 1585 	pop	ar6
   042E D0 07         [24] 1586 	pop	ar7
                           1587 ;	radio/radio.c:350: length -= n;
   0430 EF            [12] 1588 	mov	a,r7
   0431 C3            [12] 1589 	clr	c
   0432 9E            [12] 1590 	subb	a,r6
   0433 FF            [12] 1591 	mov	r7,a
                           1592 ;	radio/radio.c:351: buf += n;
   0434 78r15         [12] 1593 	mov	r0,#_radio_transmit_simple_PARM_2
   0436 E2            [24] 1594 	movx	a,@r0
   0437 2E            [12] 1595 	add	a,r6
   0438 F2            [24] 1596 	movx	@r0,a
   0439 08            [12] 1597 	inc	r0
   043A E2            [24] 1598 	movx	a,@r0
   043B 34 00         [12] 1599 	addc	a,#0x00
   043D F2            [24] 1600 	movx	@r0,a
                           1601 ;	radio/radio.c:352: continue;
   043E 02r03rBB      [24] 1602 	ljmp	00130$
   0441                    1603 00108$:
                           1604 ;	radio/radio.c:354: if (transmit_started && length != 0 && (status & EZRADIOPRO_ITXFFAFULL) == 0) {
   0441 30*03 40      [24] 1605 	jnb	_radio_transmit_simple_transmit_started_1_170,00114$
   0444 EF            [12] 1606 	mov	a,r7
   0445 60 3D         [24] 1607 	jz	00114$
   0447 EB            [12] 1608 	mov	a,r3
   0448 20 E6 39      [24] 1609 	jb	acc.6,00114$
                           1610 ;	radio/radio.c:358: n = 4;
   044B 7E 04         [12] 1611 	mov	r6,#0x04
                           1612 ;	radio/radio.c:359: if (n > length) {
   044D BF 04 00      [24] 1613 	cjne	r7,#0x04,00208$
   0450                    1614 00208$:
   0450 50 02         [24] 1615 	jnc	00112$
                           1616 ;	radio/radio.c:360: n = length;
   0452 8F 06         [24] 1617 	mov	ar6,r7
   0454                    1618 00112$:
                           1619 ;	radio/radio.c:362: radio_write_transmit_fifo(n, buf);
   0454 78r15         [12] 1620 	mov	r0,#_radio_transmit_simple_PARM_2
   0456 79r13         [12] 1621 	mov	r1,#_radio_write_transmit_fifo_PARM_2
   0458 E2            [24] 1622 	movx	a,@r0
   0459 F3            [24] 1623 	movx	@r1,a
   045A 08            [12] 1624 	inc	r0
   045B E2            [24] 1625 	movx	a,@r0
   045C 09            [12] 1626 	inc	r1
   045D F3            [24] 1627 	movx	@r1,a
   045E 8E 82         [24] 1628 	mov	dpl,r6
   0460 C0 07         [24] 1629 	push	ar7
   0462 C0 06         [24] 1630 	push	ar6
   0464 C0 05         [24] 1631 	push	ar5
   0466 C0 04         [24] 1632 	push	ar4
   0468 12r02r5D      [24] 1633 	lcall	_radio_write_transmit_fifo
   046B D0 04         [24] 1634 	pop	ar4
   046D D0 05         [24] 1635 	pop	ar5
   046F D0 06         [24] 1636 	pop	ar6
   0471 D0 07         [24] 1637 	pop	ar7
                           1638 ;	radio/radio.c:363: length -= n;
   0473 EF            [12] 1639 	mov	a,r7
   0474 C3            [12] 1640 	clr	c
   0475 9E            [12] 1641 	subb	a,r6
   0476 FF            [12] 1642 	mov	r7,a
                           1643 ;	radio/radio.c:364: buf += n;
   0477 78r15         [12] 1644 	mov	r0,#_radio_transmit_simple_PARM_2
   0479 E2            [24] 1645 	movx	a,@r0
   047A 2E            [12] 1646 	add	a,r6
   047B F2            [24] 1647 	movx	@r0,a
   047C 08            [12] 1648 	inc	r0
   047D E2            [24] 1649 	movx	a,@r0
   047E 34 00         [12] 1650 	addc	a,#0x00
   0480 F2            [24] 1651 	movx	@r0,a
                           1652 ;	radio/radio.c:365: continue;
   0481 02r03rBB      [24] 1653 	ljmp	00130$
   0484                    1654 00114$:
                           1655 ;	radio/radio.c:368: if (status & EZRADIOPRO_IFFERR) {
   0484 EB            [12] 1656 	mov	a,r3
   0485 30 E7 20      [24] 1657 	jnb	acc.7,00120$
                           1658 ;	radio/radio.c:370: radio_clear_transmit_fifo();
   0488 12r02rD8      [24] 1659 	lcall	_radio_clear_transmit_fifo
                           1660 ;	radio/radio.c:372: if (errors.tx_errors != 0xFFFF) {
   048B 78r02         [12] 1661 	mov	r0,#(_errors + 0x0002)
   048D E2            [24] 1662 	movx	a,@r0
   048E FA            [12] 1663 	mov	r2,a
   048F 08            [12] 1664 	inc	r0
   0490 E2            [24] 1665 	movx	a,@r0
   0491 FE            [12] 1666 	mov	r6,a
   0492 BA FF 05      [24] 1667 	cjne	r2,#0xFF,00211$
   0495 BE FF 02      [24] 1668 	cjne	r6,#0xFF,00211$
   0498 80 0C         [24] 1669 	sjmp	00118$
   049A                    1670 00211$:
                           1671 ;	radio/radio.c:373: errors.tx_errors++;
   049A 0A            [12] 1672 	inc	r2
   049B BA 00 01      [24] 1673 	cjne	r2,#0x00,00212$
   049E 0E            [12] 1674 	inc	r6
   049F                    1675 00212$:
   049F 78r02         [12] 1676 	mov	r0,#(_errors + 0x0002)
   04A1 EA            [12] 1677 	mov	a,r2
   04A2 F2            [24] 1678 	movx	@r0,a
   04A3 08            [12] 1679 	inc	r0
   04A4 EE            [12] 1680 	mov	a,r6
   04A5 F2            [24] 1681 	movx	@r0,a
   04A6                    1682 00118$:
                           1683 ;	radio/radio.c:375: return false;
   04A6 C3            [12] 1684 	clr	c
   04A7 22            [24] 1685 	ret
   04A8                    1686 00120$:
                           1687 ;	radio/radio.c:380: status = register_read(EZRADIOPRO_DEVICE_STATUS);
   04A8 75 82 02      [24] 1688 	mov	dpl,#0x02
   04AB C0 07         [24] 1689 	push	ar7
   04AD C0 05         [24] 1690 	push	ar5
   04AF C0 04         [24] 1691 	push	ar4
   04B1 12r0Br6F      [24] 1692 	lcall	_register_read
   04B4 AB 82         [24] 1693 	mov	r3,dpl
   04B6 D0 04         [24] 1694 	pop	ar4
   04B8 D0 05         [24] 1695 	pop	ar5
   04BA D0 07         [24] 1696 	pop	ar7
                           1697 ;	radio/radio.c:381: if (status & 0x02) {
   04BC EB            [12] 1698 	mov	a,r3
   04BD 30 E1 05      [24] 1699 	jnb	acc.1,00122$
                           1700 ;	radio/radio.c:383: transmit_started = true;
   04C0 D2*03         [12] 1701 	setb	_radio_transmit_simple_transmit_started_1_170
                           1702 ;	radio/radio.c:384: continue;
   04C2 02r03rBB      [24] 1703 	ljmp	00130$
   04C5                    1704 00122$:
                           1705 ;	radio/radio.c:386: if (transmit_started && (status & 0x02) == 0) {
   04C5 20*03 03      [24] 1706 	jb	_radio_transmit_simple_transmit_started_1_170,00214$
   04C8 02r03rBB      [24] 1707 	ljmp	00130$
   04CB                    1708 00214$:
   04CB EB            [12] 1709 	mov	a,r3
   04CC 30 E1 03      [24] 1710 	jnb	acc.1,00215$
   04CF 02r03rBB      [24] 1711 	ljmp	00130$
   04D2                    1712 00215$:
                           1713 ;	radio/radio.c:389: if (length != 0) {
   04D2 EF            [12] 1714 	mov	a,r7
   04D3 60 1D         [24] 1715 	jz	00126$
                           1716 ;	radio/radio.c:391: if (errors.tx_errors != 0xFFFF) {
   04D5 78r02         [12] 1717 	mov	r0,#(_errors + 0x0002)
   04D7 E2            [24] 1718 	movx	a,@r0
   04D8 FE            [12] 1719 	mov	r6,a
   04D9 08            [12] 1720 	inc	r0
   04DA E2            [24] 1721 	movx	a,@r0
   04DB FF            [12] 1722 	mov	r7,a
   04DC BE FF 05      [24] 1723 	cjne	r6,#0xFF,00217$
   04DF BF FF 02      [24] 1724 	cjne	r7,#0xFF,00217$
   04E2 80 0C         [24] 1725 	sjmp	00124$
   04E4                    1726 00217$:
                           1727 ;	radio/radio.c:392: errors.tx_errors++;
   04E4 0E            [12] 1728 	inc	r6
   04E5 BE 00 01      [24] 1729 	cjne	r6,#0x00,00218$
   04E8 0F            [12] 1730 	inc	r7
   04E9                    1731 00218$:
   04E9 78r02         [12] 1732 	mov	r0,#(_errors + 0x0002)
   04EB EE            [12] 1733 	mov	a,r6
   04EC F2            [24] 1734 	movx	@r0,a
   04ED 08            [12] 1735 	inc	r0
   04EE EF            [12] 1736 	mov	a,r7
   04EF F2            [24] 1737 	movx	@r0,a
   04F0                    1738 00124$:
                           1739 ;	radio/radio.c:394: return false;
   04F0 C3            [12] 1740 	clr	c
   04F1 22            [24] 1741 	ret
   04F2                    1742 00126$:
                           1743 ;	radio/radio.c:396: return true;			
   04F2 D3            [12] 1744 	setb	c
   04F3 22            [24] 1745 	ret
   04F4                    1746 00132$:
                           1747 ;	radio/radio.c:407: if (errors.tx_errors != 0xFFFF) {
   04F4 78r02         [12] 1748 	mov	r0,#(_errors + 0x0002)
   04F6 E2            [24] 1749 	movx	a,@r0
   04F7 FE            [12] 1750 	mov	r6,a
   04F8 08            [12] 1751 	inc	r0
   04F9 E2            [24] 1752 	movx	a,@r0
   04FA FF            [12] 1753 	mov	r7,a
   04FB BE FF 05      [24] 1754 	cjne	r6,#0xFF,00219$
   04FE BF FF 02      [24] 1755 	cjne	r7,#0xFF,00219$
   0501 80 0C         [24] 1756 	sjmp	00134$
   0503                    1757 00219$:
                           1758 ;	radio/radio.c:408: errors.tx_errors++;
   0503 0E            [12] 1759 	inc	r6
   0504 BE 00 01      [24] 1760 	cjne	r6,#0x00,00220$
   0507 0F            [12] 1761 	inc	r7
   0508                    1762 00220$:
   0508 78r02         [12] 1763 	mov	r0,#(_errors + 0x0002)
   050A EE            [12] 1764 	mov	a,r6
   050B F2            [24] 1765 	movx	@r0,a
   050C 08            [12] 1766 	inc	r0
   050D EF            [12] 1767 	mov	a,r7
   050E F2            [24] 1768 	movx	@r0,a
   050F                    1769 00134$:
                           1770 ;	radio/radio.c:411: return false;
   050F C3            [12] 1771 	clr	c
   0510 22            [24] 1772 	ret
                           1773 ;------------------------------------------------------------
                           1774 ;Allocation info for local variables in function 'radio_transmit_golay'
                           1775 ;------------------------------------------------------------
                           1776 ;elen                      Allocated with name '_radio_transmit_golay_elen_1_186'
                           1777 ;rlen                      Allocated to registers r5 
                           1778 ;length                    Allocated with name '_radio_transmit_golay_length_1_185'
                           1779 ;gin                       Allocated with name '_radio_transmit_golay_gin_1_186'
                           1780 ;------------------------------------------------------------
                           1781 ;	radio/radio.c:424: radio_transmit_golay(uint8_t length, __xdata uint8_t * __pdata buf, __pdata uint16_t timeout_ticks)
                           1782 ;	-----------------------------------------
                           1783 ;	 function radio_transmit_golay
                           1784 ;	-----------------------------------------
   0511                    1785 _radio_transmit_golay:
   0511 E5 82         [12] 1786 	mov	a,dpl
                           1787 ;	radio/radio.c:430: if (length > (sizeof(radio_buffer)/2)-6) {
   0513 90r01r02      [24] 1788 	mov	dptr,#_radio_transmit_golay_length_1_185
   0516 F0            [24] 1789 	movx	@dptr,a
   0517 FF            [12] 1790 	mov  r7,a
   0518 24 87         [12] 1791 	add	a,#0xff - 0x78
   051A 50 19         [24] 1792 	jnc	00102$
                           1793 ;	radio/radio.c:432: panic("oversized golay packet");		
   051C C0 07         [24] 1794 	push	ar7
   051E 74r11         [12] 1795 	mov	a,#__str_1
   0520 C0 E0         [24] 1796 	push	acc
   0522 74s00         [12] 1797 	mov	a,#(__str_1 >> 8)
   0524 C0 E0         [24] 1798 	push	acc
   0526 74 80         [12] 1799 	mov	a,#0x80
   0528 C0 E0         [24] 1800 	push	acc
   052A 12r00r00      [24] 1801 	lcall	_panic
   052D 15 81         [12] 1802 	dec	sp
   052F 15 81         [12] 1803 	dec	sp
   0531 15 81         [12] 1804 	dec	sp
   0533 D0 07         [24] 1805 	pop	ar7
   0535                    1806 00102$:
                           1807 ;	radio/radio.c:436: rlen = ((length+2)/3)*3;
   0535 8F 05         [24] 1808 	mov	ar5,r7
   0537 7E 00         [12] 1809 	mov	r6,#0x00
   0539 74 02         [12] 1810 	mov	a,#0x02
   053B 2D            [12] 1811 	add	a,r5
   053C FD            [12] 1812 	mov	r5,a
   053D E4            [12] 1813 	clr	a
   053E 3E            [12] 1814 	addc	a,r6
   053F FE            [12] 1815 	mov	r6,a
   0540 90r00r00      [24] 1816 	mov	dptr,#__divsint_PARM_2
   0543 74 03         [12] 1817 	mov	a,#0x03
   0545 F0            [24] 1818 	movx	@dptr,a
   0546 E4            [12] 1819 	clr	a
   0547 A3            [24] 1820 	inc	dptr
   0548 F0            [24] 1821 	movx	@dptr,a
   0549 8D 82         [24] 1822 	mov	dpl,r5
   054B 8E 83         [24] 1823 	mov	dph,r6
   054D C0 07         [24] 1824 	push	ar7
   054F 12r00r00      [24] 1825 	lcall	__divsint
   0552 AD 82         [24] 1826 	mov	r5,dpl
   0554 D0 07         [24] 1827 	pop	ar7
   0556 ED            [12] 1828 	mov	a,r5
   0557 75 F0 03      [24] 1829 	mov	b,#0x03
   055A A4            [48] 1830 	mul	ab
                           1831 ;	radio/radio.c:439: elen = (rlen+6)*2;
   055B FD            [12] 1832 	mov	r5,a
   055C 24 06         [12] 1833 	add	a,#0x06
   055E 25 E0         [12] 1834 	add	a,acc
   0560 F5*02         [12] 1835 	mov	_radio_transmit_golay_elen_1_186,a
                           1836 ;	radio/radio.c:442: gin[0] = netid[0];
   0562 78r03         [12] 1837 	mov	r0,#_netid
   0564 E2            [24] 1838 	movx	a,@r0
   0565 90r01r03      [24] 1839 	mov	dptr,#_radio_transmit_golay_gin_1_186
   0568 F0            [24] 1840 	movx	@dptr,a
                           1841 ;	radio/radio.c:443: gin[1] = netid[1];
   0569 78r04         [12] 1842 	mov	r0,#(_netid + 0x0001)
   056B E2            [24] 1843 	movx	a,@r0
   056C 90r01r04      [24] 1844 	mov	dptr,#(_radio_transmit_golay_gin_1_186 + 0x0001)
   056F F0            [24] 1845 	movx	@dptr,a
                           1846 ;	radio/radio.c:444: gin[2] = length;
   0570 90r01r05      [24] 1847 	mov	dptr,#(_radio_transmit_golay_gin_1_186 + 0x0002)
   0573 EF            [12] 1848 	mov	a,r7
   0574 F0            [24] 1849 	movx	@dptr,a
                           1850 ;	radio/radio.c:447: golay_encode(3, gin, radio_buffer);
   0575 78r00         [12] 1851 	mov	r0,#_golay_encode_PARM_2
   0577 74r03         [12] 1852 	mov	a,#_radio_transmit_golay_gin_1_186
   0579 F2            [24] 1853 	movx	@r0,a
   057A 08            [12] 1854 	inc	r0
   057B 74s01         [12] 1855 	mov	a,#(_radio_transmit_golay_gin_1_186 >> 8)
   057D F2            [24] 1856 	movx	@r0,a
   057E 78r00         [12] 1857 	mov	r0,#_golay_encode_PARM_3
   0580 74r00         [12] 1858 	mov	a,#_radio_buffer
   0582 F2            [24] 1859 	movx	@r0,a
   0583 08            [12] 1860 	inc	r0
   0584 74s00         [12] 1861 	mov	a,#(_radio_buffer >> 8)
   0586 F2            [24] 1862 	movx	@r0,a
   0587 75 82 03      [24] 1863 	mov	dpl,#0x03
   058A C0 07         [24] 1864 	push	ar7
   058C C0 05         [24] 1865 	push	ar5
   058E 12r00r00      [24] 1866 	lcall	_golay_encode
   0591 D0 05         [24] 1867 	pop	ar5
   0593 D0 07         [24] 1868 	pop	ar7
                           1869 ;	radio/radio.c:451: crc = crc16(length, buf);
   0595 78r19         [12] 1870 	mov	r0,#_radio_transmit_golay_PARM_2
   0597 E2            [24] 1871 	movx	a,@r0
   0598 F5*00         [12] 1872 	mov	_crc16_PARM_2,a
   059A 08            [12] 1873 	inc	r0
   059B E2            [24] 1874 	movx	a,@r0
   059C F5*01         [12] 1875 	mov	(_crc16_PARM_2 + 1),a
   059E 8F 82         [24] 1876 	mov	dpl,r7
   05A0 C0 07         [24] 1877 	push	ar7
   05A2 C0 05         [24] 1878 	push	ar5
   05A4 12r00r00      [24] 1879 	lcall	_crc16
   05A7 AB 82         [24] 1880 	mov	r3,dpl
   05A9 AC 83         [24] 1881 	mov	r4,dph
   05AB D0 05         [24] 1882 	pop	ar5
   05AD D0 07         [24] 1883 	pop	ar7
                           1884 ;	radio/radio.c:452: gin[0] = crc&0xFF;
   05AF 8B 02         [24] 1885 	mov	ar2,r3
   05B1 90r01r03      [24] 1886 	mov	dptr,#_radio_transmit_golay_gin_1_186
   05B4 EA            [12] 1887 	mov	a,r2
   05B5 F0            [24] 1888 	movx	@dptr,a
                           1889 ;	radio/radio.c:453: gin[1] = crc>>8;
   05B6 8C 03         [24] 1890 	mov	ar3,r4
   05B8 90r01r04      [24] 1891 	mov	dptr,#(_radio_transmit_golay_gin_1_186 + 0x0001)
   05BB EB            [12] 1892 	mov	a,r3
   05BC F0            [24] 1893 	movx	@dptr,a
                           1894 ;	radio/radio.c:454: gin[2] = length;
   05BD 90r01r05      [24] 1895 	mov	dptr,#(_radio_transmit_golay_gin_1_186 + 0x0002)
   05C0 EF            [12] 1896 	mov	a,r7
   05C1 F0            [24] 1897 	movx	@dptr,a
                           1898 ;	radio/radio.c:457: golay_encode(3, gin, &radio_buffer[6]);
   05C2 78r00         [12] 1899 	mov	r0,#_golay_encode_PARM_3
   05C4 74 06         [12] 1900 	mov	a,#0x06
   05C6 24r00         [12] 1901 	add	a,#_radio_buffer
   05C8 F2            [24] 1902 	movx	@r0,a
   05C9 E4            [12] 1903 	clr	a
   05CA 34s00         [12] 1904 	addc	a,#(_radio_buffer >> 8)
   05CC 08            [12] 1905 	inc	r0
   05CD F2            [24] 1906 	movx	@r0,a
   05CE 78r00         [12] 1907 	mov	r0,#_golay_encode_PARM_2
   05D0 74r03         [12] 1908 	mov	a,#_radio_transmit_golay_gin_1_186
   05D2 F2            [24] 1909 	movx	@r0,a
   05D3 08            [12] 1910 	inc	r0
   05D4 74s01         [12] 1911 	mov	a,#(_radio_transmit_golay_gin_1_186 >> 8)
   05D6 F2            [24] 1912 	movx	@r0,a
   05D7 75 82 03      [24] 1913 	mov	dpl,#0x03
   05DA C0 05         [24] 1914 	push	ar5
   05DC 12r00r00      [24] 1915 	lcall	_golay_encode
   05DF D0 05         [24] 1916 	pop	ar5
                           1917 ;	radio/radio.c:460: golay_encode(rlen, buf, &radio_buffer[12]);
   05E1 78r00         [12] 1918 	mov	r0,#_golay_encode_PARM_3
   05E3 74 0C         [12] 1919 	mov	a,#0x0C
   05E5 24r00         [12] 1920 	add	a,#_radio_buffer
   05E7 F2            [24] 1921 	movx	@r0,a
   05E8 E4            [12] 1922 	clr	a
   05E9 34s00         [12] 1923 	addc	a,#(_radio_buffer >> 8)
   05EB 08            [12] 1924 	inc	r0
   05EC F2            [24] 1925 	movx	@r0,a
   05ED 78r19         [12] 1926 	mov	r0,#_radio_transmit_golay_PARM_2
   05EF 79r00         [12] 1927 	mov	r1,#_golay_encode_PARM_2
   05F1 E2            [24] 1928 	movx	a,@r0
   05F2 F3            [24] 1929 	movx	@r1,a
   05F3 08            [12] 1930 	inc	r0
   05F4 E2            [24] 1931 	movx	a,@r0
   05F5 09            [12] 1932 	inc	r1
   05F6 F3            [24] 1933 	movx	@r1,a
   05F7 8D 82         [24] 1934 	mov	dpl,r5
   05F9 12r00r00      [24] 1935 	lcall	_golay_encode
                           1936 ;	radio/radio.c:462: return radio_transmit_simple(elen, radio_buffer, timeout_ticks);
   05FC 78r15         [12] 1937 	mov	r0,#_radio_transmit_simple_PARM_2
   05FE 74r00         [12] 1938 	mov	a,#_radio_buffer
   0600 F2            [24] 1939 	movx	@r0,a
   0601 08            [12] 1940 	inc	r0
   0602 74s00         [12] 1941 	mov	a,#(_radio_buffer >> 8)
   0604 F2            [24] 1942 	movx	@r0,a
   0605 78r1B         [12] 1943 	mov	r0,#_radio_transmit_golay_PARM_3
   0607 79r17         [12] 1944 	mov	r1,#_radio_transmit_simple_PARM_3
   0609 E2            [24] 1945 	movx	a,@r0
   060A F3            [24] 1946 	movx	@r1,a
   060B 08            [12] 1947 	inc	r0
   060C E2            [24] 1948 	movx	a,@r0
   060D 09            [12] 1949 	inc	r1
   060E F3            [24] 1950 	movx	@r1,a
   060F 85*02 82      [24] 1951 	mov	dpl,_radio_transmit_golay_elen_1_186
   0612 12r03r28      [24] 1952 	lcall	_radio_transmit_simple
   0615 92*04         [24] 1953 	mov  _radio_transmit_golay_sloc0_1_0,c
   0617 22            [24] 1954 	ret
                           1955 ;------------------------------------------------------------
                           1956 ;Allocation info for local variables in function 'radio_transmit'
                           1957 ;------------------------------------------------------------
                           1958 ;length                    Allocated with name '_radio_transmit_length_1_188'
                           1959 ;------------------------------------------------------------
                           1960 ;	radio/radio.c:474: radio_transmit(uint8_t length, __xdata uint8_t * __pdata buf, __pdata uint16_t timeout_ticks)
                           1961 ;	-----------------------------------------
                           1962 ;	 function radio_transmit
                           1963 ;	-----------------------------------------
   0618                    1964 _radio_transmit:
   0618 E5 82         [12] 1965 	mov	a,dpl
   061A 90r01r06      [24] 1966 	mov	dptr,#_radio_transmit_length_1_188
   061D F0            [24] 1967 	movx	@dptr,a
                           1968 ;	radio/radio.c:477: EX0_SAVE_DISABLE;
   061E A2 A8         [12] 1969 	mov	c,_EX0
   0620 92*05         [24] 1970 	mov	_radio_transmit_EX0_saved_1_189,c
   0622 C2 A8         [12] 1971 	clr	_EX0
                           1972 ;	radio/radio.c:483: if (!feature_golay) {
   0624 20*00 22      [24] 1973 	jb	_feature_golay,00102$
                           1974 ;	radio/radio.c:484: ret = radio_transmit_simple(length, buf, timeout_ticks);
   0627 90r01r06      [24] 1975 	mov	dptr,#_radio_transmit_length_1_188
   062A E0            [24] 1976 	movx	a,@dptr
   062B FF            [12] 1977 	mov	r7,a
   062C 78r1D         [12] 1978 	mov	r0,#_radio_transmit_PARM_2
   062E 79r15         [12] 1979 	mov	r1,#_radio_transmit_simple_PARM_2
   0630 E2            [24] 1980 	movx	a,@r0
   0631 F3            [24] 1981 	movx	@r1,a
   0632 08            [12] 1982 	inc	r0
   0633 E2            [24] 1983 	movx	a,@r0
   0634 09            [12] 1984 	inc	r1
   0635 F3            [24] 1985 	movx	@r1,a
   0636 78r1F         [12] 1986 	mov	r0,#_radio_transmit_PARM_3
   0638 79r17         [12] 1987 	mov	r1,#_radio_transmit_simple_PARM_3
   063A E2            [24] 1988 	movx	a,@r0
   063B F3            [24] 1989 	movx	@r1,a
   063C 08            [12] 1990 	inc	r0
   063D E2            [24] 1991 	movx	a,@r0
   063E 09            [12] 1992 	inc	r1
   063F F3            [24] 1993 	movx	@r1,a
   0640 8F 82         [24] 1994 	mov	dpl,r7
   0642 12r03r28      [24] 1995 	lcall	_radio_transmit_simple
   0645 92*06         [24] 1996 	mov	_radio_transmit_sloc0_1_0,c
   0647 80 20         [24] 1997 	sjmp	00103$
   0649                    1998 00102$:
                           1999 ;	radio/radio.c:486: ret = radio_transmit_golay(length, buf, timeout_ticks);
   0649 90r01r06      [24] 2000 	mov	dptr,#_radio_transmit_length_1_188
   064C E0            [24] 2001 	movx	a,@dptr
   064D FF            [12] 2002 	mov	r7,a
   064E 78r1D         [12] 2003 	mov	r0,#_radio_transmit_PARM_2
   0650 79r19         [12] 2004 	mov	r1,#_radio_transmit_golay_PARM_2
   0652 E2            [24] 2005 	movx	a,@r0
   0653 F3            [24] 2006 	movx	@r1,a
   0654 08            [12] 2007 	inc	r0
   0655 E2            [24] 2008 	movx	a,@r0
   0656 09            [12] 2009 	inc	r1
   0657 F3            [24] 2010 	movx	@r1,a
   0658 78r1F         [12] 2011 	mov	r0,#_radio_transmit_PARM_3
   065A 79r1B         [12] 2012 	mov	r1,#_radio_transmit_golay_PARM_3
   065C E2            [24] 2013 	movx	a,@r0
   065D F3            [24] 2014 	movx	@r1,a
   065E 08            [12] 2015 	inc	r0
   065F E2            [24] 2016 	movx	a,@r0
   0660 09            [12] 2017 	inc	r1
   0661 F3            [24] 2018 	movx	@r1,a
   0662 8F 82         [24] 2019 	mov	dpl,r7
   0664 12r05r11      [24] 2020 	lcall	_radio_transmit_golay
   0667 92*06         [24] 2021 	mov	_radio_transmit_sloc0_1_0,c
   0669                    2022 00103$:
                           2023 ;	radio/radio.c:491: EX0_RESTORE;
   0669 A2*05         [12] 2024 	mov	c,_radio_transmit_EX0_saved_1_189
   066B 92 A8         [24] 2025 	mov	_EX0,c
                           2026 ;	radio/radio.c:492: return ret;
   066D A2*06         [12] 2027 	mov	c,_radio_transmit_sloc0_1_0
   066F 22            [24] 2028 	ret
                           2029 ;------------------------------------------------------------
                           2030 ;Allocation info for local variables in function 'radio_receiver_on'
                           2031 ;------------------------------------------------------------
                           2032 ;	radio/radio.c:499: radio_receiver_on(void)
                           2033 ;	-----------------------------------------
                           2034 ;	 function radio_receiver_on
                           2035 ;	-----------------------------------------
   0670                    2036 _radio_receiver_on:
                           2037 ;	radio/radio.c:501: EX0 = 0;
   0670 C2 A8         [12] 2038 	clr	_EX0
                           2039 ;	radio/radio.c:503: packet_received = 0;
   0672 C2*00         [12] 2040 	clr	_packet_received
                           2041 ;	radio/radio.c:504: receive_packet_length = 0;
   0674 78r00         [12] 2042 	mov	r0,#_receive_packet_length
   0676 E4            [12] 2043 	clr	a
   0677 F2            [24] 2044 	movx	@r0,a
                           2045 ;	radio/radio.c:505: preamble_detected = 0;
   0678 C2*01         [12] 2046 	clr	_preamble_detected
                           2047 ;	radio/radio.c:506: partial_packet_length = 0;
   067A 78r01         [12] 2048 	mov	r0,#_partial_packet_length
   067C E4            [12] 2049 	clr	a
   067D F2            [24] 2050 	movx	@r0,a
                           2051 ;	radio/radio.c:509: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, RADIO_RX_INTERRUPTS);
   067E 74 13         [12] 2052 	mov	a,#0x13
   0680 C0 E0         [24] 2053 	push	acc
   0682 75 82 05      [24] 2054 	mov	dpl,#0x05
   0685 12r0Br3F      [24] 2055 	lcall	_register_write
   0688 15 81         [12] 2056 	dec	sp
                           2057 ;	radio/radio.c:510: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, EZRADIOPRO_ENPREAVAL);
   068A 74 40         [12] 2058 	mov	a,#0x40
   068C C0 E0         [24] 2059 	push	acc
   068E 75 82 06      [24] 2060 	mov	dpl,#0x06
   0691 12r0Br3F      [24] 2061 	lcall	_register_write
   0694 15 81         [12] 2062 	dec	sp
                           2063 ;	radio/radio.c:512: clear_status_registers();
   0696 12r0BrD7      [24] 2064 	lcall	_clear_status_registers
                           2065 ;	radio/radio.c:513: radio_clear_transmit_fifo();
   0699 12r02rD8      [24] 2066 	lcall	_radio_clear_transmit_fifo
                           2067 ;	radio/radio.c:514: radio_clear_receive_fifo();
   069C 12r03r00      [24] 2068 	lcall	_radio_clear_receive_fifo
                           2069 ;	radio/radio.c:517: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_1, EZRADIOPRO_RXON | EZRADIOPRO_XTON);
   069F 74 05         [12] 2070 	mov	a,#0x05
   06A1 C0 E0         [24] 2071 	push	acc
   06A3 75 82 07      [24] 2072 	mov	dpl,#0x07
   06A6 12r0Br3F      [24] 2073 	lcall	_register_write
   06A9 15 81         [12] 2074 	dec	sp
                           2075 ;	radio/radio.c:520: EX0 = 1;
   06AB D2 A8         [12] 2076 	setb	_EX0
                           2077 ;	radio/radio.c:522: return true;
   06AD D3            [12] 2078 	setb	c
   06AE 22            [24] 2079 	ret
                           2080 ;------------------------------------------------------------
                           2081 ;Allocation info for local variables in function 'radio_initialise'
                           2082 ;------------------------------------------------------------
                           2083 ;status                    Allocated with name '_radio_initialise_status_1_195'
                           2084 ;------------------------------------------------------------
                           2085 ;	radio/radio.c:529: radio_initialise(void)
                           2086 ;	-----------------------------------------
                           2087 ;	 function radio_initialise
                           2088 ;	-----------------------------------------
   06AF                    2089 _radio_initialise:
                           2090 ;	radio/radio.c:533: delay_msec(50);
   06AF 90 00 32      [24] 2091 	mov	dptr,#0x0032
   06B2 12r00r00      [24] 2092 	lcall	_delay_msec
                           2093 ;	radio/radio.c:536: status = register_read(EZRADIOPRO_DEVICE_VERSION);
   06B5 75 82 01      [24] 2094 	mov	dpl,#0x01
   06B8 12r0Br6F      [24] 2095 	lcall	_register_read
   06BB AF 82         [24] 2096 	mov	r7,dpl
                           2097 ;	radio/radio.c:537: if (status == 0xFF || status < 5) {
   06BD BF FF 02      [24] 2098 	cjne	r7,#0xFF,00133$
   06C0 80 05         [24] 2099 	sjmp	00101$
   06C2                    2100 00133$:
   06C2 BF 05 00      [24] 2101 	cjne	r7,#0x05,00134$
   06C5                    2102 00134$:
   06C5 50 02         [24] 2103 	jnc	00102$
   06C7                    2104 00101$:
                           2105 ;	radio/radio.c:539: return false;
   06C7 C3            [12] 2106 	clr	c
   06C8 22            [24] 2107 	ret
   06C9                    2108 00102$:
                           2109 ;	radio/radio.c:542: status = register_read(EZRADIOPRO_INTERRUPT_STATUS_2);
   06C9 75 82 04      [24] 2110 	mov	dpl,#0x04
   06CC 12r0Br6F      [24] 2111 	lcall	_register_read
                           2112 ;	radio/radio.c:544: if ((status & EZRADIOPRO_IPOR) == 0) {
   06CF E5 82         [12] 2113 	mov	a,dpl
   06D1 FF            [12] 2114 	mov	r7,a
   06D2 20 E0 06      [24] 2115 	jb	acc.0,00105$
                           2116 ;	radio/radio.c:546: return software_reset();
   06D5 12r0Cr37      [24] 2117 	lcall	_software_reset
   06D8 92*07         [24] 2118 	mov  _radio_initialise_sloc0_1_0,c
   06DA 22            [24] 2119 	ret
   06DB                    2120 00105$:
                           2121 ;	radio/radio.c:549: if (status & EZRADIOPRO_ICHIPRDY) {
   06DB EF            [12] 2122 	mov	a,r7
   06DC 30 E1 02      [24] 2123 	jnb	acc.1,00107$
                           2124 ;	radio/radio.c:551: return true;
   06DF D3            [12] 2125 	setb	c
   06E0 22            [24] 2126 	ret
   06E1                    2127 00107$:
                           2128 ;	radio/radio.c:555: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, 0);
   06E1 E4            [12] 2129 	clr	a
   06E2 C0 E0         [24] 2130 	push	acc
   06E4 75 82 05      [24] 2131 	mov	dpl,#0x05
   06E7 12r0Br3F      [24] 2132 	lcall	_register_write
   06EA 15 81         [12] 2133 	dec	sp
                           2134 ;	radio/radio.c:556: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, EZRADIOPRO_ENCHIPRDY);
   06EC 74 02         [12] 2135 	mov	a,#0x02
   06EE C0 E0         [24] 2136 	push	acc
   06F0 75 82 06      [24] 2137 	mov	dpl,#0x06
   06F3 12r0Br3F      [24] 2138 	lcall	_register_write
   06F6 15 81         [12] 2139 	dec	sp
                           2140 ;	radio/radio.c:559: delay_set(50);
   06F8 90 00 32      [24] 2141 	mov	dptr,#0x0032
   06FB 12r00r00      [24] 2142 	lcall	_delay_set
                           2143 ;	radio/radio.c:560: while (!delay_expired()) {
   06FE                    2144 00110$:
   06FE 12r00r00      [24] 2145 	lcall	_delay_expired
   0701 40 13         [24] 2146 	jc	00112$
                           2147 ;	radio/radio.c:561: status = register_read(EZRADIOPRO_INTERRUPT_STATUS_1);
   0703 75 82 03      [24] 2148 	mov	dpl,#0x03
   0706 12r0Br6F      [24] 2149 	lcall	_register_read
                           2150 ;	radio/radio.c:562: status = register_read(EZRADIOPRO_INTERRUPT_STATUS_2);
   0709 75 82 04      [24] 2151 	mov	dpl,#0x04
   070C 12r0Br6F      [24] 2152 	lcall	_register_read
   070F E5 82         [12] 2153 	mov	a,dpl
                           2154 ;	radio/radio.c:563: if (status & EZRADIOPRO_ICHIPRDY) {
   0711 30 E1 EA      [24] 2155 	jnb	acc.1,00110$
                           2156 ;	radio/radio.c:564: return true;
   0714 D3            [12] 2157 	setb	c
   0715 22            [24] 2158 	ret
   0716                    2159 00112$:
                           2160 ;	radio/radio.c:568: return false;
   0716 C3            [12] 2161 	clr	c
   0717 22            [24] 2162 	ret
                           2163 ;------------------------------------------------------------
                           2164 ;Allocation info for local variables in function 'radio_set_frequency'
                           2165 ;------------------------------------------------------------
                           2166 ;	radio/radio.c:575: radio_set_frequency(__pdata uint32_t value)
                           2167 ;	-----------------------------------------
                           2168 ;	 function radio_set_frequency
                           2169 ;	-----------------------------------------
   0718                    2170 _radio_set_frequency:
   0718 AC 82         [24] 2171 	mov	r4,dpl
   071A AD 83         [24] 2172 	mov	r5,dph
   071C AE F0         [24] 2173 	mov	r6,b
   071E FF            [12] 2174 	mov	r7,a
                           2175 ;	radio/radio.c:577: if (value < 240000000UL || value > 935000000UL) {
   071F C3            [12] 2176 	clr	c
   0720 ED            [12] 2177 	mov	a,r5
   0721 94 1C         [12] 2178 	subb	a,#0x1C
   0723 EE            [12] 2179 	mov	a,r6
   0724 94 4E         [12] 2180 	subb	a,#0x4E
   0726 EF            [12] 2181 	mov	a,r7
   0727 94 0E         [12] 2182 	subb	a,#0x0E
   0729 40 0E         [24] 2183 	jc	00101$
   072B 74 C0         [12] 2184 	mov	a,#0xC0
   072D 9C            [12] 2185 	subb	a,r4
   072E 74 F7         [12] 2186 	mov	a,#0xF7
   0730 9D            [12] 2187 	subb	a,r5
   0731 74 BA         [12] 2188 	mov	a,#0xBA
   0733 9E            [12] 2189 	subb	a,r6
   0734 74 37         [12] 2190 	mov	a,#0x37
   0736 9F            [12] 2191 	subb	a,r7
   0737 50 02         [24] 2192 	jnc	00102$
   0739                    2193 00101$:
                           2194 ;	radio/radio.c:578: return false;
   0739 C3            [12] 2195 	clr	c
   073A 22            [24] 2196 	ret
   073B                    2197 00102$:
                           2198 ;	radio/radio.c:580: settings.frequency = value;
   073B 78r05         [12] 2199 	mov	r0,#_settings
   073D EC            [12] 2200 	mov	a,r4
   073E F2            [24] 2201 	movx	@r0,a
   073F 08            [12] 2202 	inc	r0
   0740 ED            [12] 2203 	mov	a,r5
   0741 F2            [24] 2204 	movx	@r0,a
   0742 08            [12] 2205 	inc	r0
   0743 EE            [12] 2206 	mov	a,r6
   0744 F2            [24] 2207 	movx	@r0,a
   0745 08            [12] 2208 	inc	r0
   0746 EF            [12] 2209 	mov	a,r7
   0747 F2            [24] 2210 	movx	@r0,a
                           2211 ;	radio/radio.c:581: set_frequency_registers(value);
   0748 8C 82         [24] 2212 	mov	dpl,r4
   074A 8D 83         [24] 2213 	mov	dph,r5
   074C 8E F0         [24] 2214 	mov	b,r6
   074E EF            [12] 2215 	mov	a,r7
   074F 12r0CrA3      [24] 2216 	lcall	_set_frequency_registers
                           2217 ;	radio/radio.c:582: return true;
   0752 D3            [12] 2218 	setb	c
   0753 22            [24] 2219 	ret
                           2220 ;------------------------------------------------------------
                           2221 ;Allocation info for local variables in function 'radio_set_channel_spacing'
                           2222 ;------------------------------------------------------------
                           2223 ;	radio/radio.c:589: radio_set_channel_spacing(__pdata uint32_t value)
                           2224 ;	-----------------------------------------
                           2225 ;	 function radio_set_channel_spacing
                           2226 ;	-----------------------------------------
   0754                    2227 _radio_set_channel_spacing:
   0754 AC 82         [24] 2228 	mov	r4,dpl
   0756 AD 83         [24] 2229 	mov	r5,dph
   0758 AE F0         [24] 2230 	mov	r6,b
   075A FF            [12] 2231 	mov	r7,a
                           2232 ;	radio/radio.c:591: if (value > 2550000L)
   075B C3            [12] 2233 	clr	c
   075C 74 F0         [12] 2234 	mov	a,#0xF0
   075E 9C            [12] 2235 	subb	a,r4
   075F 74 E8         [12] 2236 	mov	a,#0xE8
   0761 9D            [12] 2237 	subb	a,r5
   0762 74 26         [12] 2238 	mov	a,#0x26
   0764 9E            [12] 2239 	subb	a,r6
   0765 E4            [12] 2240 	clr	a
   0766 9F            [12] 2241 	subb	a,r7
   0767 50 02         [24] 2242 	jnc	00102$
                           2243 ;	radio/radio.c:592: return false;
   0769 C3            [12] 2244 	clr	c
   076A 22            [24] 2245 	ret
   076B                    2246 00102$:
                           2247 ;	radio/radio.c:593: value = scale_uint32(value, 10000);
   076B 90r00r21      [24] 2248 	mov	dptr,#_scale_uint32_PARM_2
   076E 74 10         [12] 2249 	mov	a,#0x10
   0770 F0            [24] 2250 	movx	@dptr,a
   0771 74 27         [12] 2251 	mov	a,#0x27
   0773 A3            [24] 2252 	inc	dptr
   0774 F0            [24] 2253 	movx	@dptr,a
   0775 E4            [12] 2254 	clr	a
   0776 A3            [24] 2255 	inc	dptr
   0777 F0            [24] 2256 	movx	@dptr,a
   0778 E4            [12] 2257 	clr	a
   0779 A3            [24] 2258 	inc	dptr
   077A F0            [24] 2259 	movx	@dptr,a
   077B 8C 82         [24] 2260 	mov	dpl,r4
   077D 8D 83         [24] 2261 	mov	dph,r5
   077F 8E F0         [24] 2262 	mov	b,r6
   0781 EF            [12] 2263 	mov	a,r7
   0782 12r0BrE3      [24] 2264 	lcall	_scale_uint32
   0785 AC 82         [24] 2265 	mov	r4,dpl
   0787 AD 83         [24] 2266 	mov	r5,dph
   0789 AE F0         [24] 2267 	mov	r6,b
   078B FF            [12] 2268 	mov	r7,a
                           2269 ;	radio/radio.c:594: settings.channel_spacing = value;
   078C 78r09         [12] 2270 	mov	r0,#(_settings + 0x0004)
   078E EC            [12] 2271 	mov	a,r4
   078F F2            [24] 2272 	movx	@r0,a
   0790 08            [12] 2273 	inc	r0
   0791 ED            [12] 2274 	mov	a,r5
   0792 F2            [24] 2275 	movx	@r0,a
   0793 08            [12] 2276 	inc	r0
   0794 EE            [12] 2277 	mov	a,r6
   0795 F2            [24] 2278 	movx	@r0,a
   0796 08            [12] 2279 	inc	r0
   0797 EF            [12] 2280 	mov	a,r7
   0798 F2            [24] 2281 	movx	@r0,a
                           2282 ;	radio/radio.c:595: register_write(EZRADIOPRO_FREQUENCY_HOPPING_STEP_SIZE, value);
   0799 C0 04         [24] 2283 	push	ar4
   079B 75 82 7A      [24] 2284 	mov	dpl,#0x7A
   079E 12r0Br3F      [24] 2285 	lcall	_register_write
   07A1 15 81         [12] 2286 	dec	sp
                           2287 ;	radio/radio.c:596: return true;
   07A3 D3            [12] 2288 	setb	c
   07A4 22            [24] 2289 	ret
                           2290 ;------------------------------------------------------------
                           2291 ;Allocation info for local variables in function 'radio_set_channel'
                           2292 ;------------------------------------------------------------
                           2293 ;channel                   Allocated with name '_radio_set_channel_channel_1_206'
                           2294 ;------------------------------------------------------------
                           2295 ;	radio/radio.c:602: radio_set_channel(uint8_t channel)
                           2296 ;	-----------------------------------------
                           2297 ;	 function radio_set_channel
                           2298 ;	-----------------------------------------
   07A5                    2299 _radio_set_channel:
   07A5 E5 82         [12] 2300 	mov	a,dpl
   07A7 90r01r07      [24] 2301 	mov	dptr,#_radio_set_channel_channel_1_206
   07AA F0            [24] 2302 	movx	@dptr,a
                           2303 ;	radio/radio.c:604: if (channel != settings.current_channel) {
   07AB 78r0E         [12] 2304 	mov	r0,#(_settings + 0x0009)
   07AD E2            [24] 2305 	movx	a,@r0
   07AE FF            [12] 2306 	mov	r7,a
   07AF 90r01r07      [24] 2307 	mov	dptr,#_radio_set_channel_channel_1_206
   07B2 E0            [24] 2308 	movx	a,@dptr
   07B3 FE            [12] 2309 	mov	r6,a
   07B4 B5 07 01      [24] 2310 	cjne	a,ar7,00108$
   07B7 22            [24] 2311 	ret
   07B8                    2312 00108$:
                           2313 ;	radio/radio.c:605: settings.current_channel = channel;
   07B8 78r0E         [12] 2314 	mov	r0,#(_settings + 0x0009)
   07BA EE            [12] 2315 	mov	a,r6
   07BB F2            [24] 2316 	movx	@r0,a
                           2317 ;	radio/radio.c:606: register_write(EZRADIOPRO_FREQUENCY_HOPPING_CHANNEL_SELECT, channel);
   07BC C0 06         [24] 2318 	push	ar6
   07BE 75 82 79      [24] 2319 	mov	dpl,#0x79
   07C1 12r0Br3F      [24] 2320 	lcall	_register_write
   07C4 15 81         [12] 2321 	dec	sp
                           2322 ;	radio/radio.c:607: preamble_detected = 0;
   07C6 C2*01         [12] 2323 	clr	_preamble_detected
   07C8 22            [24] 2324 	ret
                           2325 ;------------------------------------------------------------
                           2326 ;Allocation info for local variables in function 'radio_get_channel'
                           2327 ;------------------------------------------------------------
                           2328 ;	radio/radio.c:614: radio_get_channel(void)
                           2329 ;	-----------------------------------------
                           2330 ;	 function radio_get_channel
                           2331 ;	-----------------------------------------
   07C9                    2332 _radio_get_channel:
                           2333 ;	radio/radio.c:616: return settings.current_channel;
   07C9 78r0E         [12] 2334 	mov	r0,#(_settings + 0x0009)
   07CB E2            [24] 2335 	movx	a,@r0
   07CC F5 82         [12] 2336 	mov	dpl,a
   07CE 22            [24] 2337 	ret
                           2338 ;------------------------------------------------------------
                           2339 ;Allocation info for local variables in function 'radio_configure'
                           2340 ;------------------------------------------------------------
                           2341 ;	radio/radio.c:713: radio_configure(__pdata uint8_t air_rate)
                           2342 ;	-----------------------------------------
                           2343 ;	 function radio_configure
                           2344 ;	-----------------------------------------
   07CF                    2345 _radio_configure:
   07CF AF 82         [24] 2346 	mov	r7,dpl
                           2347 ;	radio/radio.c:718: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, 0x00);
   07D1 C0 07         [24] 2348 	push	ar7
   07D3 E4            [12] 2349 	clr	a
   07D4 C0 E0         [24] 2350 	push	acc
   07D6 75 82 05      [24] 2351 	mov	dpl,#0x05
   07D9 12r0Br3F      [24] 2352 	lcall	_register_write
   07DC 15 81         [12] 2353 	dec	sp
                           2354 ;	radio/radio.c:719: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, 0x00);
   07DE E4            [12] 2355 	clr	a
   07DF C0 E0         [24] 2356 	push	acc
   07E1 75 82 06      [24] 2357 	mov	dpl,#0x06
   07E4 12r0Br3F      [24] 2358 	lcall	_register_write
   07E7 15 81         [12] 2359 	dec	sp
                           2360 ;	radio/radio.c:721: clear_status_registers();
   07E9 12r0BrD7      [24] 2361 	lcall	_clear_status_registers
                           2362 ;	radio/radio.c:731: register_write(EZRADIOPRO_GPIO0_CONFIGURATION, 0x15);	// RX state (output)
   07EC 74 15         [12] 2363 	mov	a,#0x15
   07EE C0 E0         [24] 2364 	push	acc
   07F0 75 82 0B      [24] 2365 	mov	dpl,#0x0B
   07F3 12r0Br3F      [24] 2366 	lcall	_register_write
   07F6 15 81         [12] 2367 	dec	sp
                           2368 ;	radio/radio.c:732: register_write(EZRADIOPRO_GPIO1_CONFIGURATION, 0x12);	// TX state (output)
   07F8 74 12         [12] 2369 	mov	a,#0x12
   07FA C0 E0         [24] 2370 	push	acc
   07FC 75 82 0C      [24] 2371 	mov	dpl,#0x0C
   07FF 12r0Br3F      [24] 2372 	lcall	_register_write
   0802 15 81         [12] 2373 	dec	sp
                           2374 ;	radio/radio.c:750: register_write(EZRADIOPRO_CRYSTAL_OSCILLATOR_LOAD_CAPACITANCE, EZRADIOPRO_OSC_CAP_VALUE);
   0804 74 CC         [12] 2375 	mov	a,#0xCC
   0806 C0 E0         [24] 2376 	push	acc
   0808 75 82 09      [24] 2377 	mov	dpl,#0x09
   080B 12r0Br3F      [24] 2378 	lcall	_register_write
   080E 15 81         [12] 2379 	dec	sp
   0810 D0 07         [24] 2380 	pop	ar7
                           2381 ;	radio/radio.c:753: if (air_rate > 100) {
   0812 EF            [12] 2382 	mov	a,r7
   0813 24 9B         [12] 2383 	add	a,#0xff - 0x64
   0815 50 10         [24] 2384 	jnc	00102$
                           2385 ;	radio/radio.c:754: register_write(EZRADIOPRO_CHARGEPUMP_CURRENT_TRIMMING_OVERRIDE, 0xC0);
   0817 C0 07         [24] 2386 	push	ar7
   0819 74 C0         [12] 2387 	mov	a,#0xC0
   081B C0 E0         [24] 2388 	push	acc
   081D 75 82 58      [24] 2389 	mov	dpl,#0x58
   0820 12r0Br3F      [24] 2390 	lcall	_register_write
   0823 15 81         [12] 2391 	dec	sp
   0825 D0 07         [24] 2392 	pop	ar7
   0827                    2393 00102$:
                           2394 ;	radio/radio.c:758: set_frequency_registers(settings.frequency);
   0827 78r05         [12] 2395 	mov	r0,#_settings
   0829 E2            [24] 2396 	movx	a,@r0
   082A FB            [12] 2397 	mov	r3,a
   082B 08            [12] 2398 	inc	r0
   082C E2            [24] 2399 	movx	a,@r0
   082D FC            [12] 2400 	mov	r4,a
   082E 08            [12] 2401 	inc	r0
   082F E2            [24] 2402 	movx	a,@r0
   0830 FD            [12] 2403 	mov	r5,a
   0831 08            [12] 2404 	inc	r0
   0832 E2            [24] 2405 	movx	a,@r0
   0833 8B 82         [24] 2406 	mov	dpl,r3
   0835 8C 83         [24] 2407 	mov	dph,r4
   0837 8D F0         [24] 2408 	mov	b,r5
   0839 C0 07         [24] 2409 	push	ar7
   083B 12r0CrA3      [24] 2410 	lcall	_set_frequency_registers
                           2411 ;	radio/radio.c:759: register_write(EZRADIOPRO_FREQUENCY_HOPPING_STEP_SIZE, settings.channel_spacing);
   083E 78r09         [12] 2412 	mov	r0,#(_settings + 0x0004)
   0840 E2            [24] 2413 	movx	a,@r0
   0841 FB            [12] 2414 	mov	r3,a
   0842 08            [12] 2415 	inc	r0
   0843 E2            [24] 2416 	movx	a,@r0
   0844 08            [12] 2417 	inc	r0
   0845 E2            [24] 2418 	movx	a,@r0
   0846 08            [12] 2419 	inc	r0
   0847 E2            [24] 2420 	movx	a,@r0
   0848 C0 03         [24] 2421 	push	ar3
   084A 75 82 7A      [24] 2422 	mov	dpl,#0x7A
   084D 12r0Br3F      [24] 2423 	lcall	_register_write
   0850 15 81         [12] 2424 	dec	sp
   0852 D0 07         [24] 2425 	pop	ar7
                           2426 ;	radio/radio.c:761: if (feature_golay) {
   0854 30*00 29      [24] 2427 	jnb	_feature_golay,00104$
                           2428 ;	radio/radio.c:765: register_write(EZRADIOPRO_DATA_ACCESS_CONTROL,
   0857 C0 07         [24] 2429 	push	ar7
   0859 74 88         [12] 2430 	mov	a,#0x88
   085B C0 E0         [24] 2431 	push	acc
   085D 75 82 30      [24] 2432 	mov	dpl,#0x30
   0860 12r0Br3F      [24] 2433 	lcall	_register_write
   0863 15 81         [12] 2434 	dec	sp
                           2435 ;	radio/radio.c:769: register_write(EZRADIOPRO_HEADER_CONTROL_2, EZRADIOPRO_HDLEN_0BYTE | EZRADIOPRO_SYNCLEN_2BYTE);
   0865 74 02         [12] 2436 	mov	a,#0x02
   0867 C0 E0         [24] 2437 	push	acc
   0869 75 82 33      [24] 2438 	mov	dpl,#0x33
   086C 12r0Br3F      [24] 2439 	lcall	_register_write
   086F 15 81         [12] 2440 	dec	sp
                           2441 ;	radio/radio.c:772: register_write(EZRADIOPRO_HEADER_CONTROL_1, 0x00);
   0871 E4            [12] 2442 	clr	a
   0872 C0 E0         [24] 2443 	push	acc
   0874 75 82 32      [24] 2444 	mov	dpl,#0x32
   0877 12r0Br3F      [24] 2445 	lcall	_register_write
   087A 15 81         [12] 2446 	dec	sp
   087C D0 07         [24] 2447 	pop	ar7
   087E 80 40         [24] 2448 	sjmp	00105$
   0880                    2449 00104$:
                           2450 ;	radio/radio.c:774: register_write(EZRADIOPRO_DATA_ACCESS_CONTROL,
   0880 C0 07         [24] 2451 	push	ar7
   0882 74 8D         [12] 2452 	mov	a,#0x8D
   0884 C0 E0         [24] 2453 	push	acc
   0886 75 82 30      [24] 2454 	mov	dpl,#0x30
   0889 12r0Br3F      [24] 2455 	lcall	_register_write
   088C 15 81         [12] 2456 	dec	sp
                           2457 ;	radio/radio.c:780: register_write(EZRADIOPRO_HEADER_CONTROL_2, EZRADIOPRO_HDLEN_2BYTE | EZRADIOPRO_SYNCLEN_2BYTE);
   088E 74 22         [12] 2458 	mov	a,#0x22
   0890 C0 E0         [24] 2459 	push	acc
   0892 75 82 33      [24] 2460 	mov	dpl,#0x33
   0895 12r0Br3F      [24] 2461 	lcall	_register_write
   0898 15 81         [12] 2462 	dec	sp
                           2463 ;	radio/radio.c:782: register_write(EZRADIOPRO_HEADER_CONTROL_1, 0x0C);
   089A 74 0C         [12] 2464 	mov	a,#0x0C
   089C C0 E0         [24] 2465 	push	acc
   089E 75 82 32      [24] 2466 	mov	dpl,#0x32
   08A1 12r0Br3F      [24] 2467 	lcall	_register_write
   08A4 15 81         [12] 2468 	dec	sp
                           2469 ;	radio/radio.c:783: register_write(EZRADIOPRO_HEADER_ENABLE_3, 0xFF);
   08A6 74 FF         [12] 2470 	mov	a,#0xFF
   08A8 C0 E0         [24] 2471 	push	acc
   08AA 75 82 43      [24] 2472 	mov	dpl,#0x43
   08AD 12r0Br3F      [24] 2473 	lcall	_register_write
   08B0 15 81         [12] 2474 	dec	sp
                           2475 ;	radio/radio.c:784: register_write(EZRADIOPRO_HEADER_ENABLE_2, 0xFF);
   08B2 74 FF         [12] 2476 	mov	a,#0xFF
   08B4 C0 E0         [24] 2477 	push	acc
   08B6 75 82 44      [24] 2478 	mov	dpl,#0x44
   08B9 12r0Br3F      [24] 2479 	lcall	_register_write
   08BC 15 81         [12] 2480 	dec	sp
   08BE D0 07         [24] 2481 	pop	ar7
   08C0                    2482 00105$:
                           2483 ;	radio/radio.c:789: register_write(EZRADIOPRO_TX_FIFO_CONTROL_1, TX_FIFO_THRESHOLD_HIGH);
   08C0 C0 07         [24] 2484 	push	ar7
   08C2 74 3C         [12] 2485 	mov	a,#0x3C
   08C4 C0 E0         [24] 2486 	push	acc
   08C6 75 82 7C      [24] 2487 	mov	dpl,#0x7C
   08C9 12r0Br3F      [24] 2488 	lcall	_register_write
   08CC 15 81         [12] 2489 	dec	sp
                           2490 ;	radio/radio.c:790: register_write(EZRADIOPRO_TX_FIFO_CONTROL_2, TX_FIFO_THRESHOLD_LOW);
   08CE 74 20         [12] 2491 	mov	a,#0x20
   08D0 C0 E0         [24] 2492 	push	acc
   08D2 75 82 7D      [24] 2493 	mov	dpl,#0x7D
   08D5 12r0Br3F      [24] 2494 	lcall	_register_write
   08D8 15 81         [12] 2495 	dec	sp
                           2496 ;	radio/radio.c:791: register_write(EZRADIOPRO_RX_FIFO_CONTROL, RX_FIFO_THRESHOLD_HIGH);
   08DA 74 32         [12] 2497 	mov	a,#0x32
   08DC C0 E0         [24] 2498 	push	acc
   08DE 75 82 7E      [24] 2499 	mov	dpl,#0x7E
   08E1 12r0Br3F      [24] 2500 	lcall	_register_write
   08E4 15 81         [12] 2501 	dec	sp
                           2502 ;	radio/radio.c:793: settings.preamble_length = 16;
   08E6 78r10         [12] 2503 	mov	r0,#(_settings + 0x000b)
   08E8 74 10         [12] 2504 	mov	a,#0x10
   08EA F2            [24] 2505 	movx	@r0,a
                           2506 ;	radio/radio.c:795: register_write(EZRADIOPRO_PREAMBLE_LENGTH, settings.preamble_length); // nibbles 
   08EB 78r10         [12] 2507 	mov	r0,#(_settings + 0x000b)
   08ED E2            [24] 2508 	movx	a,@r0
   08EE FE            [12] 2509 	mov	r6,a
   08EF C0 06         [24] 2510 	push	ar6
   08F1 75 82 34      [24] 2511 	mov	dpl,#0x34
   08F4 12r0Br3F      [24] 2512 	lcall	_register_write
   08F7 15 81         [12] 2513 	dec	sp
                           2514 ;	radio/radio.c:796: register_write(EZRADIOPRO_PREAMBLE_DETECTION_CONTROL, 5<<3); // 5 nibbles
   08F9 74 28         [12] 2515 	mov	a,#0x28
   08FB C0 E0         [24] 2516 	push	acc
   08FD 75 82 35      [24] 2517 	mov	dpl,#0x35
   0900 12r0Br3F      [24] 2518 	lcall	_register_write
   0903 15 81         [12] 2519 	dec	sp
                           2520 ;	radio/radio.c:799: radio_set_transmit_power(0);
   0905 75 82 00      [24] 2521 	mov	dpl,#0x00
   0908 12r0ArA2      [24] 2522 	lcall	_radio_set_transmit_power
   090B D0 07         [24] 2523 	pop	ar7
                           2524 ;	radio/radio.c:802: for (i = 0; i < NUM_DATA_RATES - 1; i++) {
   090D 7E 00         [12] 2525 	mov	r6,#0x00
   090F                    2526 00131$:
                           2527 ;	radio/radio.c:803: if (air_data_rates[i] >= air_rate) break;
   090F EE            [12] 2528 	mov	a,r6
   0910 90r00r34      [24] 2529 	mov	dptr,#_air_data_rates
   0913 93            [24] 2530 	movc	a,@a+dptr
   0914 FD            [12] 2531 	mov	r5,a
   0915 C3            [12] 2532 	clr	c
   0916 9F            [12] 2533 	subb	a,r7
   0917 50 06         [24] 2534 	jnc	00108$
                           2535 ;	radio/radio.c:802: for (i = 0; i < NUM_DATA_RATES - 1; i++) {
   0919 0E            [12] 2536 	inc	r6
   091A BE 0C 00      [24] 2537 	cjne	r6,#0x0C,00205$
   091D                    2538 00205$:
   091D 40 F0         [24] 2539 	jc	00131$
   091F                    2540 00108$:
                           2541 ;	radio/radio.c:805: rate_selection = i;
                           2542 ;	radio/radio.c:807: settings.air_data_rate = air_data_rates[rate_selection];
   091F EE            [12] 2543 	mov	a,r6
   0920 FF            [12] 2544 	mov	r7,a
   0921 90r00r34      [24] 2545 	mov	dptr,#_air_data_rates
   0924 93            [24] 2546 	movc	a,@a+dptr
   0925 FE            [12] 2547 	mov	r6,a
   0926 78r0D         [12] 2548 	mov	r0,#(_settings + 0x0008)
   0928 F2            [24] 2549 	movx	@r0,a
                           2550 ;	radio/radio.c:809: if (settings.air_data_rate >= 32) {
   0929 BE 20 00      [24] 2551 	cjne	r6,#0x20,00207$
   092C                    2552 00207$:
   092C 40 04         [24] 2553 	jc	00110$
                           2554 ;	radio/radio.c:810: control = 0x0D;
   092E 7E 0D         [12] 2555 	mov	r6,#0x0D
   0930 80 02         [24] 2556 	sjmp	00111$
   0932                    2557 00110$:
                           2558 ;	radio/radio.c:812: control = 0x2D;
   0932 7E 2D         [12] 2559 	mov	r6,#0x2D
   0934                    2560 00111$:
                           2561 ;	radio/radio.c:814: if (param_get(PARAM_MANCHESTER) && settings.air_data_rate <= 128) {
   0934 75 82 0D      [24] 2562 	mov	dpl,#0x0D
   0937 C0 07         [24] 2563 	push	ar7
   0939 C0 06         [24] 2564 	push	ar6
   093B 12r00r00      [24] 2565 	lcall	_param_get
   093E AA 82         [24] 2566 	mov	r2,dpl
   0940 AB 83         [24] 2567 	mov	r3,dph
   0942 AC F0         [24] 2568 	mov	r4,b
   0944 FD            [12] 2569 	mov	r5,a
   0945 D0 06         [24] 2570 	pop	ar6
   0947 D0 07         [24] 2571 	pop	ar7
   0949 EA            [12] 2572 	mov	a,r2
   094A 4B            [12] 2573 	orl	a,r3
   094B 4C            [12] 2574 	orl	a,r4
   094C 4D            [12] 2575 	orl	a,r5
   094D 60 0B         [24] 2576 	jz	00113$
   094F 78r0D         [12] 2577 	mov	r0,#(_settings + 0x0008)
   0951 E2            [24] 2578 	movx	a,@r0
   0952 FD            [12] 2579 	mov  r5,a
   0953 24 7F         [12] 2580 	add	a,#0xff - 0x80
   0955 40 03         [24] 2581 	jc	00113$
                           2582 ;	radio/radio.c:816: control |= EZRADIOPRO_ENMANCH;
   0957 43 06 02      [24] 2583 	orl	ar6,#0x02
   095A                    2584 00113$:
                           2585 ;	radio/radio.c:818: register_write(EZRADIOPRO_MODULATION_MODE_CONTROL_1, control);
   095A C0 07         [24] 2586 	push	ar7
   095C C0 06         [24] 2587 	push	ar6
   095E 75 82 70      [24] 2588 	mov	dpl,#0x70
   0961 12r0Br3F      [24] 2589 	lcall	_register_write
   0964 15 81         [12] 2590 	dec	sp
                           2591 ;	radio/radio.c:820: register_write(EZRADIOPRO_MODULATION_MODE_CONTROL_2, 0x23);
   0966 74 23         [12] 2592 	mov	a,#0x23
   0968 C0 E0         [24] 2593 	push	acc
   096A 75 82 71      [24] 2594 	mov	dpl,#0x71
   096D 12r0Br3F      [24] 2595 	lcall	_register_write
   0970 15 81         [12] 2596 	dec	sp
                           2597 ;	radio/radio.c:824: register_write(EZRADIOPRO_AFC_LOOP_GEARSHIFT_OVERRIDE, 0x44);
   0972 74 44         [12] 2598 	mov	a,#0x44
   0974 C0 E0         [24] 2599 	push	acc
   0976 75 82 1D      [24] 2600 	mov	dpl,#0x1D
   0979 12r0Br3F      [24] 2601 	lcall	_register_write
   097C 15 81         [12] 2602 	dec	sp
   097E D0 07         [24] 2603 	pop	ar7
                           2604 ;	radio/radio.c:828: if (settings.air_data_rate < 200) {
   0980 78r0D         [12] 2605 	mov	r0,#(_settings + 0x0008)
   0982 E2            [24] 2606 	movx	a,@r0
   0983 FE            [12] 2607 	mov	r6,a
   0984 BE C8 00      [24] 2608 	cjne	r6,#0xC8,00211$
   0987                    2609 00211$:
   0987 50 12         [24] 2610 	jnc	00116$
                           2611 ;	radio/radio.c:829: register_write(EZRADIOPRO_AFC_TIMING_CONTROL, 0x0A);
   0989 C0 07         [24] 2612 	push	ar7
   098B 74 0A         [12] 2613 	mov	a,#0x0A
   098D C0 E0         [24] 2614 	push	acc
   098F 75 82 1E      [24] 2615 	mov	dpl,#0x1E
   0992 12r0Br3F      [24] 2616 	lcall	_register_write
   0995 15 81         [12] 2617 	dec	sp
   0997 D0 07         [24] 2618 	pop	ar7
   0999 80 10         [24] 2619 	sjmp	00117$
   099B                    2620 00116$:
                           2621 ;	radio/radio.c:831: register_write(EZRADIOPRO_AFC_TIMING_CONTROL, 0x02);
   099B C0 07         [24] 2622 	push	ar7
   099D 74 02         [12] 2623 	mov	a,#0x02
   099F C0 E0         [24] 2624 	push	acc
   09A1 75 82 1E      [24] 2625 	mov	dpl,#0x1E
   09A4 12r0Br3F      [24] 2626 	lcall	_register_write
   09A7 15 81         [12] 2627 	dec	sp
   09A9 D0 07         [24] 2628 	pop	ar7
   09AB                    2629 00117$:
                           2630 ;	radio/radio.c:835: if (g_board_frequency == FREQ_433) {
   09AB 78r00         [12] 2631 	mov	r0,#_g_board_frequency
   09AD E2            [24] 2632 	movx	a,@r0
   09AE B4 43 3A      [24] 2633 	cjne	a,#0x43,00129$
                           2634 ;	radio/radio.c:836: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
   09B1 7E 00         [12] 2635 	mov	r6,#0x00
   09B3                    2636 00133$:
                           2637 ;	radio/radio.c:838: reg_table_433[i][rate_selection]);
   09B3 EE            [12] 2638 	mov	a,r6
   09B4 75 F0 0D      [24] 2639 	mov	b,#0x0D
   09B7 A4            [48] 2640 	mul	ab
   09B8 24r41         [12] 2641 	add	a,#_reg_table_433
   09BA FC            [12] 2642 	mov	r4,a
   09BB 74s00         [12] 2643 	mov	a,#(_reg_table_433 >> 8)
   09BD 35 F0         [12] 2644 	addc	a,b
   09BF FD            [12] 2645 	mov	r5,a
   09C0 EF            [12] 2646 	mov	a,r7
   09C1 2C            [12] 2647 	add	a,r4
   09C2 F5 82         [12] 2648 	mov	dpl,a
   09C4 E4            [12] 2649 	clr	a
   09C5 3D            [12] 2650 	addc	a,r5
   09C6 F5 83         [12] 2651 	mov	dph,a
   09C8 E4            [12] 2652 	clr	a
   09C9 93            [24] 2653 	movc	a,@a+dptr
   09CA FD            [12] 2654 	mov	r5,a
                           2655 ;	radio/radio.c:837: register_write(reg_index[i],
   09CB EE            [12] 2656 	mov	a,r6
   09CC 90r00r28      [24] 2657 	mov	dptr,#_reg_index
   09CF 93            [24] 2658 	movc	a,@a+dptr
   09D0 FC            [12] 2659 	mov	r4,a
   09D1 C0 07         [24] 2660 	push	ar7
   09D3 C0 06         [24] 2661 	push	ar6
   09D5 C0 05         [24] 2662 	push	ar5
   09D7 8C 82         [24] 2663 	mov	dpl,r4
   09D9 12r0Br3F      [24] 2664 	lcall	_register_write
   09DC 15 81         [12] 2665 	dec	sp
   09DE D0 06         [24] 2666 	pop	ar6
   09E0 D0 07         [24] 2667 	pop	ar7
                           2668 ;	radio/radio.c:836: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
   09E2 0E            [12] 2669 	inc	r6
   09E3 BE 0C 00      [24] 2670 	cjne	r6,#0x0C,00215$
   09E6                    2671 00215$:
   09E6 40 CB         [24] 2672 	jc	00133$
   09E8 02r0ArA0      [24] 2673 	ljmp	00130$
   09EB                    2674 00129$:
                           2675 ;	radio/radio.c:840: } else if (g_board_frequency == FREQ_470) {
   09EB 78r00         [12] 2676 	mov	r0,#_g_board_frequency
   09ED E2            [24] 2677 	movx	a,@r0
   09EE B4 47 39      [24] 2678 	cjne	a,#0x47,00126$
                           2679 ;	radio/radio.c:841: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
   09F1 7E 00         [12] 2680 	mov	r6,#0x00
   09F3                    2681 00135$:
                           2682 ;	radio/radio.c:843: reg_table_470[i][rate_selection]);
   09F3 EE            [12] 2683 	mov	a,r6
   09F4 75 F0 0D      [24] 2684 	mov	b,#0x0D
   09F7 A4            [48] 2685 	mul	ab
   09F8 24rDD         [12] 2686 	add	a,#_reg_table_470
   09FA FC            [12] 2687 	mov	r4,a
   09FB 74s00         [12] 2688 	mov	a,#(_reg_table_470 >> 8)
   09FD 35 F0         [12] 2689 	addc	a,b
   09FF FD            [12] 2690 	mov	r5,a
   0A00 EF            [12] 2691 	mov	a,r7
   0A01 2C            [12] 2692 	add	a,r4
   0A02 F5 82         [12] 2693 	mov	dpl,a
   0A04 E4            [12] 2694 	clr	a
   0A05 3D            [12] 2695 	addc	a,r5
   0A06 F5 83         [12] 2696 	mov	dph,a
   0A08 E4            [12] 2697 	clr	a
   0A09 93            [24] 2698 	movc	a,@a+dptr
   0A0A FD            [12] 2699 	mov	r5,a
                           2700 ;	radio/radio.c:842: register_write(reg_index[i],
   0A0B EE            [12] 2701 	mov	a,r6
   0A0C 90r00r28      [24] 2702 	mov	dptr,#_reg_index
   0A0F 93            [24] 2703 	movc	a,@a+dptr
   0A10 FC            [12] 2704 	mov	r4,a
   0A11 C0 07         [24] 2705 	push	ar7
   0A13 C0 06         [24] 2706 	push	ar6
   0A15 C0 05         [24] 2707 	push	ar5
   0A17 8C 82         [24] 2708 	mov	dpl,r4
   0A19 12r0Br3F      [24] 2709 	lcall	_register_write
   0A1C 15 81         [12] 2710 	dec	sp
   0A1E D0 06         [24] 2711 	pop	ar6
   0A20 D0 07         [24] 2712 	pop	ar7
                           2713 ;	radio/radio.c:841: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
   0A22 0E            [12] 2714 	inc	r6
   0A23 BE 0C 00      [24] 2715 	cjne	r6,#0x0C,00219$
   0A26                    2716 00219$:
   0A26 40 CB         [24] 2717 	jc	00135$
   0A28 80 76         [24] 2718 	sjmp	00130$
   0A2A                    2719 00126$:
                           2720 ;	radio/radio.c:845: } else if (g_board_frequency == FREQ_868) {
   0A2A 78r00         [12] 2721 	mov	r0,#_g_board_frequency
   0A2C E2            [24] 2722 	movx	a,@r0
   0A2D B4 86 39      [24] 2723 	cjne	a,#0x86,00160$
                           2724 ;	radio/radio.c:846: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
   0A30 7E 00         [12] 2725 	mov	r6,#0x00
   0A32                    2726 00137$:
                           2727 ;	radio/radio.c:848: reg_table_868[i][rate_selection]);
   0A32 EE            [12] 2728 	mov	a,r6
   0A33 75 F0 0D      [24] 2729 	mov	b,#0x0D
   0A36 A4            [48] 2730 	mul	ab
   0A37 24r79         [12] 2731 	add	a,#_reg_table_868
   0A39 FC            [12] 2732 	mov	r4,a
   0A3A 74s01         [12] 2733 	mov	a,#(_reg_table_868 >> 8)
   0A3C 35 F0         [12] 2734 	addc	a,b
   0A3E FD            [12] 2735 	mov	r5,a
   0A3F EF            [12] 2736 	mov	a,r7
   0A40 2C            [12] 2737 	add	a,r4
   0A41 F5 82         [12] 2738 	mov	dpl,a
   0A43 E4            [12] 2739 	clr	a
   0A44 3D            [12] 2740 	addc	a,r5
   0A45 F5 83         [12] 2741 	mov	dph,a
   0A47 E4            [12] 2742 	clr	a
   0A48 93            [24] 2743 	movc	a,@a+dptr
   0A49 FD            [12] 2744 	mov	r5,a
                           2745 ;	radio/radio.c:847: register_write(reg_index[i],
   0A4A EE            [12] 2746 	mov	a,r6
   0A4B 90r00r28      [24] 2747 	mov	dptr,#_reg_index
   0A4E 93            [24] 2748 	movc	a,@a+dptr
   0A4F FC            [12] 2749 	mov	r4,a
   0A50 C0 07         [24] 2750 	push	ar7
   0A52 C0 06         [24] 2751 	push	ar6
   0A54 C0 05         [24] 2752 	push	ar5
   0A56 8C 82         [24] 2753 	mov	dpl,r4
   0A58 12r0Br3F      [24] 2754 	lcall	_register_write
   0A5B 15 81         [12] 2755 	dec	sp
   0A5D D0 06         [24] 2756 	pop	ar6
   0A5F D0 07         [24] 2757 	pop	ar7
                           2758 ;	radio/radio.c:846: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
   0A61 0E            [12] 2759 	inc	r6
   0A62 BE 0C 00      [24] 2760 	cjne	r6,#0x0C,00223$
   0A65                    2761 00223$:
   0A65 40 CB         [24] 2762 	jc	00137$
                           2763 ;	radio/radio.c:851: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
   0A67 80 37         [24] 2764 	sjmp	00130$
   0A69                    2765 00160$:
   0A69 7E 00         [12] 2766 	mov	r6,#0x00
   0A6B                    2767 00139$:
                           2768 ;	radio/radio.c:853: reg_table_915[i][rate_selection]);
   0A6B EE            [12] 2769 	mov	a,r6
   0A6C 75 F0 0D      [24] 2770 	mov	b,#0x0D
   0A6F A4            [48] 2771 	mul	ab
   0A70 24r15         [12] 2772 	add	a,#_reg_table_915
   0A72 FC            [12] 2773 	mov	r4,a
   0A73 74s02         [12] 2774 	mov	a,#(_reg_table_915 >> 8)
   0A75 35 F0         [12] 2775 	addc	a,b
   0A77 FD            [12] 2776 	mov	r5,a
   0A78 EF            [12] 2777 	mov	a,r7
   0A79 2C            [12] 2778 	add	a,r4
   0A7A F5 82         [12] 2779 	mov	dpl,a
   0A7C E4            [12] 2780 	clr	a
   0A7D 3D            [12] 2781 	addc	a,r5
   0A7E F5 83         [12] 2782 	mov	dph,a
   0A80 E4            [12] 2783 	clr	a
   0A81 93            [24] 2784 	movc	a,@a+dptr
   0A82 FD            [12] 2785 	mov	r5,a
                           2786 ;	radio/radio.c:852: register_write(reg_index[i],
   0A83 EE            [12] 2787 	mov	a,r6
   0A84 90r00r28      [24] 2788 	mov	dptr,#_reg_index
   0A87 93            [24] 2789 	movc	a,@a+dptr
   0A88 FC            [12] 2790 	mov	r4,a
   0A89 C0 07         [24] 2791 	push	ar7
   0A8B C0 06         [24] 2792 	push	ar6
   0A8D C0 05         [24] 2793 	push	ar5
   0A8F 8C 82         [24] 2794 	mov	dpl,r4
   0A91 12r0Br3F      [24] 2795 	lcall	_register_write
   0A94 15 81         [12] 2796 	dec	sp
   0A96 D0 06         [24] 2797 	pop	ar6
   0A98 D0 07         [24] 2798 	pop	ar7
                           2799 ;	radio/radio.c:851: for (i = 0; i < NUM_RADIO_REGISTERS; i++) {
   0A9A 0E            [12] 2800 	inc	r6
   0A9B BE 0C 00      [24] 2801 	cjne	r6,#0x0C,00225$
   0A9E                    2802 00225$:
   0A9E 40 CB         [24] 2803 	jc	00139$
   0AA0                    2804 00130$:
                           2805 ;	radio/radio.c:857: return true;
   0AA0 D3            [12] 2806 	setb	c
   0AA1 22            [24] 2807 	ret
                           2808 ;------------------------------------------------------------
                           2809 ;Allocation info for local variables in function 'radio_set_transmit_power'
                           2810 ;------------------------------------------------------------
                           2811 ;power                     Allocated with name '_radio_set_transmit_power_power_1_230'
                           2812 ;i                         Allocated with name '_radio_set_transmit_power_i_1_231'
                           2813 ;------------------------------------------------------------
                           2814 ;	radio/radio.c:884: radio_set_transmit_power(uint8_t power)
                           2815 ;	-----------------------------------------
                           2816 ;	 function radio_set_transmit_power
                           2817 ;	-----------------------------------------
   0AA2                    2818 _radio_set_transmit_power:
   0AA2 E5 82         [12] 2819 	mov	a,dpl
                           2820 ;	radio/radio.c:903: for (i=0; i<NUM_POWER_LEVELS; i++) {
   0AA4 90r01r08      [24] 2821 	mov	dptr,#_radio_set_transmit_power_power_1_230
   0AA7 F0            [24] 2822 	movx	@dptr,a
   0AA8 FF            [12] 2823 	mov	r7,a
   0AA9 7E 00         [12] 2824 	mov	r6,#0x00
   0AAB                    2825 00106$:
                           2826 ;	radio/radio.c:904: if (power <= power_levels[i]) break;
   0AAB EE            [12] 2827 	mov	a,r6
   0AAC 90r02rB1      [24] 2828 	mov	dptr,#_power_levels
   0AAF 93            [24] 2829 	movc	a,@a+dptr
   0AB0 FD            [12] 2830 	mov	r5,a
   0AB1 C3            [12] 2831 	clr	c
   0AB2 9F            [12] 2832 	subb	a,r7
   0AB3 50 06         [24] 2833 	jnc	00113$
                           2834 ;	radio/radio.c:903: for (i=0; i<NUM_POWER_LEVELS; i++) {
   0AB5 0E            [12] 2835 	inc	r6
   0AB6 BE 08 00      [24] 2836 	cjne	r6,#0x08,00121$
   0AB9                    2837 00121$:
   0AB9 40 F0         [24] 2838 	jc	00106$
   0ABB                    2839 00113$:
   0ABB 90r01r09      [24] 2840 	mov	dptr,#_radio_set_transmit_power_i_1_231
   0ABE EE            [12] 2841 	mov	a,r6
   0ABF F0            [24] 2842 	movx	@dptr,a
                           2843 ;	radio/radio.c:906: if (i == NUM_POWER_LEVELS) {
   0AC0 BE 08 06      [24] 2844 	cjne	r6,#0x08,00105$
                           2845 ;	radio/radio.c:907: i = NUM_POWER_LEVELS-1;
   0AC3 90r01r09      [24] 2846 	mov	dptr,#_radio_set_transmit_power_i_1_231
   0AC6 74 07         [12] 2847 	mov	a,#0x07
   0AC8 F0            [24] 2848 	movx	@dptr,a
   0AC9                    2849 00105$:
                           2850 ;	radio/radio.c:909: settings.transmit_power = power_levels[i];
   0AC9 90r01r09      [24] 2851 	mov	dptr,#_radio_set_transmit_power_i_1_231
   0ACC E0            [24] 2852 	movx	a,@dptr
   0ACD FF            [12] 2853 	mov	r7,a
   0ACE 90r02rB1      [24] 2854 	mov	dptr,#_power_levels
   0AD1 93            [24] 2855 	movc	a,@a+dptr
   0AD2 FE            [12] 2856 	mov	r6,a
   0AD3 78r0F         [12] 2857 	mov	r0,#(_settings + 0x000a)
   0AD5 EE            [12] 2858 	mov	a,r6
   0AD6 F2            [24] 2859 	movx	@r0,a
                           2860 ;	radio/radio.c:910: register_write(EZRADIOPRO_TX_POWER, i);
   0AD7 C0 07         [24] 2861 	push	ar7
   0AD9 75 82 6D      [24] 2862 	mov	dpl,#0x6D
   0ADC 12r0Br3F      [24] 2863 	lcall	_register_write
   0ADF 15 81         [12] 2864 	dec	sp
   0AE1 22            [24] 2865 	ret
                           2866 ;------------------------------------------------------------
                           2867 ;Allocation info for local variables in function 'radio_get_transmit_power'
                           2868 ;------------------------------------------------------------
                           2869 ;	radio/radio.c:917: radio_get_transmit_power(void)
                           2870 ;	-----------------------------------------
                           2871 ;	 function radio_get_transmit_power
                           2872 ;	-----------------------------------------
   0AE2                    2873 _radio_get_transmit_power:
                           2874 ;	radio/radio.c:919: return settings.transmit_power;
   0AE2 78r0F         [12] 2875 	mov	r0,#(_settings + 0x000a)
   0AE4 E2            [24] 2876 	movx	a,@r0
   0AE5 F5 82         [12] 2877 	mov	dpl,a
   0AE7 22            [24] 2878 	ret
                           2879 ;------------------------------------------------------------
                           2880 ;Allocation info for local variables in function 'radio_set_network_id'
                           2881 ;------------------------------------------------------------
                           2882 ;id                        Allocated with name '_radio_set_network_id_id_1_236'
                           2883 ;------------------------------------------------------------
                           2884 ;	radio/radio.c:925: radio_set_network_id(uint16_t id)
                           2885 ;	-----------------------------------------
                           2886 ;	 function radio_set_network_id
                           2887 ;	-----------------------------------------
   0AE8                    2888 _radio_set_network_id:
   0AE8 AF 83         [24] 2889 	mov	r7,dph
   0AEA E5 82         [12] 2890 	mov	a,dpl
   0AEC 90r01r0A      [24] 2891 	mov	dptr,#_radio_set_network_id_id_1_236
   0AEF F0            [24] 2892 	movx	@dptr,a
   0AF0 EF            [12] 2893 	mov	a,r7
   0AF1 A3            [24] 2894 	inc	dptr
   0AF2 F0            [24] 2895 	movx	@dptr,a
                           2896 ;	radio/radio.c:927: netid[0] = id&0xFF;
   0AF3 90r01r0A      [24] 2897 	mov	dptr,#_radio_set_network_id_id_1_236
   0AF6 E0            [24] 2898 	movx	a,@dptr
   0AF7 FE            [12] 2899 	mov	r6,a
   0AF8 A3            [24] 2900 	inc	dptr
   0AF9 E0            [24] 2901 	movx	a,@dptr
   0AFA FF            [12] 2902 	mov	r7,a
   0AFB 8E 04         [24] 2903 	mov	ar4,r6
   0AFD 78r03         [12] 2904 	mov	r0,#_netid
   0AFF EC            [12] 2905 	mov	a,r4
   0B00 F2            [24] 2906 	movx	@r0,a
                           2907 ;	radio/radio.c:928: netid[1] = id>>8;
   0B01 8F 05         [24] 2908 	mov	ar5,r7
   0B03 78r04         [12] 2909 	mov	r0,#(_netid + 0x0001)
   0B05 ED            [12] 2910 	mov	a,r5
   0B06 F2            [24] 2911 	movx	@r0,a
                           2912 ;	radio/radio.c:929: if (!feature_golay) {
   0B07 20*00 34      [24] 2913 	jb	_feature_golay,00103$
                           2914 ;	radio/radio.c:932: register_write(EZRADIOPRO_TRANSMIT_HEADER_3, id >> 8);
   0B0A C0 07         [24] 2915 	push	ar7
   0B0C C0 06         [24] 2916 	push	ar6
   0B0E C0 05         [24] 2917 	push	ar5
   0B10 C0 05         [24] 2918 	push	ar5
   0B12 75 82 3A      [24] 2919 	mov	dpl,#0x3A
   0B15 12r0Br3F      [24] 2920 	lcall	_register_write
   0B18 15 81         [12] 2921 	dec	sp
   0B1A D0 05         [24] 2922 	pop	ar5
   0B1C D0 06         [24] 2923 	pop	ar6
   0B1E D0 07         [24] 2924 	pop	ar7
                           2925 ;	radio/radio.c:933: register_write(EZRADIOPRO_TRANSMIT_HEADER_2, id & 0xFF);
   0B20 C0 06         [24] 2926 	push	ar6
   0B22 C0 05         [24] 2927 	push	ar5
   0B24 C0 06         [24] 2928 	push	ar6
   0B26 75 82 3B      [24] 2929 	mov	dpl,#0x3B
   0B29 12r0Br3F      [24] 2930 	lcall	_register_write
   0B2C 15 81         [12] 2931 	dec	sp
                           2932 ;	radio/radio.c:934: register_write(EZRADIOPRO_CHECK_HEADER_3, id >> 8);
   0B2E 75 82 3F      [24] 2933 	mov	dpl,#0x3F
   0B31 12r0Br3F      [24] 2934 	lcall	_register_write
   0B34 15 81         [12] 2935 	dec	sp
                           2936 ;	radio/radio.c:935: register_write(EZRADIOPRO_CHECK_HEADER_2, id & 0xFF);
   0B36 75 82 40      [24] 2937 	mov	dpl,#0x40
   0B39 12r0Br3F      [24] 2938 	lcall	_register_write
   0B3C 15 81         [12] 2939 	dec	sp
   0B3E                    2940 00103$:
   0B3E 22            [24] 2941 	ret
                           2942 ;------------------------------------------------------------
                           2943 ;Allocation info for local variables in function 'register_write'
                           2944 ;------------------------------------------------------------
                           2945 ;value                     Allocated to stack - sp -2
                           2946 ;reg                       Allocated to registers r7 
                           2947 ;EX0_saved                 Allocated to registers b0 
                           2948 ;------------------------------------------------------------
                           2949 ;	radio/radio.c:946: register_write(uint8_t reg, uint8_t value) __reentrant
                           2950 ;	-----------------------------------------
                           2951 ;	 function register_write
                           2952 ;	-----------------------------------------
   0B3F                    2953 _register_write:
   0B3F AF 82         [24] 2954 	mov	r7,dpl
                           2955 ;	radio/radio.c:948: EX0_SAVE_DISABLE;
   0B41 A2 A8         [12] 2956 	mov	c,_EX0
   0B43 92*00         [24] 2957 	mov	b0,c
   0B45 C2 A8         [12] 2958 	clr	_EX0
                           2959 ;	radio/radio.c:950: NSS1 = 0;                           // drive NSS low
   0B47 C2 94         [12] 2960 	clr	_NSS1
                           2961 ;	radio/radio.c:951: SPIF1 = 0;                          // clear SPIF
   0B49 C2 B7         [12] 2962 	clr	_SPIF1
                           2963 ;	radio/radio.c:952: SPI1DAT = (reg | 0x80);             // write reg address
   0B4B 74 80         [12] 2964 	mov	a,#0x80
   0B4D 4F            [12] 2965 	orl	a,r7
   0B4E F5 86         [12] 2966 	mov	_SPI1DAT,a
                           2967 ;	radio/radio.c:953: while (!TXBMT1);                    // wait on TXBMT
   0B50                    2968 00101$:
   0B50 30 B1 FD      [24] 2969 	jnb	_TXBMT1,00101$
                           2970 ;	radio/radio.c:954: SPI1DAT = value;                    // write value
   0B53 A8 81         [24] 2971 	mov	r0,sp
   0B55 18            [12] 2972 	dec	r0
   0B56 18            [12] 2973 	dec	r0
   0B57 86 86         [24] 2974 	mov	_SPI1DAT,@r0
                           2975 ;	radio/radio.c:955: while (!TXBMT1);                    // wait on TXBMT
   0B59                    2976 00104$:
   0B59 30 B1 FD      [24] 2977 	jnb	_TXBMT1,00104$
                           2978 ;	radio/radio.c:956: while ((SPI1CFG & 0x80) == 0x80);   // wait on SPIBSY
   0B5C                    2979 00107$:
   0B5C 74 80         [12] 2980 	mov	a,#0x80
   0B5E 55 84         [12] 2981 	anl	a,_SPI1CFG
   0B60 FF            [12] 2982 	mov	r7,a
   0B61 BF 80 02      [24] 2983 	cjne	r7,#0x80,00129$
   0B64 80 F6         [24] 2984 	sjmp	00107$
   0B66                    2985 00129$:
                           2986 ;	radio/radio.c:958: SPIF1 = 0;                          // leave SPIF cleared
   0B66 C2 B7         [12] 2987 	clr	_SPIF1
                           2988 ;	radio/radio.c:959: NSS1 = 1;                           // drive NSS high
   0B68 D2 94         [12] 2989 	setb	_NSS1
                           2990 ;	radio/radio.c:961: EX0_RESTORE;
   0B6A A2*00         [12] 2991 	mov	c,b0
   0B6C 92 A8         [24] 2992 	mov	_EX0,c
   0B6E 22            [24] 2993 	ret
                           2994 ;------------------------------------------------------------
                           2995 ;Allocation info for local variables in function 'register_read'
                           2996 ;------------------------------------------------------------
                           2997 ;reg                       Allocated to registers r7 
                           2998 ;value                     Allocated to registers r7 
                           2999 ;EX0_saved                 Allocated to registers b0 
                           3000 ;------------------------------------------------------------
                           3001 ;	radio/radio.c:971: register_read(uint8_t reg) __reentrant
                           3002 ;	-----------------------------------------
                           3003 ;	 function register_read
                           3004 ;	-----------------------------------------
   0B6F                    3005 _register_read:
   0B6F AF 82         [24] 3006 	mov	r7,dpl
                           3007 ;	radio/radio.c:974: EX0_SAVE_DISABLE;
   0B71 A2 A8         [12] 3008 	mov	c,_EX0
   0B73 92*00         [24] 3009 	mov	b0,c
   0B75 C2 A8         [12] 3010 	clr	_EX0
                           3011 ;	radio/radio.c:976: NSS1 = 0;				// dsrive NSS low
   0B77 C2 94         [12] 3012 	clr	_NSS1
                           3013 ;	radio/radio.c:977: SPIF1 = 0;				// clear SPIF
   0B79 C2 B7         [12] 3014 	clr	_SPIF1
                           3015 ;	radio/radio.c:978: SPI1DAT = (reg);			// write reg address
   0B7B 8F 86         [24] 3016 	mov	_SPI1DAT,r7
                           3017 ;	radio/radio.c:979: while (!TXBMT1);			// wait on TXBMT
   0B7D                    3018 00101$:
   0B7D 30 B1 FD      [24] 3019 	jnb	_TXBMT1,00101$
                           3020 ;	radio/radio.c:980: SPI1DAT = 0x00;				// write anything
   0B80 75 86 00      [24] 3021 	mov	_SPI1DAT,#0x00
                           3022 ;	radio/radio.c:981: while (!TXBMT1);			// wait on TXBMT
   0B83                    3023 00104$:
   0B83 30 B1 FD      [24] 3024 	jnb	_TXBMT1,00104$
                           3025 ;	radio/radio.c:982: while ((SPI1CFG & 0x80) == 0x80);	// wait on SPIBSY
   0B86                    3026 00107$:
   0B86 74 80         [12] 3027 	mov	a,#0x80
   0B88 55 84         [12] 3028 	anl	a,_SPI1CFG
   0B8A FF            [12] 3029 	mov	r7,a
   0B8B BF 80 02      [24] 3030 	cjne	r7,#0x80,00129$
   0B8E 80 F6         [24] 3031 	sjmp	00107$
   0B90                    3032 00129$:
                           3033 ;	radio/radio.c:983: value = SPI1DAT;			// read value
   0B90 AF 86         [24] 3034 	mov	r7,_SPI1DAT
                           3035 ;	radio/radio.c:984: SPIF1 = 0;				// leave SPIF cleared
   0B92 C2 B7         [12] 3036 	clr	_SPIF1
                           3037 ;	radio/radio.c:985: NSS1 = 1;				// drive NSS high
   0B94 D2 94         [12] 3038 	setb	_NSS1
                           3039 ;	radio/radio.c:987: EX0_RESTORE;
   0B96 A2*00         [12] 3040 	mov	c,b0
   0B98 92 A8         [24] 3041 	mov	_EX0,c
                           3042 ;	radio/radio.c:989: return value;
   0B9A 8F 82         [24] 3043 	mov	dpl,r7
   0B9C 22            [24] 3044 	ret
                           3045 ;------------------------------------------------------------
                           3046 ;Allocation info for local variables in function 'read_receive_fifo'
                           3047 ;------------------------------------------------------------
                           3048 ;buf                       Allocated to stack - sp -3
                           3049 ;n                         Allocated to registers r7 
                           3050 ;------------------------------------------------------------
                           3051 ;	radio/radio.c:996: read_receive_fifo(register uint8_t n, __xdata uint8_t * buf) __reentrant
                           3052 ;	-----------------------------------------
                           3053 ;	 function read_receive_fifo
                           3054 ;	-----------------------------------------
   0B9D                    3055 _read_receive_fifo:
   0B9D AF 82         [24] 3056 	mov	r7,dpl
                           3057 ;	radio/radio.c:998: NSS1 = 0;				// drive NSS low
   0B9F C2 94         [12] 3058 	clr	_NSS1
                           3059 ;	radio/radio.c:999: SPIF1 = 0;				// clear SPIF
   0BA1 C2 B7         [12] 3060 	clr	_SPIF1
                           3061 ;	radio/radio.c:1000: SPI1DAT = EZRADIOPRO_FIFO_ACCESS;
   0BA3 75 86 7F      [24] 3062 	mov	_SPI1DAT,#0x7F
                           3063 ;	radio/radio.c:1001: while (!SPIF1);				// wait on SPIF
   0BA6                    3064 00101$:
   0BA6 30 B7 FD      [24] 3065 	jnb	_SPIF1,00101$
                           3066 ;	radio/radio.c:1002: ACC = SPI1DAT;				// discard first byte
   0BA9 85 86 E0      [24] 3067 	mov	_ACC,_SPI1DAT
                           3068 ;	radio/radio.c:1004: while (n--) {
   0BAC E5 81         [12] 3069 	mov	a,sp
   0BAE 24 FD         [12] 3070 	add	a,#0xfd
   0BB0 F8            [12] 3071 	mov	r0,a
   0BB1 86 05         [24] 3072 	mov	ar5,@r0
   0BB3 08            [12] 3073 	inc	r0
   0BB4 86 06         [24] 3074 	mov	ar6,@r0
   0BB6                    3075 00107$:
   0BB6 8F 04         [24] 3076 	mov	ar4,r7
   0BB8 1F            [12] 3077 	dec	r7
   0BB9 EC            [12] 3078 	mov	a,r4
   0BBA 60 16         [24] 3079 	jz	00109$
                           3080 ;	radio/radio.c:1005: SPIF1 = 0;			// clear SPIF
   0BBC C2 B7         [12] 3081 	clr	_SPIF1
                           3082 ;	radio/radio.c:1006: SPI1DAT = 0x00;			// write anything
   0BBE 75 86 00      [24] 3083 	mov	_SPI1DAT,#0x00
                           3084 ;	radio/radio.c:1007: while (!SPIF1);			// wait on SPIF
   0BC1                    3085 00104$:
   0BC1 30 B7 FD      [24] 3086 	jnb	_SPIF1,00104$
                           3087 ;	radio/radio.c:1008: *buf++ = SPI1DAT;		// copy to buffer
   0BC4 8D 82         [24] 3088 	mov	dpl,r5
   0BC6 8E 83         [24] 3089 	mov	dph,r6
   0BC8 E5 86         [12] 3090 	mov	a,_SPI1DAT
   0BCA F0            [24] 3091 	movx	@dptr,a
   0BCB A3            [24] 3092 	inc	dptr
   0BCC AD 82         [24] 3093 	mov	r5,dpl
   0BCE AE 83         [24] 3094 	mov	r6,dph
   0BD0 80 E4         [24] 3095 	sjmp	00107$
   0BD2                    3096 00109$:
                           3097 ;	radio/radio.c:1011: SPIF1 = 0;				// leave SPIF cleared
   0BD2 C2 B7         [12] 3098 	clr	_SPIF1
                           3099 ;	radio/radio.c:1012: NSS1 = 1;				// drive NSS high
   0BD4 D2 94         [12] 3100 	setb	_NSS1
   0BD6 22            [24] 3101 	ret
                           3102 ;------------------------------------------------------------
                           3103 ;Allocation info for local variables in function 'clear_status_registers'
                           3104 ;------------------------------------------------------------
                           3105 ;	radio/radio.c:1018: clear_status_registers(void)
                           3106 ;	-----------------------------------------
                           3107 ;	 function clear_status_registers
                           3108 ;	-----------------------------------------
   0BD7                    3109 _clear_status_registers:
                           3110 ;	radio/radio.c:1020: register_read(EZRADIOPRO_INTERRUPT_STATUS_1);
   0BD7 75 82 03      [24] 3111 	mov	dpl,#0x03
   0BDA 12r0Br6F      [24] 3112 	lcall	_register_read
                           3113 ;	radio/radio.c:1021: register_read(EZRADIOPRO_INTERRUPT_STATUS_2);
   0BDD 75 82 04      [24] 3114 	mov	dpl,#0x04
   0BE0 02r0Br6F      [24] 3115 	ljmp	_register_read
                           3116 ;------------------------------------------------------------
                           3117 ;Allocation info for local variables in function 'scale_uint32'
                           3118 ;------------------------------------------------------------
                           3119 ;	radio/radio.c:1031: scale_uint32(__pdata uint32_t value, __pdata uint32_t scale)
                           3120 ;	-----------------------------------------
                           3121 ;	 function scale_uint32
                           3122 ;	-----------------------------------------
   0BE3                    3123 _scale_uint32:
   0BE3 AF 82         [24] 3124 	mov	r7,dpl
   0BE5 AE 83         [24] 3125 	mov	r6,dph
   0BE7 AD F0         [24] 3126 	mov	r5,b
   0BE9 FC            [12] 3127 	mov	r4,a
   0BEA 78r25         [12] 3128 	mov	r0,#_scale_uint32_value_1_248
   0BEC EF            [12] 3129 	mov	a,r7
   0BED F2            [24] 3130 	movx	@r0,a
   0BEE 08            [12] 3131 	inc	r0
   0BEF EE            [12] 3132 	mov	a,r6
   0BF0 F2            [24] 3133 	movx	@r0,a
   0BF1 08            [12] 3134 	inc	r0
   0BF2 ED            [12] 3135 	mov	a,r5
   0BF3 F2            [24] 3136 	movx	@r0,a
   0BF4 08            [12] 3137 	inc	r0
   0BF5 EC            [12] 3138 	mov	a,r4
   0BF6 F2            [24] 3139 	movx	@r0,a
                           3140 ;	radio/radio.c:1033: return (value + (scale >> 1)) / scale;
   0BF7 78r24         [12] 3141 	mov	r0,#(_scale_uint32_PARM_2 + 3)
   0BF9 E2            [24] 3142 	movx	a,@r0
   0BFA C3            [12] 3143 	clr	c
   0BFB 13            [12] 3144 	rrc	a
   0BFC FF            [12] 3145 	mov	r7,a
   0BFD 18            [12] 3146 	dec	r0
   0BFE E2            [24] 3147 	movx	a,@r0
   0BFF 13            [12] 3148 	rrc	a
   0C00 FE            [12] 3149 	mov	r6,a
   0C01 18            [12] 3150 	dec	r0
   0C02 E2            [24] 3151 	movx	a,@r0
   0C03 13            [12] 3152 	rrc	a
   0C04 FB            [12] 3153 	mov	r3,a
   0C05 18            [12] 3154 	dec	r0
   0C06 E2            [24] 3155 	movx	a,@r0
   0C07 13            [12] 3156 	rrc	a
   0C08 FA            [12] 3157 	mov	r2,a
   0C09 78r25         [12] 3158 	mov	r0,#_scale_uint32_value_1_248
   0C0B E2            [24] 3159 	movx	a,@r0
   0C0C 2A            [12] 3160 	add	a,r2
   0C0D FA            [12] 3161 	mov	r2,a
   0C0E 08            [12] 3162 	inc	r0
   0C0F E2            [24] 3163 	movx	a,@r0
   0C10 3B            [12] 3164 	addc	a,r3
   0C11 FB            [12] 3165 	mov	r3,a
   0C12 08            [12] 3166 	inc	r0
   0C13 E2            [24] 3167 	movx	a,@r0
   0C14 3E            [12] 3168 	addc	a,r6
   0C15 FE            [12] 3169 	mov	r6,a
   0C16 08            [12] 3170 	inc	r0
   0C17 E2            [24] 3171 	movx	a,@r0
   0C18 3F            [12] 3172 	addc	a,r7
   0C19 FF            [12] 3173 	mov	r7,a
   0C1A 78r21         [12] 3174 	mov	r0,#_scale_uint32_PARM_2
   0C1C 90r00r00      [24] 3175 	mov	dptr,#__divulong_PARM_2
   0C1F E2            [24] 3176 	movx	a,@r0
   0C20 F0            [24] 3177 	movx	@dptr,a
   0C21 08            [12] 3178 	inc	r0
   0C22 E2            [24] 3179 	movx	a,@r0
   0C23 A3            [24] 3180 	inc	dptr
   0C24 F0            [24] 3181 	movx	@dptr,a
   0C25 08            [12] 3182 	inc	r0
   0C26 E2            [24] 3183 	movx	a,@r0
   0C27 A3            [24] 3184 	inc	dptr
   0C28 F0            [24] 3185 	movx	@dptr,a
   0C29 08            [12] 3186 	inc	r0
   0C2A E2            [24] 3187 	movx	a,@r0
   0C2B A3            [24] 3188 	inc	dptr
   0C2C F0            [24] 3189 	movx	@dptr,a
   0C2D 8A 82         [24] 3190 	mov	dpl,r2
   0C2F 8B 83         [24] 3191 	mov	dph,r3
   0C31 8E F0         [24] 3192 	mov	b,r6
   0C33 EF            [12] 3193 	mov	a,r7
   0C34 02r00r00      [24] 3194 	ljmp	__divulong
                           3195 ;------------------------------------------------------------
                           3196 ;Allocation info for local variables in function 'software_reset'
                           3197 ;------------------------------------------------------------
                           3198 ;status                    Allocated with name '_software_reset_status_1_251'
                           3199 ;------------------------------------------------------------
                           3200 ;	radio/radio.c:1041: software_reset(void)
                           3201 ;	-----------------------------------------
                           3202 ;	 function software_reset
                           3203 ;	-----------------------------------------
   0C37                    3204 _software_reset:
                           3205 ;	radio/radio.c:1046: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, 0);
   0C37 E4            [12] 3206 	clr	a
   0C38 C0 E0         [24] 3207 	push	acc
   0C3A 75 82 05      [24] 3208 	mov	dpl,#0x05
   0C3D 12r0Br3F      [24] 3209 	lcall	_register_write
   0C40 15 81         [12] 3210 	dec	sp
                           3211 ;	radio/radio.c:1047: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, 0);
   0C42 E4            [12] 3212 	clr	a
   0C43 C0 E0         [24] 3213 	push	acc
   0C45 75 82 06      [24] 3214 	mov	dpl,#0x06
   0C48 12r0Br3F      [24] 3215 	lcall	_register_write
   0C4B 15 81         [12] 3216 	dec	sp
                           3217 ;	radio/radio.c:1049: clear_status_registers();
   0C4D 12r0BrD7      [24] 3218 	lcall	_clear_status_registers
                           3219 ;	radio/radio.c:1052: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_1, (EZRADIOPRO_SWRES | EZRADIOPRO_XTON));
   0C50 74 81         [12] 3220 	mov	a,#0x81
   0C52 C0 E0         [24] 3221 	push	acc
   0C54 75 82 07      [24] 3222 	mov	dpl,#0x07
   0C57 12r0Br3F      [24] 3223 	lcall	_register_write
   0C5A 15 81         [12] 3224 	dec	sp
                           3225 ;	radio/radio.c:1055: delay_set(2);
   0C5C 90 00 02      [24] 3226 	mov	dptr,#0x0002
   0C5F 12r00r00      [24] 3227 	lcall	_delay_set
                           3228 ;	radio/radio.c:1056: while (IRQ) {
   0C62                    3229 00103$:
   0C62 30 87 07      [24] 3230 	jnb	_IRQ,00105$
                           3231 ;	radio/radio.c:1057: if (delay_expired()) {
   0C65 12r00r00      [24] 3232 	lcall	_delay_expired
   0C68 50 F8         [24] 3233 	jnc	00103$
                           3234 ;	radio/radio.c:1058: return false;
   0C6A C3            [12] 3235 	clr	c
   0C6B 22            [24] 3236 	ret
   0C6C                    3237 00105$:
                           3238 ;	radio/radio.c:1063: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, 0);
   0C6C E4            [12] 3239 	clr	a
   0C6D C0 E0         [24] 3240 	push	acc
   0C6F 75 82 05      [24] 3241 	mov	dpl,#0x05
   0C72 12r0Br3F      [24] 3242 	lcall	_register_write
   0C75 15 81         [12] 3243 	dec	sp
                           3244 ;	radio/radio.c:1064: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, EZRADIOPRO_ENCHIPRDY);
   0C77 74 02         [12] 3245 	mov	a,#0x02
   0C79 C0 E0         [24] 3246 	push	acc
   0C7B 75 82 06      [24] 3247 	mov	dpl,#0x06
   0C7E 12r0Br3F      [24] 3248 	lcall	_register_write
   0C81 15 81         [12] 3249 	dec	sp
                           3250 ;	radio/radio.c:1066: delay_set(20);
   0C83 90 00 14      [24] 3251 	mov	dptr,#0x0014
   0C86 12r00r00      [24] 3252 	lcall	_delay_set
                           3253 ;	radio/radio.c:1067: while (!delay_expired()) {
   0C89                    3254 00108$:
   0C89 12r00r00      [24] 3255 	lcall	_delay_expired
   0C8C 40 13         [24] 3256 	jc	00110$
                           3257 ;	radio/radio.c:1068: status = register_read(EZRADIOPRO_INTERRUPT_STATUS_1);
   0C8E 75 82 03      [24] 3258 	mov	dpl,#0x03
   0C91 12r0Br6F      [24] 3259 	lcall	_register_read
                           3260 ;	radio/radio.c:1069: status = register_read(EZRADIOPRO_INTERRUPT_STATUS_2);
   0C94 75 82 04      [24] 3261 	mov	dpl,#0x04
   0C97 12r0Br6F      [24] 3262 	lcall	_register_read
   0C9A E5 82         [12] 3263 	mov	a,dpl
                           3264 ;	radio/radio.c:1070: if (status & EZRADIOPRO_ICHIPRDY) {
   0C9C 30 E1 EA      [24] 3265 	jnb	acc.1,00108$
                           3266 ;	radio/radio.c:1071: return true;
   0C9F D3            [12] 3267 	setb	c
   0CA0 22            [24] 3268 	ret
   0CA1                    3269 00110$:
                           3270 ;	radio/radio.c:1074: return false;
   0CA1 C3            [12] 3271 	clr	c
   0CA2 22            [24] 3272 	ret
                           3273 ;------------------------------------------------------------
                           3274 ;Allocation info for local variables in function 'set_frequency_registers'
                           3275 ;------------------------------------------------------------
                           3276 ;band                      Allocated with name '_set_frequency_registers_band_1_257'
                           3277 ;------------------------------------------------------------
                           3278 ;	radio/radio.c:1081: set_frequency_registers(__pdata uint32_t frequency)
                           3279 ;	-----------------------------------------
                           3280 ;	 function set_frequency_registers
                           3281 ;	-----------------------------------------
   0CA3                    3282 _set_frequency_registers:
   0CA3 AF 82         [24] 3283 	mov	r7,dpl
   0CA5 AE 83         [24] 3284 	mov	r6,dph
   0CA7 AD F0         [24] 3285 	mov	r5,b
   0CA9 FC            [12] 3286 	mov	r4,a
   0CAA 78r29         [12] 3287 	mov	r0,#_set_frequency_registers_frequency_1_256
   0CAC EF            [12] 3288 	mov	a,r7
   0CAD F2            [24] 3289 	movx	@r0,a
   0CAE 08            [12] 3290 	inc	r0
   0CAF EE            [12] 3291 	mov	a,r6
   0CB0 F2            [24] 3292 	movx	@r0,a
   0CB1 08            [12] 3293 	inc	r0
   0CB2 ED            [12] 3294 	mov	a,r5
   0CB3 F2            [24] 3295 	movx	@r0,a
   0CB4 08            [12] 3296 	inc	r0
   0CB5 EC            [12] 3297 	mov	a,r4
   0CB6 F2            [24] 3298 	movx	@r0,a
                           3299 ;	radio/radio.c:1086: if (frequency > 480000000UL) {
   0CB7 78r29         [12] 3300 	mov	r0,#_set_frequency_registers_frequency_1_256
   0CB9 C3            [12] 3301 	clr	c
   0CBA E2            [24] 3302 	movx	a,@r0
   0CBB F5 F0         [12] 3303 	mov	b,a
   0CBD E4            [12] 3304 	clr	a
   0CBE 95 F0         [12] 3305 	subb	a,b
   0CC0 08            [12] 3306 	inc	r0
   0CC1 E2            [24] 3307 	movx	a,@r0
   0CC2 F5 F0         [12] 3308 	mov	b,a
   0CC4 74 38         [12] 3309 	mov	a,#0x38
   0CC6 95 F0         [12] 3310 	subb	a,b
   0CC8 08            [12] 3311 	inc	r0
   0CC9 E2            [24] 3312 	movx	a,@r0
   0CCA F5 F0         [12] 3313 	mov	b,a
   0CCC 74 9C         [12] 3314 	mov	a,#0x9C
   0CCE 95 F0         [12] 3315 	subb	a,b
   0CD0 08            [12] 3316 	inc	r0
   0CD1 E2            [24] 3317 	movx	a,@r0
   0CD2 F5 F0         [12] 3318 	mov	b,a
   0CD4 74 1C         [12] 3319 	mov	a,#0x1C
   0CD6 95 F0         [12] 3320 	subb	a,b
   0CD8 40 03         [24] 3321 	jc	00109$
   0CDA 02r0Dr99      [24] 3322 	ljmp	00102$
   0CDD                    3323 00109$:
                           3324 ;	radio/radio.c:1087: frequency -= 480000000UL;
   0CDD 78r2A         [12] 3325 	mov	r0,#(_set_frequency_registers_frequency_1_256 + 1)
   0CDF E2            [24] 3326 	movx	a,@r0
   0CE0 24 C8         [12] 3327 	add	a,#0xC8
   0CE2 F2            [24] 3328 	movx	@r0,a
   0CE3 08            [12] 3329 	inc	r0
   0CE4 E2            [24] 3330 	movx	a,@r0
   0CE5 34 63         [12] 3331 	addc	a,#0x63
   0CE7 F2            [24] 3332 	movx	@r0,a
   0CE8 08            [12] 3333 	inc	r0
   0CE9 E2            [24] 3334 	movx	a,@r0
   0CEA 34 E3         [12] 3335 	addc	a,#0xE3
   0CEC F2            [24] 3336 	movx	@r0,a
                           3337 ;	radio/radio.c:1088: band  = frequency / 20000000UL;
   0CED 90r00r00      [24] 3338 	mov	dptr,#__divulong_PARM_2
   0CF0 E4            [12] 3339 	clr	a
   0CF1 F0            [24] 3340 	movx	@dptr,a
   0CF2 74 2D         [12] 3341 	mov	a,#0x2D
   0CF4 A3            [24] 3342 	inc	dptr
   0CF5 F0            [24] 3343 	movx	@dptr,a
   0CF6 74 31         [12] 3344 	mov	a,#0x31
   0CF8 A3            [24] 3345 	inc	dptr
   0CF9 F0            [24] 3346 	movx	@dptr,a
   0CFA 74 01         [12] 3347 	mov	a,#0x01
   0CFC A3            [24] 3348 	inc	dptr
   0CFD F0            [24] 3349 	movx	@dptr,a
   0CFE 78r29         [12] 3350 	mov	r0,#_set_frequency_registers_frequency_1_256
   0D00 E2            [24] 3351 	movx	a,@r0
   0D01 F5 82         [12] 3352 	mov	dpl,a
   0D03 08            [12] 3353 	inc	r0
   0D04 E2            [24] 3354 	movx	a,@r0
   0D05 F5 83         [12] 3355 	mov	dph,a
   0D07 08            [12] 3356 	inc	r0
   0D08 E2            [24] 3357 	movx	a,@r0
   0D09 F5 F0         [12] 3358 	mov	b,a
   0D0B 08            [12] 3359 	inc	r0
   0D0C E2            [24] 3360 	movx	a,@r0
   0D0D 12r00r00      [24] 3361 	lcall	__divulong
   0D10 AA 82         [24] 3362 	mov	r2,dpl
   0D12 90r01r0C      [24] 3363 	mov	dptr,#_set_frequency_registers_band_1_257
   0D15 EA            [12] 3364 	mov	a,r2
   0D16 F0            [24] 3365 	movx	@dptr,a
                           3366 ;	radio/radio.c:1089: frequency -= (uint32_t)band * 20000000UL;
   0D17 90r00r00      [24] 3367 	mov	dptr,#__mullong_PARM_2
   0D1A EA            [12] 3368 	mov	a,r2
   0D1B F0            [24] 3369 	movx	@dptr,a
   0D1C E4            [12] 3370 	clr	a
   0D1D A3            [24] 3371 	inc	dptr
   0D1E F0            [24] 3372 	movx	@dptr,a
   0D1F E4            [12] 3373 	clr	a
   0D20 A3            [24] 3374 	inc	dptr
   0D21 F0            [24] 3375 	movx	@dptr,a
   0D22 E4            [12] 3376 	clr	a
   0D23 A3            [24] 3377 	inc	dptr
   0D24 F0            [24] 3378 	movx	@dptr,a
   0D25 90 2D 00      [24] 3379 	mov	dptr,#0x2D00
   0D28 75 F0 31      [24] 3380 	mov	b,#0x31
   0D2B 74 01         [12] 3381 	mov	a,#0x01
   0D2D 12r00r00      [24] 3382 	lcall	__mullong
   0D30 AC 82         [24] 3383 	mov	r4,dpl
   0D32 AD 83         [24] 3384 	mov	r5,dph
   0D34 AE F0         [24] 3385 	mov	r6,b
   0D36 FF            [12] 3386 	mov	r7,a
   0D37 78r29         [12] 3387 	mov	r0,#_set_frequency_registers_frequency_1_256
   0D39 E2            [24] 3388 	movx	a,@r0
   0D3A C3            [12] 3389 	clr	c
   0D3B 9C            [12] 3390 	subb	a,r4
   0D3C F2            [24] 3391 	movx	@r0,a
   0D3D 08            [12] 3392 	inc	r0
   0D3E E2            [24] 3393 	movx	a,@r0
   0D3F 9D            [12] 3394 	subb	a,r5
   0D40 F2            [24] 3395 	movx	@r0,a
   0D41 08            [12] 3396 	inc	r0
   0D42 E2            [24] 3397 	movx	a,@r0
   0D43 9E            [12] 3398 	subb	a,r6
   0D44 F2            [24] 3399 	movx	@r0,a
   0D45 08            [12] 3400 	inc	r0
   0D46 E2            [24] 3401 	movx	a,@r0
   0D47 9F            [12] 3402 	subb	a,r7
   0D48 F2            [24] 3403 	movx	@r0,a
                           3404 ;	radio/radio.c:1090: frequency  = scale_uint32(frequency, 625);
   0D49 78r21         [12] 3405 	mov	r0,#_scale_uint32_PARM_2
   0D4B 74 71         [12] 3406 	mov	a,#0x71
   0D4D F2            [24] 3407 	movx	@r0,a
   0D4E 08            [12] 3408 	inc	r0
   0D4F 74 02         [12] 3409 	mov	a,#0x02
   0D51 F2            [24] 3410 	movx	@r0,a
   0D52 08            [12] 3411 	inc	r0
   0D53 E4            [12] 3412 	clr	a
   0D54 F2            [24] 3413 	movx	@r0,a
   0D55 08            [12] 3414 	inc	r0
   0D56 F2            [24] 3415 	movx	@r0,a
   0D57 78r29         [12] 3416 	mov	r0,#_set_frequency_registers_frequency_1_256
   0D59 E2            [24] 3417 	movx	a,@r0
   0D5A F5 82         [12] 3418 	mov	dpl,a
   0D5C 08            [12] 3419 	inc	r0
   0D5D E2            [24] 3420 	movx	a,@r0
   0D5E F5 83         [12] 3421 	mov	dph,a
   0D60 08            [12] 3422 	inc	r0
   0D61 E2            [24] 3423 	movx	a,@r0
   0D62 F5 F0         [12] 3424 	mov	b,a
   0D64 08            [12] 3425 	inc	r0
   0D65 E2            [24] 3426 	movx	a,@r0
   0D66 12r0BrE3      [24] 3427 	lcall	_scale_uint32
   0D69 78r29         [12] 3428 	mov	r0,#_set_frequency_registers_frequency_1_256
   0D6B C0 E0         [24] 3429 	push	acc
   0D6D E5 82         [12] 3430 	mov	a,dpl
   0D6F F2            [24] 3431 	movx	@r0,a
   0D70 08            [12] 3432 	inc	r0
   0D71 E5 83         [12] 3433 	mov	a,dph
   0D73 F2            [24] 3434 	movx	@r0,a
   0D74 08            [12] 3435 	inc	r0
   0D75 E5 F0         [12] 3436 	mov	a,b
   0D77 F2            [24] 3437 	movx	@r0,a
   0D78 D0 E0         [24] 3438 	pop	acc
   0D7A 08            [12] 3439 	inc	r0
   0D7B F2            [24] 3440 	movx	@r0,a
                           3441 ;	radio/radio.c:1091: frequency <<= 1;
   0D7C 78r29         [12] 3442 	mov	r0,#_set_frequency_registers_frequency_1_256
   0D7E E2            [24] 3443 	movx	a,@r0
   0D7F 25 E0         [12] 3444 	add	a,acc
   0D81 F2            [24] 3445 	movx	@r0,a
   0D82 08            [12] 3446 	inc	r0
   0D83 E2            [24] 3447 	movx	a,@r0
   0D84 33            [12] 3448 	rlc	a
   0D85 F2            [24] 3449 	movx	@r0,a
   0D86 08            [12] 3450 	inc	r0
   0D87 E2            [24] 3451 	movx	a,@r0
   0D88 33            [12] 3452 	rlc	a
   0D89 F2            [24] 3453 	movx	@r0,a
   0D8A 08            [12] 3454 	inc	r0
   0D8B E2            [24] 3455 	movx	a,@r0
   0D8C 33            [12] 3456 	rlc	a
   0D8D F2            [24] 3457 	movx	@r0,a
                           3458 ;	radio/radio.c:1092: band |= EZRADIOPRO_HBSEL;
   0D8E 90r01r0C      [24] 3459 	mov	dptr,#_set_frequency_registers_band_1_257
   0D91 E0            [24] 3460 	movx	a,@dptr
   0D92 FF            [12] 3461 	mov	r7,a
   0D93 44 20         [12] 3462 	orl	a,#0x20
   0D95 F0            [24] 3463 	movx	@dptr,a
   0D96 02r0Er5C      [24] 3464 	ljmp	00103$
   0D99                    3465 00102$:
                           3466 ;	radio/radio.c:1094: frequency -= 240000000UL;
   0D99 78r2A         [12] 3467 	mov	r0,#(_set_frequency_registers_frequency_1_256 + 1)
   0D9B E2            [24] 3468 	movx	a,@r0
   0D9C 24 E4         [12] 3469 	add	a,#0xE4
   0D9E F2            [24] 3470 	movx	@r0,a
   0D9F 08            [12] 3471 	inc	r0
   0DA0 E2            [24] 3472 	movx	a,@r0
   0DA1 34 B1         [12] 3473 	addc	a,#0xB1
   0DA3 F2            [24] 3474 	movx	@r0,a
   0DA4 08            [12] 3475 	inc	r0
   0DA5 E2            [24] 3476 	movx	a,@r0
   0DA6 34 F1         [12] 3477 	addc	a,#0xF1
   0DA8 F2            [24] 3478 	movx	@r0,a
                           3479 ;	radio/radio.c:1095: band  = frequency / 10000000UL;
   0DA9 90r00r00      [24] 3480 	mov	dptr,#__divulong_PARM_2
   0DAC 74 80         [12] 3481 	mov	a,#0x80
   0DAE F0            [24] 3482 	movx	@dptr,a
   0DAF 74 96         [12] 3483 	mov	a,#0x96
   0DB1 A3            [24] 3484 	inc	dptr
   0DB2 F0            [24] 3485 	movx	@dptr,a
   0DB3 74 98         [12] 3486 	mov	a,#0x98
   0DB5 A3            [24] 3487 	inc	dptr
   0DB6 F0            [24] 3488 	movx	@dptr,a
   0DB7 E4            [12] 3489 	clr	a
   0DB8 A3            [24] 3490 	inc	dptr
   0DB9 F0            [24] 3491 	movx	@dptr,a
   0DBA 78r29         [12] 3492 	mov	r0,#_set_frequency_registers_frequency_1_256
   0DBC E2            [24] 3493 	movx	a,@r0
   0DBD F5 82         [12] 3494 	mov	dpl,a
   0DBF 08            [12] 3495 	inc	r0
   0DC0 E2            [24] 3496 	movx	a,@r0
   0DC1 F5 83         [12] 3497 	mov	dph,a
   0DC3 08            [12] 3498 	inc	r0
   0DC4 E2            [24] 3499 	movx	a,@r0
   0DC5 F5 F0         [12] 3500 	mov	b,a
   0DC7 08            [12] 3501 	inc	r0
   0DC8 E2            [24] 3502 	movx	a,@r0
   0DC9 12r00r00      [24] 3503 	lcall	__divulong
   0DCC AC 82         [24] 3504 	mov	r4,dpl
   0DCE 90r01r0C      [24] 3505 	mov	dptr,#_set_frequency_registers_band_1_257
   0DD1 EC            [12] 3506 	mov	a,r4
   0DD2 F0            [24] 3507 	movx	@dptr,a
                           3508 ;	radio/radio.c:1096: frequency -= (uint32_t)band * 10000000UL;
   0DD3 90r00r00      [24] 3509 	mov	dptr,#__mullong_PARM_2
   0DD6 EC            [12] 3510 	mov	a,r4
   0DD7 F0            [24] 3511 	movx	@dptr,a
   0DD8 E4            [12] 3512 	clr	a
   0DD9 A3            [24] 3513 	inc	dptr
   0DDA F0            [24] 3514 	movx	@dptr,a
   0DDB E4            [12] 3515 	clr	a
   0DDC A3            [24] 3516 	inc	dptr
   0DDD F0            [24] 3517 	movx	@dptr,a
   0DDE E4            [12] 3518 	clr	a
   0DDF A3            [24] 3519 	inc	dptr
   0DE0 F0            [24] 3520 	movx	@dptr,a
   0DE1 90 96 80      [24] 3521 	mov	dptr,#0x9680
   0DE4 75 F0 98      [24] 3522 	mov	b,#0x98
   0DE7 E4            [12] 3523 	clr	a
   0DE8 12r00r00      [24] 3524 	lcall	__mullong
   0DEB AC 82         [24] 3525 	mov	r4,dpl
   0DED AD 83         [24] 3526 	mov	r5,dph
   0DEF AE F0         [24] 3527 	mov	r6,b
   0DF1 FF            [12] 3528 	mov	r7,a
   0DF2 78r29         [12] 3529 	mov	r0,#_set_frequency_registers_frequency_1_256
   0DF4 E2            [24] 3530 	movx	a,@r0
   0DF5 C3            [12] 3531 	clr	c
   0DF6 9C            [12] 3532 	subb	a,r4
   0DF7 F2            [24] 3533 	movx	@r0,a
   0DF8 08            [12] 3534 	inc	r0
   0DF9 E2            [24] 3535 	movx	a,@r0
   0DFA 9D            [12] 3536 	subb	a,r5
   0DFB F2            [24] 3537 	movx	@r0,a
   0DFC 08            [12] 3538 	inc	r0
   0DFD E2            [24] 3539 	movx	a,@r0
   0DFE 9E            [12] 3540 	subb	a,r6
   0DFF F2            [24] 3541 	movx	@r0,a
   0E00 08            [12] 3542 	inc	r0
   0E01 E2            [24] 3543 	movx	a,@r0
   0E02 9F            [12] 3544 	subb	a,r7
   0E03 F2            [24] 3545 	movx	@r0,a
                           3546 ;	radio/radio.c:1097: frequency  = scale_uint32(frequency, 625);
   0E04 78r21         [12] 3547 	mov	r0,#_scale_uint32_PARM_2
   0E06 74 71         [12] 3548 	mov	a,#0x71
   0E08 F2            [24] 3549 	movx	@r0,a
   0E09 08            [12] 3550 	inc	r0
   0E0A 74 02         [12] 3551 	mov	a,#0x02
   0E0C F2            [24] 3552 	movx	@r0,a
   0E0D 08            [12] 3553 	inc	r0
   0E0E E4            [12] 3554 	clr	a
   0E0F F2            [24] 3555 	movx	@r0,a
   0E10 08            [12] 3556 	inc	r0
   0E11 F2            [24] 3557 	movx	@r0,a
   0E12 78r29         [12] 3558 	mov	r0,#_set_frequency_registers_frequency_1_256
   0E14 E2            [24] 3559 	movx	a,@r0
   0E15 F5 82         [12] 3560 	mov	dpl,a
   0E17 08            [12] 3561 	inc	r0
   0E18 E2            [24] 3562 	movx	a,@r0
   0E19 F5 83         [12] 3563 	mov	dph,a
   0E1B 08            [12] 3564 	inc	r0
   0E1C E2            [24] 3565 	movx	a,@r0
   0E1D F5 F0         [12] 3566 	mov	b,a
   0E1F 08            [12] 3567 	inc	r0
   0E20 E2            [24] 3568 	movx	a,@r0
   0E21 12r0BrE3      [24] 3569 	lcall	_scale_uint32
   0E24 78r29         [12] 3570 	mov	r0,#_set_frequency_registers_frequency_1_256
   0E26 C0 E0         [24] 3571 	push	acc
   0E28 E5 82         [12] 3572 	mov	a,dpl
   0E2A F2            [24] 3573 	movx	@r0,a
   0E2B 08            [12] 3574 	inc	r0
   0E2C E5 83         [12] 3575 	mov	a,dph
   0E2E F2            [24] 3576 	movx	@r0,a
   0E2F 08            [12] 3577 	inc	r0
   0E30 E5 F0         [12] 3578 	mov	a,b
   0E32 F2            [24] 3579 	movx	@r0,a
   0E33 D0 E0         [24] 3580 	pop	acc
   0E35 08            [12] 3581 	inc	r0
   0E36 F2            [24] 3582 	movx	@r0,a
                           3583 ;	radio/radio.c:1098: frequency <<= 2;
   0E37 78r29         [12] 3584 	mov	r0,#_set_frequency_registers_frequency_1_256
   0E39 E2            [24] 3585 	movx	a,@r0
   0E3A 25 E0         [12] 3586 	add	a,acc
   0E3C F2            [24] 3587 	movx	@r0,a
   0E3D 08            [12] 3588 	inc	r0
   0E3E E2            [24] 3589 	movx	a,@r0
   0E3F 33            [12] 3590 	rlc	a
   0E40 F2            [24] 3591 	movx	@r0,a
   0E41 08            [12] 3592 	inc	r0
   0E42 E2            [24] 3593 	movx	a,@r0
   0E43 33            [12] 3594 	rlc	a
   0E44 F2            [24] 3595 	movx	@r0,a
   0E45 08            [12] 3596 	inc	r0
   0E46 E2            [24] 3597 	movx	a,@r0
   0E47 33            [12] 3598 	rlc	a
   0E48 F2            [24] 3599 	movx	@r0,a
   0E49 18            [12] 3600 	dec	r0
   0E4A 18            [12] 3601 	dec	r0
   0E4B 18            [12] 3602 	dec	r0
   0E4C E2            [24] 3603 	movx	a,@r0
   0E4D 25 E0         [12] 3604 	add	a,acc
   0E4F F2            [24] 3605 	movx	@r0,a
   0E50 08            [12] 3606 	inc	r0
   0E51 E2            [24] 3607 	movx	a,@r0
   0E52 33            [12] 3608 	rlc	a
   0E53 F2            [24] 3609 	movx	@r0,a
   0E54 08            [12] 3610 	inc	r0
   0E55 E2            [24] 3611 	movx	a,@r0
   0E56 33            [12] 3612 	rlc	a
   0E57 F2            [24] 3613 	movx	@r0,a
   0E58 08            [12] 3614 	inc	r0
   0E59 E2            [24] 3615 	movx	a,@r0
   0E5A 33            [12] 3616 	rlc	a
   0E5B F2            [24] 3617 	movx	@r0,a
   0E5C                    3618 00103$:
                           3619 ;	radio/radio.c:1101: band |= EZRADIOPRO_SBSEL;
   0E5C 90r01r0C      [24] 3620 	mov	dptr,#_set_frequency_registers_band_1_257
   0E5F E0            [24] 3621 	movx	a,@dptr
   0E60 44 40         [12] 3622 	orl	a,#0x40
   0E62 F0            [24] 3623 	movx	@dptr,a
                           3624 ;	radio/radio.c:1102: carrier = (uint16_t)frequency;
   0E63 78r29         [12] 3625 	mov	r0,#_set_frequency_registers_frequency_1_256
   0E65 E2            [24] 3626 	movx	a,@r0
   0E66 FC            [12] 3627 	mov	r4,a
   0E67 08            [12] 3628 	inc	r0
   0E68 E2            [24] 3629 	movx	a,@r0
   0E69 FD            [12] 3630 	mov	r5,a
                           3631 ;	radio/radio.c:1104: register_write(EZRADIOPRO_FREQUENCY_BAND_SELECT, band);
   0E6A C0 05         [24] 3632 	push	ar5
   0E6C C0 04         [24] 3633 	push	ar4
   0E6E 90r01r0C      [24] 3634 	mov	dptr,#_set_frequency_registers_band_1_257
   0E71 E0            [24] 3635 	movx	a,@dptr
   0E72 C0 E0         [24] 3636 	push	acc
   0E74 75 82 75      [24] 3637 	mov	dpl,#0x75
   0E77 12r0Br3F      [24] 3638 	lcall	_register_write
   0E7A 15 81         [12] 3639 	dec	sp
   0E7C D0 04         [24] 3640 	pop	ar4
   0E7E D0 05         [24] 3641 	pop	ar5
                           3642 ;	radio/radio.c:1105: register_write(EZRADIOPRO_NOMINAL_CARRIER_FREQUENCY_1, carrier >> 8);
   0E80 8D 07         [24] 3643 	mov	ar7,r5
   0E82 C0 05         [24] 3644 	push	ar5
   0E84 C0 04         [24] 3645 	push	ar4
   0E86 C0 07         [24] 3646 	push	ar7
   0E88 75 82 76      [24] 3647 	mov	dpl,#0x76
   0E8B 12r0Br3F      [24] 3648 	lcall	_register_write
   0E8E 15 81         [12] 3649 	dec	sp
   0E90 D0 04         [24] 3650 	pop	ar4
   0E92 D0 05         [24] 3651 	pop	ar5
                           3652 ;	radio/radio.c:1106: register_write(EZRADIOPRO_NOMINAL_CARRIER_FREQUENCY_0, carrier & 0xFF);
   0E94 C0 04         [24] 3653 	push	ar4
   0E96 75 82 77      [24] 3654 	mov	dpl,#0x77
   0E99 12r0Br3F      [24] 3655 	lcall	_register_write
   0E9C 15 81         [12] 3656 	dec	sp
   0E9E 22            [24] 3657 	ret
                           3658 ;------------------------------------------------------------
                           3659 ;Allocation info for local variables in function 'radio_temperature'
                           3660 ;------------------------------------------------------------
                           3661 ;temp_local                Allocated to registers r6 r7 
                           3662 ;------------------------------------------------------------
                           3663 ;	radio/radio.c:1115: radio_temperature(void)
                           3664 ;	-----------------------------------------
                           3665 ;	 function radio_temperature
                           3666 ;	-----------------------------------------
   0E9F                    3667 _radio_temperature:
                           3668 ;	radio/radio.c:1119: AD0BUSY = 1;		// Start ADC conversion
   0E9F D2 EC         [12] 3669 	setb	_AD0BUSY
                           3670 ;	radio/radio.c:1120: while (AD0BUSY) ;  	// Wait for completion of conversion
   0EA1                    3671 00101$:
   0EA1 20 EC FD      [24] 3672 	jb	_AD0BUSY,00101$
                           3673 ;	radio/radio.c:1122: temp_local = (ADC0H << 8) | ADC0L;
   0EA4 AF BE         [24] 3674 	mov	r7,_ADC0H
   0EA6 7E 00         [12] 3675 	mov	r6,#0x00
   0EA8 AC BD         [24] 3676 	mov	r4,_ADC0L
   0EAA 7D 00         [12] 3677 	mov	r5,#0x00
   0EAC EC            [12] 3678 	mov	a,r4
   0EAD 42 06         [12] 3679 	orl	ar6,a
   0EAF ED            [12] 3680 	mov	a,r5
   0EB0 42 07         [12] 3681 	orl	ar7,a
                           3682 ;	radio/radio.c:1123: temp_local *= 1.64060;  // convert reading into mV ( (val/1024) * 1680 )  vref=1680mV
   0EB2 8E 82         [24] 3683 	mov	dpl,r6
   0EB4 8F 83         [24] 3684 	mov	dph,r7
   0EB6 12r00r00      [24] 3685 	lcall	___sint2fs
   0EB9 AA 82         [24] 3686 	mov	r2,dpl
   0EBB AB 83         [24] 3687 	mov	r3,dph
   0EBD AC F0         [24] 3688 	mov	r4,b
   0EBF FD            [12] 3689 	mov	r5,a
   0EC0 C0 02         [24] 3690 	push	ar2
   0EC2 C0 03         [24] 3691 	push	ar3
   0EC4 C0 04         [24] 3692 	push	ar4
   0EC6 C0 05         [24] 3693 	push	ar5
   0EC8 90 FF 2E      [24] 3694 	mov	dptr,#0xFF2E
   0ECB 75 F0 D1      [24] 3695 	mov	b,#0xD1
   0ECE 74 3F         [12] 3696 	mov	a,#0x3F
   0ED0 12r00r00      [24] 3697 	lcall	___fsmul
   0ED3 AA 82         [24] 3698 	mov	r2,dpl
   0ED5 AB 83         [24] 3699 	mov	r3,dph
   0ED7 AC F0         [24] 3700 	mov	r4,b
   0ED9 FD            [12] 3701 	mov	r5,a
   0EDA E5 81         [12] 3702 	mov	a,sp
   0EDC 24 FC         [12] 3703 	add	a,#0xfc
   0EDE F5 81         [12] 3704 	mov	sp,a
   0EE0 8A 82         [24] 3705 	mov	dpl,r2
   0EE2 8B 83         [24] 3706 	mov	dph,r3
   0EE4 8C F0         [24] 3707 	mov	b,r4
   0EE6 ED            [12] 3708 	mov	a,r5
   0EE7 12r00r00      [24] 3709 	lcall	___fs2sint
   0EEA AE 82         [24] 3710 	mov	r6,dpl
   0EEC AF 83         [24] 3711 	mov	r7,dph
                           3712 ;	radio/radio.c:1124: temp_local = 25.0 + (temp_local - 1025) / 3.4; // convert mV reading into degC.
   0EEE EE            [12] 3713 	mov	a,r6
   0EEF 24 FF         [12] 3714 	add	a,#0xFF
   0EF1 FC            [12] 3715 	mov	r4,a
   0EF2 EF            [12] 3716 	mov	a,r7
   0EF3 34 FB         [12] 3717 	addc	a,#0xFB
   0EF5 FD            [12] 3718 	mov	r5,a
   0EF6 8C 82         [24] 3719 	mov	dpl,r4
   0EF8 8D 83         [24] 3720 	mov	dph,r5
   0EFA 12r00r00      [24] 3721 	lcall	___sint2fs
   0EFD AA 82         [24] 3722 	mov	r2,dpl
   0EFF AB 83         [24] 3723 	mov	r3,dph
   0F01 AC F0         [24] 3724 	mov	r4,b
   0F03 FD            [12] 3725 	mov	r5,a
   0F04 74 9A         [12] 3726 	mov	a,#0x9A
   0F06 C0 E0         [24] 3727 	push	acc
   0F08 74 99         [12] 3728 	mov	a,#0x99
   0F0A C0 E0         [24] 3729 	push	acc
   0F0C 74 59         [12] 3730 	mov	a,#0x59
   0F0E C0 E0         [24] 3731 	push	acc
   0F10 74 40         [12] 3732 	mov	a,#0x40
   0F12 C0 E0         [24] 3733 	push	acc
   0F14 8A 82         [24] 3734 	mov	dpl,r2
   0F16 8B 83         [24] 3735 	mov	dph,r3
   0F18 8C F0         [24] 3736 	mov	b,r4
   0F1A ED            [12] 3737 	mov	a,r5
   0F1B 12r00r00      [24] 3738 	lcall	___fsdiv
   0F1E AA 82         [24] 3739 	mov	r2,dpl
   0F20 AB 83         [24] 3740 	mov	r3,dph
   0F22 AC F0         [24] 3741 	mov	r4,b
   0F24 FD            [12] 3742 	mov	r5,a
   0F25 E5 81         [12] 3743 	mov	a,sp
   0F27 24 FC         [12] 3744 	add	a,#0xfc
   0F29 F5 81         [12] 3745 	mov	sp,a
   0F2B E4            [12] 3746 	clr	a
   0F2C C0 E0         [24] 3747 	push	acc
   0F2E C0 E0         [24] 3748 	push	acc
   0F30 74 C8         [12] 3749 	mov	a,#0xC8
   0F32 C0 E0         [24] 3750 	push	acc
   0F34 74 41         [12] 3751 	mov	a,#0x41
   0F36 C0 E0         [24] 3752 	push	acc
   0F38 8A 82         [24] 3753 	mov	dpl,r2
   0F3A 8B 83         [24] 3754 	mov	dph,r3
   0F3C 8C F0         [24] 3755 	mov	b,r4
   0F3E ED            [12] 3756 	mov	a,r5
   0F3F 12r00r00      [24] 3757 	lcall	___fsadd
   0F42 AA 82         [24] 3758 	mov	r2,dpl
   0F44 AB 83         [24] 3759 	mov	r3,dph
   0F46 AC F0         [24] 3760 	mov	r4,b
   0F48 FD            [12] 3761 	mov	r5,a
   0F49 E5 81         [12] 3762 	mov	a,sp
   0F4B 24 FC         [12] 3763 	add	a,#0xfc
   0F4D F5 81         [12] 3764 	mov	sp,a
   0F4F 8A 82         [24] 3765 	mov	dpl,r2
   0F51 8B 83         [24] 3766 	mov	dph,r3
   0F53 8C F0         [24] 3767 	mov	b,r4
   0F55 ED            [12] 3768 	mov	a,r5
                           3769 ;	radio/radio.c:1126: return temp_local;
   0F56 02r00r00      [24] 3770 	ljmp	___fs2sint
                           3771 ;------------------------------------------------------------
                           3772 ;Allocation info for local variables in function 'radio_set_diversity'
                           3773 ;------------------------------------------------------------
                           3774 ;	radio/radio.c:1132: radio_set_diversity(bool enable)
                           3775 ;	-----------------------------------------
                           3776 ;	 function radio_set_diversity
                           3777 ;	-----------------------------------------
   0F59                    3778 _radio_set_diversity:
                           3779 ;	radio/radio.c:1134: if (enable)
   0F59 30*08 25      [24] 3780 	jnb	_radio_set_diversity_PARM_1,00102$
                           3781 ;	radio/radio.c:1136: register_write(EZRADIOPRO_GPIO2_CONFIGURATION, 0x18);
   0F5C 74 18         [12] 3782 	mov	a,#0x18
   0F5E C0 E0         [24] 3783 	push	acc
   0F60 75 82 0D      [24] 3784 	mov	dpl,#0x0D
   0F63 12r0Br3F      [24] 3785 	lcall	_register_write
   0F66 15 81         [12] 3786 	dec	sp
                           3787 ;	radio/radio.c:1138: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, (register_read(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2) & ~EZRADIOPRO_ANTDIV_MASK) | 0x80);
   0F68 75 82 08      [24] 3788 	mov	dpl,#0x08
   0F6B 12r0Br6F      [24] 3789 	lcall	_register_read
   0F6E AF 82         [24] 3790 	mov	r7,dpl
   0F70 74 1F         [12] 3791 	mov	a,#0x1F
   0F72 5F            [12] 3792 	anl	a,r7
   0F73 44 80         [12] 3793 	orl	a,#0x80
   0F75 FF            [12] 3794 	mov	r7,a
   0F76 C0 07         [24] 3795 	push	ar7
   0F78 75 82 08      [24] 3796 	mov	dpl,#0x08
   0F7B 12r0Br3F      [24] 3797 	lcall	_register_write
   0F7E 15 81         [12] 3798 	dec	sp
   0F80 22            [24] 3799 	ret
   0F81                    3800 00102$:
                           3801 ;	radio/radio.c:1143: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2, (register_read(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_2) & ~EZRADIOPRO_ANTDIV_MASK));
   0F81 75 82 08      [24] 3802 	mov	dpl,#0x08
   0F84 12r0Br6F      [24] 3803 	lcall	_register_read
   0F87 AF 82         [24] 3804 	mov	r7,dpl
   0F89 53 07 1F      [24] 3805 	anl	ar7,#0x1F
   0F8C C0 07         [24] 3806 	push	ar7
   0F8E 75 82 08      [24] 3807 	mov	dpl,#0x08
   0F91 12r0Br3F      [24] 3808 	lcall	_register_write
   0F94 15 81         [12] 3809 	dec	sp
                           3810 ;	radio/radio.c:1145: register_write(EZRADIOPRO_GPIO2_CONFIGURATION, 0x0A);	// GPIO2 (ANT1) output set high fixed
   0F96 74 0A         [12] 3811 	mov	a,#0x0A
   0F98 C0 E0         [24] 3812 	push	acc
   0F9A 75 82 0D      [24] 3813 	mov	dpl,#0x0D
   0F9D 12r0Br3F      [24] 3814 	lcall	_register_write
   0FA0 15 81         [12] 3815 	dec	sp
                           3816 ;	radio/radio.c:1146: register_write(EZRADIOPRO_IO_PORT_CONFIGURATION, 0x04);	// GPIO2 output set high (fixed on ant 1)
   0FA2 74 04         [12] 3817 	mov	a,#0x04
   0FA4 C0 E0         [24] 3818 	push	acc
   0FA6 75 82 0E      [24] 3819 	mov	dpl,#0x0E
   0FA9 12r0Br3F      [24] 3820 	lcall	_register_write
   0FAC 15 81         [12] 3821 	dec	sp
   0FAE 22            [24] 3822 	ret
                           3823 ;------------------------------------------------------------
                           3824 ;Allocation info for local variables in function 'Receiver_ISR'
                           3825 ;------------------------------------------------------------
                           3826 ;status                    Allocated to registers r6 
                           3827 ;status2                   Allocated to registers r7 
                           3828 ;len                       Allocated to registers r7 
                           3829 ;------------------------------------------------------------
                           3830 ;	radio/radio.c:1158: INTERRUPT(Receiver_ISR, INTERRUPT_INT0)
                           3831 ;	-----------------------------------------
                           3832 ;	 function Receiver_ISR
                           3833 ;	-----------------------------------------
   0FAF                    3834 _Receiver_ISR:
   0FAF C0*00         [24] 3835 	push	bits
   0FB1 C0 E0         [24] 3836 	push	acc
   0FB3 C0 F0         [24] 3837 	push	b
   0FB5 C0 82         [24] 3838 	push	dpl
   0FB7 C0 83         [24] 3839 	push	dph
   0FB9 C0 07         [24] 3840 	push	(0+7)
   0FBB C0 06         [24] 3841 	push	(0+6)
   0FBD C0 05         [24] 3842 	push	(0+5)
   0FBF C0 04         [24] 3843 	push	(0+4)
   0FC1 C0 03         [24] 3844 	push	(0+3)
   0FC3 C0 02         [24] 3845 	push	(0+2)
   0FC5 C0 01         [24] 3846 	push	(0+1)
   0FC7 C0 00         [24] 3847 	push	(0+0)
   0FC9 C0 D0         [24] 3848 	push	psw
   0FCB 75 D0 00      [24] 3849 	mov	psw,#0x00
                           3850 ;	radio/radio.c:1162: status2 = register_read(EZRADIOPRO_INTERRUPT_STATUS_2);
   0FCE 75 82 04      [24] 3851 	mov	dpl,#0x04
   0FD1 12r0Br6F      [24] 3852 	lcall	_register_read
   0FD4 AF 82         [24] 3853 	mov	r7,dpl
                           3854 ;	radio/radio.c:1163: status  = register_read(EZRADIOPRO_INTERRUPT_STATUS_1);
   0FD6 75 82 03      [24] 3855 	mov	dpl,#0x03
   0FD9 C0 07         [24] 3856 	push	ar7
   0FDB 12r0Br6F      [24] 3857 	lcall	_register_read
   0FDE AE 82         [24] 3858 	mov	r6,dpl
   0FE0 D0 07         [24] 3859 	pop	ar7
                           3860 ;	radio/radio.c:1165: if (status & EZRADIOPRO_IRXFFAFULL) {
   0FE2 EE            [12] 3861 	mov	a,r6
   0FE3 30 E4 49      [24] 3862 	jnb	acc.4,00104$
                           3863 ;	radio/radio.c:1166: if (RX_FIFO_THRESHOLD_HIGH + (uint16_t)partial_packet_length > MAX_PACKET_LENGTH) {
   0FE6 78r01         [12] 3864 	mov	r0,#_partial_packet_length
   0FE8 E2            [24] 3865 	movx	a,@r0
   0FE9 FC            [12] 3866 	mov	r4,a
   0FEA 7D 00         [12] 3867 	mov	r5,#0x00
   0FEC 74 32         [12] 3868 	mov	a,#0x32
   0FEE 2C            [12] 3869 	add	a,r4
   0FEF FC            [12] 3870 	mov	r4,a
   0FF0 E4            [12] 3871 	clr	a
   0FF1 3D            [12] 3872 	addc	a,r5
   0FF2 FD            [12] 3873 	mov	r5,a
   0FF3 C3            [12] 3874 	clr	c
   0FF4 74 FC         [12] 3875 	mov	a,#0xFC
   0FF6 9C            [12] 3876 	subb	a,r4
   0FF7 E4            [12] 3877 	clr	a
   0FF8 9D            [12] 3878 	subb	a,r5
   0FF9 50 03         [24] 3879 	jnc	00150$
   0FFB 02r10rBA      [24] 3880 	ljmp	00117$
   0FFE                    3881 00150$:
                           3882 ;	radio/radio.c:1170: read_receive_fifo(RX_FIFO_THRESHOLD_HIGH, &radio_buffer[partial_packet_length]);
   0FFE 78r01         [12] 3883 	mov	r0,#_partial_packet_length
   1000 E2            [24] 3884 	movx	a,@r0
   1001 24r00         [12] 3885 	add	a,#_radio_buffer
   1003 FC            [12] 3886 	mov	r4,a
   1004 E4            [12] 3887 	clr	a
   1005 34s00         [12] 3888 	addc	a,#(_radio_buffer >> 8)
   1007 FD            [12] 3889 	mov	r5,a
   1008 C0 07         [24] 3890 	push	ar7
   100A C0 06         [24] 3891 	push	ar6
   100C C0 04         [24] 3892 	push	ar4
   100E C0 05         [24] 3893 	push	ar5
   1010 75 82 32      [24] 3894 	mov	dpl,#0x32
   1013 12r0Br9D      [24] 3895 	lcall	_read_receive_fifo
   1016 15 81         [12] 3896 	dec	sp
   1018 15 81         [12] 3897 	dec	sp
                           3898 ;	radio/radio.c:1171: partial_packet_length += RX_FIFO_THRESHOLD_HIGH;
   101A 78r01         [12] 3899 	mov	r0,#_partial_packet_length
   101C E2            [24] 3900 	movx	a,@r0
   101D 24 32         [12] 3901 	add	a,#0x32
   101F F2            [24] 3902 	movx	@r0,a
                           3903 ;	radio/radio.c:1172: last_rssi = register_read(EZRADIOPRO_RECEIVED_SIGNAL_STRENGTH_INDICATOR);
   1020 75 82 26      [24] 3904 	mov	dpl,#0x26
   1023 12r0Br6F      [24] 3905 	lcall	_register_read
   1026 E5 82         [12] 3906 	mov	a,dpl
   1028 D0 06         [24] 3907 	pop	ar6
   102A D0 07         [24] 3908 	pop	ar7
   102C 78r02         [12] 3909 	mov	r0,#_last_rssi
   102E F2            [24] 3910 	movx	@r0,a
   102F                    3911 00104$:
                           3912 ;	radio/radio.c:1175: if (status2 & EZRADIOPRO_IPREAVAL) {
   102F EF            [12] 3913 	mov	a,r7
   1030 30 E6 11      [24] 3914 	jnb	acc.6,00106$
                           3915 ;	radio/radio.c:1177: preamble_detected = true;
   1033 D2*01         [12] 3916 	setb	_preamble_detected
                           3917 ;	radio/radio.c:1180: last_rssi = register_read(EZRADIOPRO_RECEIVED_SIGNAL_STRENGTH_INDICATOR);
   1035 75 82 26      [24] 3918 	mov	dpl,#0x26
   1038 C0 06         [24] 3919 	push	ar6
   103A 12r0Br6F      [24] 3920 	lcall	_register_read
   103D E5 82         [12] 3921 	mov	a,dpl
   103F D0 06         [24] 3922 	pop	ar6
   1041 78r02         [12] 3923 	mov	r0,#_last_rssi
   1043 F2            [24] 3924 	movx	@r0,a
   1044                    3925 00106$:
                           3926 ;	radio/radio.c:1183: if (feature_golay == false && (status & EZRADIOPRO_ICRCERROR)) {
   1044 20*00 04      [24] 3927 	jb	_feature_golay,00108$
   1047 EE            [12] 3928 	mov	a,r6
   1048 20 E0 6F      [24] 3929 	jb	acc.0,00117$
                           3930 ;	radio/radio.c:1184: goto rxfail;
   104B                    3931 00108$:
                           3932 ;	radio/radio.c:1187: if (status & EZRADIOPRO_IPKVALID) {
   104B EE            [12] 3933 	mov	a,r6
   104C 30 E1 69      [24] 3934 	jnb	acc.1,00116$
                           3935 ;	radio/radio.c:1188: __data uint8_t len = register_read(EZRADIOPRO_RECEIVED_PACKET_LENGTH);
   104F 75 82 4B      [24] 3936 	mov	dpl,#0x4B
   1052 12r0Br6F      [24] 3937 	lcall	_register_read
                           3938 ;	radio/radio.c:1189: if (len > MAX_PACKET_LENGTH || partial_packet_length > len) {
   1055 E5 82         [12] 3939 	mov	a,dpl
   1057 FF            [12] 3940 	mov	r7,a
   1058 24 03         [12] 3941 	add	a,#0xff - 0xFC
   105A 40 5E         [24] 3942 	jc	00117$
   105C 78r01         [12] 3943 	mov	r0,#_partial_packet_length
   105E C3            [12] 3944 	clr	c
   105F E2            [24] 3945 	movx	a,@r0
   1060 F5 F0         [12] 3946 	mov	b,a
   1062 EF            [12] 3947 	mov	a,r7
   1063 95 F0         [12] 3948 	subb	a,b
   1065 40 53         [24] 3949 	jc	00117$
                           3950 ;	radio/radio.c:1193: if (partial_packet_length < len) {
   1067 78r01         [12] 3951 	mov	r0,#_partial_packet_length
   1069 C3            [12] 3952 	clr	c
   106A E2            [24] 3953 	movx	a,@r0
   106B 9F            [12] 3954 	subb	a,r7
   106C 50 22         [24] 3955 	jnc	00114$
                           3956 ;	radio/radio.c:1194: read_receive_fifo(len-partial_packet_length, &radio_buffer[partial_packet_length]);
   106E 78r01         [12] 3957 	mov	r0,#_partial_packet_length
   1070 E2            [24] 3958 	movx	a,@r0
   1071 24r00         [12] 3959 	add	a,#_radio_buffer
   1073 FD            [12] 3960 	mov	r5,a
   1074 E4            [12] 3961 	clr	a
   1075 34s00         [12] 3962 	addc	a,#(_radio_buffer >> 8)
   1077 FE            [12] 3963 	mov	r6,a
   1078 78r01         [12] 3964 	mov	r0,#_partial_packet_length
   107A D3            [12] 3965 	setb	c
   107B E2            [24] 3966 	movx	a,@r0
   107C 9F            [12] 3967 	subb	a,r7
   107D F4            [12] 3968 	cpl	a
   107E FC            [12] 3969 	mov	r4,a
   107F C0 07         [24] 3970 	push	ar7
   1081 C0 05         [24] 3971 	push	ar5
   1083 C0 06         [24] 3972 	push	ar6
   1085 8C 82         [24] 3973 	mov	dpl,r4
   1087 12r0Br9D      [24] 3974 	lcall	_read_receive_fifo
   108A 15 81         [12] 3975 	dec	sp
   108C 15 81         [12] 3976 	dec	sp
   108E D0 07         [24] 3977 	pop	ar7
   1090                    3978 00114$:
                           3979 ;	radio/radio.c:1196: receive_packet_length = len;
   1090 78r00         [12] 3980 	mov	r0,#_receive_packet_length
   1092 EF            [12] 3981 	mov	a,r7
   1093 F2            [24] 3982 	movx	@r0,a
                           3983 ;	radio/radio.c:1199: packet_received = true;
   1094 D2*00         [12] 3984 	setb	_packet_received
                           3985 ;	radio/radio.c:1202: register_write(EZRADIOPRO_INTERRUPT_ENABLE_1, 0);
   1096 E4            [12] 3986 	clr	a
   1097 C0 E0         [24] 3987 	push	acc
   1099 75 82 05      [24] 3988 	mov	dpl,#0x05
   109C 12r0Br3F      [24] 3989 	lcall	_register_write
   109F 15 81         [12] 3990 	dec	sp
                           3991 ;	radio/radio.c:1203: register_write(EZRADIOPRO_INTERRUPT_ENABLE_2, 0);
   10A1 E4            [12] 3992 	clr	a
   10A2 C0 E0         [24] 3993 	push	acc
   10A4 75 82 06      [24] 3994 	mov	dpl,#0x06
   10A7 12r0Br3F      [24] 3995 	lcall	_register_write
   10AA 15 81         [12] 3996 	dec	sp
                           3997 ;	radio/radio.c:1206: register_write(EZRADIOPRO_OPERATING_AND_FUNCTION_CONTROL_1, EZRADIOPRO_PLLON);
   10AC 74 02         [12] 3998 	mov	a,#0x02
   10AE C0 E0         [24] 3999 	push	acc
   10B0 75 82 07      [24] 4000 	mov	dpl,#0x07
   10B3 12r0Br3F      [24] 4001 	lcall	_register_write
   10B6 15 81         [12] 4002 	dec	sp
   10B8                    4003 00116$:
                           4004 ;	radio/radio.c:1208: return;
                           4005 ;	radio/radio.c:1210: rxfail:
   10B8 80 1E         [24] 4006 	sjmp	00120$
   10BA                    4007 00117$:
                           4008 ;	radio/radio.c:1211: if (errors.rx_errors != 0xFFFF) {
   10BA 78r00         [12] 4009 	mov	r0,#_errors
   10BC E2            [24] 4010 	movx	a,@r0
   10BD FE            [12] 4011 	mov	r6,a
   10BE 08            [12] 4012 	inc	r0
   10BF E2            [24] 4013 	movx	a,@r0
   10C0 FF            [12] 4014 	mov	r7,a
   10C1 BE FF 05      [24] 4015 	cjne	r6,#0xFF,00158$
   10C4 BF FF 02      [24] 4016 	cjne	r7,#0xFF,00158$
   10C7 80 0C         [24] 4017 	sjmp	00119$
   10C9                    4018 00158$:
                           4019 ;	radio/radio.c:1212: errors.rx_errors++;
   10C9 0E            [12] 4020 	inc	r6
   10CA BE 00 01      [24] 4021 	cjne	r6,#0x00,00159$
   10CD 0F            [12] 4022 	inc	r7
   10CE                    4023 00159$:
   10CE 78r00         [12] 4024 	mov	r0,#_errors
   10D0 EE            [12] 4025 	mov	a,r6
   10D1 F2            [24] 4026 	movx	@r0,a
   10D2 08            [12] 4027 	inc	r0
   10D3 EF            [12] 4028 	mov	a,r7
   10D4 F2            [24] 4029 	movx	@r0,a
   10D5                    4030 00119$:
                           4031 ;	radio/radio.c:1214: radio_receiver_on();
   10D5 12r06r70      [24] 4032 	lcall	_radio_receiver_on
   10D8                    4033 00120$:
   10D8 D0 D0         [24] 4034 	pop	psw
   10DA D0 00         [24] 4035 	pop	(0+0)
   10DC D0 01         [24] 4036 	pop	(0+1)
   10DE D0 02         [24] 4037 	pop	(0+2)
   10E0 D0 03         [24] 4038 	pop	(0+3)
   10E2 D0 04         [24] 4039 	pop	(0+4)
   10E4 D0 05         [24] 4040 	pop	(0+5)
   10E6 D0 06         [24] 4041 	pop	(0+6)
   10E8 D0 07         [24] 4042 	pop	(0+7)
   10EA D0 83         [24] 4043 	pop	dph
   10EC D0 82         [24] 4044 	pop	dpl
   10EE D0 F0         [24] 4045 	pop	b
   10F0 D0 E0         [24] 4046 	pop	acc
   10F2 D0*00         [24] 4047 	pop	bits
   10F4 32            [24] 4048 	reti
                           4049 	.area CSEG    (CODE)
                           4050 	.area CONST   (CODE)
   0000                    4051 __str_0:
   0000 6F 76 65 72 73 69  4052 	.ascii "oversized packet"
        7A 65 64 20 70 61
        63 6B 65 74
   0010 00                 4053 	.db 0x00
   0011                    4054 __str_1:
   0011 6F 76 65 72 73 69  4055 	.ascii "oversized golay packet"
        7A 65 64 20 67 6F
        6C 61 79 20 70 61
        63 6B 65 74
   0027 00                 4056 	.db 0x00
   0028                    4057 _reg_index:
   0028 1C                 4058 	.db #0x1C	; 28
   0029 1F                 4059 	.db #0x1F	; 31
   002A 20                 4060 	.db #0x20	; 32
   002B 21                 4061 	.db #0x21	; 33
   002C 22                 4062 	.db #0x22	; 34
   002D 23                 4063 	.db #0x23	; 35
   002E 24                 4064 	.db #0x24	; 36
   002F 25                 4065 	.db #0x25	; 37
   0030 2A                 4066 	.db #0x2A	; 42
   0031 6E                 4067 	.db #0x6E	; 110	'n'
   0032 6F                 4068 	.db #0x6F	; 111	'o'
   0033 72                 4069 	.db #0x72	; 114	'r'
   0034                    4070 _air_data_rates:
   0034 02                 4071 	.db #0x02	; 2
   0035 04                 4072 	.db #0x04	; 4
   0036 08                 4073 	.db #0x08	; 8
   0037 10                 4074 	.db #0x10	; 16
   0038 13                 4075 	.db #0x13	; 19
   0039 18                 4076 	.db #0x18	; 24
   003A 20                 4077 	.db #0x20	; 32
   003B 30                 4078 	.db #0x30	; 48	'0'
   003C 40                 4079 	.db #0x40	; 64
   003D 60                 4080 	.db #0x60	; 96
   003E 80                 4081 	.db #0x80	; 128
   003F C0                 4082 	.db #0xC0	; 192
   0040 FA                 4083 	.db #0xFA	; 250
   0041                    4084 _reg_table_433:
   0041 27                 4085 	.db #0x27	; 39
   0042 27                 4086 	.db #0x27	; 39
   0043 27                 4087 	.db #0x27	; 39
   0044 2E                 4088 	.db #0x2E	; 46
   0045 16                 4089 	.db #0x16	; 22
   0046 01                 4090 	.db #0x01	; 1
   0047 05                 4091 	.db #0x05	; 5
   0048 0B                 4092 	.db #0x0B	; 11
   0049 9A                 4093 	.db #0x9A	; 154
   004A 88                 4094 	.db #0x88	; 136
   004B 8A                 4095 	.db #0x8A	; 138
   004C 8C                 4096 	.db #0x8C	; 140
   004D 8D                 4097 	.db #0x8D	; 141
   004E 03                 4098 	.db #0x03	; 3
   004F 03                 4099 	.db #0x03	; 3
   0050 03                 4100 	.db #0x03	; 3
   0051 03                 4101 	.db #0x03	; 3
   0052 03                 4102 	.db #0x03	; 3
   0053 03                 4103 	.db #0x03	; 3
   0054 03                 4104 	.db #0x03	; 3
   0055 03                 4105 	.db #0x03	; 3
   0056 03                 4106 	.db #0x03	; 3
   0057 03                 4107 	.db #0x03	; 3
   0058 03                 4108 	.db #0x03	; 3
   0059 03                 4109 	.db #0x03	; 3
   005A 03                 4110 	.db #0x03	; 3
   005B F4                 4111 	.db #0xF4	; 244
   005C FA                 4112 	.db #0xFA	; 250
   005D 7D                 4113 	.db #0x7D	; 125
   005E 3F                 4114 	.db #0x3F	; 63
   005F 69                 4115 	.db #0x69	; 105	'i'
   0060 A7                 4116 	.db #0xA7	; 167
   0061 7D                 4117 	.db #0x7D	; 125
   0062 53                 4118 	.db #0x53	; 83	'S'
   0063 5E                 4119 	.db #0x5E	; 94
   0064 7D                 4120 	.db #0x7D	; 125
   0065 5E                 4121 	.db #0x5E	; 94
   0066 3F                 4122 	.db #0x3F	; 63
   0067 30                 4123 	.db #0x30	; 48	'0'
   0068 20                 4124 	.db #0x20	; 32
   0069 00                 4125 	.db #0x00	; 0
   006A 01                 4126 	.db #0x01	; 1
   006B 02                 4127 	.db #0x02	; 2
   006C 01                 4128 	.db #0x01	; 1
   006D 00                 4129 	.db #0x00	; 0
   006E 01                 4130 	.db #0x01	; 1
   006F 01                 4131 	.db #0x01	; 1
   0070 01                 4132 	.db #0x01	; 1
   0071 01                 4133 	.db #0x01	; 1
   0072 01                 4134 	.db #0x01	; 1
   0073 02                 4135 	.db #0x02	; 2
   0074 02                 4136 	.db #0x02	; 2
   0075 41                 4137 	.db #0x41	; 65	'A'
   0076 83                 4138 	.db #0x83	; 131
   0077 06                 4139 	.db #0x06	; 6
   0078 0C                 4140 	.db #0x0C	; 12
   0079 37                 4141 	.db #0x37	; 55	'7'
   007A C4                 4142 	.db #0xC4	; 196
   007B 06                 4143 	.db #0x06	; 6
   007C 89                 4144 	.db #0x89	; 137
   007D 5D                 4145 	.db #0x5D	; 93
   007E 06                 4146 	.db #0x06	; 6
   007F 5D                 4147 	.db #0x5D	; 93
   0080 0C                 4148 	.db #0x0C	; 12
   0081 AA                 4149 	.db #0xAA	; 170
   0082 89                 4150 	.db #0x89	; 137
   0083 12                 4151 	.db #0x12	; 18
   0084 25                 4152 	.db #0x25	; 37
   0085 4A                 4153 	.db #0x4A	; 74	'J'
   0086 4C                 4154 	.db #0x4C	; 76	'L'
   0087 9C                 4155 	.db #0x9C	; 156
   0088 25                 4156 	.db #0x25	; 37
   0089 37                 4157 	.db #0x37	; 55	'7'
   008A 86                 4158 	.db #0x86	; 134
   008B 25                 4159 	.db #0x25	; 37
   008C 86                 4160 	.db #0x86	; 134
   008D 4A                 4161 	.db #0x4A	; 74	'J'
   008E AB                 4162 	.db #0xAB	; 171
   008F 00                 4163 	.db #0x00	; 0
   0090 01                 4164 	.db #0x01	; 1
   0091 02                 4165 	.db #0x02	; 2
   0092 04                 4166 	.db #0x04	; 4
   0093 02                 4167 	.db #0x02	; 2
   0094 01                 4168 	.db #0x01	; 1
   0095 02                 4169 	.db #0x02	; 2
   0096 03                 4170 	.db #0x03	; 3
   0097 02                 4171 	.db #0x02	; 2
   0098 02                 4172 	.db #0x02	; 2
   0099 02                 4173 	.db #0x02	; 2
   009A 04                 4174 	.db #0x04	; 4
   009B 07                 4175 	.db #0x07	; 7
   009C 85                 4176 	.db #0x85	; 133
   009D 08                 4177 	.db #0x08	; 8
   009E 0E                 4178 	.db #0x0E	; 14
   009F 12                 4179 	.db #0x12	; 18
   00A0 72                 4180 	.db #0x72	; 114	'r'
   00A1 8A                 4181 	.db #0x8A	; 138
   00A2 0E                 4182 	.db #0x0E	; 14
   00A3 18                 4183 	.db #0x18	; 24
   00A4 BB                 4184 	.db #0xBB	; 187
   00A5 0E                 4185 	.db #0x0E	; 14
   00A6 BB                 4186 	.db #0xBB	; 187
   00A7 EA                 4187 	.db #0xEA	; 234
   00A8 FF                 4188 	.db #0xFF	; 255
   00A9 1D                 4189 	.db #0x1D	; 29
   00AA 1D                 4190 	.db #0x1D	; 29
   00AB 1D                 4191 	.db #0x1D	; 29
   00AC 1E                 4192 	.db #0x1E	; 30
   00AD 1E                 4193 	.db #0x1E	; 30
   00AE 1E                 4194 	.db #0x1E	; 30
   00AF 20                 4195 	.db #0x20	; 32
   00B0 30                 4196 	.db #0x30	; 48	'0'
   00B1 41                 4197 	.db #0x41	; 65	'A'
   00B2 50                 4198 	.db #0x50	; 80	'P'
   00B3 50                 4199 	.db #0x50	; 80	'P'
   00B4 50                 4200 	.db #0x50	; 80	'P'
   00B5 50                 4201 	.db #0x50	; 80	'P'
   00B6 10                 4202 	.db #0x10	; 16
   00B7 20                 4203 	.db #0x20	; 32
   00B8 41                 4204 	.db #0x41	; 65	'A'
   00B9 83                 4205 	.db #0x83	; 131
   00BA 9B                 4206 	.db #0x9B	; 155
   00BB C4                 4207 	.db #0xC4	; 196
   00BC 08                 4208 	.db #0x08	; 8
   00BD 0C                 4209 	.db #0x0C	; 12
   00BE 10                 4210 	.db #0x10	; 16
   00BF 18                 4211 	.db #0x18	; 24
   00C0 20                 4212 	.db #0x20	; 32
   00C1 31                 4213 	.db #0x31	; 49	'1'
   00C2 40                 4214 	.db #0x40	; 64
   00C3 62                 4215 	.db #0x62	; 98	'b'
   00C4 C5                 4216 	.db #0xC5	; 197
   00C5 89                 4217 	.db #0x89	; 137
   00C6 12                 4218 	.db #0x12	; 18
   00C7 A6                 4219 	.db #0xA6	; 166
   00C8 9C                 4220 	.db #0x9C	; 156
   00C9 31                 4221 	.db #0x31	; 49	'1'
   00CA 4A                 4222 	.db #0x4A	; 74	'J'
   00CB 62                 4223 	.db #0x62	; 98	'b'
   00CC 93                 4224 	.db #0x93	; 147
   00CD C5                 4225 	.db #0xC5	; 197
   00CE 27                 4226 	.db #0x27	; 39
   00CF 00                 4227 	.db #0x00	; 0
   00D0 03                 4228 	.db #0x03	; 3
   00D1 06                 4229 	.db #0x06	; 6
   00D2 0D                 4230 	.db #0x0D	; 13
   00D3 1A                 4231 	.db #0x1A	; 26
   00D4 1E                 4232 	.db #0x1E	; 30
   00D5 26                 4233 	.db #0x26	; 38
   00D6 33                 4234 	.db #0x33	; 51	'3'
   00D7 4D                 4235 	.db #0x4D	; 77	'M'
   00D8 66                 4236 	.db #0x66	; 102	'f'
   00D9 9A                 4237 	.db #0x9A	; 154
   00DA CD                 4238 	.db #0xCD	; 205
   00DB FE                 4239 	.db #0xFE	; 254
   00DC FE                 4240 	.db #0xFE	; 254
   00DD                    4241 _reg_table_470:
   00DD 2B                 4242 	.db #0x2B	; 43
   00DE 2B                 4243 	.db #0x2B	; 43
   00DF 2B                 4244 	.db #0x2B	; 43
   00E0 2E                 4245 	.db #0x2E	; 46
   00E1 16                 4246 	.db #0x16	; 22
   00E2 01                 4247 	.db #0x01	; 1
   00E3 05                 4248 	.db #0x05	; 5
   00E4 0B                 4249 	.db #0x0B	; 11
   00E5 9A                 4250 	.db #0x9A	; 154
   00E6 88                 4251 	.db #0x88	; 136
   00E7 8A                 4252 	.db #0x8A	; 138
   00E8 8C                 4253 	.db #0x8C	; 140
   00E9 8D                 4254 	.db #0x8D	; 141
   00EA 03                 4255 	.db #0x03	; 3
   00EB 03                 4256 	.db #0x03	; 3
   00EC 03                 4257 	.db #0x03	; 3
   00ED 03                 4258 	.db #0x03	; 3
   00EE 03                 4259 	.db #0x03	; 3
   00EF 03                 4260 	.db #0x03	; 3
   00F0 03                 4261 	.db #0x03	; 3
   00F1 03                 4262 	.db #0x03	; 3
   00F2 03                 4263 	.db #0x03	; 3
   00F3 03                 4264 	.db #0x03	; 3
   00F4 03                 4265 	.db #0x03	; 3
   00F5 03                 4266 	.db #0x03	; 3
   00F6 03                 4267 	.db #0x03	; 3
   00F7 F4                 4268 	.db #0xF4	; 244
   00F8 FA                 4269 	.db #0xFA	; 250
   00F9 7D                 4270 	.db #0x7D	; 125
   00FA 3F                 4271 	.db #0x3F	; 63
   00FB 69                 4272 	.db #0x69	; 105	'i'
   00FC A7                 4273 	.db #0xA7	; 167
   00FD 7D                 4274 	.db #0x7D	; 125
   00FE 53                 4275 	.db #0x53	; 83	'S'
   00FF 5E                 4276 	.db #0x5E	; 94
   0100 7D                 4277 	.db #0x7D	; 125
   0101 5E                 4278 	.db #0x5E	; 94
   0102 3F                 4279 	.db #0x3F	; 63
   0103 30                 4280 	.db #0x30	; 48	'0'
   0104 20                 4281 	.db #0x20	; 32
   0105 00                 4282 	.db #0x00	; 0
   0106 01                 4283 	.db #0x01	; 1
   0107 02                 4284 	.db #0x02	; 2
   0108 01                 4285 	.db #0x01	; 1
   0109 00                 4286 	.db #0x00	; 0
   010A 01                 4287 	.db #0x01	; 1
   010B 01                 4288 	.db #0x01	; 1
   010C 01                 4289 	.db #0x01	; 1
   010D 01                 4290 	.db #0x01	; 1
   010E 01                 4291 	.db #0x01	; 1
   010F 02                 4292 	.db #0x02	; 2
   0110 02                 4293 	.db #0x02	; 2
   0111 41                 4294 	.db #0x41	; 65	'A'
   0112 83                 4295 	.db #0x83	; 131
   0113 06                 4296 	.db #0x06	; 6
   0114 0C                 4297 	.db #0x0C	; 12
   0115 37                 4298 	.db #0x37	; 55	'7'
   0116 C4                 4299 	.db #0xC4	; 196
   0117 06                 4300 	.db #0x06	; 6
   0118 89                 4301 	.db #0x89	; 137
   0119 5D                 4302 	.db #0x5D	; 93
   011A 06                 4303 	.db #0x06	; 6
   011B 5D                 4304 	.db #0x5D	; 93
   011C 0C                 4305 	.db #0x0C	; 12
   011D AA                 4306 	.db #0xAA	; 170
   011E 89                 4307 	.db #0x89	; 137
   011F 12                 4308 	.db #0x12	; 18
   0120 25                 4309 	.db #0x25	; 37
   0121 4A                 4310 	.db #0x4A	; 74	'J'
   0122 4C                 4311 	.db #0x4C	; 76	'L'
   0123 9C                 4312 	.db #0x9C	; 156
   0124 25                 4313 	.db #0x25	; 37
   0125 37                 4314 	.db #0x37	; 55	'7'
   0126 86                 4315 	.db #0x86	; 134
   0127 25                 4316 	.db #0x25	; 37
   0128 86                 4317 	.db #0x86	; 134
   0129 4A                 4318 	.db #0x4A	; 74	'J'
   012A AB                 4319 	.db #0xAB	; 171
   012B 00                 4320 	.db #0x00	; 0
   012C 01                 4321 	.db #0x01	; 1
   012D 02                 4322 	.db #0x02	; 2
   012E 04                 4323 	.db #0x04	; 4
   012F 02                 4324 	.db #0x02	; 2
   0130 01                 4325 	.db #0x01	; 1
   0131 02                 4326 	.db #0x02	; 2
   0132 03                 4327 	.db #0x03	; 3
   0133 02                 4328 	.db #0x02	; 2
   0134 02                 4329 	.db #0x02	; 2
   0135 02                 4330 	.db #0x02	; 2
   0136 04                 4331 	.db #0x04	; 4
   0137 07                 4332 	.db #0x07	; 7
   0138 85                 4333 	.db #0x85	; 133
   0139 08                 4334 	.db #0x08	; 8
   013A 0E                 4335 	.db #0x0E	; 14
   013B 12                 4336 	.db #0x12	; 18
   013C 72                 4337 	.db #0x72	; 114	'r'
   013D 8A                 4338 	.db #0x8A	; 138
   013E 0E                 4339 	.db #0x0E	; 14
   013F 18                 4340 	.db #0x18	; 24
   0140 BB                 4341 	.db #0xBB	; 187
   0141 0E                 4342 	.db #0x0E	; 14
   0142 BB                 4343 	.db #0xBB	; 187
   0143 EA                 4344 	.db #0xEA	; 234
   0144 FF                 4345 	.db #0xFF	; 255
   0145 1E                 4346 	.db #0x1E	; 30
   0146 1E                 4347 	.db #0x1E	; 30
   0147 1E                 4348 	.db #0x1E	; 30
   0148 21                 4349 	.db #0x21	; 33
   0149 21                 4350 	.db #0x21	; 33
   014A 21                 4351 	.db #0x21	; 33
   014B 21                 4352 	.db #0x21	; 33
   014C 30                 4353 	.db #0x30	; 48	'0'
   014D 41                 4354 	.db #0x41	; 65	'A'
   014E 50                 4355 	.db #0x50	; 80	'P'
   014F 50                 4356 	.db #0x50	; 80	'P'
   0150 50                 4357 	.db #0x50	; 80	'P'
   0151 50                 4358 	.db #0x50	; 80	'P'
   0152 10                 4359 	.db #0x10	; 16
   0153 20                 4360 	.db #0x20	; 32
   0154 41                 4361 	.db #0x41	; 65	'A'
   0155 83                 4362 	.db #0x83	; 131
   0156 9B                 4363 	.db #0x9B	; 155
   0157 C4                 4364 	.db #0xC4	; 196
   0158 08                 4365 	.db #0x08	; 8
   0159 0C                 4366 	.db #0x0C	; 12
   015A 10                 4367 	.db #0x10	; 16
   015B 18                 4368 	.db #0x18	; 24
   015C 20                 4369 	.db #0x20	; 32
   015D 31                 4370 	.db #0x31	; 49	'1'
   015E 40                 4371 	.db #0x40	; 64
   015F 62                 4372 	.db #0x62	; 98	'b'
   0160 C5                 4373 	.db #0xC5	; 197
   0161 89                 4374 	.db #0x89	; 137
   0162 12                 4375 	.db #0x12	; 18
   0163 A6                 4376 	.db #0xA6	; 166
   0164 9C                 4377 	.db #0x9C	; 156
   0165 31                 4378 	.db #0x31	; 49	'1'
   0166 4A                 4379 	.db #0x4A	; 74	'J'
   0167 62                 4380 	.db #0x62	; 98	'b'
   0168 93                 4381 	.db #0x93	; 147
   0169 C5                 4382 	.db #0xC5	; 197
   016A 27                 4383 	.db #0x27	; 39
   016B 00                 4384 	.db #0x00	; 0
   016C 03                 4385 	.db #0x03	; 3
   016D 06                 4386 	.db #0x06	; 6
   016E 0D                 4387 	.db #0x0D	; 13
   016F 1A                 4388 	.db #0x1A	; 26
   0170 1E                 4389 	.db #0x1E	; 30
   0171 26                 4390 	.db #0x26	; 38
   0172 33                 4391 	.db #0x33	; 51	'3'
   0173 4D                 4392 	.db #0x4D	; 77	'M'
   0174 66                 4393 	.db #0x66	; 102	'f'
   0175 9A                 4394 	.db #0x9A	; 154
   0176 CD                 4395 	.db #0xCD	; 205
   0177 FE                 4396 	.db #0xFE	; 254
   0178 FE                 4397 	.db #0xFE	; 254
   0179                    4398 _reg_table_868:
   0179 01                 4399 	.db #0x01	; 1
   017A 01                 4400 	.db #0x01	; 1
   017B 01                 4401 	.db #0x01	; 1
   017C 01                 4402 	.db #0x01	; 1
   017D 01                 4403 	.db #0x01	; 1
   017E 01                 4404 	.db #0x01	; 1
   017F 05                 4405 	.db #0x05	; 5
   0180 0B                 4406 	.db #0x0B	; 11
   0181 9A                 4407 	.db #0x9A	; 154
   0182 88                 4408 	.db #0x88	; 136
   0183 8A                 4409 	.db #0x8A	; 138
   0184 8C                 4410 	.db #0x8C	; 140
   0185 8D                 4411 	.db #0x8D	; 141
   0186 03                 4412 	.db #0x03	; 3
   0187 03                 4413 	.db #0x03	; 3
   0188 03                 4414 	.db #0x03	; 3
   0189 03                 4415 	.db #0x03	; 3
   018A 03                 4416 	.db #0x03	; 3
   018B 03                 4417 	.db #0x03	; 3
   018C 03                 4418 	.db #0x03	; 3
   018D 03                 4419 	.db #0x03	; 3
   018E 03                 4420 	.db #0x03	; 3
   018F 03                 4421 	.db #0x03	; 3
   0190 03                 4422 	.db #0x03	; 3
   0191 03                 4423 	.db #0x03	; 3
   0192 03                 4424 	.db #0x03	; 3
   0193 D0                 4425 	.db #0xD0	; 208
   0194 E8                 4426 	.db #0xE8	; 232
   0195 F4                 4427 	.db #0xF4	; 244
   0196 FA                 4428 	.db #0xFA	; 250
   0197 D3                 4429 	.db #0xD3	; 211
   0198 A7                 4430 	.db #0xA7	; 167
   0199 7D                 4431 	.db #0x7D	; 125
   019A 53                 4432 	.db #0x53	; 83	'S'
   019B 5E                 4433 	.db #0x5E	; 94
   019C 7D                 4434 	.db #0x7D	; 125
   019D 5E                 4435 	.db #0x5E	; 94
   019E 3F                 4436 	.db #0x3F	; 63
   019F 30                 4437 	.db #0x30	; 48	'0'
   01A0 E0                 4438 	.db #0xE0	; 224
   01A1 60                 4439 	.db #0x60	; 96
   01A2 20                 4440 	.db #0x20	; 32
   01A3 00                 4441 	.db #0x00	; 0
   01A4 00                 4442 	.db #0x00	; 0
   01A5 00                 4443 	.db #0x00	; 0
   01A6 01                 4444 	.db #0x01	; 1
   01A7 01                 4445 	.db #0x01	; 1
   01A8 01                 4446 	.db #0x01	; 1
   01A9 01                 4447 	.db #0x01	; 1
   01AA 01                 4448 	.db #0x01	; 1
   01AB 02                 4449 	.db #0x02	; 2
   01AC 02                 4450 	.db #0x02	; 2
   01AD 10                 4451 	.db #0x10	; 16
   01AE 20                 4452 	.db #0x20	; 32
   01AF 41                 4453 	.db #0x41	; 65	'A'
   01B0 83                 4454 	.db #0x83	; 131
   01B1 9B                 4455 	.db #0x9B	; 155
   01B2 C4                 4456 	.db #0xC4	; 196
   01B3 06                 4457 	.db #0x06	; 6
   01B4 89                 4458 	.db #0x89	; 137
   01B5 5D                 4459 	.db #0x5D	; 93
   01B6 06                 4460 	.db #0x06	; 6
   01B7 5D                 4461 	.db #0x5D	; 93
   01B8 0C                 4462 	.db #0x0C	; 12
   01B9 AA                 4463 	.db #0xAA	; 170
   01BA 62                 4464 	.db #0x62	; 98	'b'
   01BB C5                 4465 	.db #0xC5	; 197
   01BC 89                 4466 	.db #0x89	; 137
   01BD 12                 4467 	.db #0x12	; 18
   01BE A6                 4468 	.db #0xA6	; 166
   01BF 9C                 4469 	.db #0x9C	; 156
   01C0 25                 4470 	.db #0x25	; 37
   01C1 37                 4471 	.db #0x37	; 55	'7'
   01C2 86                 4472 	.db #0x86	; 134
   01C3 25                 4473 	.db #0x25	; 37
   01C4 86                 4474 	.db #0x86	; 134
   01C5 4A                 4475 	.db #0x4A	; 74	'J'
   01C6 AB                 4476 	.db #0xAB	; 171
   01C7 00                 4477 	.db #0x00	; 0
   01C8 00                 4478 	.db #0x00	; 0
   01C9 00                 4479 	.db #0x00	; 0
   01CA 01                 4480 	.db #0x01	; 1
   01CB 01                 4481 	.db #0x01	; 1
   01CC 01                 4482 	.db #0x01	; 1
   01CD 02                 4483 	.db #0x02	; 2
   01CE 03                 4484 	.db #0x03	; 3
   01CF 02                 4485 	.db #0x02	; 2
   01D0 02                 4486 	.db #0x02	; 2
   01D1 02                 4487 	.db #0x02	; 2
   01D2 04                 4488 	.db #0x04	; 4
   01D3 07                 4489 	.db #0x07	; 7
   01D4 23                 4490 	.db #0x23	; 35
   01D5 44                 4491 	.db #0x44	; 68	'D'
   01D6 85                 4492 	.db #0x85	; 133
   01D7 08                 4493 	.db #0x08	; 8
   01D8 39                 4494 	.db #0x39	; 57	'9'
   01D9 8A                 4495 	.db #0x8A	; 138
   01DA 0E                 4496 	.db #0x0E	; 14
   01DB 18                 4497 	.db #0x18	; 24
   01DC BB                 4498 	.db #0xBB	; 187
   01DD 0E                 4499 	.db #0x0E	; 14
   01DE BB                 4500 	.db #0xBB	; 187
   01DF EA                 4501 	.db #0xEA	; 234
   01E0 FF                 4502 	.db #0xFF	; 255
   01E1 1C                 4503 	.db #0x1C	; 28
   01E2 1C                 4504 	.db #0x1C	; 28
   01E3 1C                 4505 	.db #0x1C	; 28
   01E4 1C                 4506 	.db #0x1C	; 28
   01E5 1C                 4507 	.db #0x1C	; 28
   01E6 1E                 4508 	.db #0x1E	; 30
   01E7 20                 4509 	.db #0x20	; 32
   01E8 30                 4510 	.db #0x30	; 48	'0'
   01E9 41                 4511 	.db #0x41	; 65	'A'
   01EA 50                 4512 	.db #0x50	; 80	'P'
   01EB 50                 4513 	.db #0x50	; 80	'P'
   01EC 50                 4514 	.db #0x50	; 80	'P'
   01ED 50                 4515 	.db #0x50	; 80	'P'
   01EE 10                 4516 	.db #0x10	; 16
   01EF 20                 4517 	.db #0x20	; 32
   01F0 41                 4518 	.db #0x41	; 65	'A'
   01F1 83                 4519 	.db #0x83	; 131
   01F2 9B                 4520 	.db #0x9B	; 155
   01F3 C4                 4521 	.db #0xC4	; 196
   01F4 08                 4522 	.db #0x08	; 8
   01F5 0C                 4523 	.db #0x0C	; 12
   01F6 10                 4524 	.db #0x10	; 16
   01F7 18                 4525 	.db #0x18	; 24
   01F8 20                 4526 	.db #0x20	; 32
   01F9 31                 4527 	.db #0x31	; 49	'1'
   01FA 40                 4528 	.db #0x40	; 64
   01FB 62                 4529 	.db #0x62	; 98	'b'
   01FC C5                 4530 	.db #0xC5	; 197
   01FD 89                 4531 	.db #0x89	; 137
   01FE 12                 4532 	.db #0x12	; 18
   01FF A6                 4533 	.db #0xA6	; 166
   0200 9C                 4534 	.db #0x9C	; 156
   0201 31                 4535 	.db #0x31	; 49	'1'
   0202 4A                 4536 	.db #0x4A	; 74	'J'
   0203 62                 4537 	.db #0x62	; 98	'b'
   0204 93                 4538 	.db #0x93	; 147
   0205 C5                 4539 	.db #0xC5	; 197
   0206 27                 4540 	.db #0x27	; 39
   0207 00                 4541 	.db #0x00	; 0
   0208 03                 4542 	.db #0x03	; 3
   0209 06                 4543 	.db #0x06	; 6
   020A 0D                 4544 	.db #0x0D	; 13
   020B 1A                 4545 	.db #0x1A	; 26
   020C 1E                 4546 	.db #0x1E	; 30
   020D 26                 4547 	.db #0x26	; 38
   020E 33                 4548 	.db #0x33	; 51	'3'
   020F 4D                 4549 	.db #0x4D	; 77	'M'
   0210 66                 4550 	.db #0x66	; 102	'f'
   0211 9A                 4551 	.db #0x9A	; 154
   0212 CD                 4552 	.db #0xCD	; 205
   0213 FE                 4553 	.db #0xFE	; 254
   0214 FE                 4554 	.db #0xFE	; 254
   0215                    4555 _reg_table_915:
   0215 01                 4556 	.db #0x01	; 1
   0216 01                 4557 	.db #0x01	; 1
   0217 01                 4558 	.db #0x01	; 1
   0218 01                 4559 	.db #0x01	; 1
   0219 01                 4560 	.db #0x01	; 1
   021A 01                 4561 	.db #0x01	; 1
   021B 05                 4562 	.db #0x05	; 5
   021C 0B                 4563 	.db #0x0B	; 11
   021D 9A                 4564 	.db #0x9A	; 154
   021E 88                 4565 	.db #0x88	; 136
   021F 8A                 4566 	.db #0x8A	; 138
   0220 8C                 4567 	.db #0x8C	; 140
   0221 8D                 4568 	.db #0x8D	; 141
   0222 03                 4569 	.db #0x03	; 3
   0223 03                 4570 	.db #0x03	; 3
   0224 03                 4571 	.db #0x03	; 3
   0225 03                 4572 	.db #0x03	; 3
   0226 03                 4573 	.db #0x03	; 3
   0227 03                 4574 	.db #0x03	; 3
   0228 03                 4575 	.db #0x03	; 3
   0229 03                 4576 	.db #0x03	; 3
   022A 03                 4577 	.db #0x03	; 3
   022B 03                 4578 	.db #0x03	; 3
   022C 03                 4579 	.db #0x03	; 3
   022D 03                 4580 	.db #0x03	; 3
   022E 03                 4581 	.db #0x03	; 3
   022F D0                 4582 	.db #0xD0	; 208
   0230 E8                 4583 	.db #0xE8	; 232
   0231 F4                 4584 	.db #0xF4	; 244
   0232 FA                 4585 	.db #0xFA	; 250
   0233 D3                 4586 	.db #0xD3	; 211
   0234 A7                 4587 	.db #0xA7	; 167
   0235 7D                 4588 	.db #0x7D	; 125
   0236 53                 4589 	.db #0x53	; 83	'S'
   0237 5E                 4590 	.db #0x5E	; 94
   0238 7D                 4591 	.db #0x7D	; 125
   0239 5E                 4592 	.db #0x5E	; 94
   023A 3F                 4593 	.db #0x3F	; 63
   023B 30                 4594 	.db #0x30	; 48	'0'
   023C E0                 4595 	.db #0xE0	; 224
   023D 60                 4596 	.db #0x60	; 96
   023E 20                 4597 	.db #0x20	; 32
   023F 00                 4598 	.db #0x00	; 0
   0240 00                 4599 	.db #0x00	; 0
   0241 00                 4600 	.db #0x00	; 0
   0242 01                 4601 	.db #0x01	; 1
   0243 01                 4602 	.db #0x01	; 1
   0244 01                 4603 	.db #0x01	; 1
   0245 01                 4604 	.db #0x01	; 1
   0246 01                 4605 	.db #0x01	; 1
   0247 02                 4606 	.db #0x02	; 2
   0248 02                 4607 	.db #0x02	; 2
   0249 10                 4608 	.db #0x10	; 16
   024A 20                 4609 	.db #0x20	; 32
   024B 41                 4610 	.db #0x41	; 65	'A'
   024C 83                 4611 	.db #0x83	; 131
   024D 9B                 4612 	.db #0x9B	; 155
   024E C4                 4613 	.db #0xC4	; 196
   024F 06                 4614 	.db #0x06	; 6
   0250 89                 4615 	.db #0x89	; 137
   0251 5D                 4616 	.db #0x5D	; 93
   0252 06                 4617 	.db #0x06	; 6
   0253 5D                 4618 	.db #0x5D	; 93
   0254 0C                 4619 	.db #0x0C	; 12
   0255 AA                 4620 	.db #0xAA	; 170
   0256 62                 4621 	.db #0x62	; 98	'b'
   0257 C5                 4622 	.db #0xC5	; 197
   0258 89                 4623 	.db #0x89	; 137
   0259 12                 4624 	.db #0x12	; 18
   025A A6                 4625 	.db #0xA6	; 166
   025B 9C                 4626 	.db #0x9C	; 156
   025C 25                 4627 	.db #0x25	; 37
   025D 37                 4628 	.db #0x37	; 55	'7'
   025E 86                 4629 	.db #0x86	; 134
   025F 25                 4630 	.db #0x25	; 37
   0260 86                 4631 	.db #0x86	; 134
   0261 4A                 4632 	.db #0x4A	; 74	'J'
   0262 AB                 4633 	.db #0xAB	; 171
   0263 00                 4634 	.db #0x00	; 0
   0264 00                 4635 	.db #0x00	; 0
   0265 00                 4636 	.db #0x00	; 0
   0266 01                 4637 	.db #0x01	; 1
   0267 01                 4638 	.db #0x01	; 1
   0268 01                 4639 	.db #0x01	; 1
   0269 02                 4640 	.db #0x02	; 2
   026A 03                 4641 	.db #0x03	; 3
   026B 02                 4642 	.db #0x02	; 2
   026C 02                 4643 	.db #0x02	; 2
   026D 02                 4644 	.db #0x02	; 2
   026E 04                 4645 	.db #0x04	; 4
   026F 07                 4646 	.db #0x07	; 7
   0270 23                 4647 	.db #0x23	; 35
   0271 44                 4648 	.db #0x44	; 68	'D'
   0272 85                 4649 	.db #0x85	; 133
   0273 08                 4650 	.db #0x08	; 8
   0274 39                 4651 	.db #0x39	; 57	'9'
   0275 8A                 4652 	.db #0x8A	; 138
   0276 0E                 4653 	.db #0x0E	; 14
   0277 18                 4654 	.db #0x18	; 24
   0278 BB                 4655 	.db #0xBB	; 187
   0279 0E                 4656 	.db #0x0E	; 14
   027A BB                 4657 	.db #0xBB	; 187
   027B EA                 4658 	.db #0xEA	; 234
   027C FF                 4659 	.db #0xFF	; 255
   027D 1E                 4660 	.db #0x1E	; 30
   027E 1E                 4661 	.db #0x1E	; 30
   027F 1E                 4662 	.db #0x1E	; 30
   0280 1E                 4663 	.db #0x1E	; 30
   0281 1E                 4664 	.db #0x1E	; 30
   0282 1E                 4665 	.db #0x1E	; 30
   0283 20                 4666 	.db #0x20	; 32
   0284 30                 4667 	.db #0x30	; 48	'0'
   0285 41                 4668 	.db #0x41	; 65	'A'
   0286 50                 4669 	.db #0x50	; 80	'P'
   0287 50                 4670 	.db #0x50	; 80	'P'
   0288 50                 4671 	.db #0x50	; 80	'P'
   0289 50                 4672 	.db #0x50	; 80	'P'
   028A 10                 4673 	.db #0x10	; 16
   028B 20                 4674 	.db #0x20	; 32
   028C 41                 4675 	.db #0x41	; 65	'A'
   028D 83                 4676 	.db #0x83	; 131
   028E 9B                 4677 	.db #0x9B	; 155
   028F C4                 4678 	.db #0xC4	; 196
   0290 08                 4679 	.db #0x08	; 8
   0291 0C                 4680 	.db #0x0C	; 12
   0292 10                 4681 	.db #0x10	; 16
   0293 18                 4682 	.db #0x18	; 24
   0294 20                 4683 	.db #0x20	; 32
   0295 31                 4684 	.db #0x31	; 49	'1'
   0296 40                 4685 	.db #0x40	; 64
   0297 62                 4686 	.db #0x62	; 98	'b'
   0298 C5                 4687 	.db #0xC5	; 197
   0299 89                 4688 	.db #0x89	; 137
   029A 12                 4689 	.db #0x12	; 18
   029B A6                 4690 	.db #0xA6	; 166
   029C 9C                 4691 	.db #0x9C	; 156
   029D 31                 4692 	.db #0x31	; 49	'1'
   029E 4A                 4693 	.db #0x4A	; 74	'J'
   029F 62                 4694 	.db #0x62	; 98	'b'
   02A0 93                 4695 	.db #0x93	; 147
   02A1 C5                 4696 	.db #0xC5	; 197
   02A2 27                 4697 	.db #0x27	; 39
   02A3 00                 4698 	.db #0x00	; 0
   02A4 03                 4699 	.db #0x03	; 3
   02A5 06                 4700 	.db #0x06	; 6
   02A6 0D                 4701 	.db #0x0D	; 13
   02A7 1A                 4702 	.db #0x1A	; 26
   02A8 1E                 4703 	.db #0x1E	; 30
   02A9 26                 4704 	.db #0x26	; 38
   02AA 33                 4705 	.db #0x33	; 51	'3'
   02AB 4D                 4706 	.db #0x4D	; 77	'M'
   02AC 66                 4707 	.db #0x66	; 102	'f'
   02AD 9A                 4708 	.db #0x9A	; 154
   02AE CD                 4709 	.db #0xCD	; 205
   02AF FE                 4710 	.db #0xFE	; 254
   02B0 FE                 4711 	.db #0xFE	; 254
   02B1                    4712 _power_levels:
   02B1 01                 4713 	.db #0x01	; 1
   02B2 02                 4714 	.db #0x02	; 2
   02B3 05                 4715 	.db #0x05	; 5
   02B4 08                 4716 	.db #0x08	; 8
   02B5 0B                 4717 	.db #0x0B	; 11
   02B6 0E                 4718 	.db #0x0E	; 14
   02B7 11                 4719 	.db #0x11	; 17
   02B8 14                 4720 	.db #0x14	; 20
                           4721 	.area XINIT   (CODE)
                           4722 	.area CABS    (ABS,CODE)
