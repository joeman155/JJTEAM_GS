                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.3.0 #8604 (May 11 2013) (Linux)
                              4 ; This file was generated Sun Nov 24 17:43:04 2013
                              5 ;--------------------------------------------------------
                              6 	.module tdm
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _fhop_set_locked
                             13 	.globl _fhop_window_change
                             14 	.globl _fhop_receive_channel
                             15 	.globl _fhop_transmit_channel
                             16 	.globl _packet_inject
                             17 	.globl _packet_set_max_xmit
                             18 	.globl _packet_force_resend
                             19 	.globl _packet_is_duplicate
                             20 	.globl _packet_is_injected
                             21 	.globl _packet_is_resend
                             22 	.globl _packet_get_next
                             23 	.globl _timer_entropy
                             24 	.globl _delay_msec
                             25 	.globl _timer2_tick
                             26 	.globl _radio_temperature
                             27 	.globl _MAVLink_report
                             28 	.globl _radio_receive_in_progress
                             29 	.globl _radio_get_transmit_power
                             30 	.globl _radio_air_rate
                             31 	.globl _radio_current_rssi
                             32 	.globl _radio_last_rssi
                             33 	.globl _radio_set_channel
                             34 	.globl _radio_receiver_on
                             35 	.globl _radio_transmit
                             36 	.globl _radio_preamble_detected
                             37 	.globl _radio_receive_packet
                             38 	.globl _printf_end_capture
                             39 	.globl _printf_start_capture
                             40 	.globl _printfl
                             41 	.globl _panic
                             42 	.globl _at_command
                             43 	.globl _constrain
                             44 	.globl _serial_write_buf
                             45 	.globl _strlen
                             46 	.globl _memset
                             47 	.globl _memcpy
                             48 	.globl _rand
                             49 	.globl _putchar
                             50 	.globl _TDM_SYNC_PIN
                             51 	.globl _SDN
                             52 	.globl _NSS1
                             53 	.globl _IRQ
                             54 	.globl _PIN_ENABLE
                             55 	.globl _PIN_CONFIG
                             56 	.globl _LED_GREEN
                             57 	.globl _LED_RED
                             58 	.globl _SPI0EN
                             59 	.globl _TXBMT0
                             60 	.globl _NSS0MD0
                             61 	.globl _NSS0MD1
                             62 	.globl _RXOVRN0
                             63 	.globl _MODF0
                             64 	.globl _WCOL0
                             65 	.globl _SPIF0
                             66 	.globl _AD0CM0
                             67 	.globl _AD0CM1
                             68 	.globl _AD0CM2
                             69 	.globl _AD0WINT
                             70 	.globl _AD0BUSY
                             71 	.globl _AD0INT
                             72 	.globl _BURSTEN
                             73 	.globl _AD0EN
                             74 	.globl _CCF0
                             75 	.globl _CCF1
                             76 	.globl _CCF2
                             77 	.globl _CCF3
                             78 	.globl _CCF4
                             79 	.globl _CCF5
                             80 	.globl _CR
                             81 	.globl _CF
                             82 	.globl _P
                             83 	.globl _F1
                             84 	.globl _OV
                             85 	.globl _RS0
                             86 	.globl _RS1
                             87 	.globl _F0
                             88 	.globl _AC
                             89 	.globl _CY
                             90 	.globl _T2XCLK
                             91 	.globl _T2RCLK
                             92 	.globl _TR2
                             93 	.globl _T2SPLIT
                             94 	.globl _TF2CEN
                             95 	.globl _TF2LEN
                             96 	.globl _TF2L
                             97 	.globl _TF2H
                             98 	.globl _SI
                             99 	.globl _ACK
                            100 	.globl _ARBLOST
                            101 	.globl _ACKRQ
                            102 	.globl _STO
                            103 	.globl _STA
                            104 	.globl _TXMODE
                            105 	.globl _MASTER
                            106 	.globl _PX0
                            107 	.globl _PT0
                            108 	.globl _PX1
                            109 	.globl _PT1
                            110 	.globl _PS0
                            111 	.globl _PT2
                            112 	.globl _PSPI0
                            113 	.globl _SPI1EN
                            114 	.globl _TXBMT1
                            115 	.globl _NSS1MD0
                            116 	.globl _NSS1MD1
                            117 	.globl _RXOVRN1
                            118 	.globl _MODF1
                            119 	.globl _WCOL1
                            120 	.globl _SPIF1
                            121 	.globl _EX0
                            122 	.globl _ET0
                            123 	.globl _EX1
                            124 	.globl _ET1
                            125 	.globl _ES0
                            126 	.globl _ET2
                            127 	.globl _ESPI0
                            128 	.globl _EA
                            129 	.globl _RI0
                            130 	.globl _TI0
                            131 	.globl _RB80
                            132 	.globl _TB80
                            133 	.globl _REN0
                            134 	.globl _MCE0
                            135 	.globl _S0MODE
                            136 	.globl _CRC0VAL
                            137 	.globl _CRC0INIT
                            138 	.globl _CRC0SEL
                            139 	.globl _IT0
                            140 	.globl _IE0
                            141 	.globl _IT1
                            142 	.globl _IE1
                            143 	.globl _TR0
                            144 	.globl _TF0
                            145 	.globl _TR1
                            146 	.globl _TF1
                            147 	.globl _PCA0CP4
                            148 	.globl _PCA0CP0
                            149 	.globl _PCA0
                            150 	.globl _PCA0CP3
                            151 	.globl _PCA0CP2
                            152 	.globl _PCA0CP1
                            153 	.globl _PCA0CP5
                            154 	.globl _TMR2
                            155 	.globl _TMR2RL
                            156 	.globl _ADC0LT
                            157 	.globl _ADC0GT
                            158 	.globl _ADC0
                            159 	.globl _TMR3
                            160 	.globl _TMR3RL
                            161 	.globl _TOFF
                            162 	.globl _DP
                            163 	.globl _VDM0CN
                            164 	.globl _PCA0CPH4
                            165 	.globl _PCA0CPL4
                            166 	.globl _PCA0CPH0
                            167 	.globl _PCA0CPL0
                            168 	.globl _PCA0H
                            169 	.globl _PCA0L
                            170 	.globl _SPI0CN
                            171 	.globl _EIP2
                            172 	.globl _EIP1
                            173 	.globl _SMB0ADM
                            174 	.globl _SMB0ADR
                            175 	.globl _P2MDIN
                            176 	.globl _P1MDIN
                            177 	.globl _P0MDIN
                            178 	.globl _B
                            179 	.globl _RSTSRC
                            180 	.globl _PCA0CPH3
                            181 	.globl _PCA0CPL3
                            182 	.globl _PCA0CPH2
                            183 	.globl _PCA0CPL2
                            184 	.globl _PCA0CPH1
                            185 	.globl _PCA0CPL1
                            186 	.globl _ADC0CN
                            187 	.globl _EIE2
                            188 	.globl _EIE1
                            189 	.globl _FLWR
                            190 	.globl _IT01CF
                            191 	.globl _XBR2
                            192 	.globl _XBR1
                            193 	.globl _XBR0
                            194 	.globl _ACC
                            195 	.globl _PCA0PWM
                            196 	.globl _PCA0CPM4
                            197 	.globl _PCA0CPM3
                            198 	.globl _PCA0CPM2
                            199 	.globl _PCA0CPM1
                            200 	.globl _PCA0CPM0
                            201 	.globl _PCA0MD
                            202 	.globl _PCA0CN
                            203 	.globl _P0MAT
                            204 	.globl _P2SKIP
                            205 	.globl _P1SKIP
                            206 	.globl _P0SKIP
                            207 	.globl _PCA0CPH5
                            208 	.globl _PCA0CPL5
                            209 	.globl _REF0CN
                            210 	.globl _PSW
                            211 	.globl _P1MAT
                            212 	.globl _PCA0CPM5
                            213 	.globl _TMR2H
                            214 	.globl _TMR2L
                            215 	.globl _TMR2RLH
                            216 	.globl _TMR2RLL
                            217 	.globl _REG0CN
                            218 	.globl _TMR2CN
                            219 	.globl _P0MASK
                            220 	.globl _ADC0LTH
                            221 	.globl _ADC0LTL
                            222 	.globl _ADC0GTH
                            223 	.globl _ADC0GTL
                            224 	.globl _SMB0DAT
                            225 	.globl _SMB0CF
                            226 	.globl _SMB0CN
                            227 	.globl _P1MASK
                            228 	.globl _ADC0H
                            229 	.globl _ADC0L
                            230 	.globl _ADC0TK
                            231 	.globl _ADC0CF
                            232 	.globl _ADC0MX
                            233 	.globl _ADC0PWR
                            234 	.globl _ADC0AC
                            235 	.globl _IREF0CN
                            236 	.globl _IP
                            237 	.globl _FLKEY
                            238 	.globl _FLSCL
                            239 	.globl _PMU0CF
                            240 	.globl _OSCICL
                            241 	.globl _OSCICN
                            242 	.globl _OSCXCN
                            243 	.globl _SPI1CN
                            244 	.globl _ONESHOT
                            245 	.globl _EMI0TC
                            246 	.globl _RTC0KEY
                            247 	.globl _RTC0DAT
                            248 	.globl _RTC0ADR
                            249 	.globl _EMI0CF
                            250 	.globl _EMI0CN
                            251 	.globl _CLKSEL
                            252 	.globl _IE
                            253 	.globl _SFRPAGE
                            254 	.globl _P2DRV
                            255 	.globl _P2MDOUT
                            256 	.globl _P1DRV
                            257 	.globl _P1MDOUT
                            258 	.globl _P0DRV
                            259 	.globl _P0MDOUT
                            260 	.globl _SPI0DAT
                            261 	.globl _SPI0CKR
                            262 	.globl _SPI0CFG
                            263 	.globl _P2
                            264 	.globl _CPT0MX
                            265 	.globl _CPT1MX
                            266 	.globl _CPT0MD
                            267 	.globl _CPT1MD
                            268 	.globl _CPT0CN
                            269 	.globl _CPT1CN
                            270 	.globl _SBUF0
                            271 	.globl _SCON0
                            272 	.globl _CRC0CNT
                            273 	.globl _DC0CN
                            274 	.globl _CRC0AUTO
                            275 	.globl _DC0CF
                            276 	.globl _TMR3H
                            277 	.globl _CRC0FLIP
                            278 	.globl _TMR3L
                            279 	.globl _CRC0IN
                            280 	.globl _TMR3RLH
                            281 	.globl _CRC0CN
                            282 	.globl _TMR3RLL
                            283 	.globl _CRC0DAT
                            284 	.globl _TMR3CN
                            285 	.globl _P1
                            286 	.globl _PSCTL
                            287 	.globl _CKCON
                            288 	.globl _TH1
                            289 	.globl _TH0
                            290 	.globl _TL1
                            291 	.globl _TL0
                            292 	.globl _TMOD
                            293 	.globl _TCON
                            294 	.globl _PCON
                            295 	.globl _TOFFH
                            296 	.globl _SPI1DAT
                            297 	.globl _TOFFL
                            298 	.globl _SPI1CKR
                            299 	.globl _SPI1CFG
                            300 	.globl _DPH
                            301 	.globl _DPL
                            302 	.globl _SP
                            303 	.globl _P0
                            304 	.globl _pbuf
                            305 	.globl _trailer
                            306 	.globl _test_display
                            307 	.globl _lbt_rssi
                            308 	.globl _duty_cycle_offset
                            309 	.globl _duty_cycle
                            310 	.globl _transmit_wait
                            311 	.globl __canary
                            312 	.globl _tdm_show_rssi
                            313 	.globl _tdm_change_phase
                            314 	.globl _tdm_remote_at
                            315 	.globl _tdm_serial_loop
                            316 	.globl _tdm_init
                            317 	.globl _tdm_report_timing
                            318 ;--------------------------------------------------------
                            319 ; special function registers
                            320 ;--------------------------------------------------------
                            321 	.area RSEG    (ABS,DATA)
   0000                     322 	.org 0x0000
                     0080   323 _P0	=	0x0080
                     0081   324 _SP	=	0x0081
                     0082   325 _DPL	=	0x0082
                     0083   326 _DPH	=	0x0083
                     0084   327 _SPI1CFG	=	0x0084
                     0085   328 _SPI1CKR	=	0x0085
                     0085   329 _TOFFL	=	0x0085
                     0086   330 _SPI1DAT	=	0x0086
                     0086   331 _TOFFH	=	0x0086
                     0087   332 _PCON	=	0x0087
                     0088   333 _TCON	=	0x0088
                     0089   334 _TMOD	=	0x0089
                     008A   335 _TL0	=	0x008a
                     008B   336 _TL1	=	0x008b
                     008C   337 _TH0	=	0x008c
                     008D   338 _TH1	=	0x008d
                     008E   339 _CKCON	=	0x008e
                     008F   340 _PSCTL	=	0x008f
                     0090   341 _P1	=	0x0090
                     0091   342 _TMR3CN	=	0x0091
                     0091   343 _CRC0DAT	=	0x0091
                     0092   344 _TMR3RLL	=	0x0092
                     0092   345 _CRC0CN	=	0x0092
                     0093   346 _TMR3RLH	=	0x0093
                     0093   347 _CRC0IN	=	0x0093
                     0094   348 _TMR3L	=	0x0094
                     0095   349 _CRC0FLIP	=	0x0095
                     0095   350 _TMR3H	=	0x0095
                     0096   351 _DC0CF	=	0x0096
                     0096   352 _CRC0AUTO	=	0x0096
                     0097   353 _DC0CN	=	0x0097
                     0097   354 _CRC0CNT	=	0x0097
                     0098   355 _SCON0	=	0x0098
                     0099   356 _SBUF0	=	0x0099
                     009A   357 _CPT1CN	=	0x009a
                     009B   358 _CPT0CN	=	0x009b
                     009C   359 _CPT1MD	=	0x009c
                     009D   360 _CPT0MD	=	0x009d
                     009E   361 _CPT1MX	=	0x009e
                     009F   362 _CPT0MX	=	0x009f
                     00A0   363 _P2	=	0x00a0
                     00A1   364 _SPI0CFG	=	0x00a1
                     00A2   365 _SPI0CKR	=	0x00a2
                     00A3   366 _SPI0DAT	=	0x00a3
                     00A4   367 _P0MDOUT	=	0x00a4
                     00A4   368 _P0DRV	=	0x00a4
                     00A5   369 _P1MDOUT	=	0x00a5
                     00A5   370 _P1DRV	=	0x00a5
                     00A6   371 _P2MDOUT	=	0x00a6
                     00A6   372 _P2DRV	=	0x00a6
                     00A7   373 _SFRPAGE	=	0x00a7
                     00A8   374 _IE	=	0x00a8
                     00A9   375 _CLKSEL	=	0x00a9
                     00AA   376 _EMI0CN	=	0x00aa
                     00AB   377 _EMI0CF	=	0x00ab
                     00AC   378 _RTC0ADR	=	0x00ac
                     00AD   379 _RTC0DAT	=	0x00ad
                     00AE   380 _RTC0KEY	=	0x00ae
                     00AF   381 _EMI0TC	=	0x00af
                     00AF   382 _ONESHOT	=	0x00af
                     00B0   383 _SPI1CN	=	0x00b0
                     00B1   384 _OSCXCN	=	0x00b1
                     00B2   385 _OSCICN	=	0x00b2
                     00B3   386 _OSCICL	=	0x00b3
                     00B5   387 _PMU0CF	=	0x00b5
                     00B6   388 _FLSCL	=	0x00b6
                     00B7   389 _FLKEY	=	0x00b7
                     00B8   390 _IP	=	0x00b8
                     00B9   391 _IREF0CN	=	0x00b9
                     00BA   392 _ADC0AC	=	0x00ba
                     00BA   393 _ADC0PWR	=	0x00ba
                     00BB   394 _ADC0MX	=	0x00bb
                     00BC   395 _ADC0CF	=	0x00bc
                     00BD   396 _ADC0TK	=	0x00bd
                     00BD   397 _ADC0L	=	0x00bd
                     00BE   398 _ADC0H	=	0x00be
                     00BF   399 _P1MASK	=	0x00bf
                     00C0   400 _SMB0CN	=	0x00c0
                     00C1   401 _SMB0CF	=	0x00c1
                     00C2   402 _SMB0DAT	=	0x00c2
                     00C3   403 _ADC0GTL	=	0x00c3
                     00C4   404 _ADC0GTH	=	0x00c4
                     00C5   405 _ADC0LTL	=	0x00c5
                     00C6   406 _ADC0LTH	=	0x00c6
                     00C7   407 _P0MASK	=	0x00c7
                     00C8   408 _TMR2CN	=	0x00c8
                     00C9   409 _REG0CN	=	0x00c9
                     00CA   410 _TMR2RLL	=	0x00ca
                     00CB   411 _TMR2RLH	=	0x00cb
                     00CC   412 _TMR2L	=	0x00cc
                     00CD   413 _TMR2H	=	0x00cd
                     00CE   414 _PCA0CPM5	=	0x00ce
                     00CF   415 _P1MAT	=	0x00cf
                     00D0   416 _PSW	=	0x00d0
                     00D1   417 _REF0CN	=	0x00d1
                     00D2   418 _PCA0CPL5	=	0x00d2
                     00D3   419 _PCA0CPH5	=	0x00d3
                     00D4   420 _P0SKIP	=	0x00d4
                     00D5   421 _P1SKIP	=	0x00d5
                     00D6   422 _P2SKIP	=	0x00d6
                     00D7   423 _P0MAT	=	0x00d7
                     00D8   424 _PCA0CN	=	0x00d8
                     00D9   425 _PCA0MD	=	0x00d9
                     00DA   426 _PCA0CPM0	=	0x00da
                     00DB   427 _PCA0CPM1	=	0x00db
                     00DC   428 _PCA0CPM2	=	0x00dc
                     00DD   429 _PCA0CPM3	=	0x00dd
                     00DE   430 _PCA0CPM4	=	0x00de
                     00DF   431 _PCA0PWM	=	0x00df
                     00E0   432 _ACC	=	0x00e0
                     00E1   433 _XBR0	=	0x00e1
                     00E2   434 _XBR1	=	0x00e2
                     00E3   435 _XBR2	=	0x00e3
                     00E4   436 _IT01CF	=	0x00e4
                     00E5   437 _FLWR	=	0x00e5
                     00E6   438 _EIE1	=	0x00e6
                     00E7   439 _EIE2	=	0x00e7
                     00E8   440 _ADC0CN	=	0x00e8
                     00E9   441 _PCA0CPL1	=	0x00e9
                     00EA   442 _PCA0CPH1	=	0x00ea
                     00EB   443 _PCA0CPL2	=	0x00eb
                     00EC   444 _PCA0CPH2	=	0x00ec
                     00ED   445 _PCA0CPL3	=	0x00ed
                     00EE   446 _PCA0CPH3	=	0x00ee
                     00EF   447 _RSTSRC	=	0x00ef
                     00F0   448 _B	=	0x00f0
                     00F1   449 _P0MDIN	=	0x00f1
                     00F2   450 _P1MDIN	=	0x00f2
                     00F3   451 _P2MDIN	=	0x00f3
                     00F4   452 _SMB0ADR	=	0x00f4
                     00F5   453 _SMB0ADM	=	0x00f5
                     00F6   454 _EIP1	=	0x00f6
                     00F7   455 _EIP2	=	0x00f7
                     00F8   456 _SPI0CN	=	0x00f8
                     00F9   457 _PCA0L	=	0x00f9
                     00FA   458 _PCA0H	=	0x00fa
                     00FB   459 _PCA0CPL0	=	0x00fb
                     00FC   460 _PCA0CPH0	=	0x00fc
                     00FD   461 _PCA0CPL4	=	0x00fd
                     00FE   462 _PCA0CPH4	=	0x00fe
                     00FF   463 _VDM0CN	=	0x00ff
                     8382   464 _DP	=	0x8382
                     8685   465 _TOFF	=	0x8685
                     9392   466 _TMR3RL	=	0x9392
                     9594   467 _TMR3	=	0x9594
                     BEBD   468 _ADC0	=	0xbebd
                     C4C3   469 _ADC0GT	=	0xc4c3
                     C6C5   470 _ADC0LT	=	0xc6c5
                     CBCA   471 _TMR2RL	=	0xcbca
                     CDCC   472 _TMR2	=	0xcdcc
                     D3D2   473 _PCA0CP5	=	0xd3d2
                     EAE9   474 _PCA0CP1	=	0xeae9
                     ECEB   475 _PCA0CP2	=	0xeceb
                     EEED   476 _PCA0CP3	=	0xeeed
                     FAF9   477 _PCA0	=	0xfaf9
                     FCFB   478 _PCA0CP0	=	0xfcfb
                     FEFD   479 _PCA0CP4	=	0xfefd
                            480 ;--------------------------------------------------------
                            481 ; special function bits
                            482 ;--------------------------------------------------------
                            483 	.area RSEG    (ABS,DATA)
   0000                     484 	.org 0x0000
                     008F   485 _TF1	=	0x008f
                     008E   486 _TR1	=	0x008e
                     008D   487 _TF0	=	0x008d
                     008C   488 _TR0	=	0x008c
                     008B   489 _IE1	=	0x008b
                     008A   490 _IT1	=	0x008a
                     0089   491 _IE0	=	0x0089
                     0088   492 _IT0	=	0x0088
                     0096   493 _CRC0SEL	=	0x0096
                     0095   494 _CRC0INIT	=	0x0095
                     0094   495 _CRC0VAL	=	0x0094
                     009F   496 _S0MODE	=	0x009f
                     009D   497 _MCE0	=	0x009d
                     009C   498 _REN0	=	0x009c
                     009B   499 _TB80	=	0x009b
                     009A   500 _RB80	=	0x009a
                     0099   501 _TI0	=	0x0099
                     0098   502 _RI0	=	0x0098
                     00AF   503 _EA	=	0x00af
                     00AE   504 _ESPI0	=	0x00ae
                     00AD   505 _ET2	=	0x00ad
                     00AC   506 _ES0	=	0x00ac
                     00AB   507 _ET1	=	0x00ab
                     00AA   508 _EX1	=	0x00aa
                     00A9   509 _ET0	=	0x00a9
                     00A8   510 _EX0	=	0x00a8
                     00B7   511 _SPIF1	=	0x00b7
                     00B6   512 _WCOL1	=	0x00b6
                     00B5   513 _MODF1	=	0x00b5
                     00B4   514 _RXOVRN1	=	0x00b4
                     00B3   515 _NSS1MD1	=	0x00b3
                     00B2   516 _NSS1MD0	=	0x00b2
                     00B1   517 _TXBMT1	=	0x00b1
                     00B0   518 _SPI1EN	=	0x00b0
                     00BE   519 _PSPI0	=	0x00be
                     00BD   520 _PT2	=	0x00bd
                     00BC   521 _PS0	=	0x00bc
                     00BB   522 _PT1	=	0x00bb
                     00BA   523 _PX1	=	0x00ba
                     00B9   524 _PT0	=	0x00b9
                     00B8   525 _PX0	=	0x00b8
                     00C7   526 _MASTER	=	0x00c7
                     00C6   527 _TXMODE	=	0x00c6
                     00C5   528 _STA	=	0x00c5
                     00C4   529 _STO	=	0x00c4
                     00C3   530 _ACKRQ	=	0x00c3
                     00C2   531 _ARBLOST	=	0x00c2
                     00C1   532 _ACK	=	0x00c1
                     00C0   533 _SI	=	0x00c0
                     00CF   534 _TF2H	=	0x00cf
                     00CE   535 _TF2L	=	0x00ce
                     00CD   536 _TF2LEN	=	0x00cd
                     00CC   537 _TF2CEN	=	0x00cc
                     00CB   538 _T2SPLIT	=	0x00cb
                     00CA   539 _TR2	=	0x00ca
                     00C9   540 _T2RCLK	=	0x00c9
                     00C8   541 _T2XCLK	=	0x00c8
                     00D7   542 _CY	=	0x00d7
                     00D6   543 _AC	=	0x00d6
                     00D5   544 _F0	=	0x00d5
                     00D4   545 _RS1	=	0x00d4
                     00D3   546 _RS0	=	0x00d3
                     00D2   547 _OV	=	0x00d2
                     00D1   548 _F1	=	0x00d1
                     00D0   549 _P	=	0x00d0
                     00DF   550 _CF	=	0x00df
                     00DE   551 _CR	=	0x00de
                     00DD   552 _CCF5	=	0x00dd
                     00DC   553 _CCF4	=	0x00dc
                     00DB   554 _CCF3	=	0x00db
                     00DA   555 _CCF2	=	0x00da
                     00D9   556 _CCF1	=	0x00d9
                     00D8   557 _CCF0	=	0x00d8
                     00EF   558 _AD0EN	=	0x00ef
                     00EE   559 _BURSTEN	=	0x00ee
                     00ED   560 _AD0INT	=	0x00ed
                     00EC   561 _AD0BUSY	=	0x00ec
                     00EB   562 _AD0WINT	=	0x00eb
                     00EA   563 _AD0CM2	=	0x00ea
                     00E9   564 _AD0CM1	=	0x00e9
                     00E8   565 _AD0CM0	=	0x00e8
                     00FF   566 _SPIF0	=	0x00ff
                     00FE   567 _WCOL0	=	0x00fe
                     00FD   568 _MODF0	=	0x00fd
                     00FC   569 _RXOVRN0	=	0x00fc
                     00FB   570 _NSS0MD1	=	0x00fb
                     00FA   571 _NSS0MD0	=	0x00fa
                     00F9   572 _TXBMT0	=	0x00f9
                     00F8   573 _SPI0EN	=	0x00f8
                     0096   574 _LED_RED	=	0x0096
                     0095   575 _LED_GREEN	=	0x0095
                     0082   576 _PIN_CONFIG	=	0x0082
                     0083   577 _PIN_ENABLE	=	0x0083
                     0087   578 _IRQ	=	0x0087
                     0094   579 _NSS1	=	0x0094
                     00A6   580 _SDN	=	0x00a6
                     00A6   581 _TDM_SYNC_PIN	=	0x00a6
                            582 ;--------------------------------------------------------
                            583 ; overlayable register banks
                            584 ;--------------------------------------------------------
                            585 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     586 	.ds 8
                            587 ;--------------------------------------------------------
                            588 ; internal ram data
                            589 ;--------------------------------------------------------
                            590 	.area DSEG    (DATA)
   0000                     591 _average_duty_cycle:
   0000                     592 	.ds 4
   0004                     593 _tdm_show_rssi_sloc0_1_0:
   0004                     594 	.ds 2
   0006                     595 _tdm_show_rssi_sloc1_1_0:
   0006                     596 	.ds 2
   0008                     597 _tdm_show_rssi_sloc2_1_0:
   0008                     598 	.ds 2
   000A                     599 _tdm_show_rssi_sloc3_1_0:
   000A                     600 	.ds 2
   000C                     601 _tdm_show_rssi_sloc4_1_0:
   000C                     602 	.ds 2
   000E                     603 _sync_tx_windows_old_state_1_155:
   000E                     604 	.ds 1
   000F                     605 _tdm_state_update_sloc0_1_0:
   000F                     606 	.ds 2
   0011                     607 _tdm_state_update_sloc1_1_0:
   0011                     608 	.ds 4
   0015                     609 _tdm_state_update_sloc2_1_0:
   0015                     610 	.ds 4
   0019                     611 _tdm_init_sloc0_1_0:
   0019                     612 	.ds 4
                            613 ;--------------------------------------------------------
                            614 ; overlayable items in internal ram 
                            615 ;--------------------------------------------------------
                            616 ;--------------------------------------------------------
                            617 ; indirectly addressable internal ram data
                            618 ;--------------------------------------------------------
                            619 	.area ISEG    (DATA)
                     00FF   620 __canary	=	0x00ff
                            621 ;--------------------------------------------------------
                            622 ; absolute internal ram data
                            623 ;--------------------------------------------------------
                            624 	.area IABS    (ABS,DATA)
                            625 	.area IABS    (ABS,DATA)
                            626 ;--------------------------------------------------------
                            627 ; bit data
                            628 ;--------------------------------------------------------
                            629 	.area BSEG    (BIT)
   0000                     630 _bonus_transmit:
   0000                     631 	.ds 1
   0001                     632 _transmit_yield:
   0001                     633 	.ds 1
   0002                     634 _blink_state:
   0002                     635 	.ds 1
   0003                     636 _received_packet:
   0003                     637 	.ds 1
   0004                     638 _duty_cycle_wait:
   0004                     639 	.ds 1
   0005                     640 _send_statistics:
   0005                     641 	.ds 1
   0006                     642 _send_at_command:
   0006                     643 	.ds 1
   0007                     644 _sync_tx_windows_sloc0_1_0:
   0007                     645 	.ds 1
   0008                     646 _tdm_state_update_sloc3_1_0:
   0008                     647 	.ds 1
   0009                     648 _tdm_serial_loop_sloc0_1_0:
   0009                     649 	.ds 1
                            650 ;--------------------------------------------------------
                            651 ; paged external ram data
                            652 ;--------------------------------------------------------
                            653 	.area PSEG    (PAG,XDATA)
   0000                     654 _tdm_state:
   0000                     655 	.ds 1
   0001                     656 _tdm_state_remaining:
   0001                     657 	.ds 2
   0003                     658 _tx_window_width:
   0003                     659 	.ds 2
   0005                     660 _max_data_packet_length:
   0005                     661 	.ds 1
   0006                     662 _silence_period:
   0006                     663 	.ds 2
   0008                     664 _packet_latency:
   0008                     665 	.ds 2
   000A                     666 _ticks_per_byte:
   000A                     667 	.ds 2
   000C                     668 _transmit_wait::
   000C                     669 	.ds 2
   000E                     670 _duty_cycle::
   000E                     671 	.ds 1
   000F                     672 _duty_cycle_offset::
   000F                     673 	.ds 1
   0010                     674 _transmitted_ticks:
   0010                     675 	.ds 2
   0012                     676 _lbt_rssi::
   0012                     677 	.ds 1
   0013                     678 _lbt_listen_time:
   0013                     679 	.ds 2
   0015                     680 _lbt_min_time:
   0015                     681 	.ds 2
   0017                     682 _lbt_rand:
   0017                     683 	.ds 2
   0019                     684 _test_display::
   0019                     685 	.ds 1
   001A                     686 _trailer::
   001A                     687 	.ds 2
   001C                     688 _remote_at_cmd:
   001C                     689 	.ds 17
   002D                     690 _sync_tx_windows_delta_2_162:
   002D                     691 	.ds 2
   002F                     692 _tdm_serial_loop_last_t_1_207:
   002F                     693 	.ds 2
   0031                     694 _tdm_serial_loop_last_link_update_1_207:
   0031                     695 	.ds 2
   0033                     696 _tdm_serial_loop_len_2_208:
   0033                     697 	.ds 1
   0034                     698 _tdm_serial_loop_tdelta_2_208:
   0034                     699 	.ds 2
                            700 ;--------------------------------------------------------
                            701 ; external ram data
                            702 ;--------------------------------------------------------
                            703 	.area XSEG    (XDATA)
   0000                     704 _pbuf::
   0000                     705 	.ds 252
   00FC                     706 _link_update_unlock_count_1_185:
   00FC                     707 	.ds 1
   00FD                     708 _link_update_temperature_count_1_185:
   00FD                     709 	.ds 1
                            710 ;--------------------------------------------------------
                            711 ; absolute external ram data
                            712 ;--------------------------------------------------------
                            713 	.area XABS    (ABS,XDATA)
                            714 ;--------------------------------------------------------
                            715 ; external initialized ram data
                            716 ;--------------------------------------------------------
                            717 	.area XISEG   (XDATA)
                            718 	.area HOME    (CODE)
                            719 	.area GSINIT0 (CODE)
                            720 	.area GSINIT1 (CODE)
                            721 	.area GSINIT2 (CODE)
                            722 	.area GSINIT3 (CODE)
                            723 	.area GSINIT4 (CODE)
                            724 	.area GSINIT5 (CODE)
                            725 	.area GSINIT  (CODE)
                            726 	.area GSFINAL (CODE)
                            727 	.area CSEG    (CODE)
                            728 ;--------------------------------------------------------
                            729 ; global & static initialisations
                            730 ;--------------------------------------------------------
                            731 	.area HOME    (CODE)
                            732 	.area GSINIT  (CODE)
                            733 	.area GSFINAL (CODE)
                            734 	.area GSINIT  (CODE)
                            735 ;--------------------------------------------------------
                            736 ; Home
                            737 ;--------------------------------------------------------
                            738 	.area HOME    (CODE)
                            739 	.area HOME    (CODE)
                            740 ;--------------------------------------------------------
                            741 ; code
                            742 ;--------------------------------------------------------
                            743 	.area CSEG    (CODE)
                            744 ;------------------------------------------------------------
                            745 ;Allocation info for local variables in function 'tdm_show_rssi'
                            746 ;------------------------------------------------------------
                            747 ;sloc0                     Allocated with name '_tdm_show_rssi_sloc0_1_0'
                            748 ;sloc1                     Allocated with name '_tdm_show_rssi_sloc1_1_0'
                            749 ;sloc2                     Allocated with name '_tdm_show_rssi_sloc2_1_0'
                            750 ;sloc3                     Allocated with name '_tdm_show_rssi_sloc3_1_0'
                            751 ;sloc4                     Allocated with name '_tdm_show_rssi_sloc4_1_0'
                            752 ;------------------------------------------------------------
                            753 ;	radio/tdm.c:152: tdm_show_rssi(void)
                            754 ;	-----------------------------------------
                            755 ;	 function tdm_show_rssi
                            756 ;	-----------------------------------------
   0000                     757 _tdm_show_rssi:
                     0007   758 	ar7 = 0x07
                     0006   759 	ar6 = 0x06
                     0005   760 	ar5 = 0x05
                     0004   761 	ar4 = 0x04
                     0003   762 	ar3 = 0x03
                     0002   763 	ar2 = 0x02
                     0001   764 	ar1 = 0x01
                     0000   765 	ar0 = 0x00
                            766 ;	radio/tdm.c:154: printf("L/R RSSI: %u/%u  L/R noise: %u/%u pkts: %u ",
   0000 78r02         [12]  767 	mov	r0,#(_statistics + 0x0002)
   0002 E2            [24]  768 	movx	a,@r0
   0003 FE            [12]  769 	mov	r6,a
   0004 08            [12]  770 	inc	r0
   0005 E2            [24]  771 	movx	a,@r0
   0006 FF            [12]  772 	mov	r7,a
   0007 78r01         [12]  773 	mov	r0,#(_remote_statistics + 0x0001)
   0009 E2            [24]  774 	movx	a,@r0
   000A FD            [12]  775 	mov	r5,a
   000B 7C 00         [12]  776 	mov	r4,#0x00
   000D 78r01         [12]  777 	mov	r0,#(_statistics + 0x0001)
   000F E2            [24]  778 	movx	a,@r0
   0010 FB            [12]  779 	mov	r3,a
   0011 8B*04         [24]  780 	mov	_tdm_show_rssi_sloc0_1_0,r3
   0013 75*05 00      [24]  781 	mov	(_tdm_show_rssi_sloc0_1_0 + 1),#0x00
   0016 78r00         [12]  782 	mov	r0,#_remote_statistics
   0018 E2            [24]  783 	movx	a,@r0
   0019 FB            [12]  784 	mov	r3,a
   001A 8B*06         [24]  785 	mov	_tdm_show_rssi_sloc1_1_0,r3
   001C 75*07 00      [24]  786 	mov	(_tdm_show_rssi_sloc1_1_0 + 1),#0x00
   001F 78r00         [12]  787 	mov	r0,#_statistics
   0021 E2            [24]  788 	movx	a,@r0
   0022 FB            [12]  789 	mov	r3,a
   0023 7A 00         [12]  790 	mov	r2,#0x00
   0025 C0 06         [24]  791 	push	ar6
   0027 C0 07         [24]  792 	push	ar7
   0029 C0 05         [24]  793 	push	ar5
   002B C0 04         [24]  794 	push	ar4
   002D C0*04         [24]  795 	push	_tdm_show_rssi_sloc0_1_0
   002F C0*05         [24]  796 	push	(_tdm_show_rssi_sloc0_1_0 + 1)
   0031 C0*06         [24]  797 	push	_tdm_show_rssi_sloc1_1_0
   0033 C0*07         [24]  798 	push	(_tdm_show_rssi_sloc1_1_0 + 1)
   0035 C0 03         [24]  799 	push	ar3
   0037 C0 02         [24]  800 	push	ar2
   0039 74r00         [12]  801 	mov	a,#__str_0
   003B C0 E0         [24]  802 	push	acc
   003D 74s00         [12]  803 	mov	a,#(__str_0 >> 8)
   003F C0 E0         [24]  804 	push	acc
   0041 74 80         [12]  805 	mov	a,#0x80
   0043 C0 E0         [24]  806 	push	acc
   0045 12r00r00      [24]  807 	lcall	_printfl
   0048 E5 81         [12]  808 	mov	a,sp
   004A 24 F3         [12]  809 	add	a,#0xf3
   004C F5 81         [12]  810 	mov	sp,a
                            811 ;	radio/tdm.c:160: printf(" txe=%u rxe=%u stx=%u srx=%u ecc=%u/%u temp=%d dco=%u\n",
   004E 78r0F         [12]  812 	mov	r0,#_duty_cycle_offset
   0050 E2            [24]  813 	movx	a,@r0
   0051 FE            [12]  814 	mov	r6,a
   0052 7F 00         [12]  815 	mov	r7,#0x00
   0054 C0 07         [24]  816 	push	ar7
   0056 C0 06         [24]  817 	push	ar6
   0058 12r00r00      [24]  818 	lcall	_radio_temperature
   005B AC 82         [24]  819 	mov	r4,dpl
   005D AD 83         [24]  820 	mov	r5,dph
   005F D0 06         [24]  821 	pop	ar6
   0061 D0 07         [24]  822 	pop	ar7
   0063 78r0A         [12]  823 	mov	r0,#(_errors + 0x000a)
   0065 E2            [24]  824 	movx	a,@r0
   0066 F5*06         [12]  825 	mov	_tdm_show_rssi_sloc1_1_0,a
   0068 08            [12]  826 	inc	r0
   0069 E2            [24]  827 	movx	a,@r0
   006A F5*07         [12]  828 	mov	(_tdm_show_rssi_sloc1_1_0 + 1),a
   006C 78r08         [12]  829 	mov	r0,#(_errors + 0x0008)
   006E E2            [24]  830 	movx	a,@r0
   006F F5*04         [12]  831 	mov	_tdm_show_rssi_sloc0_1_0,a
   0071 08            [12]  832 	inc	r0
   0072 E2            [24]  833 	movx	a,@r0
   0073 F5*05         [12]  834 	mov	(_tdm_show_rssi_sloc0_1_0 + 1),a
   0075 78r06         [12]  835 	mov	r0,#(_errors + 0x0006)
   0077 E2            [24]  836 	movx	a,@r0
   0078 F5*08         [12]  837 	mov	_tdm_show_rssi_sloc2_1_0,a
   007A 08            [12]  838 	inc	r0
   007B E2            [24]  839 	movx	a,@r0
   007C F5*09         [12]  840 	mov	(_tdm_show_rssi_sloc2_1_0 + 1),a
   007E 78r04         [12]  841 	mov	r0,#(_errors + 0x0004)
   0080 E2            [24]  842 	movx	a,@r0
   0081 F5*0A         [12]  843 	mov	_tdm_show_rssi_sloc3_1_0,a
   0083 08            [12]  844 	inc	r0
   0084 E2            [24]  845 	movx	a,@r0
   0085 F5*0B         [12]  846 	mov	(_tdm_show_rssi_sloc3_1_0 + 1),a
   0087 78r00         [12]  847 	mov	r0,#_errors
   0089 E2            [24]  848 	movx	a,@r0
   008A F5*0C         [12]  849 	mov	_tdm_show_rssi_sloc4_1_0,a
   008C 08            [12]  850 	inc	r0
   008D E2            [24]  851 	movx	a,@r0
   008E F5*0D         [12]  852 	mov	(_tdm_show_rssi_sloc4_1_0 + 1),a
   0090 78r02         [12]  853 	mov	r0,#(_errors + 0x0002)
   0092 E2            [24]  854 	movx	a,@r0
   0093 FA            [12]  855 	mov	r2,a
   0094 08            [12]  856 	inc	r0
   0095 E2            [24]  857 	movx	a,@r0
   0096 FB            [12]  858 	mov	r3,a
   0097 C0 06         [24]  859 	push	ar6
   0099 C0 07         [24]  860 	push	ar7
   009B C0 04         [24]  861 	push	ar4
   009D C0 05         [24]  862 	push	ar5
   009F C0*06         [24]  863 	push	_tdm_show_rssi_sloc1_1_0
   00A1 C0*07         [24]  864 	push	(_tdm_show_rssi_sloc1_1_0 + 1)
   00A3 C0*04         [24]  865 	push	_tdm_show_rssi_sloc0_1_0
   00A5 C0*05         [24]  866 	push	(_tdm_show_rssi_sloc0_1_0 + 1)
   00A7 C0*08         [24]  867 	push	_tdm_show_rssi_sloc2_1_0
   00A9 C0*09         [24]  868 	push	(_tdm_show_rssi_sloc2_1_0 + 1)
   00AB C0*0A         [24]  869 	push	_tdm_show_rssi_sloc3_1_0
   00AD C0*0B         [24]  870 	push	(_tdm_show_rssi_sloc3_1_0 + 1)
   00AF C0*0C         [24]  871 	push	_tdm_show_rssi_sloc4_1_0
   00B1 C0*0D         [24]  872 	push	(_tdm_show_rssi_sloc4_1_0 + 1)
   00B3 C0 02         [24]  873 	push	ar2
   00B5 C0 03         [24]  874 	push	ar3
   00B7 74r2C         [12]  875 	mov	a,#__str_1
   00B9 C0 E0         [24]  876 	push	acc
   00BB 74s00         [12]  877 	mov	a,#(__str_1 >> 8)
   00BD C0 E0         [24]  878 	push	acc
   00BF 74 80         [12]  879 	mov	a,#0x80
   00C1 C0 E0         [24]  880 	push	acc
   00C3 12r00r00      [24]  881 	lcall	_printfl
   00C6 E5 81         [12]  882 	mov	a,sp
   00C8 24 ED         [12]  883 	add	a,#0xed
   00CA F5 81         [12]  884 	mov	sp,a
                            885 ;	radio/tdm.c:169: statistics.receive_count = 0;
   00CC 78r02         [12]  886 	mov	r0,#(_statistics + 0x0002)
   00CE E4            [12]  887 	clr	a
   00CF F2            [24]  888 	movx	@r0,a
   00D0 08            [12]  889 	inc	r0
   00D1 F2            [24]  890 	movx	@r0,a
   00D2 22            [24]  891 	ret
                            892 ;------------------------------------------------------------
                            893 ;Allocation info for local variables in function 'display_test_output'
                            894 ;------------------------------------------------------------
                            895 ;	radio/tdm.c:175: display_test_output(void)
                            896 ;	-----------------------------------------
                            897 ;	 function display_test_output
                            898 ;	-----------------------------------------
   00D3                     899 _display_test_output:
                            900 ;	radio/tdm.c:177: if (test_display & AT_TEST_RSSI) {
   00D3 78r19         [12]  901 	mov	r0,#_test_display
   00D5 E2            [24]  902 	movx	a,@r0
   00D6 54 01         [12]  903 	anl	a,#0x01
   00D8 60 03         [24]  904 	jz	00103$
                            905 ;	radio/tdm.c:178: tdm_show_rssi();
   00DA 02r00r00      [24]  906 	ljmp	_tdm_show_rssi
   00DD                     907 00103$:
   00DD 22            [24]  908 	ret
                            909 ;------------------------------------------------------------
                            910 ;Allocation info for local variables in function 'flight_time_estimate'
                            911 ;------------------------------------------------------------
                            912 ;	radio/tdm.c:188: static uint16_t flight_time_estimate(__pdata uint8_t packet_len)
                            913 ;	-----------------------------------------
                            914 ;	 function flight_time_estimate
                            915 ;	-----------------------------------------
   00DE                     916 _flight_time_estimate:
   00DE AF 82         [24]  917 	mov	r7,dpl
                            918 ;	radio/tdm.c:190: return packet_latency + (packet_len * ticks_per_byte);
   00E0 7E 00         [12]  919 	mov	r6,#0x00
   00E2 78r0A         [12]  920 	mov	r0,#_ticks_per_byte
   00E4 90r00r00      [24]  921 	mov	dptr,#__mulint_PARM_2
   00E7 E2            [24]  922 	movx	a,@r0
   00E8 F0            [24]  923 	movx	@dptr,a
   00E9 08            [12]  924 	inc	r0
   00EA E2            [24]  925 	movx	a,@r0
   00EB A3            [24]  926 	inc	dptr
   00EC F0            [24]  927 	movx	@dptr,a
   00ED 8F 82         [24]  928 	mov	dpl,r7
   00EF 8E 83         [24]  929 	mov	dph,r6
   00F1 12r00r00      [24]  930 	lcall	__mulint
   00F4 AE 82         [24]  931 	mov	r6,dpl
   00F6 AF 83         [24]  932 	mov	r7,dph
   00F8 78r08         [12]  933 	mov	r0,#_packet_latency
   00FA E2            [24]  934 	movx	a,@r0
   00FB 2E            [12]  935 	add	a,r6
   00FC FE            [12]  936 	mov	r6,a
   00FD 08            [12]  937 	inc	r0
   00FE E2            [24]  938 	movx	a,@r0
   00FF 3F            [12]  939 	addc	a,r7
   0100 8E 82         [24]  940 	mov	dpl,r6
   0102 F5 83         [12]  941 	mov	dph,a
   0104 22            [24]  942 	ret
                            943 ;------------------------------------------------------------
                            944 ;Allocation info for local variables in function 'sync_tx_windows'
                            945 ;------------------------------------------------------------
                            946 ;old_state                 Allocated with name '_sync_tx_windows_old_state_1_155'
                            947 ;------------------------------------------------------------
                            948 ;	radio/tdm.c:204: sync_tx_windows(__pdata uint8_t packet_length)
                            949 ;	-----------------------------------------
                            950 ;	 function sync_tx_windows
                            951 ;	-----------------------------------------
   0105                     952 _sync_tx_windows:
   0105 AF 82         [24]  953 	mov	r7,dpl
                            954 ;	radio/tdm.c:206: __data enum tdm_state old_state = tdm_state;
   0107 78r00         [12]  955 	mov	r0,#_tdm_state
   0109 E2            [24]  956 	movx	a,@r0
   010A F5*0E         [12]  957 	mov	_sync_tx_windows_old_state_1_155,a
                            958 ;	radio/tdm.c:207: __pdata uint16_t old_remaining = tdm_state_remaining;
   010C 78r01         [12]  959 	mov	r0,#_tdm_state_remaining
   010E E2            [24]  960 	movx	a,@r0
   010F FC            [12]  961 	mov	r4,a
   0110 08            [12]  962 	inc	r0
   0111 E2            [24]  963 	movx	a,@r0
   0112 FD            [12]  964 	mov	r5,a
                            965 ;	radio/tdm.c:209: if (trailer.bonus) {
   0113 78r1B         [12]  966 	mov	r0,#(_trailer + 0x0001)
   0115 E2            [24]  967 	movx	a,@r0
   0116 30 E6 46      [24]  968 	jnb	acc.6,00109$
                            969 ;	radio/tdm.c:212: if (old_state == TDM_SILENCE1) {
   0119 74 01         [12]  970 	mov	a,#0x01
   011B B5*0E 10      [24]  971 	cjne	a,_sync_tx_windows_old_state_1_155,00106$
                            972 ;	radio/tdm.c:218: tdm_state_remaining = silence_period;
   011E 78r06         [12]  973 	mov	r0,#_silence_period
   0120 E2            [24]  974 	movx	a,@r0
   0121 FA            [12]  975 	mov	r2,a
   0122 08            [12]  976 	inc	r0
   0123 E2            [24]  977 	movx	a,@r0
   0124 FB            [12]  978 	mov	r3,a
   0125 78r01         [12]  979 	mov	r0,#_tdm_state_remaining
   0127 EA            [12]  980 	mov	a,r2
   0128 F2            [24]  981 	movx	@r0,a
   0129 08            [12]  982 	inc	r0
   012A EB            [12]  983 	mov	a,r3
   012B F2            [24]  984 	movx	@r0,a
   012C 80 46         [24]  985 	sjmp	00110$
   012E                     986 00106$:
                            987 ;	radio/tdm.c:219: } else if (old_state == TDM_RECEIVE || old_state == TDM_SILENCE2) {
   012E 74 02         [12]  988 	mov	a,#0x02
   0130 B5*0E 02      [24]  989 	cjne	a,_sync_tx_windows_old_state_1_155,00151$
   0133 80 05         [24]  990 	sjmp	00101$
   0135                     991 00151$:
   0135 74 03         [12]  992 	mov	a,#0x03
   0137 B5*0E 0F      [24]  993 	cjne	a,_sync_tx_windows_old_state_1_155,00102$
   013A                     994 00101$:
                            995 ;	radio/tdm.c:224: tdm_state = TDM_SILENCE2;
   013A 78r00         [12]  996 	mov	r0,#_tdm_state
   013C 74 03         [12]  997 	mov	a,#0x03
   013E F2            [24]  998 	movx	@r0,a
                            999 ;	radio/tdm.c:225: tdm_state_remaining = 1;
   013F 78r01         [12] 1000 	mov	r0,#_tdm_state_remaining
   0141 74 01         [12] 1001 	mov	a,#0x01
   0143 F2            [24] 1002 	movx	@r0,a
   0144 08            [12] 1003 	inc	r0
   0145 E4            [12] 1004 	clr	a
   0146 F2            [24] 1005 	movx	@r0,a
   0147 80 2B         [24] 1006 	sjmp	00110$
   0149                    1007 00102$:
                           1008 ;	radio/tdm.c:227: tdm_state = TDM_TRANSMIT;
   0149 78r00         [12] 1009 	mov	r0,#_tdm_state
   014B E4            [12] 1010 	clr	a
   014C F2            [24] 1011 	movx	@r0,a
                           1012 ;	radio/tdm.c:228: tdm_state_remaining = trailer.window;
   014D 78r1A         [12] 1013 	mov	r0,#_trailer
   014F E2            [24] 1014 	movx	a,@r0
   0150 FA            [12] 1015 	mov	r2,a
   0151 08            [12] 1016 	inc	r0
   0152 E2            [24] 1017 	movx	a,@r0
   0153 54 1F         [12] 1018 	anl	a,#0x1F
   0155 FB            [12] 1019 	mov	r3,a
   0156 78r01         [12] 1020 	mov	r0,#_tdm_state_remaining
   0158 EA            [12] 1021 	mov	a,r2
   0159 F2            [24] 1022 	movx	@r0,a
   015A 08            [12] 1023 	inc	r0
   015B EB            [12] 1024 	mov	a,r3
   015C F2            [24] 1025 	movx	@r0,a
   015D 80 15         [24] 1026 	sjmp	00110$
   015F                    1027 00109$:
                           1028 ;	radio/tdm.c:233: tdm_state = TDM_RECEIVE;
   015F 78r00         [12] 1029 	mov	r0,#_tdm_state
   0161 74 02         [12] 1030 	mov	a,#0x02
   0163 F2            [24] 1031 	movx	@r0,a
                           1032 ;	radio/tdm.c:234: tdm_state_remaining = trailer.window;
   0164 78r1A         [12] 1033 	mov	r0,#_trailer
   0166 E2            [24] 1034 	movx	a,@r0
   0167 FA            [12] 1035 	mov	r2,a
   0168 08            [12] 1036 	inc	r0
   0169 E2            [24] 1037 	movx	a,@r0
   016A 54 1F         [12] 1038 	anl	a,#0x1F
   016C FB            [12] 1039 	mov	r3,a
   016D 78r01         [12] 1040 	mov	r0,#_tdm_state_remaining
   016F EA            [12] 1041 	mov	a,r2
   0170 F2            [24] 1042 	movx	@r0,a
   0171 08            [12] 1043 	inc	r0
   0172 EB            [12] 1044 	mov	a,r3
   0173 F2            [24] 1045 	movx	@r0,a
   0174                    1046 00110$:
                           1047 ;	radio/tdm.c:239: bonus_transmit = (tdm_state == TDM_RECEIVE && packet_length==0);
   0174 78r00         [12] 1048 	mov	r0,#_tdm_state
   0176 E2            [24] 1049 	movx	a,@r0
   0177 B4 02 08      [24] 1050 	cjne	a,#0x02,00121$
   017A EF            [12] 1051 	mov	a,r7
   017B B4 01 00      [24] 1052 	cjne	a,#0x01,00156$
   017E                    1053 00156$:
   017E 92*07         [24] 1054 	mov	_sync_tx_windows_sloc0_1_0,c
   0180 40 04         [24] 1055 	jc	00122$
   0182                    1056 00121$:
   0182 C2*07         [12] 1057 	clr	_sync_tx_windows_sloc0_1_0
   0184 80 02         [24] 1058 	sjmp	00123$
   0186                    1059 00122$:
   0186 D2*07         [12] 1060 	setb	_sync_tx_windows_sloc0_1_0
   0188                    1061 00123$:
   0188 A2*07         [12] 1062 	mov	c,_sync_tx_windows_sloc0_1_0
   018A 92*00         [24] 1063 	mov	_bonus_transmit,c
                           1064 ;	radio/tdm.c:242: if (tdm_state != TDM_TRANSMIT) {
   018C 78r00         [12] 1065 	mov	r0,#_tdm_state
   018E E2            [24] 1066 	movx	a,@r0
   018F 60 02         [24] 1067 	jz	00112$
                           1068 ;	radio/tdm.c:243: transmit_yield = 0;
   0191 C2*01         [12] 1069 	clr	_transmit_yield
   0193                    1070 00112$:
                           1071 ;	radio/tdm.c:246: if (at_testmode & AT_TEST_TDM) {
   0193 78r00         [12] 1072 	mov	r0,#_at_testmode
   0195 E2            [24] 1073 	movx	a,@r0
   0196 54 02         [12] 1074 	anl	a,#0x02
   0198 70 01         [24] 1075 	jnz	00159$
   019A 22            [24] 1076 	ret
   019B                    1077 00159$:
                           1078 ;	radio/tdm.c:248: delta = old_remaining - tdm_state_remaining;
   019B 78r01         [12] 1079 	mov	r0,#_tdm_state_remaining
   019D 79r2D         [12] 1080 	mov	r1,#_sync_tx_windows_delta_2_162
   019F D3            [12] 1081 	setb	c
   01A0 E2            [24] 1082 	movx	a,@r0
   01A1 9C            [12] 1083 	subb	a,r4
   01A2 F4            [12] 1084 	cpl	a
   01A3 B3            [12] 1085 	cpl	c
   01A4 F3            [24] 1086 	movx	@r1,a
   01A5 B3            [12] 1087 	cpl	c
   01A6 08            [12] 1088 	inc	r0
   01A7 E2            [24] 1089 	movx	a,@r0
   01A8 9D            [12] 1090 	subb	a,r5
   01A9 F4            [12] 1091 	cpl	a
   01AA 09            [12] 1092 	inc	r1
   01AB F3            [24] 1093 	movx	@r1,a
                           1094 ;	radio/tdm.c:249: if (old_state != tdm_state ||
   01AC 78r00         [12] 1095 	mov	r0,#_tdm_state
   01AE E2            [24] 1096 	movx	a,@r0
   01AF B5*0E 6E      [24] 1097 	cjne	a,_sync_tx_windows_old_state_1_155,00113$
                           1098 ;	radio/tdm.c:250: delta > (int16_t)packet_latency/2 ||
   01B2 C0 07         [24] 1099 	push	ar7
   01B4 78r08         [12] 1100 	mov	r0,#_packet_latency
   01B6 E2            [24] 1101 	movx	a,@r0
   01B7 FA            [12] 1102 	mov	r2,a
   01B8 08            [12] 1103 	inc	r0
   01B9 E2            [24] 1104 	movx	a,@r0
   01BA FB            [12] 1105 	mov	r3,a
   01BB 90r00r00      [24] 1106 	mov	dptr,#__divsint_PARM_2
   01BE 74 02         [12] 1107 	mov	a,#0x02
   01C0 F0            [24] 1108 	movx	@dptr,a
   01C1 E4            [12] 1109 	clr	a
   01C2 A3            [24] 1110 	inc	dptr
   01C3 F0            [24] 1111 	movx	@dptr,a
   01C4 8A 82         [24] 1112 	mov	dpl,r2
   01C6 8B 83         [24] 1113 	mov	dph,r3
   01C8 C0 03         [24] 1114 	push	ar3
   01CA C0 02         [24] 1115 	push	ar2
   01CC 12r00r00      [24] 1116 	lcall	__divsint
   01CF AE 82         [24] 1117 	mov	r6,dpl
   01D1 AF 83         [24] 1118 	mov	r7,dph
   01D3 D0 02         [24] 1119 	pop	ar2
   01D5 D0 03         [24] 1120 	pop	ar3
   01D7 78r2D         [12] 1121 	mov	r0,#_sync_tx_windows_delta_2_162
   01D9 C3            [12] 1122 	clr	c
   01DA E2            [24] 1123 	movx	a,@r0
   01DB F5 F0         [12] 1124 	mov	b,a
   01DD EE            [12] 1125 	mov	a,r6
   01DE 95 F0         [12] 1126 	subb	a,b
   01E0 08            [12] 1127 	inc	r0
   01E1 E2            [24] 1128 	movx	a,@r0
   01E2 F5 F0         [12] 1129 	mov	b,a
   01E4 EF            [12] 1130 	mov	a,r7
   01E5 64 80         [12] 1131 	xrl	a,#0x80
   01E7 63 F0 80      [24] 1132 	xrl	b,#0x80
   01EA 95 F0         [12] 1133 	subb	a,b
   01EC D0 07         [24] 1134 	pop	ar7
                           1135 ;	radio/tdm.c:251: delta < -(int16_t)packet_latency/2) {
   01EE 40 30         [24] 1136 	jc	00113$
   01F0 E4            [12] 1137 	clr	a
   01F1 9A            [12] 1138 	subb	a,r2
   01F2 FA            [12] 1139 	mov	r2,a
   01F3 E4            [12] 1140 	clr	a
   01F4 9B            [12] 1141 	subb	a,r3
   01F5 FB            [12] 1142 	mov	r3,a
   01F6 90r00r00      [24] 1143 	mov	dptr,#__divsint_PARM_2
   01F9 74 02         [12] 1144 	mov	a,#0x02
   01FB F0            [24] 1145 	movx	@dptr,a
   01FC E4            [12] 1146 	clr	a
   01FD A3            [24] 1147 	inc	dptr
   01FE F0            [24] 1148 	movx	@dptr,a
   01FF 8A 82         [24] 1149 	mov	dpl,r2
   0201 8B 83         [24] 1150 	mov	dph,r3
   0203 C0 07         [24] 1151 	push	ar7
   0205 12r00r00      [24] 1152 	lcall	__divsint
   0208 AB 82         [24] 1153 	mov	r3,dpl
   020A AE 83         [24] 1154 	mov	r6,dph
   020C D0 07         [24] 1155 	pop	ar7
   020E 78r2D         [12] 1156 	mov	r0,#_sync_tx_windows_delta_2_162
   0210 C3            [12] 1157 	clr	c
   0211 E2            [24] 1158 	movx	a,@r0
   0212 9B            [12] 1159 	subb	a,r3
   0213 08            [12] 1160 	inc	r0
   0214 E2            [24] 1161 	movx	a,@r0
   0215 64 80         [12] 1162 	xrl	a,#0x80
   0217 8E F0         [24] 1163 	mov	b,r6
   0219 63 F0 80      [24] 1164 	xrl	b,#0x80
   021C 95 F0         [12] 1165 	subb	a,b
   021E 50 4B         [24] 1166 	jnc	00119$
   0220                    1167 00113$:
                           1168 ;	radio/tdm.c:252: printf("TDM: %u/%u len=%u ",
   0220 7E 00         [12] 1169 	mov	r6,#0x00
   0222 78r00         [12] 1170 	mov	r0,#_tdm_state
   0224 E2            [24] 1171 	movx	a,@r0
   0225 FA            [12] 1172 	mov	r2,a
   0226 7B 00         [12] 1173 	mov	r3,#0x00
   0228 AC*0E         [24] 1174 	mov	r4,_sync_tx_windows_old_state_1_155
   022A 7D 00         [12] 1175 	mov	r5,#0x00
   022C C0 07         [24] 1176 	push	ar7
   022E C0 06         [24] 1177 	push	ar6
   0230 C0 02         [24] 1178 	push	ar2
   0232 C0 03         [24] 1179 	push	ar3
   0234 C0 04         [24] 1180 	push	ar4
   0236 C0 05         [24] 1181 	push	ar5
   0238 74r63         [12] 1182 	mov	a,#__str_2
   023A C0 E0         [24] 1183 	push	acc
   023C 74s00         [12] 1184 	mov	a,#(__str_2 >> 8)
   023E C0 E0         [24] 1185 	push	acc
   0240 74 80         [12] 1186 	mov	a,#0x80
   0242 C0 E0         [24] 1187 	push	acc
   0244 12r00r00      [24] 1188 	lcall	_printfl
   0247 E5 81         [12] 1189 	mov	a,sp
   0249 24 F7         [12] 1190 	add	a,#0xf7
   024B F5 81         [12] 1191 	mov	sp,a
                           1192 ;	radio/tdm.c:256: printf(" delta: %d\n",
   024D 78r2D         [12] 1193 	mov	r0,#_sync_tx_windows_delta_2_162
   024F E2            [24] 1194 	movx	a,@r0
   0250 C0 E0         [24] 1195 	push	acc
   0252 08            [12] 1196 	inc	r0
   0253 E2            [24] 1197 	movx	a,@r0
   0254 C0 E0         [24] 1198 	push	acc
   0256 74r76         [12] 1199 	mov	a,#__str_3
   0258 C0 E0         [24] 1200 	push	acc
   025A 74s00         [12] 1201 	mov	a,#(__str_3 >> 8)
   025C C0 E0         [24] 1202 	push	acc
   025E 74 80         [12] 1203 	mov	a,#0x80
   0260 C0 E0         [24] 1204 	push	acc
   0262 12r00r00      [24] 1205 	lcall	_printfl
   0265 E5 81         [12] 1206 	mov	a,sp
   0267 24 FB         [12] 1207 	add	a,#0xfb
   0269 F5 81         [12] 1208 	mov	sp,a
   026B                    1209 00119$:
   026B 22            [24] 1210 	ret
                           1211 ;------------------------------------------------------------
                           1212 ;Allocation info for local variables in function 'tdm_state_update'
                           1213 ;------------------------------------------------------------
                           1214 ;sloc0                     Allocated with name '_tdm_state_update_sloc0_1_0'
                           1215 ;sloc1                     Allocated with name '_tdm_state_update_sloc1_1_0'
                           1216 ;sloc2                     Allocated with name '_tdm_state_update_sloc2_1_0'
                           1217 ;------------------------------------------------------------
                           1218 ;	radio/tdm.c:265: tdm_state_update(__pdata uint16_t tdelta)
                           1219 ;	-----------------------------------------
                           1220 ;	 function tdm_state_update
                           1221 ;	-----------------------------------------
   026C                    1222 _tdm_state_update:
   026C AE 82         [24] 1223 	mov	r6,dpl
   026E AF 83         [24] 1224 	mov	r7,dph
                           1225 ;	radio/tdm.c:269: if (tdelta > transmit_wait) {
   0270 78r0C         [12] 1226 	mov	r0,#_transmit_wait
   0272 C3            [12] 1227 	clr	c
   0273 E2            [24] 1228 	movx	a,@r0
   0274 9E            [12] 1229 	subb	a,r6
   0275 08            [12] 1230 	inc	r0
   0276 E2            [24] 1231 	movx	a,@r0
   0277 9F            [12] 1232 	subb	a,r7
   0278 50 08         [24] 1233 	jnc	00102$
                           1234 ;	radio/tdm.c:270: transmit_wait = 0;
   027A 78r0C         [12] 1235 	mov	r0,#_transmit_wait
   027C E4            [12] 1236 	clr	a
   027D F2            [24] 1237 	movx	@r0,a
   027E 08            [12] 1238 	inc	r0
   027F F2            [24] 1239 	movx	@r0,a
   0280 80 0A         [24] 1240 	sjmp	00116$
   0282                    1241 00102$:
                           1242 ;	radio/tdm.c:272: transmit_wait -= tdelta;
   0282 78r0C         [12] 1243 	mov	r0,#_transmit_wait
   0284 E2            [24] 1244 	movx	a,@r0
   0285 C3            [12] 1245 	clr	c
   0286 9E            [12] 1246 	subb	a,r6
   0287 F2            [24] 1247 	movx	@r0,a
   0288 08            [12] 1248 	inc	r0
   0289 E2            [24] 1249 	movx	a,@r0
   028A 9F            [12] 1250 	subb	a,r7
   028B F2            [24] 1251 	movx	@r0,a
                           1252 ;	radio/tdm.c:276: while (tdelta >= tdm_state_remaining) {
   028C                    1253 00116$:
   028C 78r01         [12] 1254 	mov	r0,#_tdm_state_remaining
   028E C3            [12] 1255 	clr	c
   028F E2            [24] 1256 	movx	a,@r0
   0290 F5 F0         [12] 1257 	mov	b,a
   0292 EE            [12] 1258 	mov	a,r6
   0293 95 F0         [12] 1259 	subb	a,b
   0295 08            [12] 1260 	inc	r0
   0296 E2            [24] 1261 	movx	a,@r0
   0297 F5 F0         [12] 1262 	mov	b,a
   0299 EF            [12] 1263 	mov	a,r7
   029A 95 F0         [12] 1264 	subb	a,b
   029C 50 03         [24] 1265 	jnc	00146$
   029E 02r04rD3      [24] 1266 	ljmp	00118$
   02A1                    1267 00146$:
                           1268 ;	radio/tdm.c:278: tdm_state = (tdm_state+1) % 4;
   02A1 78r00         [12] 1269 	mov	r0,#_tdm_state
   02A3 E2            [24] 1270 	movx	a,@r0
   02A4 FC            [12] 1271 	mov	r4,a
   02A5 7D 00         [12] 1272 	mov	r5,#0x00
   02A7 0C            [12] 1273 	inc	r4
   02A8 BC 00 01      [24] 1274 	cjne	r4,#0x00,00147$
   02AB 0D            [12] 1275 	inc	r5
   02AC                    1276 00147$:
   02AC 90r00r00      [24] 1277 	mov	dptr,#__modsint_PARM_2
   02AF 74 04         [12] 1278 	mov	a,#0x04
   02B1 F0            [24] 1279 	movx	@dptr,a
   02B2 E4            [12] 1280 	clr	a
   02B3 A3            [24] 1281 	inc	dptr
   02B4 F0            [24] 1282 	movx	@dptr,a
   02B5 8C 82         [24] 1283 	mov	dpl,r4
   02B7 8D 83         [24] 1284 	mov	dph,r5
   02B9 C0 07         [24] 1285 	push	ar7
   02BB C0 06         [24] 1286 	push	ar6
   02BD 12r00r00      [24] 1287 	lcall	__modsint
   02C0 AC 82         [24] 1288 	mov	r4,dpl
   02C2 AD 83         [24] 1289 	mov	r5,dph
   02C4 D0 06         [24] 1290 	pop	ar6
   02C6 D0 07         [24] 1291 	pop	ar7
   02C8 78r00         [12] 1292 	mov	r0,#_tdm_state
   02CA EC            [12] 1293 	mov	a,r4
   02CB F2            [24] 1294 	movx	@r0,a
                           1295 ;	radio/tdm.c:281: tdelta -= tdm_state_remaining;
   02CC 78r01         [12] 1296 	mov	r0,#_tdm_state_remaining
   02CE D3            [12] 1297 	setb	c
   02CF E2            [24] 1298 	movx	a,@r0
   02D0 9E            [12] 1299 	subb	a,r6
   02D1 F4            [12] 1300 	cpl	a
   02D2 B3            [12] 1301 	cpl	c
   02D3 FE            [12] 1302 	mov	r6,a
   02D4 B3            [12] 1303 	cpl	c
   02D5 08            [12] 1304 	inc	r0
   02D6 E2            [24] 1305 	movx	a,@r0
   02D7 9F            [12] 1306 	subb	a,r7
   02D8 F4            [12] 1307 	cpl	a
   02D9 FF            [12] 1308 	mov	r7,a
                           1309 ;	radio/tdm.c:283: if (tdm_state == TDM_TRANSMIT || tdm_state == TDM_RECEIVE) {
   02DA 78r00         [12] 1310 	mov	r0,#_tdm_state
   02DC E2            [24] 1311 	movx	a,@r0
   02DD 60 06         [24] 1312 	jz	00104$
   02DF 78r00         [12] 1313 	mov	r0,#_tdm_state
   02E1 E2            [24] 1314 	movx	a,@r0
   02E2 B4 02 10      [24] 1315 	cjne	a,#0x02,00105$
   02E5                    1316 00104$:
                           1317 ;	radio/tdm.c:284: tdm_state_remaining = tx_window_width;
   02E5 78r03         [12] 1318 	mov	r0,#_tx_window_width
   02E7 E2            [24] 1319 	movx	a,@r0
   02E8 FC            [12] 1320 	mov	r4,a
   02E9 08            [12] 1321 	inc	r0
   02EA E2            [24] 1322 	movx	a,@r0
   02EB FD            [12] 1323 	mov	r5,a
   02EC 78r01         [12] 1324 	mov	r0,#_tdm_state_remaining
   02EE EC            [12] 1325 	mov	a,r4
   02EF F2            [24] 1326 	movx	@r0,a
   02F0 08            [12] 1327 	inc	r0
   02F1 ED            [12] 1328 	mov	a,r5
   02F2 F2            [24] 1329 	movx	@r0,a
   02F3 80 0E         [24] 1330 	sjmp	00106$
   02F5                    1331 00105$:
                           1332 ;	radio/tdm.c:286: tdm_state_remaining = silence_period;
   02F5 78r06         [12] 1333 	mov	r0,#_silence_period
   02F7 E2            [24] 1334 	movx	a,@r0
   02F8 FC            [12] 1335 	mov	r4,a
   02F9 08            [12] 1336 	inc	r0
   02FA E2            [24] 1337 	movx	a,@r0
   02FB FD            [12] 1338 	mov	r5,a
   02FC 78r01         [12] 1339 	mov	r0,#_tdm_state_remaining
   02FE EC            [12] 1340 	mov	a,r4
   02FF F2            [24] 1341 	movx	@r0,a
   0300 08            [12] 1342 	inc	r0
   0301 ED            [12] 1343 	mov	a,r5
   0302 F2            [24] 1344 	movx	@r0,a
   0303                    1345 00106$:
                           1346 ;	radio/tdm.c:292: if (tdm_state == TDM_TRANSMIT || tdm_state == TDM_SILENCE1) {
   0303 78r00         [12] 1347 	mov	r0,#_tdm_state
   0305 E2            [24] 1348 	movx	a,@r0
   0306 60 06         [24] 1349 	jz	00110$
   0308 78r00         [12] 1350 	mov	r0,#_tdm_state
   030A E2            [24] 1351 	movx	a,@r0
   030B B4 01 26      [24] 1352 	cjne	a,#0x01,00111$
   030E                    1353 00110$:
                           1354 ;	radio/tdm.c:293: fhop_window_change();
   030E C0 07         [24] 1355 	push	ar7
   0310 C0 06         [24] 1356 	push	ar6
   0312 12r00r00      [24] 1357 	lcall	_fhop_window_change
                           1358 ;	radio/tdm.c:294: radio_receiver_on();
   0315 12r00r00      [24] 1359 	lcall	_radio_receiver_on
   0318 D0 06         [24] 1360 	pop	ar6
   031A D0 07         [24] 1361 	pop	ar7
                           1362 ;	radio/tdm.c:296: if (num_fh_channels > 1) {
   031C 78r00         [12] 1363 	mov	r0,#_num_fh_channels
   031E C3            [12] 1364 	clr	c
   031F E2            [24] 1365 	movx	a,@r0
   0320 F5 F0         [12] 1366 	mov	b,a
   0322 74 01         [12] 1367 	mov	a,#0x01
   0324 95 F0         [12] 1368 	subb	a,b
   0326 50 0C         [24] 1369 	jnc	00111$
                           1370 ;	radio/tdm.c:298: lbt_listen_time = 0;
   0328 78r13         [12] 1371 	mov	r0,#_lbt_listen_time
   032A E4            [12] 1372 	clr	a
   032B F2            [24] 1373 	movx	@r0,a
   032C 08            [12] 1374 	inc	r0
   032D F2            [24] 1375 	movx	@r0,a
                           1376 ;	radio/tdm.c:299: lbt_rand = 0;
   032E 78r17         [12] 1377 	mov	r0,#_lbt_rand
   0330 E4            [12] 1378 	clr	a
   0331 F2            [24] 1379 	movx	@r0,a
   0332 08            [12] 1380 	inc	r0
   0333 F2            [24] 1381 	movx	@r0,a
   0334                    1382 00111$:
                           1383 ;	radio/tdm.c:303: if (tdm_state == TDM_TRANSMIT && (duty_cycle - duty_cycle_offset) != 100) {
   0334 78r00         [12] 1384 	mov	r0,#_tdm_state
   0336 E2            [24] 1385 	movx	a,@r0
   0337 60 03         [24] 1386 	jz	00155$
   0339 02r04rC6      [24] 1387 	ljmp	00114$
   033C                    1388 00155$:
   033C C0 06         [24] 1389 	push	ar6
   033E C0 07         [24] 1390 	push	ar7
   0340 78r0E         [12] 1391 	mov	r0,#_duty_cycle
   0342 E2            [24] 1392 	movx	a,@r0
   0343 FC            [12] 1393 	mov	r4,a
   0344 7D 00         [12] 1394 	mov	r5,#0x00
   0346 78r0F         [12] 1395 	mov	r0,#_duty_cycle_offset
   0348 E2            [24] 1396 	movx	a,@r0
   0349 F5*0F         [12] 1397 	mov	_tdm_state_update_sloc0_1_0,a
   034B 75*10 00      [24] 1398 	mov	(_tdm_state_update_sloc0_1_0 + 1),#0x00
   034E EC            [12] 1399 	mov	a,r4
   034F C3            [12] 1400 	clr	c
   0350 95*0F         [12] 1401 	subb	a,_tdm_state_update_sloc0_1_0
   0352 FE            [12] 1402 	mov	r6,a
   0353 ED            [12] 1403 	mov	a,r5
   0354 95*10         [12] 1404 	subb	a,(_tdm_state_update_sloc0_1_0 + 1)
   0356 FF            [12] 1405 	mov	r7,a
   0357 BE 64 0A      [24] 1406 	cjne	r6,#0x64,00156$
   035A BF 00 07      [24] 1407 	cjne	r7,#0x00,00156$
   035D D0 07         [24] 1408 	pop	ar7
   035F D0 06         [24] 1409 	pop	ar6
   0361 02r04rC6      [24] 1410 	ljmp	00114$
   0364                    1411 00156$:
   0364 D0 07         [24] 1412 	pop	ar7
   0366 D0 06         [24] 1413 	pop	ar6
                           1414 ;	radio/tdm.c:305: average_duty_cycle = (0.95*average_duty_cycle) + (0.05*(100.0*transmitted_ticks)/(2*(silence_period+tx_window_width)));
   0368 C0 06         [24] 1415 	push	ar6
   036A C0 07         [24] 1416 	push	ar7
   036C C0 07         [24] 1417 	push	ar7
   036E C0 06         [24] 1418 	push	ar6
   0370 C0 05         [24] 1419 	push	ar5
   0372 C0 04         [24] 1420 	push	ar4
   0374 C0*00         [24] 1421 	push	_average_duty_cycle
   0376 C0*01         [24] 1422 	push	(_average_duty_cycle + 1)
   0378 C0*02         [24] 1423 	push	(_average_duty_cycle + 2)
   037A C0*03         [24] 1424 	push	(_average_duty_cycle + 3)
   037C 90 33 33      [24] 1425 	mov	dptr,#0x3333
   037F 75 F0 73      [24] 1426 	mov	b,#0x73
   0382 74 3F         [12] 1427 	mov	a,#0x3F
   0384 12r00r00      [24] 1428 	lcall	___fsmul
   0387 85 82*11      [24] 1429 	mov	_tdm_state_update_sloc1_1_0,dpl
   038A 85 83*12      [24] 1430 	mov	(_tdm_state_update_sloc1_1_0 + 1),dph
   038D 85 F0*13      [24] 1431 	mov	(_tdm_state_update_sloc1_1_0 + 2),b
   0390 F5*14         [12] 1432 	mov	(_tdm_state_update_sloc1_1_0 + 3),a
   0392 E5 81         [12] 1433 	mov	a,sp
   0394 24 FC         [12] 1434 	add	a,#0xfc
   0396 F5 81         [12] 1435 	mov	sp,a
   0398 D0 04         [24] 1436 	pop	ar4
   039A D0 05         [24] 1437 	pop	ar5
   039C D0 06         [24] 1438 	pop	ar6
   039E D0 07         [24] 1439 	pop	ar7
   03A0 78r10         [12] 1440 	mov	r0,#_transmitted_ticks
   03A2 E2            [24] 1441 	movx	a,@r0
   03A3 F5 82         [12] 1442 	mov	dpl,a
   03A5 08            [12] 1443 	inc	r0
   03A6 E2            [24] 1444 	movx	a,@r0
   03A7 F5 83         [12] 1445 	mov	dph,a
   03A9 C0 05         [24] 1446 	push	ar5
   03AB C0 04         [24] 1447 	push	ar4
   03AD 12r00r00      [24] 1448 	lcall	___uint2fs
   03B0 AA 82         [24] 1449 	mov	r2,dpl
   03B2 AB 83         [24] 1450 	mov	r3,dph
   03B4 AE F0         [24] 1451 	mov	r6,b
   03B6 FF            [12] 1452 	mov	r7,a
   03B7 D0 04         [24] 1453 	pop	ar4
   03B9 D0 05         [24] 1454 	pop	ar5
   03BB C0 07         [24] 1455 	push	ar7
   03BD C0 06         [24] 1456 	push	ar6
   03BF C0 05         [24] 1457 	push	ar5
   03C1 C0 04         [24] 1458 	push	ar4
   03C3 C0 02         [24] 1459 	push	ar2
   03C5 C0 03         [24] 1460 	push	ar3
   03C7 C0 06         [24] 1461 	push	ar6
   03C9 C0 07         [24] 1462 	push	ar7
   03CB 90 00 00      [24] 1463 	mov	dptr,#0x0000
   03CE 75 F0 A0      [24] 1464 	mov	b,#0xA0
   03D1 74 40         [12] 1465 	mov	a,#0x40
   03D3 12r00r00      [24] 1466 	lcall	___fsmul
   03D6 85 82*15      [24] 1467 	mov	_tdm_state_update_sloc2_1_0,dpl
   03D9 85 83*16      [24] 1468 	mov	(_tdm_state_update_sloc2_1_0 + 1),dph
   03DC 85 F0*17      [24] 1469 	mov	(_tdm_state_update_sloc2_1_0 + 2),b
   03DF F5*18         [12] 1470 	mov	(_tdm_state_update_sloc2_1_0 + 3),a
   03E1 E5 81         [12] 1471 	mov	a,sp
   03E3 24 FC         [12] 1472 	add	a,#0xfc
   03E5 F5 81         [12] 1473 	mov	sp,a
   03E7 D0 04         [24] 1474 	pop	ar4
   03E9 D0 05         [24] 1475 	pop	ar5
   03EB D0 06         [24] 1476 	pop	ar6
   03ED D0 07         [24] 1477 	pop	ar7
   03EF 78r06         [12] 1478 	mov	r0,#_silence_period
   03F1 79r03         [12] 1479 	mov	r1,#_tx_window_width
   03F3 E3            [24] 1480 	movx	a,@r1
   03F4 C5 F0         [12] 1481 	xch	a,b
   03F6 E2            [24] 1482 	movx	a,@r0
   03F7 25 F0         [12] 1483 	add	a,b
   03F9 FE            [12] 1484 	mov	r6,a
   03FA 09            [12] 1485 	inc	r1
   03FB E3            [24] 1486 	movx	a,@r1
   03FC C5 F0         [12] 1487 	xch	a,b
   03FE 08            [12] 1488 	inc	r0
   03FF E2            [24] 1489 	movx	a,@r0
   0400 35 F0         [12] 1490 	addc	a,b
   0402 CE            [12] 1491 	xch	a,r6
   0403 25 E0         [12] 1492 	add	a,acc
   0405 CE            [12] 1493 	xch	a,r6
   0406 33            [12] 1494 	rlc	a
   0407 FF            [12] 1495 	mov	r7,a
   0408 8E 82         [24] 1496 	mov	dpl,r6
   040A 8F 83         [24] 1497 	mov	dph,r7
   040C C0 05         [24] 1498 	push	ar5
   040E C0 04         [24] 1499 	push	ar4
   0410 12r00r00      [24] 1500 	lcall	___uint2fs
   0413 AA 82         [24] 1501 	mov	r2,dpl
   0415 AB 83         [24] 1502 	mov	r3,dph
   0417 AE F0         [24] 1503 	mov	r6,b
   0419 FF            [12] 1504 	mov	r7,a
   041A C0 02         [24] 1505 	push	ar2
   041C C0 03         [24] 1506 	push	ar3
   041E C0 06         [24] 1507 	push	ar6
   0420 C0 07         [24] 1508 	push	ar7
   0422 85*15 82      [24] 1509 	mov	dpl,_tdm_state_update_sloc2_1_0
   0425 85*16 83      [24] 1510 	mov	dph,(_tdm_state_update_sloc2_1_0 + 1)
   0428 85*17 F0      [24] 1511 	mov	b,(_tdm_state_update_sloc2_1_0 + 2)
   042B E5*18         [12] 1512 	mov	a,(_tdm_state_update_sloc2_1_0 + 3)
   042D 12r00r00      [24] 1513 	lcall	___fsdiv
   0430 AA 82         [24] 1514 	mov	r2,dpl
   0432 AB 83         [24] 1515 	mov	r3,dph
   0434 AE F0         [24] 1516 	mov	r6,b
   0436 FF            [12] 1517 	mov	r7,a
   0437 E5 81         [12] 1518 	mov	a,sp
   0439 24 FC         [12] 1519 	add	a,#0xfc
   043B F5 81         [12] 1520 	mov	sp,a
   043D D0 04         [24] 1521 	pop	ar4
   043F D0 05         [24] 1522 	pop	ar5
   0441 C0 07         [24] 1523 	push	ar7
   0443 C0 06         [24] 1524 	push	ar6
   0445 C0 05         [24] 1525 	push	ar5
   0447 C0 04         [24] 1526 	push	ar4
   0449 C0 02         [24] 1527 	push	ar2
   044B C0 03         [24] 1528 	push	ar3
   044D C0 06         [24] 1529 	push	ar6
   044F C0 07         [24] 1530 	push	ar7
   0451 85*11 82      [24] 1531 	mov	dpl,_tdm_state_update_sloc1_1_0
   0454 85*12 83      [24] 1532 	mov	dph,(_tdm_state_update_sloc1_1_0 + 1)
   0457 85*13 F0      [24] 1533 	mov	b,(_tdm_state_update_sloc1_1_0 + 2)
   045A E5*14         [12] 1534 	mov	a,(_tdm_state_update_sloc1_1_0 + 3)
   045C 12r00r00      [24] 1535 	lcall	___fsadd
   045F 85 82*00      [24] 1536 	mov	_average_duty_cycle,dpl
   0462 85 83*01      [24] 1537 	mov	(_average_duty_cycle + 1),dph
   0465 85 F0*02      [24] 1538 	mov	(_average_duty_cycle + 2),b
   0468 F5*03         [12] 1539 	mov	(_average_duty_cycle + 3),a
   046A E5 81         [12] 1540 	mov	a,sp
   046C 24 FC         [12] 1541 	add	a,#0xfc
   046E F5 81         [12] 1542 	mov	sp,a
   0470 D0 04         [24] 1543 	pop	ar4
   0472 D0 05         [24] 1544 	pop	ar5
   0474 D0 06         [24] 1545 	pop	ar6
   0476 D0 07         [24] 1546 	pop	ar7
                           1547 ;	radio/tdm.c:306: transmitted_ticks = 0;
   0478 78r10         [12] 1548 	mov	r0,#_transmitted_ticks
   047A E4            [12] 1549 	clr	a
   047B F2            [24] 1550 	movx	@r0,a
   047C 08            [12] 1551 	inc	r0
   047D F2            [24] 1552 	movx	@r0,a
                           1553 ;	radio/tdm.c:307: duty_cycle_wait = (average_duty_cycle >= (duty_cycle - duty_cycle_offset));
   047E EC            [12] 1554 	mov	a,r4
   047F C3            [12] 1555 	clr	c
   0480 95*0F         [12] 1556 	subb	a,_tdm_state_update_sloc0_1_0
   0482 FC            [12] 1557 	mov	r4,a
   0483 ED            [12] 1558 	mov	a,r5
   0484 95*10         [12] 1559 	subb	a,(_tdm_state_update_sloc0_1_0 + 1)
   0486 FD            [12] 1560 	mov	r5,a
   0487 8C 82         [24] 1561 	mov	dpl,r4
   0489 8D 83         [24] 1562 	mov	dph,r5
   048B 12r00r00      [24] 1563 	lcall	___sint2fs
   048E AC 82         [24] 1564 	mov	r4,dpl
   0490 AD 83         [24] 1565 	mov	r5,dph
   0492 AE F0         [24] 1566 	mov	r6,b
   0494 FF            [12] 1567 	mov	r7,a
   0495 C0 07         [24] 1568 	push	ar7
   0497 C0 06         [24] 1569 	push	ar6
   0499 C0 04         [24] 1570 	push	ar4
   049B C0 05         [24] 1571 	push	ar5
   049D C0 06         [24] 1572 	push	ar6
   049F C0 07         [24] 1573 	push	ar7
   04A1 85*00 82      [24] 1574 	mov	dpl,_average_duty_cycle
   04A4 85*01 83      [24] 1575 	mov	dph,(_average_duty_cycle + 1)
   04A7 85*02 F0      [24] 1576 	mov	b,(_average_duty_cycle + 2)
   04AA E5*03         [12] 1577 	mov	a,(_average_duty_cycle + 3)
   04AC 12r00r00      [24] 1578 	lcall	___fslt
   04AF E5 81         [12] 1579 	mov	a,sp
   04B1 24 FC         [12] 1580 	add	a,#0xfc
   04B3 F5 81         [12] 1581 	mov	sp,a
   04B5 D0 06         [24] 1582 	pop	ar6
   04B7 D0 07         [24] 1583 	pop	ar7
   04B9 E5 82         [12] 1584 	mov	a,dpl
   04BB 24 FF         [12] 1585 	add	a,#0xFF
   04BD 92*08         [24] 1586 	mov  _tdm_state_update_sloc3_1_0,c
   04BF B3            [12] 1587 	cpl	c
   04C0 92*04         [24] 1588 	mov	_duty_cycle_wait,c
                           1589 ;	radio/tdm.c:320: tdm_state_remaining -= tdelta;
   04C2 D0 07         [24] 1590 	pop	ar7
   04C4 D0 06         [24] 1591 	pop	ar6
                           1592 ;	radio/tdm.c:307: duty_cycle_wait = (average_duty_cycle >= (duty_cycle - duty_cycle_offset));
   04C6                    1593 00114$:
                           1594 ;	radio/tdm.c:311: bonus_transmit = 0;
   04C6 C2*00         [12] 1595 	clr	_bonus_transmit
                           1596 ;	radio/tdm.c:314: transmit_yield = 0;
   04C8 C2*01         [12] 1597 	clr	_transmit_yield
                           1598 ;	radio/tdm.c:317: transmit_wait = 0;
   04CA 78r0C         [12] 1599 	mov	r0,#_transmit_wait
   04CC E4            [12] 1600 	clr	a
   04CD F2            [24] 1601 	movx	@r0,a
   04CE 08            [12] 1602 	inc	r0
   04CF F2            [24] 1603 	movx	@r0,a
   04D0 02r02r8C      [24] 1604 	ljmp	00116$
   04D3                    1605 00118$:
                           1606 ;	radio/tdm.c:320: tdm_state_remaining -= tdelta;
   04D3 78r01         [12] 1607 	mov	r0,#_tdm_state_remaining
   04D5 E2            [24] 1608 	movx	a,@r0
   04D6 C3            [12] 1609 	clr	c
   04D7 9E            [12] 1610 	subb	a,r6
   04D8 F2            [24] 1611 	movx	@r0,a
   04D9 08            [12] 1612 	inc	r0
   04DA E2            [24] 1613 	movx	a,@r0
   04DB 9F            [12] 1614 	subb	a,r7
   04DC F2            [24] 1615 	movx	@r0,a
   04DD 22            [24] 1616 	ret
                           1617 ;------------------------------------------------------------
                           1618 ;Allocation info for local variables in function 'tdm_change_phase'
                           1619 ;------------------------------------------------------------
                           1620 ;	radio/tdm.c:326: tdm_change_phase(void)
                           1621 ;	-----------------------------------------
                           1622 ;	 function tdm_change_phase
                           1623 ;	-----------------------------------------
   04DE                    1624 _tdm_change_phase:
                           1625 ;	radio/tdm.c:328: tdm_state = (tdm_state+2) % 4;
   04DE 78r00         [12] 1626 	mov	r0,#_tdm_state
   04E0 E2            [24] 1627 	movx	a,@r0
   04E1 FE            [12] 1628 	mov	r6,a
   04E2 7F 00         [12] 1629 	mov	r7,#0x00
   04E4 74 02         [12] 1630 	mov	a,#0x02
   04E6 2E            [12] 1631 	add	a,r6
   04E7 FE            [12] 1632 	mov	r6,a
   04E8 E4            [12] 1633 	clr	a
   04E9 3F            [12] 1634 	addc	a,r7
   04EA FF            [12] 1635 	mov	r7,a
   04EB 90r00r00      [24] 1636 	mov	dptr,#__modsint_PARM_2
   04EE 74 04         [12] 1637 	mov	a,#0x04
   04F0 F0            [24] 1638 	movx	@dptr,a
   04F1 E4            [12] 1639 	clr	a
   04F2 A3            [24] 1640 	inc	dptr
   04F3 F0            [24] 1641 	movx	@dptr,a
   04F4 8E 82         [24] 1642 	mov	dpl,r6
   04F6 8F 83         [24] 1643 	mov	dph,r7
   04F8 12r00r00      [24] 1644 	lcall	__modsint
   04FB AE 82         [24] 1645 	mov	r6,dpl
   04FD 78r00         [12] 1646 	mov	r0,#_tdm_state
   04FF EE            [12] 1647 	mov	a,r6
   0500 F2            [24] 1648 	movx	@r0,a
   0501 22            [24] 1649 	ret
                           1650 ;------------------------------------------------------------
                           1651 ;Allocation info for local variables in function 'temperature_update'
                           1652 ;------------------------------------------------------------
                           1653 ;diff                      Allocated to registers r6 r7 
                           1654 ;------------------------------------------------------------
                           1655 ;	radio/tdm.c:333: static void temperature_update(void)
                           1656 ;	-----------------------------------------
                           1657 ;	 function temperature_update
                           1658 ;	-----------------------------------------
   0502                    1659 _temperature_update:
                           1660 ;	radio/tdm.c:336: if (radio_get_transmit_power() <= 20) {
   0502 12r00r00      [24] 1661 	lcall	_radio_get_transmit_power
   0505 E5 82         [12] 1662 	mov	a,dpl
   0507 FF            [12] 1663 	mov	r7,a
   0508 24 EB         [12] 1664 	add	a,#0xff - 0x14
   050A 40 05         [24] 1665 	jc	00102$
                           1666 ;	radio/tdm.c:337: duty_cycle_offset = 0;
   050C 78r0F         [12] 1667 	mov	r0,#_duty_cycle_offset
   050E E4            [12] 1668 	clr	a
   050F F2            [24] 1669 	movx	@r0,a
                           1670 ;	radio/tdm.c:338: return;
   0510 22            [24] 1671 	ret
   0511                    1672 00102$:
                           1673 ;	radio/tdm.c:341: diff = radio_temperature() - MAX_PA_TEMPERATURE;
   0511 12r00r00      [24] 1674 	lcall	_radio_temperature
   0514 E5 82         [12] 1675 	mov	a,dpl
   0516 85 83 F0      [24] 1676 	mov	b,dph
   0519 24 9C         [12] 1677 	add	a,#0x9C
   051B FE            [12] 1678 	mov	r6,a
   051C E5 F0         [12] 1679 	mov	a,b
   051E 34 FF         [12] 1680 	addc	a,#0xFF
   0520 FF            [12] 1681 	mov	r7,a
                           1682 ;	radio/tdm.c:342: if (diff <= 0 && duty_cycle_offset > 0) {
   0521 C3            [12] 1683 	clr	c
   0522 E4            [12] 1684 	clr	a
   0523 9E            [12] 1685 	subb	a,r6
   0524 E4            [12] 1686 	clr	a
   0525 64 80         [12] 1687 	xrl	a,#0x80
   0527 8F F0         [24] 1688 	mov	b,r7
   0529 63 F0 80      [24] 1689 	xrl	b,#0x80
   052C 95 F0         [12] 1690 	subb	a,b
   052E E4            [12] 1691 	clr	a
   052F 33            [12] 1692 	rlc	a
   0530 FD            [12] 1693 	mov	r5,a
   0531 70 0C         [24] 1694 	jnz	00112$
   0533 78r0F         [12] 1695 	mov	r0,#_duty_cycle_offset
   0535 E2            [24] 1696 	movx	a,@r0
   0536 60 07         [24] 1697 	jz	00112$
                           1698 ;	radio/tdm.c:344: duty_cycle_offset -= 1;
   0538 78r0F         [12] 1699 	mov	r0,#_duty_cycle_offset
   053A E2            [24] 1700 	movx	a,@r0
   053B 14            [12] 1701 	dec	a
   053C F2            [24] 1702 	movx	@r0,a
   053D 80 39         [24] 1703 	sjmp	00113$
   053F                    1704 00112$:
                           1705 ;	radio/tdm.c:345: } else if (diff > 10) {
   053F C3            [12] 1706 	clr	c
   0540 74 0A         [12] 1707 	mov	a,#0x0A
   0542 9E            [12] 1708 	subb	a,r6
   0543 E4            [12] 1709 	clr	a
   0544 64 80         [12] 1710 	xrl	a,#0x80
   0546 8F F0         [24] 1711 	mov	b,r7
   0548 63 F0 80      [24] 1712 	xrl	b,#0x80
   054B 95 F0         [12] 1713 	subb	a,b
   054D 50 08         [24] 1714 	jnc	00109$
                           1715 ;	radio/tdm.c:347: duty_cycle_offset += 10;
   054F 78r0F         [12] 1716 	mov	r0,#_duty_cycle_offset
   0551 E2            [24] 1717 	movx	a,@r0
   0552 24 0A         [12] 1718 	add	a,#0x0A
   0554 F2            [24] 1719 	movx	@r0,a
   0555 80 21         [24] 1720 	sjmp	00113$
   0557                    1721 00109$:
                           1722 ;	radio/tdm.c:348: } else if (diff > 5) {
   0557 C3            [12] 1723 	clr	c
   0558 74 05         [12] 1724 	mov	a,#0x05
   055A 9E            [12] 1725 	subb	a,r6
   055B E4            [12] 1726 	clr	a
   055C 64 80         [12] 1727 	xrl	a,#0x80
   055E 8F F0         [24] 1728 	mov	b,r7
   0560 63 F0 80      [24] 1729 	xrl	b,#0x80
   0563 95 F0         [12] 1730 	subb	a,b
   0565 50 08         [24] 1731 	jnc	00106$
                           1732 ;	radio/tdm.c:350: duty_cycle_offset += 5;
   0567 78r0F         [12] 1733 	mov	r0,#_duty_cycle_offset
   0569 E2            [24] 1734 	movx	a,@r0
   056A 24 05         [12] 1735 	add	a,#0x05
   056C F2            [24] 1736 	movx	@r0,a
   056D 80 09         [24] 1737 	sjmp	00113$
   056F                    1738 00106$:
                           1739 ;	radio/tdm.c:351: } else if (diff > 0) {
   056F ED            [12] 1740 	mov	a,r5
   0570 60 06         [24] 1741 	jz	00113$
                           1742 ;	radio/tdm.c:353: duty_cycle_offset += 1;				
   0572 78r0F         [12] 1743 	mov	r0,#_duty_cycle_offset
   0574 E2            [24] 1744 	movx	a,@r0
   0575 24 01         [12] 1745 	add	a,#0x01
   0577 F2            [24] 1746 	movx	@r0,a
   0578                    1747 00113$:
                           1748 ;	radio/tdm.c:356: if ((duty_cycle-duty_cycle_offset) < 20) {
   0578 78r0E         [12] 1749 	mov	r0,#_duty_cycle
   057A E2            [24] 1750 	movx	a,@r0
   057B FE            [12] 1751 	mov	r6,a
   057C 7F 00         [12] 1752 	mov	r7,#0x00
   057E 78r0F         [12] 1753 	mov	r0,#_duty_cycle_offset
   0580 E2            [24] 1754 	movx	a,@r0
   0581 FC            [12] 1755 	mov	r4,a
   0582 7D 00         [12] 1756 	mov	r5,#0x00
   0584 EE            [12] 1757 	mov	a,r6
   0585 C3            [12] 1758 	clr	c
   0586 9C            [12] 1759 	subb	a,r4
   0587 FE            [12] 1760 	mov	r6,a
   0588 EF            [12] 1761 	mov	a,r7
   0589 9D            [12] 1762 	subb	a,r5
   058A FF            [12] 1763 	mov	r7,a
   058B C3            [12] 1764 	clr	c
   058C EE            [12] 1765 	mov	a,r6
   058D 94 14         [12] 1766 	subb	a,#0x14
   058F EF            [12] 1767 	mov	a,r7
   0590 64 80         [12] 1768 	xrl	a,#0x80
   0592 94 80         [12] 1769 	subb	a,#0x80
   0594 50 08         [24] 1770 	jnc	00117$
                           1771 ;	radio/tdm.c:357: duty_cycle_offset = duty_cycle - 20;
   0596 78r0E         [12] 1772 	mov	r0,#_duty_cycle
   0598 79r0F         [12] 1773 	mov	r1,#_duty_cycle_offset
   059A E2            [24] 1774 	movx	a,@r0
   059B 24 EC         [12] 1775 	add	a,#0xEC
   059D F3            [24] 1776 	movx	@r1,a
   059E                    1777 00117$:
   059E 22            [24] 1778 	ret
                           1779 ;------------------------------------------------------------
                           1780 ;Allocation info for local variables in function 'link_update'
                           1781 ;------------------------------------------------------------
                           1782 ;old_remaining             Allocated to registers r6 r7 
                           1783 ;unlock_count              Allocated with name '_link_update_unlock_count_1_185'
                           1784 ;temperature_count         Allocated with name '_link_update_temperature_count_1_185'
                           1785 ;------------------------------------------------------------
                           1786 ;	radio/tdm.c:365: link_update(void)
                           1787 ;	-----------------------------------------
                           1788 ;	 function link_update
                           1789 ;	-----------------------------------------
   059F                    1790 _link_update:
                           1791 ;	radio/tdm.c:368: if (received_packet) {
   059F 30*03 0B      [24] 1792 	jnb	_received_packet,00102$
                           1793 ;	radio/tdm.c:369: unlock_count = 0;
   05A2 90r00rFC      [24] 1794 	mov	dptr,#_link_update_unlock_count_1_185
   05A5 E4            [12] 1795 	clr	a
   05A6 F0            [24] 1796 	movx	@dptr,a
                           1797 ;	radio/tdm.c:370: received_packet = false;
   05A7 C2*03         [12] 1798 	clr	_received_packet
                           1799 ;	radio/tdm.c:372: TDM_SYNC_PIN = true;
   05A9 D2 A6         [12] 1800 	setb	_TDM_SYNC_PIN
   05AB 80 07         [24] 1801 	sjmp	00103$
   05AD                    1802 00102$:
                           1803 ;	radio/tdm.c:375: unlock_count++;
   05AD 90r00rFC      [24] 1804 	mov	dptr,#_link_update_unlock_count_1_185
   05B0 E0            [24] 1805 	movx	a,@dptr
   05B1 24 01         [12] 1806 	add	a,#0x01
   05B3 F0            [24] 1807 	movx	@dptr,a
   05B4                    1808 00103$:
                           1809 ;	radio/tdm.c:377: if (unlock_count < 6) {
   05B4 90r00rFC      [24] 1810 	mov	dptr,#_link_update_unlock_count_1_185
   05B7 E0            [24] 1811 	movx	a,@dptr
   05B8 FF            [12] 1812 	mov	r7,a
   05B9 BF 06 00      [24] 1813 	cjne	r7,#0x06,00157$
   05BC                    1814 00157$:
   05BC 50 04         [24] 1815 	jnc	00105$
                           1816 ;	radio/tdm.c:378: LED_RADIO = LED_ON;
   05BE C2 95         [12] 1817 	clr	_LED_GREEN
   05C0 80 08         [24] 1818 	sjmp	00106$
   05C2                    1819 00105$:
                           1820 ;	radio/tdm.c:381: TDM_SYNC_PIN = false;
   05C2 C2 A6         [12] 1821 	clr	_TDM_SYNC_PIN
                           1822 ;	radio/tdm.c:384: LED_RADIO = blink_state;
   05C4 A2*02         [12] 1823 	mov	c,_blink_state
   05C6 92 95         [24] 1824 	mov	_LED_GREEN,c
                           1825 ;	radio/tdm.c:385: blink_state = !blink_state;
   05C8 B2*02         [12] 1826 	cpl	_blink_state
   05CA                    1827 00106$:
                           1828 ;	radio/tdm.c:387: if (unlock_count > 40) {
   05CA EF            [12] 1829 	mov	a,r7
   05CB 24 D7         [12] 1830 	add	a,#0xff - 0x28
   05CD 40 03         [24] 1831 	jc	00159$
   05CF 02r06r5A      [24] 1832 	ljmp	00117$
   05D2                    1833 00159$:
                           1834 ;	radio/tdm.c:391: unlock_count = 5;
   05D2 90r00rFC      [24] 1835 	mov	dptr,#_link_update_unlock_count_1_185
   05D5 74 05         [12] 1836 	mov	a,#0x05
   05D7 F0            [24] 1837 	movx	@dptr,a
                           1838 ;	radio/tdm.c:395: if (timer_entropy() & 1) {
   05D8 12r00r00      [24] 1839 	lcall	_timer_entropy
   05DB E5 82         [12] 1840 	mov	a,dpl
   05DD 30 E0 59      [24] 1841 	jnb	acc.0,00113$
                           1842 ;	radio/tdm.c:396: register uint16_t old_remaining = tdm_state_remaining;
   05E0 78r01         [12] 1843 	mov	r0,#_tdm_state_remaining
   05E2 E2            [24] 1844 	movx	a,@r0
   05E3 FE            [12] 1845 	mov	r6,a
   05E4 08            [12] 1846 	inc	r0
   05E5 E2            [24] 1847 	movx	a,@r0
   05E6 FF            [12] 1848 	mov	r7,a
                           1849 ;	radio/tdm.c:397: if (tdm_state_remaining > silence_period) {
   05E7 78r06         [12] 1850 	mov	r0,#_silence_period
   05E9 C3            [12] 1851 	clr	c
   05EA E2            [24] 1852 	movx	a,@r0
   05EB 9E            [12] 1853 	subb	a,r6
   05EC 08            [12] 1854 	inc	r0
   05ED E2            [24] 1855 	movx	a,@r0
   05EE 9F            [12] 1856 	subb	a,r7
   05EF 50 17         [24] 1857 	jnc	00108$
                           1858 ;	radio/tdm.c:398: tdm_state_remaining -= packet_latency;
   05F1 78r08         [12] 1859 	mov	r0,#_packet_latency
   05F3 D3            [12] 1860 	setb	c
   05F4 E2            [24] 1861 	movx	a,@r0
   05F5 9E            [12] 1862 	subb	a,r6
   05F6 F4            [12] 1863 	cpl	a
   05F7 B3            [12] 1864 	cpl	c
   05F8 FC            [12] 1865 	mov	r4,a
   05F9 B3            [12] 1866 	cpl	c
   05FA 08            [12] 1867 	inc	r0
   05FB E2            [24] 1868 	movx	a,@r0
   05FC 9F            [12] 1869 	subb	a,r7
   05FD F4            [12] 1870 	cpl	a
   05FE FD            [12] 1871 	mov	r5,a
   05FF 78r01         [12] 1872 	mov	r0,#_tdm_state_remaining
   0601 EC            [12] 1873 	mov	a,r4
   0602 F2            [24] 1874 	movx	@r0,a
   0603 08            [12] 1875 	inc	r0
   0604 ED            [12] 1876 	mov	a,r5
   0605 F2            [24] 1877 	movx	@r0,a
   0606 80 08         [24] 1878 	sjmp	00109$
   0608                    1879 00108$:
                           1880 ;	radio/tdm.c:400: tdm_state_remaining = 1;
   0608 78r01         [12] 1881 	mov	r0,#_tdm_state_remaining
   060A 74 01         [12] 1882 	mov	a,#0x01
   060C F2            [24] 1883 	movx	@r0,a
   060D 08            [12] 1884 	inc	r0
   060E E4            [12] 1885 	clr	a
   060F F2            [24] 1886 	movx	@r0,a
   0610                    1887 00109$:
                           1888 ;	radio/tdm.c:402: if (at_testmode & AT_TEST_TDM) {
   0610 78r00         [12] 1889 	mov	r0,#_at_testmode
   0612 E2            [24] 1890 	movx	a,@r0
   0613 54 02         [12] 1891 	anl	a,#0x02
   0615 60 22         [24] 1892 	jz	00113$
                           1893 ;	radio/tdm.c:403: printf("TDM: change timing %u/%u\n",
   0617 78r01         [12] 1894 	mov	r0,#_tdm_state_remaining
   0619 E2            [24] 1895 	movx	a,@r0
   061A C0 E0         [24] 1896 	push	acc
   061C 08            [12] 1897 	inc	r0
   061D E2            [24] 1898 	movx	a,@r0
   061E C0 E0         [24] 1899 	push	acc
   0620 C0 06         [24] 1900 	push	ar6
   0622 C0 07         [24] 1901 	push	ar7
   0624 74r82         [12] 1902 	mov	a,#__str_4
   0626 C0 E0         [24] 1903 	push	acc
   0628 74s00         [12] 1904 	mov	a,#(__str_4 >> 8)
   062A C0 E0         [24] 1905 	push	acc
   062C 74 80         [12] 1906 	mov	a,#0x80
   062E C0 E0         [24] 1907 	push	acc
   0630 12r00r00      [24] 1908 	lcall	_printfl
   0633 E5 81         [12] 1909 	mov	a,sp
   0635 24 F9         [12] 1910 	add	a,#0xf9
   0637 F5 81         [12] 1911 	mov	sp,a
   0639                    1912 00113$:
                           1913 ;	radio/tdm.c:408: if (at_testmode & AT_TEST_TDM) {
   0639 78r00         [12] 1914 	mov	r0,#_at_testmode
   063B E2            [24] 1915 	movx	a,@r0
   063C 54 02         [12] 1916 	anl	a,#0x02
   063E 60 15         [24] 1917 	jz	00115$
                           1918 ;	radio/tdm.c:409: printf("TDM: scanning\n");
   0640 74r9C         [12] 1919 	mov	a,#__str_5
   0642 C0 E0         [24] 1920 	push	acc
   0644 74s00         [12] 1921 	mov	a,#(__str_5 >> 8)
   0646 C0 E0         [24] 1922 	push	acc
   0648 74 80         [12] 1923 	mov	a,#0x80
   064A C0 E0         [24] 1924 	push	acc
   064C 12r00r00      [24] 1925 	lcall	_printfl
   064F 15 81         [12] 1926 	dec	sp
   0651 15 81         [12] 1927 	dec	sp
   0653 15 81         [12] 1928 	dec	sp
   0655                    1929 00115$:
                           1930 ;	radio/tdm.c:411: fhop_set_locked(false);
   0655 C2*00         [12] 1931 	clr	_fhop_set_locked_PARM_1
   0657 12r00r00      [24] 1932 	lcall	_fhop_set_locked
   065A                    1933 00117$:
                           1934 ;	radio/tdm.c:414: if (unlock_count != 0) {
   065A 90r00rFC      [24] 1935 	mov	dptr,#_link_update_unlock_count_1_185
   065D E0            [24] 1936 	movx	a,@dptr
   065E FF            [12] 1937 	mov	r7,a
   065F 60 3D         [24] 1938 	jz	00119$
                           1939 ;	radio/tdm.c:415: statistics.average_rssi = (radio_last_rssi() + 3*(uint16_t)statistics.average_rssi)/4;
   0661 12r00r00      [24] 1940 	lcall	_radio_last_rssi
   0664 AF 82         [24] 1941 	mov	r7,dpl
   0666 7E 00         [12] 1942 	mov	r6,#0x00
   0668 78r00         [12] 1943 	mov	r0,#_statistics
   066A E2            [24] 1944 	movx	a,@r0
   066B 90r00r00      [24] 1945 	mov	dptr,#__mulint_PARM_2
   066E F0            [24] 1946 	movx	@dptr,a
   066F E4            [12] 1947 	clr	a
   0670 A3            [24] 1948 	inc	dptr
   0671 F0            [24] 1949 	movx	@dptr,a
   0672 90 00 03      [24] 1950 	mov	dptr,#0x0003
   0675 C0 07         [24] 1951 	push	ar7
   0677 C0 06         [24] 1952 	push	ar6
   0679 12r00r00      [24] 1953 	lcall	__mulint
   067C AC 82         [24] 1954 	mov	r4,dpl
   067E AD 83         [24] 1955 	mov	r5,dph
   0680 D0 06         [24] 1956 	pop	ar6
   0682 D0 07         [24] 1957 	pop	ar7
   0684 EC            [12] 1958 	mov	a,r4
   0685 2F            [12] 1959 	add	a,r7
   0686 FC            [12] 1960 	mov	r4,a
   0687 ED            [12] 1961 	mov	a,r5
   0688 3E            [12] 1962 	addc	a,r6
   0689 C3            [12] 1963 	clr	c
   068A 13            [12] 1964 	rrc	a
   068B CC            [12] 1965 	xch	a,r4
   068C 13            [12] 1966 	rrc	a
   068D CC            [12] 1967 	xch	a,r4
   068E C3            [12] 1968 	clr	c
   068F 13            [12] 1969 	rrc	a
   0690 CC            [12] 1970 	xch	a,r4
   0691 13            [12] 1971 	rrc	a
   0692 CC            [12] 1972 	xch	a,r4
   0693 FD            [12] 1973 	mov	r5,a
   0694 78r00         [12] 1974 	mov	r0,#_statistics
   0696 EC            [12] 1975 	mov	a,r4
   0697 F2            [24] 1976 	movx	@r0,a
                           1977 ;	radio/tdm.c:418: statistics.receive_count = 0;
   0698 78r02         [12] 1978 	mov	r0,#(_statistics + 0x0002)
   069A E4            [12] 1979 	clr	a
   069B F2            [24] 1980 	movx	@r0,a
   069C 08            [12] 1981 	inc	r0
   069D F2            [24] 1982 	movx	@r0,a
   069E                    1983 00119$:
                           1984 ;	radio/tdm.c:420: if (unlock_count > 5) {
   069E 90r00rFC      [24] 1985 	mov	dptr,#_link_update_unlock_count_1_185
   06A1 E0            [24] 1986 	movx	a,@dptr
   06A2 FF            [12] 1987 	mov  r7,a
   06A3 24 FA         [12] 1988 	add	a,#0xff - 0x05
   06A5 50 17         [24] 1989 	jnc	00121$
                           1990 ;	radio/tdm.c:421: memset(&remote_statistics, 0, sizeof(remote_statistics));
   06A7 90r00r00      [24] 1991 	mov	dptr,#_memset_PARM_2
   06AA E4            [12] 1992 	clr	a
   06AB F0            [24] 1993 	movx	@dptr,a
   06AC 90r00r00      [24] 1994 	mov	dptr,#_memset_PARM_3
   06AF 74 04         [12] 1995 	mov	a,#0x04
   06B1 F0            [24] 1996 	movx	@dptr,a
   06B2 E4            [12] 1997 	clr	a
   06B3 A3            [24] 1998 	inc	dptr
   06B4 F0            [24] 1999 	movx	@dptr,a
   06B5 90r00r00      [24] 2000 	mov	dptr,#_remote_statistics
   06B8 75 F0 60      [24] 2001 	mov	b,#0x60
   06BB 12r00r00      [24] 2002 	lcall	_memset
   06BE                    2003 00121$:
                           2004 ;	radio/tdm.c:424: test_display = at_testmode;
   06BE 78r00         [12] 2005 	mov	r0,#_at_testmode
   06C0 E2            [24] 2006 	movx	a,@r0
   06C1 78r19         [12] 2007 	mov	r0,#_test_display
   06C3 F2            [24] 2008 	movx	@r0,a
                           2009 ;	radio/tdm.c:425: send_statistics = 1;
   06C4 D2*05         [12] 2010 	setb	_send_statistics
                           2011 ;	radio/tdm.c:427: temperature_count++;
   06C6 90r00rFD      [24] 2012 	mov	dptr,#_link_update_temperature_count_1_185
   06C9 E0            [24] 2013 	movx	a,@dptr
   06CA 24 01         [12] 2014 	add	a,#0x01
   06CC F0            [24] 2015 	movx	@dptr,a
                           2016 ;	radio/tdm.c:428: if (temperature_count == 4) {
   06CD 90r00rFD      [24] 2017 	mov	dptr,#_link_update_temperature_count_1_185
   06D0 E0            [24] 2018 	movx	a,@dptr
   06D1 FF            [12] 2019 	mov	r7,a
   06D2 BF 04 08      [24] 2020 	cjne	r7,#0x04,00124$
                           2021 ;	radio/tdm.c:430: temperature_update();
   06D5 12r05r02      [24] 2022 	lcall	_temperature_update
                           2023 ;	radio/tdm.c:431: temperature_count = 0;
   06D8 90r00rFD      [24] 2024 	mov	dptr,#_link_update_temperature_count_1_185
   06DB E4            [12] 2025 	clr	a
   06DC F0            [24] 2026 	movx	@dptr,a
   06DD                    2027 00124$:
   06DD 22            [24] 2028 	ret
                           2029 ;------------------------------------------------------------
                           2030 ;Allocation info for local variables in function 'tdm_remote_at'
                           2031 ;------------------------------------------------------------
                           2032 ;	radio/tdm.c:437: tdm_remote_at(void)
                           2033 ;	-----------------------------------------
                           2034 ;	 function tdm_remote_at
                           2035 ;	-----------------------------------------
   06DE                    2036 _tdm_remote_at:
                           2037 ;	radio/tdm.c:439: memcpy(remote_at_cmd, at_cmd, strlen(at_cmd)+1);
   06DE 90r00r00      [24] 2038 	mov	dptr,#_at_cmd
   06E1 75 F0 60      [24] 2039 	mov	b,#0x60
   06E4 12r00r00      [24] 2040 	lcall	_strlen
   06E7 E5 82         [12] 2041 	mov	a,dpl
   06E9 85 83 F0      [24] 2042 	mov	b,dph
   06EC 24 01         [12] 2043 	add	a,#0x01
   06EE FE            [12] 2044 	mov	r6,a
   06EF E4            [12] 2045 	clr	a
   06F0 35 F0         [12] 2046 	addc	a,b
   06F2 FF            [12] 2047 	mov	r7,a
   06F3 90r00r00      [24] 2048 	mov	dptr,#_memcpy_PARM_2
   06F6 74r00         [12] 2049 	mov	a,#_at_cmd
   06F8 F0            [24] 2050 	movx	@dptr,a
   06F9 74s00         [12] 2051 	mov	a,#(_at_cmd >> 8)
   06FB A3            [24] 2052 	inc	dptr
   06FC F0            [24] 2053 	movx	@dptr,a
   06FD 74 60         [12] 2054 	mov	a,#0x60
   06FF A3            [24] 2055 	inc	dptr
   0700 F0            [24] 2056 	movx	@dptr,a
   0701 90r00r00      [24] 2057 	mov	dptr,#_memcpy_PARM_3
   0704 EE            [12] 2058 	mov	a,r6
   0705 F0            [24] 2059 	movx	@dptr,a
   0706 EF            [12] 2060 	mov	a,r7
   0707 A3            [24] 2061 	inc	dptr
   0708 F0            [24] 2062 	movx	@dptr,a
   0709 90r00r1C      [24] 2063 	mov	dptr,#_remote_at_cmd
   070C 75 F0 60      [24] 2064 	mov	b,#0x60
   070F 12r00r00      [24] 2065 	lcall	_memcpy
                           2066 ;	radio/tdm.c:440: send_at_command = true;
   0712 D2*06         [12] 2067 	setb	_send_at_command
   0714 22            [24] 2068 	ret
                           2069 ;------------------------------------------------------------
                           2070 ;Allocation info for local variables in function 'handle_at_command'
                           2071 ;------------------------------------------------------------
                           2072 ;i                         Allocated to registers r6 
                           2073 ;------------------------------------------------------------
                           2074 ;	radio/tdm.c:445: handle_at_command(__pdata uint8_t len)
                           2075 ;	-----------------------------------------
                           2076 ;	 function handle_at_command
                           2077 ;	-----------------------------------------
   0715                    2078 _handle_at_command:
   0715 AF 82         [24] 2079 	mov	r7,dpl
                           2080 ;	radio/tdm.c:447: if (len < 2 || len > AT_CMD_MAXLEN || 
   0717 BF 02 00      [24] 2081 	cjne	r7,#0x02,00133$
   071A                    2082 00133$:
   071A 40 17         [24] 2083 	jc	00118$
   071C EF            [12] 2084 	mov	a,r7
   071D 24 EF         [12] 2085 	add	a,#0xff - 0x10
   071F 40 12         [24] 2086 	jc	00118$
                           2087 ;	radio/tdm.c:448: pbuf[0] != (uint8_t)'R' || 
   0721 90r00r00      [24] 2088 	mov	dptr,#_pbuf
   0724 E0            [24] 2089 	movx	a,@dptr
   0725 FE            [12] 2090 	mov	r6,a
   0726 BE 52 0A      [24] 2091 	cjne	r6,#0x52,00118$
                           2092 ;	radio/tdm.c:449: pbuf[1] != (uint8_t)'T') {
   0729 90r00r01      [24] 2093 	mov	dptr,#(_pbuf + 0x0001)
   072C E0            [24] 2094 	movx	a,@dptr
   072D FE            [12] 2095 	mov	r6,a
   072E BE 54 02      [24] 2096 	cjne	r6,#0x54,00138$
   0731 80 23         [24] 2097 	sjmp	00103$
   0733                    2098 00138$:
                           2099 ;	radio/tdm.c:452: for (i=0; i<len; i++) {
   0733                    2100 00118$:
   0733 7E 00         [12] 2101 	mov	r6,#0x00
   0735                    2102 00110$:
   0735 C3            [12] 2103 	clr	c
   0736 EE            [12] 2104 	mov	a,r6
   0737 9F            [12] 2105 	subb	a,r7
   0738 50 1B         [24] 2106 	jnc	00101$
                           2107 ;	radio/tdm.c:453: putchar(pbuf[i]);
   073A EE            [12] 2108 	mov	a,r6
   073B 24r00         [12] 2109 	add	a,#_pbuf
   073D F5 82         [12] 2110 	mov	dpl,a
   073F E4            [12] 2111 	clr	a
   0740 34s00         [12] 2112 	addc	a,#(_pbuf >> 8)
   0742 F5 83         [12] 2113 	mov	dph,a
   0744 E0            [24] 2114 	movx	a,@dptr
   0745 F5 82         [12] 2115 	mov	dpl,a
   0747 C0 07         [24] 2116 	push	ar7
   0749 C0 06         [24] 2117 	push	ar6
   074B 12r00r00      [24] 2118 	lcall	_putchar
   074E D0 06         [24] 2119 	pop	ar6
   0750 D0 07         [24] 2120 	pop	ar7
                           2121 ;	radio/tdm.c:452: for (i=0; i<len; i++) {
   0752 0E            [12] 2122 	inc	r6
   0753 80 E0         [24] 2123 	sjmp	00110$
   0755                    2124 00101$:
                           2125 ;	radio/tdm.c:455: return;
   0755 22            [24] 2126 	ret
   0756                    2127 00103$:
                           2128 ;	radio/tdm.c:459: memcpy(at_cmd, pbuf, len);
   0756 90r00r00      [24] 2129 	mov	dptr,#_memcpy_PARM_2
   0759 74r00         [12] 2130 	mov	a,#_pbuf
   075B F0            [24] 2131 	movx	@dptr,a
   075C 74s00         [12] 2132 	mov	a,#(_pbuf >> 8)
   075E A3            [24] 2133 	inc	dptr
   075F F0            [24] 2134 	movx	@dptr,a
   0760 E4            [12] 2135 	clr	a
   0761 A3            [24] 2136 	inc	dptr
   0762 F0            [24] 2137 	movx	@dptr,a
   0763 90r00r00      [24] 2138 	mov	dptr,#_memcpy_PARM_3
   0766 EF            [12] 2139 	mov	a,r7
   0767 F0            [24] 2140 	movx	@dptr,a
   0768 E4            [12] 2141 	clr	a
   0769 A3            [24] 2142 	inc	dptr
   076A F0            [24] 2143 	movx	@dptr,a
   076B 90r00r00      [24] 2144 	mov	dptr,#_at_cmd
   076E 75 F0 60      [24] 2145 	mov	b,#0x60
   0771 C0 07         [24] 2146 	push	ar7
   0773 12r00r00      [24] 2147 	lcall	_memcpy
   0776 D0 07         [24] 2148 	pop	ar7
                           2149 ;	radio/tdm.c:460: at_cmd[len] = 0;
   0778 EF            [12] 2150 	mov	a,r7
   0779 24r00         [12] 2151 	add	a,#_at_cmd
   077B F8            [12] 2152 	mov	r0,a
   077C E4            [12] 2153 	clr	a
   077D F2            [24] 2154 	movx	@r0,a
                           2155 ;	radio/tdm.c:461: at_cmd[0] = 'A'; // replace 'R'
   077E 78r00         [12] 2156 	mov	r0,#_at_cmd
   0780 74 41         [12] 2157 	mov	a,#0x41
   0782 F2            [24] 2158 	movx	@r0,a
                           2159 ;	radio/tdm.c:462: at_cmd_len = len;
   0783 78r00         [12] 2160 	mov	r0,#_at_cmd_len
   0785 EF            [12] 2161 	mov	a,r7
   0786 F2            [24] 2162 	movx	@r0,a
                           2163 ;	radio/tdm.c:463: at_cmd_ready = true;
   0787 D2*00         [12] 2164 	setb	_at_cmd_ready
                           2165 ;	radio/tdm.c:468: printf_start_capture(pbuf, sizeof(pbuf));
   0789 90r00r00      [24] 2166 	mov	dptr,#_printf_start_capture_PARM_2
   078C 74 FC         [12] 2167 	mov	a,#0xFC
   078E F0            [24] 2168 	movx	@dptr,a
   078F 90r00r00      [24] 2169 	mov	dptr,#_pbuf
   0792 12r00r00      [24] 2170 	lcall	_printf_start_capture
                           2171 ;	radio/tdm.c:469: at_command();
   0795 12r00r00      [24] 2172 	lcall	_at_command
                           2173 ;	radio/tdm.c:470: len = printf_end_capture();
   0798 12r00r00      [24] 2174 	lcall	_printf_end_capture
                           2175 ;	radio/tdm.c:471: if (len > 0) {
   079B E5 82         [12] 2176 	mov	a,dpl
   079D FF            [12] 2177 	mov	r7,a
   079E 60 0A         [24] 2178 	jz	00112$
                           2179 ;	radio/tdm.c:472: packet_inject(pbuf, len);
   07A0 78r00         [12] 2180 	mov	r0,#_packet_inject_PARM_2
   07A2 EF            [12] 2181 	mov	a,r7
   07A3 F2            [24] 2182 	movx	@r0,a
   07A4 90r00r00      [24] 2183 	mov	dptr,#_pbuf
   07A7 02r00r00      [24] 2184 	ljmp	_packet_inject
   07AA                    2185 00112$:
   07AA 22            [24] 2186 	ret
                           2187 ;------------------------------------------------------------
                           2188 ;Allocation info for local variables in function 'tdm_serial_loop'
                           2189 ;------------------------------------------------------------
                           2190 ;	radio/tdm.c:482: tdm_serial_loop(void)
                           2191 ;	-----------------------------------------
                           2192 ;	 function tdm_serial_loop
                           2193 ;	-----------------------------------------
   07AB                    2194 _tdm_serial_loop:
                           2195 ;	radio/tdm.c:484: __pdata uint16_t last_t = timer2_tick();
   07AB 12r00r00      [24] 2196 	lcall	_timer2_tick
   07AE 78r2F         [12] 2197 	mov	r0,#_tdm_serial_loop_last_t_1_207
   07B0 E5 82         [12] 2198 	mov	a,dpl
   07B2 F2            [24] 2199 	movx	@r0,a
   07B3 08            [12] 2200 	inc	r0
   07B4 E5 83         [12] 2201 	mov	a,dph
   07B6 F2            [24] 2202 	movx	@r0,a
                           2203 ;	radio/tdm.c:485: __pdata uint16_t last_link_update = last_t;
   07B7 78r2F         [12] 2204 	mov	r0,#_tdm_serial_loop_last_t_1_207
   07B9 79r31         [12] 2205 	mov	r1,#_tdm_serial_loop_last_link_update_1_207
   07BB E2            [24] 2206 	movx	a,@r0
   07BC F3            [24] 2207 	movx	@r1,a
   07BD 08            [12] 2208 	inc	r0
   07BE E2            [24] 2209 	movx	a,@r0
   07BF 09            [12] 2210 	inc	r1
   07C0 F3            [24] 2211 	movx	@r1,a
                           2212 ;	radio/tdm.c:487: _canary = 42;
   07C1 78 FF         [12] 2213 	mov	r0,#__canary
   07C3 76 2A         [12] 2214 	mov	@r0,#0x2A
   07C5                    2215 00192$:
                           2216 ;	radio/tdm.c:494: if (_canary != 42) {
   07C5 78 FF         [12] 2217 	mov	r0,#__canary
   07C7 B6 2A 02      [24] 2218 	cjne	@r0,#0x2A,00339$
   07CA 80 15         [24] 2219 	sjmp	00102$
   07CC                    2220 00339$:
                           2221 ;	radio/tdm.c:495: panic("stack blown\n");
   07CC 74rAB         [12] 2222 	mov	a,#__str_6
   07CE C0 E0         [24] 2223 	push	acc
   07D0 74s00         [12] 2224 	mov	a,#(__str_6 >> 8)
   07D2 C0 E0         [24] 2225 	push	acc
   07D4 74 80         [12] 2226 	mov	a,#0x80
   07D6 C0 E0         [24] 2227 	push	acc
   07D8 12r00r00      [24] 2228 	lcall	_panic
   07DB 15 81         [12] 2229 	dec	sp
   07DD 15 81         [12] 2230 	dec	sp
   07DF 15 81         [12] 2231 	dec	sp
   07E1                    2232 00102$:
                           2233 ;	radio/tdm.c:498: if (pdata_canary != 0x41) {
   07E1 78r00         [12] 2234 	mov	r0,#_pdata_canary
   07E3 E2            [24] 2235 	movx	a,@r0
   07E4 B4 41 02      [24] 2236 	cjne	a,#0x41,00340$
   07E7 80 15         [24] 2237 	sjmp	00104$
   07E9                    2238 00340$:
                           2239 ;	radio/tdm.c:499: panic("pdata canary changed\n");
   07E9 74rB8         [12] 2240 	mov	a,#__str_7
   07EB C0 E0         [24] 2241 	push	acc
   07ED 74s00         [12] 2242 	mov	a,#(__str_7 >> 8)
   07EF C0 E0         [24] 2243 	push	acc
   07F1 74 80         [12] 2244 	mov	a,#0x80
   07F3 C0 E0         [24] 2245 	push	acc
   07F5 12r00r00      [24] 2246 	lcall	_panic
   07F8 15 81         [12] 2247 	dec	sp
   07FA 15 81         [12] 2248 	dec	sp
   07FC 15 81         [12] 2249 	dec	sp
   07FE                    2250 00104$:
                           2251 ;	radio/tdm.c:503: at_command();
   07FE 12r00r00      [24] 2252 	lcall	_at_command
                           2253 ;	radio/tdm.c:506: if (test_display) {
   0801 78r19         [12] 2254 	mov	r0,#_test_display
   0803 E2            [24] 2255 	movx	a,@r0
   0804 60 07         [24] 2256 	jz	00106$
                           2257 ;	radio/tdm.c:507: display_test_output();
   0806 12r00rD3      [24] 2258 	lcall	_display_test_output
                           2259 ;	radio/tdm.c:508: test_display = 0;
   0809 78r19         [12] 2260 	mov	r0,#_test_display
   080B E4            [12] 2261 	clr	a
   080C F2            [24] 2262 	movx	@r0,a
   080D                    2263 00106$:
                           2264 ;	radio/tdm.c:511: if (seen_mavlink && feature_mavlink_framing && !at_mode_active) {
   080D 30*00 0B      [24] 2265 	jnb	_seen_mavlink,00108$
   0810 30*00 08      [24] 2266 	jnb	_feature_mavlink_framing,00108$
   0813 20*00 05      [24] 2267 	jb	_at_mode_active,00108$
                           2268 ;	radio/tdm.c:512: seen_mavlink = false;
   0816 C2*00         [12] 2269 	clr	_seen_mavlink
                           2270 ;	radio/tdm.c:513: MAVLink_report();
   0818 12r00r00      [24] 2271 	lcall	_MAVLink_report
   081B                    2272 00108$:
                           2273 ;	radio/tdm.c:517: radio_set_channel(fhop_receive_channel());
   081B 12r00r00      [24] 2274 	lcall	_fhop_receive_channel
   081E 12r00r00      [24] 2275 	lcall	_radio_set_channel
                           2276 ;	radio/tdm.c:520: tnow = timer2_tick();
   0821 12r00r00      [24] 2277 	lcall	_timer2_tick
   0824 AA 82         [24] 2278 	mov	r2,dpl
   0826 AB 83         [24] 2279 	mov	r3,dph
                           2280 ;	radio/tdm.c:523: if (radio_receive_packet(&len, pbuf)) {
   0828 78r00         [12] 2281 	mov	r0,#_radio_receive_packet_PARM_2
   082A 74r00         [12] 2282 	mov	a,#_pbuf
   082C F2            [24] 2283 	movx	@r0,a
   082D 08            [12] 2284 	inc	r0
   082E 74s00         [12] 2285 	mov	a,#(_pbuf >> 8)
   0830 F2            [24] 2286 	movx	@r0,a
   0831 90r00r33      [24] 2287 	mov	dptr,#_tdm_serial_loop_len_2_208
   0834 75 F0 60      [24] 2288 	mov	b,#0x60
   0837 C0 03         [24] 2289 	push	ar3
   0839 C0 02         [24] 2290 	push	ar2
   083B 12r00r00      [24] 2291 	lcall	_radio_receive_packet
   083E D0 02         [24] 2292 	pop	ar2
   0840 D0 03         [24] 2293 	pop	ar3
   0842 40 03         [24] 2294 	jc	00345$
   0844 02r09rBD      [24] 2295 	ljmp	00129$
   0847                    2296 00345$:
                           2297 ;	radio/tdm.c:526: received_packet = true;
   0847 D2*03         [12] 2298 	setb	_received_packet
                           2299 ;	radio/tdm.c:527: fhop_set_locked(true);
   0849 D2*00         [12] 2300 	setb	_fhop_set_locked_PARM_1
   084B C0 03         [24] 2301 	push	ar3
   084D C0 02         [24] 2302 	push	ar2
   084F 12r00r00      [24] 2303 	lcall	_fhop_set_locked
                           2304 ;	radio/tdm.c:530: statistics.average_rssi = (radio_last_rssi() + 7*(uint16_t)statistics.average_rssi)/8;
   0852 12r00r00      [24] 2305 	lcall	_radio_last_rssi
   0855 AD 82         [24] 2306 	mov	r5,dpl
   0857 D0 02         [24] 2307 	pop	ar2
   0859 D0 03         [24] 2308 	pop	ar3
   085B 7C 00         [12] 2309 	mov	r4,#0x00
   085D 78r00         [12] 2310 	mov	r0,#_statistics
   085F E2            [24] 2311 	movx	a,@r0
   0860 90r00r00      [24] 2312 	mov	dptr,#__mulint_PARM_2
   0863 F0            [24] 2313 	movx	@dptr,a
   0864 E4            [12] 2314 	clr	a
   0865 A3            [24] 2315 	inc	dptr
   0866 F0            [24] 2316 	movx	@dptr,a
   0867 90 00 07      [24] 2317 	mov	dptr,#0x0007
   086A C0 05         [24] 2318 	push	ar5
   086C C0 04         [24] 2319 	push	ar4
   086E C0 03         [24] 2320 	push	ar3
   0870 C0 02         [24] 2321 	push	ar2
   0872 12r00r00      [24] 2322 	lcall	__mulint
   0875 AE 82         [24] 2323 	mov	r6,dpl
   0877 AF 83         [24] 2324 	mov	r7,dph
   0879 D0 02         [24] 2325 	pop	ar2
   087B D0 03         [24] 2326 	pop	ar3
   087D D0 04         [24] 2327 	pop	ar4
   087F D0 05         [24] 2328 	pop	ar5
   0881 EE            [12] 2329 	mov	a,r6
   0882 2D            [12] 2330 	add	a,r5
   0883 FE            [12] 2331 	mov	r6,a
   0884 EF            [12] 2332 	mov	a,r7
   0885 3C            [12] 2333 	addc	a,r4
   0886 C4            [12] 2334 	swap	a
   0887 23            [12] 2335 	rl	a
   0888 CE            [12] 2336 	xch	a,r6
   0889 C4            [12] 2337 	swap	a
   088A 23            [12] 2338 	rl	a
   088B 54 1F         [12] 2339 	anl	a,#0x1F
   088D 6E            [12] 2340 	xrl	a,r6
   088E CE            [12] 2341 	xch	a,r6
   088F 54 1F         [12] 2342 	anl	a,#0x1F
   0891 CE            [12] 2343 	xch	a,r6
   0892 6E            [12] 2344 	xrl	a,r6
   0893 CE            [12] 2345 	xch	a,r6
   0894 78r00         [12] 2346 	mov	r0,#_statistics
   0896 EE            [12] 2347 	mov	a,r6
   0897 F2            [24] 2348 	movx	@r0,a
                           2349 ;	radio/tdm.c:531: statistics.receive_count++;
   0898 78r02         [12] 2350 	mov	r0,#(_statistics + 0x0002)
   089A E2            [24] 2351 	movx	a,@r0
   089B FE            [12] 2352 	mov	r6,a
   089C 08            [12] 2353 	inc	r0
   089D E2            [24] 2354 	movx	a,@r0
   089E FF            [12] 2355 	mov	r7,a
   089F 0E            [12] 2356 	inc	r6
   08A0 BE 00 01      [24] 2357 	cjne	r6,#0x00,00346$
   08A3 0F            [12] 2358 	inc	r7
   08A4                    2359 00346$:
   08A4 78r02         [12] 2360 	mov	r0,#(_statistics + 0x0002)
   08A6 EE            [12] 2361 	mov	a,r6
   08A7 F2            [24] 2362 	movx	@r0,a
   08A8 08            [12] 2363 	inc	r0
   08A9 EF            [12] 2364 	mov	a,r7
   08AA F2            [24] 2365 	movx	@r0,a
                           2366 ;	radio/tdm.c:535: transmit_wait = 0;
   08AB 78r0C         [12] 2367 	mov	r0,#_transmit_wait
   08AD E4            [12] 2368 	clr	a
   08AE F2            [24] 2369 	movx	@r0,a
   08AF 08            [12] 2370 	inc	r0
   08B0 F2            [24] 2371 	movx	@r0,a
                           2372 ;	radio/tdm.c:537: if (len < 2) {
   08B1 78r33         [12] 2373 	mov	r0,#_tdm_serial_loop_len_2_208
   08B3 E2            [24] 2374 	movx	a,@r0
   08B4 B4 02 00      [24] 2375 	cjne	a,#0x02,00347$
   08B7                    2376 00347$:
   08B7 50 03         [24] 2377 	jnc	00348$
   08B9 02r07rC5      [24] 2378 	ljmp	00192$
   08BC                    2379 00348$:
                           2380 ;	radio/tdm.c:544: memcpy(&trailer, &pbuf[len-sizeof(trailer)], sizeof(trailer));
   08BC 78r33         [12] 2381 	mov	r0,#_tdm_serial_loop_len_2_208
   08BE E2            [24] 2382 	movx	a,@r0
   08BF 24 FE         [12] 2383 	add	a,#0xFE
   08C1 24r00         [12] 2384 	add	a,#_pbuf
   08C3 FE            [12] 2385 	mov	r6,a
   08C4 E4            [12] 2386 	clr	a
   08C5 34s00         [12] 2387 	addc	a,#(_pbuf >> 8)
   08C7 FF            [12] 2388 	mov	r7,a
   08C8 90r00r00      [24] 2389 	mov	dptr,#_memcpy_PARM_2
   08CB EE            [12] 2390 	mov	a,r6
   08CC F0            [24] 2391 	movx	@dptr,a
   08CD EF            [12] 2392 	mov	a,r7
   08CE A3            [24] 2393 	inc	dptr
   08CF F0            [24] 2394 	movx	@dptr,a
   08D0 E4            [12] 2395 	clr	a
   08D1 A3            [24] 2396 	inc	dptr
   08D2 F0            [24] 2397 	movx	@dptr,a
   08D3 90r00r00      [24] 2398 	mov	dptr,#_memcpy_PARM_3
   08D6 74 02         [12] 2399 	mov	a,#0x02
   08D8 F0            [24] 2400 	movx	@dptr,a
   08D9 E4            [12] 2401 	clr	a
   08DA A3            [24] 2402 	inc	dptr
   08DB F0            [24] 2403 	movx	@dptr,a
   08DC 90r00r1A      [24] 2404 	mov	dptr,#_trailer
   08DF 75 F0 60      [24] 2405 	mov	b,#0x60
   08E2 C0 03         [24] 2406 	push	ar3
   08E4 C0 02         [24] 2407 	push	ar2
   08E6 12r00r00      [24] 2408 	lcall	_memcpy
   08E9 D0 02         [24] 2409 	pop	ar2
   08EB D0 03         [24] 2410 	pop	ar3
                           2411 ;	radio/tdm.c:545: len -= sizeof(trailer);
   08ED 78r33         [12] 2412 	mov	r0,#_tdm_serial_loop_len_2_208
   08EF E2            [24] 2413 	movx	a,@r0
   08F0 14            [12] 2414 	dec	a
   08F1 14            [12] 2415 	dec	a
   08F2 F2            [24] 2416 	movx	@r0,a
                           2417 ;	radio/tdm.c:547: if (trailer.window == 0 && len != 0) {
   08F3 78r1A         [12] 2418 	mov	r0,#_trailer
   08F5 E2            [24] 2419 	movx	a,@r0
   08F6 FE            [12] 2420 	mov	r6,a
   08F7 08            [12] 2421 	inc	r0
   08F8 E2            [24] 2422 	movx	a,@r0
   08F9 54 1F         [12] 2423 	anl	a,#0x1F
   08FB FF            [12] 2424 	mov	r7,a
   08FC 4E            [12] 2425 	orl	a,r6
   08FD 70 41         [24] 2426 	jnz	00125$
   08FF 78r33         [12] 2427 	mov	r0,#_tdm_serial_loop_len_2_208
   0901 E2            [24] 2428 	movx	a,@r0
   0902 60 3C         [24] 2429 	jz	00125$
                           2430 ;	radio/tdm.c:549: if (len == sizeof(struct statistics)) {
   0904 78r33         [12] 2431 	mov	r0,#_tdm_serial_loop_len_2_208
   0906 E2            [24] 2432 	movx	a,@r0
   0907 B4 04 20      [24] 2433 	cjne	a,#0x04,00114$
                           2434 ;	radio/tdm.c:550: memcpy(&remote_statistics, pbuf, len);
   090A 90r00r00      [24] 2435 	mov	dptr,#_memcpy_PARM_2
   090D 74r00         [12] 2436 	mov	a,#_pbuf
   090F F0            [24] 2437 	movx	@dptr,a
   0910 74s00         [12] 2438 	mov	a,#(_pbuf >> 8)
   0912 A3            [24] 2439 	inc	dptr
   0913 F0            [24] 2440 	movx	@dptr,a
   0914 E4            [12] 2441 	clr	a
   0915 A3            [24] 2442 	inc	dptr
   0916 F0            [24] 2443 	movx	@dptr,a
   0917 78r33         [12] 2444 	mov	r0,#_tdm_serial_loop_len_2_208
   0919 90r00r00      [24] 2445 	mov	dptr,#_memcpy_PARM_3
   091C E2            [24] 2446 	movx	a,@r0
   091D F0            [24] 2447 	movx	@dptr,a
   091E E4            [12] 2448 	clr	a
   091F A3            [24] 2449 	inc	dptr
   0920 F0            [24] 2450 	movx	@dptr,a
   0921 90r00r00      [24] 2451 	mov	dptr,#_remote_statistics
   0924 75 F0 60      [24] 2452 	mov	b,#0x60
   0927 12r00r00      [24] 2453 	lcall	_memcpy
   092A                    2454 00114$:
                           2455 ;	radio/tdm.c:554: statistics.receive_count--;
   092A 78r02         [12] 2456 	mov	r0,#(_statistics + 0x0002)
   092C E2            [24] 2457 	movx	a,@r0
   092D FE            [12] 2458 	mov	r6,a
   092E 08            [12] 2459 	inc	r0
   092F E2            [24] 2460 	movx	a,@r0
   0930 FF            [12] 2461 	mov	r7,a
   0931 1E            [12] 2462 	dec	r6
   0932 BE FF 01      [24] 2463 	cjne	r6,#0xFF,00353$
   0935 1F            [12] 2464 	dec	r7
   0936                    2465 00353$:
   0936 78r02         [12] 2466 	mov	r0,#(_statistics + 0x0002)
   0938 EE            [12] 2467 	mov	a,r6
   0939 F2            [24] 2468 	movx	@r0,a
   093A 08            [12] 2469 	inc	r0
   093B EF            [12] 2470 	mov	a,r7
   093C F2            [24] 2471 	movx	@r0,a
   093D 02r07rC5      [24] 2472 	ljmp	00192$
   0940                    2473 00125$:
                           2474 ;	radio/tdm.c:555: } else if (trailer.window != 0) {
   0940 78r1A         [12] 2475 	mov	r0,#_trailer
   0942 E2            [24] 2476 	movx	a,@r0
   0943 FE            [12] 2477 	mov	r6,a
   0944 08            [12] 2478 	inc	r0
   0945 E2            [24] 2479 	movx	a,@r0
   0946 54 1F         [12] 2480 	anl	a,#0x1F
   0948 FF            [12] 2481 	mov	r7,a
   0949 4E            [12] 2482 	orl	a,r6
   094A 70 03         [24] 2483 	jnz	00354$
   094C 02r07rC5      [24] 2484 	ljmp	00192$
   094F                    2485 00354$:
                           2486 ;	radio/tdm.c:558: sync_tx_windows(len);
   094F 78r33         [12] 2487 	mov	r0,#_tdm_serial_loop_len_2_208
   0951 E2            [24] 2488 	movx	a,@r0
   0952 F5 82         [12] 2489 	mov	dpl,a
   0954 C0 03         [24] 2490 	push	ar3
   0956 C0 02         [24] 2491 	push	ar2
   0958 12r01r05      [24] 2492 	lcall	_sync_tx_windows
   095B D0 02         [24] 2493 	pop	ar2
   095D D0 03         [24] 2494 	pop	ar3
                           2495 ;	radio/tdm.c:559: last_t = tnow;
   095F 78r2F         [12] 2496 	mov	r0,#_tdm_serial_loop_last_t_1_207
   0961 EA            [12] 2497 	mov	a,r2
   0962 F2            [24] 2498 	movx	@r0,a
   0963 08            [12] 2499 	inc	r0
   0964 EB            [12] 2500 	mov	a,r3
   0965 F2            [24] 2501 	movx	@r0,a
                           2502 ;	radio/tdm.c:561: if (trailer.command == 1) {
   0966 78r1B         [12] 2503 	mov	r0,#(_trailer + 0x0001)
   0968 E2            [24] 2504 	movx	a,@r0
   0969 C4            [12] 2505 	swap	a
   096A 03            [12] 2506 	rr	a
   096B 54 01         [12] 2507 	anl	a,#0x01
   096D FF            [12] 2508 	mov	r7,a
   096E BF 01 0B      [24] 2509 	cjne	r7,#0x01,00120$
                           2510 ;	radio/tdm.c:562: handle_at_command(len);
   0971 78r33         [12] 2511 	mov	r0,#_tdm_serial_loop_len_2_208
   0973 E2            [24] 2512 	movx	a,@r0
   0974 F5 82         [12] 2513 	mov	dpl,a
   0976 12r07r15      [24] 2514 	lcall	_handle_at_command
   0979 02r07rC5      [24] 2515 	ljmp	00192$
   097C                    2516 00120$:
                           2517 ;	radio/tdm.c:563: } else if (len != 0 && 
   097C 78r33         [12] 2518 	mov	r0,#_tdm_serial_loop_len_2_208
   097E E2            [24] 2519 	movx	a,@r0
   097F 70 03         [24] 2520 	jnz	00357$
   0981 02r07rC5      [24] 2521 	ljmp	00192$
   0984                    2522 00357$:
                           2523 ;	radio/tdm.c:564: !packet_is_duplicate(len, pbuf, trailer.resend) &&
   0984 78r1B         [12] 2524 	mov	r0,#(_trailer + 0x0001)
   0986 E2            [24] 2525 	movx	a,@r0
   0987 23            [12] 2526 	rl	a
   0988 54 01         [12] 2527 	anl	a,#0x01
   098A 24 FF         [12] 2528 	add	a,#0xff
   098C 92*00         [24] 2529 	mov	_packet_is_duplicate_PARM_3,c
   098E 78r00         [12] 2530 	mov	r0,#_packet_is_duplicate_PARM_2
   0990 74r00         [12] 2531 	mov	a,#_pbuf
   0992 F2            [24] 2532 	movx	@r0,a
   0993 08            [12] 2533 	inc	r0
   0994 74s00         [12] 2534 	mov	a,#(_pbuf >> 8)
   0996 F2            [24] 2535 	movx	@r0,a
   0997 78r33         [12] 2536 	mov	r0,#_tdm_serial_loop_len_2_208
   0999 E2            [24] 2537 	movx	a,@r0
   099A F5 82         [12] 2538 	mov	dpl,a
   099C 12r00r00      [24] 2539 	lcall	_packet_is_duplicate
   099F 50 03         [24] 2540 	jnc	00358$
   09A1 02r07rC5      [24] 2541 	ljmp	00192$
   09A4                    2542 00358$:
                           2543 ;	radio/tdm.c:565: !at_mode_active) {
   09A4 30*00 03      [24] 2544 	jnb	_at_mode_active,00359$
   09A7 02r07rC5      [24] 2545 	ljmp	00192$
   09AA                    2546 00359$:
                           2547 ;	radio/tdm.c:569: LED_ACTIVITY = LED_ON;
   09AA C2 96         [12] 2548 	clr	_LED_RED
                           2549 ;	radio/tdm.c:570: serial_write_buf(pbuf, len);
   09AC 78r33         [12] 2550 	mov	r0,#_tdm_serial_loop_len_2_208
   09AE 79r00         [12] 2551 	mov	r1,#_serial_write_buf_PARM_2
   09B0 E2            [24] 2552 	movx	a,@r0
   09B1 F3            [24] 2553 	movx	@r1,a
   09B2 90r00r00      [24] 2554 	mov	dptr,#_pbuf
   09B5 12r00r00      [24] 2555 	lcall	_serial_write_buf
                           2556 ;	radio/tdm.c:571: LED_ACTIVITY = LED_OFF;
   09B8 D2 96         [12] 2557 	setb	_LED_RED
                           2558 ;	radio/tdm.c:575: continue;
   09BA 02r07rC5      [24] 2559 	ljmp	00192$
   09BD                    2560 00129$:
                           2561 ;	radio/tdm.c:581: tnow = timer2_tick();
   09BD 12r00r00      [24] 2562 	lcall	_timer2_tick
   09C0 AA 82         [24] 2563 	mov	r2,dpl
   09C2 AB 83         [24] 2564 	mov	r3,dph
                           2565 ;	radio/tdm.c:582: tdelta = tnow - last_t;
   09C4 78r2F         [12] 2566 	mov	r0,#_tdm_serial_loop_last_t_1_207
   09C6 79r34         [12] 2567 	mov	r1,#_tdm_serial_loop_tdelta_2_208
   09C8 D3            [12] 2568 	setb	c
   09C9 E2            [24] 2569 	movx	a,@r0
   09CA 9A            [12] 2570 	subb	a,r2
   09CB F4            [12] 2571 	cpl	a
   09CC B3            [12] 2572 	cpl	c
   09CD F3            [24] 2573 	movx	@r1,a
   09CE B3            [12] 2574 	cpl	c
   09CF 08            [12] 2575 	inc	r0
   09D0 E2            [24] 2576 	movx	a,@r0
   09D1 9B            [12] 2577 	subb	a,r3
   09D2 F4            [12] 2578 	cpl	a
   09D3 09            [12] 2579 	inc	r1
   09D4 F3            [24] 2580 	movx	@r1,a
                           2581 ;	radio/tdm.c:583: tdm_state_update(tdelta);
   09D5 78r34         [12] 2582 	mov	r0,#_tdm_serial_loop_tdelta_2_208
   09D7 E2            [24] 2583 	movx	a,@r0
   09D8 F5 82         [12] 2584 	mov	dpl,a
   09DA 08            [12] 2585 	inc	r0
   09DB E2            [24] 2586 	movx	a,@r0
   09DC F5 83         [12] 2587 	mov	dph,a
   09DE C0 03         [24] 2588 	push	ar3
   09E0 C0 02         [24] 2589 	push	ar2
   09E2 12r02r6C      [24] 2590 	lcall	_tdm_state_update
   09E5 D0 02         [24] 2591 	pop	ar2
   09E7 D0 03         [24] 2592 	pop	ar3
                           2593 ;	radio/tdm.c:584: last_t = tnow;
   09E9 78r2F         [12] 2594 	mov	r0,#_tdm_serial_loop_last_t_1_207
   09EB EA            [12] 2595 	mov	a,r2
   09EC F2            [24] 2596 	movx	@r0,a
   09ED 08            [12] 2597 	inc	r0
   09EE EB            [12] 2598 	mov	a,r3
   09EF F2            [24] 2599 	movx	@r0,a
                           2600 ;	radio/tdm.c:587: if (tnow - last_link_update > 32768) {
   09F0 78r31         [12] 2601 	mov	r0,#_tdm_serial_loop_last_link_update_1_207
   09F2 D3            [12] 2602 	setb	c
   09F3 E2            [24] 2603 	movx	a,@r0
   09F4 9A            [12] 2604 	subb	a,r2
   09F5 F4            [12] 2605 	cpl	a
   09F6 B3            [12] 2606 	cpl	c
   09F7 FC            [12] 2607 	mov	r4,a
   09F8 B3            [12] 2608 	cpl	c
   09F9 08            [12] 2609 	inc	r0
   09FA E2            [24] 2610 	movx	a,@r0
   09FB 9B            [12] 2611 	subb	a,r3
   09FC F4            [12] 2612 	cpl	a
   09FD FD            [12] 2613 	mov	r5,a
   09FE 7E 00         [12] 2614 	mov	r6,#0x00
   0A00 7F 00         [12] 2615 	mov	r7,#0x00
   0A02 C3            [12] 2616 	clr	c
   0A03 E4            [12] 2617 	clr	a
   0A04 9C            [12] 2618 	subb	a,r4
   0A05 74 80         [12] 2619 	mov	a,#0x80
   0A07 9D            [12] 2620 	subb	a,r5
   0A08 E4            [12] 2621 	clr	a
   0A09 9E            [12] 2622 	subb	a,r6
   0A0A E4            [12] 2623 	clr	a
   0A0B 64 80         [12] 2624 	xrl	a,#0x80
   0A0D 8F F0         [24] 2625 	mov	b,r7
   0A0F 63 F0 80      [24] 2626 	xrl	b,#0x80
   0A12 95 F0         [12] 2627 	subb	a,b
   0A14 50 12         [24] 2628 	jnc	00131$
                           2629 ;	radio/tdm.c:588: link_update();
   0A16 C0 03         [24] 2630 	push	ar3
   0A18 C0 02         [24] 2631 	push	ar2
   0A1A 12r05r9F      [24] 2632 	lcall	_link_update
   0A1D D0 02         [24] 2633 	pop	ar2
   0A1F D0 03         [24] 2634 	pop	ar3
                           2635 ;	radio/tdm.c:589: last_link_update = tnow;
   0A21 78r31         [12] 2636 	mov	r0,#_tdm_serial_loop_last_link_update_1_207
   0A23 EA            [12] 2637 	mov	a,r2
   0A24 F2            [24] 2638 	movx	@r0,a
   0A25 08            [12] 2639 	inc	r0
   0A26 EB            [12] 2640 	mov	a,r3
   0A27 F2            [24] 2641 	movx	@r0,a
   0A28                    2642 00131$:
                           2643 ;	radio/tdm.c:592: if (lbt_rssi != 0) {
   0A28 78r12         [12] 2644 	mov	r0,#_lbt_rssi
   0A2A E2            [24] 2645 	movx	a,@r0
   0A2B 70 03         [24] 2646 	jnz	00361$
   0A2D 02r0ArAD      [24] 2647 	ljmp	00140$
   0A30                    2648 00361$:
                           2649 ;	radio/tdm.c:594: if (radio_current_rssi() < lbt_rssi) {
   0A30 12r00r00      [24] 2650 	lcall	_radio_current_rssi
   0A33 AF 82         [24] 2651 	mov	r7,dpl
   0A35 78r12         [12] 2652 	mov	r0,#_lbt_rssi
   0A37 C3            [12] 2653 	clr	c
   0A38 E2            [24] 2654 	movx	a,@r0
   0A39 F5 F0         [12] 2655 	mov	b,a
   0A3B EF            [12] 2656 	mov	a,r7
   0A3C 95 F0         [12] 2657 	subb	a,b
   0A3E 50 16         [24] 2658 	jnc	00135$
                           2659 ;	radio/tdm.c:595: lbt_listen_time += tdelta;
   0A40 78r13         [12] 2660 	mov	r0,#_lbt_listen_time
   0A42 79r34         [12] 2661 	mov	r1,#_tdm_serial_loop_tdelta_2_208
   0A44 E3            [24] 2662 	movx	a,@r1
   0A45 C5 F0         [12] 2663 	xch	a,b
   0A47 E2            [24] 2664 	movx	a,@r0
   0A48 25 F0         [12] 2665 	add	a,b
   0A4A F2            [24] 2666 	movx	@r0,a
   0A4B 09            [12] 2667 	inc	r1
   0A4C E3            [24] 2668 	movx	a,@r1
   0A4D C5 F0         [12] 2669 	xch	a,b
   0A4F 08            [12] 2670 	inc	r0
   0A50 E2            [24] 2671 	movx	a,@r0
   0A51 35 F0         [12] 2672 	addc	a,b
   0A53 F2            [24] 2673 	movx	@r0,a
   0A54 80 36         [24] 2674 	sjmp	00136$
   0A56                    2675 00135$:
                           2676 ;	radio/tdm.c:597: lbt_listen_time = 0;
   0A56 78r13         [12] 2677 	mov	r0,#_lbt_listen_time
   0A58 E4            [12] 2678 	clr	a
   0A59 F2            [24] 2679 	movx	@r0,a
   0A5A 08            [12] 2680 	inc	r0
   0A5B F2            [24] 2681 	movx	@r0,a
                           2682 ;	radio/tdm.c:598: if (lbt_rand == 0) {
   0A5C 78r17         [12] 2683 	mov	r0,#_lbt_rand
   0A5E E2            [24] 2684 	movx	a,@r0
   0A5F F5 F0         [12] 2685 	mov	b,a
   0A61 08            [12] 2686 	inc	r0
   0A62 E2            [24] 2687 	movx	a,@r0
   0A63 45 F0         [12] 2688 	orl	a,b
   0A65 70 25         [24] 2689 	jnz	00136$
                           2690 ;	radio/tdm.c:599: lbt_rand = ((uint16_t)rand()) % lbt_min_time;
   0A67 12r00r00      [24] 2691 	lcall	_rand
   0A6A AE 82         [24] 2692 	mov	r6,dpl
   0A6C AF 83         [24] 2693 	mov	r7,dph
   0A6E 78r15         [12] 2694 	mov	r0,#_lbt_min_time
   0A70 90r00r00      [24] 2695 	mov	dptr,#__moduint_PARM_2
   0A73 E2            [24] 2696 	movx	a,@r0
   0A74 F0            [24] 2697 	movx	@dptr,a
   0A75 08            [12] 2698 	inc	r0
   0A76 E2            [24] 2699 	movx	a,@r0
   0A77 A3            [24] 2700 	inc	dptr
   0A78 F0            [24] 2701 	movx	@dptr,a
   0A79 8E 82         [24] 2702 	mov	dpl,r6
   0A7B 8F 83         [24] 2703 	mov	dph,r7
   0A7D 12r00r00      [24] 2704 	lcall	__moduint
   0A80 E5 82         [12] 2705 	mov	a,dpl
   0A82 85 83 F0      [24] 2706 	mov	b,dph
   0A85 78r17         [12] 2707 	mov	r0,#_lbt_rand
   0A87 F2            [24] 2708 	movx	@r0,a
   0A88 08            [12] 2709 	inc	r0
   0A89 E5 F0         [12] 2710 	mov	a,b
   0A8B F2            [24] 2711 	movx	@r0,a
   0A8C                    2712 00136$:
                           2713 ;	radio/tdm.c:602: if (lbt_listen_time < lbt_min_time + lbt_rand) {
   0A8C 78r15         [12] 2714 	mov	r0,#_lbt_min_time
   0A8E 79r17         [12] 2715 	mov	r1,#_lbt_rand
   0A90 E3            [24] 2716 	movx	a,@r1
   0A91 C5 F0         [12] 2717 	xch	a,b
   0A93 E2            [24] 2718 	movx	a,@r0
   0A94 25 F0         [12] 2719 	add	a,b
   0A96 FE            [12] 2720 	mov	r6,a
   0A97 09            [12] 2721 	inc	r1
   0A98 E3            [24] 2722 	movx	a,@r1
   0A99 C5 F0         [12] 2723 	xch	a,b
   0A9B 08            [12] 2724 	inc	r0
   0A9C E2            [24] 2725 	movx	a,@r0
   0A9D 35 F0         [12] 2726 	addc	a,b
   0A9F FF            [12] 2727 	mov	r7,a
   0AA0 78r13         [12] 2728 	mov	r0,#_lbt_listen_time
   0AA2 C3            [12] 2729 	clr	c
   0AA3 E2            [24] 2730 	movx	a,@r0
   0AA4 9E            [12] 2731 	subb	a,r6
   0AA5 08            [12] 2732 	inc	r0
   0AA6 E2            [24] 2733 	movx	a,@r0
   0AA7 9F            [12] 2734 	subb	a,r7
   0AA8 50 03         [24] 2735 	jnc	00364$
   0AAA 02r07rC5      [24] 2736 	ljmp	00192$
   0AAD                    2737 00364$:
                           2738 ;	radio/tdm.c:604: continue;
   0AAD                    2739 00140$:
                           2740 ;	radio/tdm.c:612: if (tdm_state != TDM_TRANSMIT &&
   0AAD 78r00         [12] 2741 	mov	r0,#_tdm_state
   0AAF E2            [24] 2742 	movx	a,@r0
   0AB0 60 11         [24] 2743 	jz	00142$
                           2744 ;	radio/tdm.c:613: !(bonus_transmit && tdm_state == TDM_RECEIVE)) {
   0AB2 20*00 03      [24] 2745 	jb	_bonus_transmit,00366$
   0AB5 02r07rC5      [24] 2746 	ljmp	00192$
   0AB8                    2747 00366$:
   0AB8 78r00         [12] 2748 	mov	r0,#_tdm_state
   0ABA E2            [24] 2749 	movx	a,@r0
   0ABB B4 02 02      [24] 2750 	cjne	a,#0x02,00367$
   0ABE 80 03         [24] 2751 	sjmp	00368$
   0AC0                    2752 00367$:
   0AC0 02r07rC5      [24] 2753 	ljmp	00192$
   0AC3                    2754 00368$:
                           2755 ;	radio/tdm.c:615: continue;
   0AC3                    2756 00142$:
                           2757 ;	radio/tdm.c:623: if (transmit_yield != 0) {
   0AC3 30*01 03      [24] 2758 	jnb	_transmit_yield,00369$
   0AC6 02r07rC5      [24] 2759 	ljmp	00192$
   0AC9                    2760 00369$:
                           2761 ;	radio/tdm.c:628: if (transmit_wait != 0) {
   0AC9 78r0C         [12] 2762 	mov	r0,#_transmit_wait
   0ACB E2            [24] 2763 	movx	a,@r0
   0ACC F5 F0         [12] 2764 	mov	b,a
   0ACE 08            [12] 2765 	inc	r0
   0ACF E2            [24] 2766 	movx	a,@r0
   0AD0 45 F0         [12] 2767 	orl	a,b
   0AD2 60 03         [24] 2768 	jz	00370$
   0AD4 02r07rC5      [24] 2769 	ljmp	00192$
   0AD7                    2770 00370$:
                           2771 ;	radio/tdm.c:633: if (!received_packet &&
   0AD7 20*03 05      [24] 2772 	jb	_received_packet,00152$
                           2773 ;	radio/tdm.c:634: radio_preamble_detected() ||
   0ADA 12r00r00      [24] 2774 	lcall	_radio_preamble_detected
   0ADD 40 05         [24] 2775 	jc	00149$
   0ADF                    2776 00152$:
                           2777 ;	radio/tdm.c:635: radio_receive_in_progress()) {
   0ADF 12r00r00      [24] 2778 	lcall	_radio_receive_in_progress
   0AE2 50 11         [24] 2779 	jnc	00150$
   0AE4                    2780 00149$:
                           2781 ;	radio/tdm.c:638: transmit_wait = packet_latency;
   0AE4 78r08         [12] 2782 	mov	r0,#_packet_latency
   0AE6 E2            [24] 2783 	movx	a,@r0
   0AE7 FE            [12] 2784 	mov	r6,a
   0AE8 08            [12] 2785 	inc	r0
   0AE9 E2            [24] 2786 	movx	a,@r0
   0AEA FF            [12] 2787 	mov	r7,a
   0AEB 78r0C         [12] 2788 	mov	r0,#_transmit_wait
   0AED EE            [12] 2789 	mov	a,r6
   0AEE F2            [24] 2790 	movx	@r0,a
   0AEF 08            [12] 2791 	inc	r0
   0AF0 EF            [12] 2792 	mov	a,r7
   0AF1 F2            [24] 2793 	movx	@r0,a
                           2794 ;	radio/tdm.c:639: continue;
   0AF2 02r07rC5      [24] 2795 	ljmp	00192$
   0AF5                    2796 00150$:
                           2797 ;	radio/tdm.c:645: statistics.average_noise = (radio_current_rssi() + 3*(uint16_t)statistics.average_noise)/4;
   0AF5 12r00r00      [24] 2798 	lcall	_radio_current_rssi
   0AF8 AF 82         [24] 2799 	mov	r7,dpl
   0AFA 7E 00         [12] 2800 	mov	r6,#0x00
   0AFC 78r01         [12] 2801 	mov	r0,#(_statistics + 0x0001)
   0AFE E2            [24] 2802 	movx	a,@r0
   0AFF 90r00r00      [24] 2803 	mov	dptr,#__mulint_PARM_2
   0B02 F0            [24] 2804 	movx	@dptr,a
   0B03 E4            [12] 2805 	clr	a
   0B04 A3            [24] 2806 	inc	dptr
   0B05 F0            [24] 2807 	movx	@dptr,a
   0B06 90 00 03      [24] 2808 	mov	dptr,#0x0003
   0B09 C0 07         [24] 2809 	push	ar7
   0B0B C0 06         [24] 2810 	push	ar6
   0B0D 12r00r00      [24] 2811 	lcall	__mulint
   0B10 AC 82         [24] 2812 	mov	r4,dpl
   0B12 AD 83         [24] 2813 	mov	r5,dph
   0B14 D0 06         [24] 2814 	pop	ar6
   0B16 D0 07         [24] 2815 	pop	ar7
   0B18 EC            [12] 2816 	mov	a,r4
   0B19 2F            [12] 2817 	add	a,r7
   0B1A FC            [12] 2818 	mov	r4,a
   0B1B ED            [12] 2819 	mov	a,r5
   0B1C 3E            [12] 2820 	addc	a,r6
   0B1D C3            [12] 2821 	clr	c
   0B1E 13            [12] 2822 	rrc	a
   0B1F CC            [12] 2823 	xch	a,r4
   0B20 13            [12] 2824 	rrc	a
   0B21 CC            [12] 2825 	xch	a,r4
   0B22 C3            [12] 2826 	clr	c
   0B23 13            [12] 2827 	rrc	a
   0B24 CC            [12] 2828 	xch	a,r4
   0B25 13            [12] 2829 	rrc	a
   0B26 CC            [12] 2830 	xch	a,r4
   0B27 FD            [12] 2831 	mov	r5,a
   0B28 78r01         [12] 2832 	mov	r0,#(_statistics + 0x0001)
   0B2A EC            [12] 2833 	mov	a,r4
   0B2B F2            [24] 2834 	movx	@r0,a
                           2835 ;	radio/tdm.c:647: if (duty_cycle_wait) {
   0B2C 30*04 03      [24] 2836 	jnb	_duty_cycle_wait,00374$
   0B2F 02r07rC5      [24] 2837 	ljmp	00192$
   0B32                    2838 00374$:
                           2839 ;	radio/tdm.c:654: if (tdm_state_remaining < packet_latency) {
   0B32 78r01         [12] 2840 	mov	r0,#_tdm_state_remaining
   0B34 79r08         [12] 2841 	mov	r1,#_packet_latency
   0B36 C3            [12] 2842 	clr	c
   0B37 E3            [24] 2843 	movx	a,@r1
   0B38 F5 F0         [12] 2844 	mov	b,a
   0B3A E2            [24] 2845 	movx	a,@r0
   0B3B 95 F0         [12] 2846 	subb	a,b
   0B3D 09            [12] 2847 	inc	r1
   0B3E E3            [24] 2848 	movx	a,@r1
   0B3F F5 F0         [12] 2849 	mov	b,a
   0B41 08            [12] 2850 	inc	r0
   0B42 E2            [24] 2851 	movx	a,@r0
   0B43 95 F0         [12] 2852 	subb	a,b
   0B45 50 03         [24] 2853 	jnc	00375$
   0B47 02r07rC5      [24] 2854 	ljmp	00192$
   0B4A                    2855 00375$:
                           2856 ;	radio/tdm.c:658: max_xmit = (tdm_state_remaining - packet_latency) / ticks_per_byte;
   0B4A 78r01         [12] 2857 	mov	r0,#_tdm_state_remaining
   0B4C 79r08         [12] 2858 	mov	r1,#_packet_latency
   0B4E E3            [24] 2859 	movx	a,@r1
   0B4F F5 F0         [12] 2860 	mov	b,a
   0B51 C3            [12] 2861 	clr	c
   0B52 E2            [24] 2862 	movx	a,@r0
   0B53 95 F0         [12] 2863 	subb	a,b
   0B55 FE            [12] 2864 	mov	r6,a
   0B56 09            [12] 2865 	inc	r1
   0B57 E3            [24] 2866 	movx	a,@r1
   0B58 F5 F0         [12] 2867 	mov	b,a
   0B5A 08            [12] 2868 	inc	r0
   0B5B E2            [24] 2869 	movx	a,@r0
   0B5C 95 F0         [12] 2870 	subb	a,b
   0B5E FF            [12] 2871 	mov	r7,a
   0B5F 78r0A         [12] 2872 	mov	r0,#_ticks_per_byte
   0B61 90r00r00      [24] 2873 	mov	dptr,#__divuint_PARM_2
   0B64 E2            [24] 2874 	movx	a,@r0
   0B65 F0            [24] 2875 	movx	@dptr,a
   0B66 08            [12] 2876 	inc	r0
   0B67 E2            [24] 2877 	movx	a,@r0
   0B68 A3            [24] 2878 	inc	dptr
   0B69 F0            [24] 2879 	movx	@dptr,a
   0B6A 8E 82         [24] 2880 	mov	dpl,r6
   0B6C 8F 83         [24] 2881 	mov	dph,r7
   0B6E 12r00r00      [24] 2882 	lcall	__divuint
   0B71 AE 82         [24] 2883 	mov	r6,dpl
   0B73 AF 83         [24] 2884 	mov	r7,dph
                           2885 ;	radio/tdm.c:659: if (max_xmit < sizeof(trailer)+1) {
   0B75 BE 03 00      [24] 2886 	cjne	r6,#0x03,00376$
   0B78                    2887 00376$:
   0B78 50 03         [24] 2888 	jnc	00377$
   0B7A 02r07rC5      [24] 2889 	ljmp	00192$
   0B7D                    2890 00377$:
                           2891 ;	radio/tdm.c:663: max_xmit -= sizeof(trailer)+1;
   0B7D 1E            [12] 2892 	dec	r6
   0B7E 1E            [12] 2893 	dec	r6
   0B7F 1E            [12] 2894 	dec	r6
                           2895 ;	radio/tdm.c:664: if (max_xmit > max_data_packet_length) {
   0B80 78r05         [12] 2896 	mov	r0,#_max_data_packet_length
   0B82 C3            [12] 2897 	clr	c
   0B83 E2            [24] 2898 	movx	a,@r0
   0B84 9E            [12] 2899 	subb	a,r6
   0B85 50 04         [24] 2900 	jnc	00160$
                           2901 ;	radio/tdm.c:665: max_xmit = max_data_packet_length;
   0B87 78r05         [12] 2902 	mov	r0,#_max_data_packet_length
   0B89 E2            [24] 2903 	movx	a,@r0
   0B8A FE            [12] 2904 	mov	r6,a
   0B8B                    2905 00160$:
                           2906 ;	radio/tdm.c:669: if (send_at_command && 
   0B8B 30*06 57      [24] 2907 	jnb	_send_at_command,00162$
                           2908 ;	radio/tdm.c:670: max_xmit >= strlen(remote_at_cmd)) {
   0B8E 90r00r1C      [24] 2909 	mov	dptr,#_remote_at_cmd
   0B91 75 F0 60      [24] 2910 	mov	b,#0x60
   0B94 C0 06         [24] 2911 	push	ar6
   0B96 12r00r00      [24] 2912 	lcall	_strlen
   0B99 AD 82         [24] 2913 	mov	r5,dpl
   0B9B AF 83         [24] 2914 	mov	r7,dph
   0B9D D0 06         [24] 2915 	pop	ar6
   0B9F 8E 03         [24] 2916 	mov	ar3,r6
   0BA1 7C 00         [12] 2917 	mov	r4,#0x00
   0BA3 C3            [12] 2918 	clr	c
   0BA4 EB            [12] 2919 	mov	a,r3
   0BA5 9D            [12] 2920 	subb	a,r5
   0BA6 EC            [12] 2921 	mov	a,r4
   0BA7 9F            [12] 2922 	subb	a,r7
   0BA8 40 3B         [24] 2923 	jc	00162$
                           2924 ;	radio/tdm.c:672: len = strlen(remote_at_cmd);
   0BAA 90r00r1C      [24] 2925 	mov	dptr,#_remote_at_cmd
   0BAD 75 F0 60      [24] 2926 	mov	b,#0x60
   0BB0 C0 06         [24] 2927 	push	ar6
   0BB2 12r00r00      [24] 2928 	lcall	_strlen
   0BB5 AD 82         [24] 2929 	mov	r5,dpl
   0BB7 78r33         [12] 2930 	mov	r0,#_tdm_serial_loop_len_2_208
   0BB9 ED            [12] 2931 	mov	a,r5
   0BBA F2            [24] 2932 	movx	@r0,a
                           2933 ;	radio/tdm.c:673: memcpy(pbuf, remote_at_cmd, len);
   0BBB 90r00r00      [24] 2934 	mov	dptr,#_memcpy_PARM_2
   0BBE 74r1C         [12] 2935 	mov	a,#_remote_at_cmd
   0BC0 F0            [24] 2936 	movx	@dptr,a
   0BC1 E4            [12] 2937 	clr	a
   0BC2 A3            [24] 2938 	inc	dptr
   0BC3 F0            [24] 2939 	movx	@dptr,a
   0BC4 74 60         [12] 2940 	mov	a,#0x60
   0BC6 A3            [24] 2941 	inc	dptr
   0BC7 F0            [24] 2942 	movx	@dptr,a
   0BC8 90r00r00      [24] 2943 	mov	dptr,#_memcpy_PARM_3
   0BCB ED            [12] 2944 	mov	a,r5
   0BCC F0            [24] 2945 	movx	@dptr,a
   0BCD E4            [12] 2946 	clr	a
   0BCE A3            [24] 2947 	inc	dptr
   0BCF F0            [24] 2948 	movx	@dptr,a
   0BD0 90r00r00      [24] 2949 	mov	dptr,#_pbuf
   0BD3 75 F0 00      [24] 2950 	mov	b,#0x00
   0BD6 12r00r00      [24] 2951 	lcall	_memcpy
   0BD9 D0 06         [24] 2952 	pop	ar6
                           2953 ;	radio/tdm.c:674: trailer.command = 1;
   0BDB 78r1B         [12] 2954 	mov	r0,#(_trailer + 0x0001)
   0BDD E2            [24] 2955 	movx	a,@r0
   0BDE 44 20         [12] 2956 	orl	a,#0x20
   0BE0 F2            [24] 2957 	movx	@r0,a
                           2958 ;	radio/tdm.c:675: send_at_command = false;
   0BE1 C2*06         [12] 2959 	clr	_send_at_command
   0BE3 80 26         [24] 2960 	sjmp	00163$
   0BE5                    2961 00162$:
                           2962 ;	radio/tdm.c:678: len = packet_get_next(max_xmit, pbuf);
   0BE5 78r00         [12] 2963 	mov	r0,#_packet_get_next_PARM_2
   0BE7 74r00         [12] 2964 	mov	a,#_pbuf
   0BE9 F2            [24] 2965 	movx	@r0,a
   0BEA 08            [12] 2966 	inc	r0
   0BEB 74s00         [12] 2967 	mov	a,#(_pbuf >> 8)
   0BED F2            [24] 2968 	movx	@r0,a
   0BEE 8E 82         [24] 2969 	mov	dpl,r6
   0BF0 C0 06         [24] 2970 	push	ar6
   0BF2 12r00r00      [24] 2971 	lcall	_packet_get_next
   0BF5 E5 82         [12] 2972 	mov	a,dpl
   0BF7 78r33         [12] 2973 	mov	r0,#_tdm_serial_loop_len_2_208
   0BF9 F2            [24] 2974 	movx	@r0,a
                           2975 ;	radio/tdm.c:679: trailer.command = packet_is_injected();
   0BFA 12r00r00      [24] 2976 	lcall	_packet_is_injected
   0BFD D0 06         [24] 2977 	pop	ar6
   0BFF 92*09         [24] 2978 	mov  _tdm_serial_loop_sloc0_1_0,c
   0C01 E4            [12] 2979 	clr	a
   0C02 33            [12] 2980 	rlc	a
   0C03 FF            [12] 2981 	mov	r7,a
   0C04 78r1B         [12] 2982 	mov	r0,#(_trailer + 0x0001)
   0C06 13            [12] 2983 	rrc	a
   0C07 E2            [24] 2984 	movx	a,@r0
   0C08 92 E5         [24] 2985 	mov	acc.5,c
   0C0A F2            [24] 2986 	movx	@r0,a
   0C0B                    2987 00163$:
                           2988 ;	radio/tdm.c:682: if (len > max_data_packet_length) {
   0C0B 78r33         [12] 2989 	mov	r0,#_tdm_serial_loop_len_2_208
   0C0D 79r05         [12] 2990 	mov	r1,#_max_data_packet_length
   0C0F C3            [12] 2991 	clr	c
   0C10 E2            [24] 2992 	movx	a,@r0
   0C11 F5 F0         [12] 2993 	mov	b,a
   0C13 E3            [24] 2994 	movx	a,@r1
   0C14 95 F0         [12] 2995 	subb	a,b
   0C16 50 19         [24] 2996 	jnc	00166$
                           2997 ;	radio/tdm.c:683: panic("oversized tdm packet");
   0C18 C0 06         [24] 2998 	push	ar6
   0C1A 74rCE         [12] 2999 	mov	a,#__str_8
   0C1C C0 E0         [24] 3000 	push	acc
   0C1E 74s00         [12] 3001 	mov	a,#(__str_8 >> 8)
   0C20 C0 E0         [24] 3002 	push	acc
   0C22 74 80         [12] 3003 	mov	a,#0x80
   0C24 C0 E0         [24] 3004 	push	acc
   0C26 12r00r00      [24] 3005 	lcall	_panic
   0C29 15 81         [12] 3006 	dec	sp
   0C2B 15 81         [12] 3007 	dec	sp
   0C2D 15 81         [12] 3008 	dec	sp
   0C2F D0 06         [24] 3009 	pop	ar6
   0C31                    3010 00166$:
                           3011 ;	radio/tdm.c:686: trailer.bonus = (tdm_state == TDM_RECEIVE);
   0C31 78r00         [12] 3012 	mov	r0,#_tdm_state
   0C33 E2            [24] 3013 	movx	a,@r0
   0C34 B4 02 03      [24] 3014 	cjne	a,#0x02,00382$
   0C37 D3            [12] 3015 	setb	c
   0C38 80 01         [24] 3016 	sjmp	00383$
   0C3A                    3017 00382$:
   0C3A C3            [12] 3018 	clr	c
   0C3B                    3019 00383$:
   0C3B 92*09         [24] 3020 	mov  _tdm_serial_loop_sloc0_1_0,c
   0C3D E4            [12] 3021 	clr	a
   0C3E 33            [12] 3022 	rlc	a
   0C3F 78r1B         [12] 3023 	mov	r0,#(_trailer + 0x0001)
   0C41 13            [12] 3024 	rrc	a
   0C42 E2            [24] 3025 	movx	a,@r0
   0C43 92 E6         [24] 3026 	mov	acc.6,c
   0C45 F2            [24] 3027 	movx	@r0,a
                           3028 ;	radio/tdm.c:687: trailer.resend = packet_is_resend();
   0C46 C0 06         [24] 3029 	push	ar6
   0C48 12r00r00      [24] 3030 	lcall	_packet_is_resend
   0C4B D0 06         [24] 3031 	pop	ar6
   0C4D 92*09         [24] 3032 	mov  _tdm_serial_loop_sloc0_1_0,c
   0C4F E4            [12] 3033 	clr	a
   0C50 33            [12] 3034 	rlc	a
   0C51 FF            [12] 3035 	mov	r7,a
   0C52 78r1B         [12] 3036 	mov	r0,#(_trailer + 0x0001)
   0C54 13            [12] 3037 	rrc	a
   0C55 E2            [24] 3038 	movx	a,@r0
   0C56 92 E7         [24] 3039 	mov	acc.7,c
   0C58 F2            [24] 3040 	movx	@r0,a
                           3041 ;	radio/tdm.c:689: if (tdm_state == TDM_TRANSMIT &&
   0C59 78r00         [12] 3042 	mov	r0,#_tdm_state
   0C5B E2            [24] 3043 	movx	a,@r0
   0C5C 70 44         [24] 3044 	jnz	00168$
                           3045 ;	radio/tdm.c:690: len == 0 && 
   0C5E 78r33         [12] 3046 	mov	r0,#_tdm_serial_loop_len_2_208
   0C60 E2            [24] 3047 	movx	a,@r0
   0C61 70 3F         [24] 3048 	jnz	00168$
                           3049 ;	radio/tdm.c:691: send_statistics && 
   0C63 30*05 3C      [24] 3050 	jnb	_send_statistics,00168$
                           3051 ;	radio/tdm.c:692: max_xmit >= sizeof(statistics)) {
   0C66 BE 04 00      [24] 3052 	cjne	r6,#0x04,00387$
   0C69                    3053 00387$:
   0C69 40 37         [24] 3054 	jc	00168$
                           3055 ;	radio/tdm.c:694: send_statistics = 0;
   0C6B C2*05         [12] 3056 	clr	_send_statistics
                           3057 ;	radio/tdm.c:695: memcpy(pbuf, &statistics, sizeof(statistics));
   0C6D 90r00r00      [24] 3058 	mov	dptr,#_memcpy_PARM_2
   0C70 74r00         [12] 3059 	mov	a,#_statistics
   0C72 F0            [24] 3060 	movx	@dptr,a
   0C73 E4            [12] 3061 	clr	a
   0C74 A3            [24] 3062 	inc	dptr
   0C75 F0            [24] 3063 	movx	@dptr,a
   0C76 74 60         [12] 3064 	mov	a,#0x60
   0C78 A3            [24] 3065 	inc	dptr
   0C79 F0            [24] 3066 	movx	@dptr,a
   0C7A 90r00r00      [24] 3067 	mov	dptr,#_memcpy_PARM_3
   0C7D 74 04         [12] 3068 	mov	a,#0x04
   0C7F F0            [24] 3069 	movx	@dptr,a
   0C80 E4            [12] 3070 	clr	a
   0C81 A3            [24] 3071 	inc	dptr
   0C82 F0            [24] 3072 	movx	@dptr,a
   0C83 90r00r00      [24] 3073 	mov	dptr,#_pbuf
   0C86 75 F0 00      [24] 3074 	mov	b,#0x00
   0C89 12r00r00      [24] 3075 	lcall	_memcpy
                           3076 ;	radio/tdm.c:696: len = sizeof(statistics);
   0C8C 78r33         [12] 3077 	mov	r0,#_tdm_serial_loop_len_2_208
   0C8E 74 04         [12] 3078 	mov	a,#0x04
   0C90 F2            [24] 3079 	movx	@r0,a
                           3080 ;	radio/tdm.c:699: trailer.window = 0;
   0C91 78r1A         [12] 3081 	mov	r0,#_trailer
   0C93 E4            [12] 3082 	clr	a
   0C94 F2            [24] 3083 	movx	@r0,a
   0C95 08            [12] 3084 	inc	r0
   0C96 E2            [24] 3085 	movx	a,@r0
   0C97 54 E0         [12] 3086 	anl	a,#0xE0
   0C99 F2            [24] 3087 	movx	@r0,a
                           3088 ;	radio/tdm.c:700: trailer.resend = 0;
   0C9A 78r1B         [12] 3089 	mov	r0,#(_trailer + 0x0001)
   0C9C E2            [24] 3090 	movx	a,@r0
   0C9D 54 7F         [12] 3091 	anl	a,#0x7F
   0C9F F2            [24] 3092 	movx	@r0,a
   0CA0 80 28         [24] 3093 	sjmp	00169$
   0CA2                    3094 00168$:
                           3095 ;	radio/tdm.c:705: trailer.window = (uint16_t)(tdm_state_remaining - flight_time_estimate(len+sizeof(trailer)));
   0CA2 78r33         [12] 3096 	mov	r0,#_tdm_serial_loop_len_2_208
   0CA4 E2            [24] 3097 	movx	a,@r0
   0CA5 24 02         [12] 3098 	add	a,#0x02
   0CA7 F5 82         [12] 3099 	mov	dpl,a
   0CA9 12r00rDE      [24] 3100 	lcall	_flight_time_estimate
   0CAC AE 82         [24] 3101 	mov	r6,dpl
   0CAE AF 83         [24] 3102 	mov	r7,dph
   0CB0 78r01         [12] 3103 	mov	r0,#_tdm_state_remaining
   0CB2 E2            [24] 3104 	movx	a,@r0
   0CB3 C3            [12] 3105 	clr	c
   0CB4 9E            [12] 3106 	subb	a,r6
   0CB5 FE            [12] 3107 	mov	r6,a
   0CB6 08            [12] 3108 	inc	r0
   0CB7 E2            [24] 3109 	movx	a,@r0
   0CB8 9F            [12] 3110 	subb	a,r7
   0CB9 FF            [12] 3111 	mov	r7,a
   0CBA 78r1A         [12] 3112 	mov	r0,#_trailer
   0CBC EE            [12] 3113 	mov	a,r6
   0CBD F2            [24] 3114 	movx	@r0,a
   0CBE 08            [12] 3115 	inc	r0
   0CBF EF            [12] 3116 	mov	a,r7
   0CC0 54 1F         [12] 3117 	anl	a,#0x1F
   0CC2 F5 F0         [12] 3118 	mov	b,a
   0CC4 E2            [24] 3119 	movx	a,@r0
   0CC5 54 E0         [12] 3120 	anl	a,#0xE0
   0CC7 45 F0         [12] 3121 	orl	a,b
   0CC9 F2            [24] 3122 	movx	@r0,a
   0CCA                    3123 00169$:
                           3124 ;	radio/tdm.c:709: radio_set_channel(fhop_transmit_channel());
   0CCA 12r00r00      [24] 3125 	lcall	_fhop_transmit_channel
   0CCD 12r00r00      [24] 3126 	lcall	_radio_set_channel
                           3127 ;	radio/tdm.c:711: memcpy(&pbuf[len], &trailer, sizeof(trailer));
   0CD0 78r33         [12] 3128 	mov	r0,#_tdm_serial_loop_len_2_208
   0CD2 E2            [24] 3129 	movx	a,@r0
   0CD3 24r00         [12] 3130 	add	a,#_pbuf
   0CD5 FE            [12] 3131 	mov	r6,a
   0CD6 E4            [12] 3132 	clr	a
   0CD7 34s00         [12] 3133 	addc	a,#(_pbuf >> 8)
   0CD9 FF            [12] 3134 	mov	r7,a
   0CDA 7D 00         [12] 3135 	mov	r5,#0x00
   0CDC 90r00r00      [24] 3136 	mov	dptr,#_memcpy_PARM_2
   0CDF 74r1A         [12] 3137 	mov	a,#_trailer
   0CE1 F0            [24] 3138 	movx	@dptr,a
   0CE2 E4            [12] 3139 	clr	a
   0CE3 A3            [24] 3140 	inc	dptr
   0CE4 F0            [24] 3141 	movx	@dptr,a
   0CE5 74 60         [12] 3142 	mov	a,#0x60
   0CE7 A3            [24] 3143 	inc	dptr
   0CE8 F0            [24] 3144 	movx	@dptr,a
   0CE9 90r00r00      [24] 3145 	mov	dptr,#_memcpy_PARM_3
   0CEC 74 02         [12] 3146 	mov	a,#0x02
   0CEE F0            [24] 3147 	movx	@dptr,a
   0CEF E4            [12] 3148 	clr	a
   0CF0 A3            [24] 3149 	inc	dptr
   0CF1 F0            [24] 3150 	movx	@dptr,a
   0CF2 8E 82         [24] 3151 	mov	dpl,r6
   0CF4 8F 83         [24] 3152 	mov	dph,r7
   0CF6 8D F0         [24] 3153 	mov	b,r5
   0CF8 12r00r00      [24] 3154 	lcall	_memcpy
                           3155 ;	radio/tdm.c:713: if (len != 0 && trailer.window != 0) {
   0CFB 78r33         [12] 3156 	mov	r0,#_tdm_serial_loop_len_2_208
   0CFD E2            [24] 3157 	movx	a,@r0
   0CFE 60 0E         [24] 3158 	jz	00174$
   0D00 78r1A         [12] 3159 	mov	r0,#_trailer
   0D02 E2            [24] 3160 	movx	a,@r0
   0D03 FE            [12] 3161 	mov	r6,a
   0D04 08            [12] 3162 	inc	r0
   0D05 E2            [24] 3163 	movx	a,@r0
   0D06 54 1F         [12] 3164 	anl	a,#0x1F
   0D08 FF            [12] 3165 	mov	r7,a
   0D09 4E            [12] 3166 	orl	a,r6
   0D0A 60 02         [24] 3167 	jz	00174$
                           3168 ;	radio/tdm.c:715: LED_ACTIVITY = LED_ON;
   0D0C C2 96         [12] 3169 	clr	_LED_RED
   0D0E                    3170 00174$:
                           3171 ;	radio/tdm.c:718: if (len == 0) {
   0D0E 78r33         [12] 3172 	mov	r0,#_tdm_serial_loop_len_2_208
   0D10 E2            [24] 3173 	movx	a,@r0
   0D11 70 02         [24] 3174 	jnz	00177$
                           3175 ;	radio/tdm.c:722: transmit_yield = 1;
   0D13 D2*01         [12] 3176 	setb	_transmit_yield
   0D15                    3177 00177$:
                           3178 ;	radio/tdm.c:728: transmit_wait = packet_latency;
   0D15 78r08         [12] 3179 	mov	r0,#_packet_latency
   0D17 E2            [24] 3180 	movx	a,@r0
   0D18 FE            [12] 3181 	mov	r6,a
   0D19 08            [12] 3182 	inc	r0
   0D1A E2            [24] 3183 	movx	a,@r0
   0D1B FF            [12] 3184 	mov	r7,a
   0D1C 78r0C         [12] 3185 	mov	r0,#_transmit_wait
   0D1E EE            [12] 3186 	mov	a,r6
   0D1F F2            [24] 3187 	movx	@r0,a
   0D20 08            [12] 3188 	inc	r0
   0D21 EF            [12] 3189 	mov	a,r7
   0D22 F2            [24] 3190 	movx	@r0,a
                           3191 ;	radio/tdm.c:732: if ((duty_cycle - duty_cycle_offset) != 100) {
   0D23 78r0E         [12] 3192 	mov	r0,#_duty_cycle
   0D25 E2            [24] 3193 	movx	a,@r0
   0D26 FE            [12] 3194 	mov	r6,a
   0D27 7F 00         [12] 3195 	mov	r7,#0x00
   0D29 78r0F         [12] 3196 	mov	r0,#_duty_cycle_offset
   0D2B E2            [24] 3197 	movx	a,@r0
   0D2C FC            [12] 3198 	mov	r4,a
   0D2D 7D 00         [12] 3199 	mov	r5,#0x00
   0D2F EE            [12] 3200 	mov	a,r6
   0D30 C3            [12] 3201 	clr	c
   0D31 9C            [12] 3202 	subb	a,r4
   0D32 FE            [12] 3203 	mov	r6,a
   0D33 EF            [12] 3204 	mov	a,r7
   0D34 9D            [12] 3205 	subb	a,r5
   0D35 FF            [12] 3206 	mov	r7,a
   0D36 BE 64 05      [24] 3207 	cjne	r6,#0x64,00392$
   0D39 BF 00 02      [24] 3208 	cjne	r7,#0x00,00392$
   0D3C 80 17         [24] 3209 	sjmp	00179$
   0D3E                    3210 00392$:
                           3211 ;	radio/tdm.c:733: transmitted_ticks += flight_time_estimate(len+sizeof(trailer));
   0D3E 78r33         [12] 3212 	mov	r0,#_tdm_serial_loop_len_2_208
   0D40 E2            [24] 3213 	movx	a,@r0
   0D41 24 02         [12] 3214 	add	a,#0x02
   0D43 F5 82         [12] 3215 	mov	dpl,a
   0D45 12r00rDE      [24] 3216 	lcall	_flight_time_estimate
   0D48 AE 82         [24] 3217 	mov	r6,dpl
   0D4A AF 83         [24] 3218 	mov	r7,dph
   0D4C 78r10         [12] 3219 	mov	r0,#_transmitted_ticks
   0D4E E2            [24] 3220 	movx	a,@r0
   0D4F 2E            [12] 3221 	add	a,r6
   0D50 F2            [24] 3222 	movx	@r0,a
   0D51 08            [12] 3223 	inc	r0
   0D52 E2            [24] 3224 	movx	a,@r0
   0D53 3F            [12] 3225 	addc	a,r7
   0D54 F2            [24] 3226 	movx	@r0,a
   0D55                    3227 00179$:
                           3228 ;	radio/tdm.c:737: if (!radio_transmit(len + sizeof(trailer), pbuf, tdm_state_remaining + (silence_period/2)) &&
   0D55 78r33         [12] 3229 	mov	r0,#_tdm_serial_loop_len_2_208
   0D57 E2            [24] 3230 	movx	a,@r0
   0D58 24 02         [12] 3231 	add	a,#0x02
   0D5A FF            [12] 3232 	mov	r7,a
   0D5B 78r06         [12] 3233 	mov	r0,#_silence_period
   0D5D E2            [24] 3234 	movx	a,@r0
   0D5E FD            [12] 3235 	mov	r5,a
   0D5F 08            [12] 3236 	inc	r0
   0D60 E2            [24] 3237 	movx	a,@r0
   0D61 C3            [12] 3238 	clr	c
   0D62 13            [12] 3239 	rrc	a
   0D63 CD            [12] 3240 	xch	a,r5
   0D64 13            [12] 3241 	rrc	a
   0D65 CD            [12] 3242 	xch	a,r5
   0D66 FE            [12] 3243 	mov	r6,a
   0D67 78r01         [12] 3244 	mov	r0,#_tdm_state_remaining
   0D69 E2            [24] 3245 	movx	a,@r0
   0D6A 2D            [12] 3246 	add	a,r5
   0D6B FD            [12] 3247 	mov	r5,a
   0D6C 08            [12] 3248 	inc	r0
   0D6D E2            [24] 3249 	movx	a,@r0
   0D6E 3E            [12] 3250 	addc	a,r6
   0D6F FE            [12] 3251 	mov	r6,a
   0D70 78r00         [12] 3252 	mov	r0,#_radio_transmit_PARM_2
   0D72 74r00         [12] 3253 	mov	a,#_pbuf
   0D74 F2            [24] 3254 	movx	@r0,a
   0D75 08            [12] 3255 	inc	r0
   0D76 74s00         [12] 3256 	mov	a,#(_pbuf >> 8)
   0D78 F2            [24] 3257 	movx	@r0,a
   0D79 78r00         [12] 3258 	mov	r0,#_radio_transmit_PARM_3
   0D7B ED            [12] 3259 	mov	a,r5
   0D7C F2            [24] 3260 	movx	@r0,a
   0D7D 08            [12] 3261 	inc	r0
   0D7E EE            [12] 3262 	mov	a,r6
   0D7F F2            [24] 3263 	movx	@r0,a
   0D80 8F 82         [24] 3264 	mov	dpl,r7
   0D82 12r00r00      [24] 3265 	lcall	_radio_transmit
   0D85 40 1A         [24] 3266 	jc	00181$
                           3267 ;	radio/tdm.c:738: len != 0 && trailer.window != 0 && trailer.command == 0) {
   0D87 78r33         [12] 3268 	mov	r0,#_tdm_serial_loop_len_2_208
   0D89 E2            [24] 3269 	movx	a,@r0
   0D8A 60 15         [24] 3270 	jz	00181$
   0D8C 78r1A         [12] 3271 	mov	r0,#_trailer
   0D8E E2            [24] 3272 	movx	a,@r0
   0D8F FE            [12] 3273 	mov	r6,a
   0D90 08            [12] 3274 	inc	r0
   0D91 E2            [24] 3275 	movx	a,@r0
   0D92 54 1F         [12] 3276 	anl	a,#0x1F
   0D94 FF            [12] 3277 	mov	r7,a
   0D95 4E            [12] 3278 	orl	a,r6
   0D96 60 09         [24] 3279 	jz	00181$
   0D98 78r1B         [12] 3280 	mov	r0,#(_trailer + 0x0001)
   0D9A E2            [24] 3281 	movx	a,@r0
   0D9B 20 E5 03      [24] 3282 	jb	acc.5,00181$
                           3283 ;	radio/tdm.c:739: packet_force_resend();
   0D9E 12r00r00      [24] 3284 	lcall	_packet_force_resend
   0DA1                    3285 00181$:
                           3286 ;	radio/tdm.c:742: if (lbt_rssi != 0) {
   0DA1 78r12         [12] 3287 	mov	r0,#_lbt_rssi
   0DA3 E2            [24] 3288 	movx	a,@r0
   0DA4 60 0C         [24] 3289 	jz	00186$
                           3290 ;	radio/tdm.c:744: lbt_listen_time = 0;
   0DA6 78r13         [12] 3291 	mov	r0,#_lbt_listen_time
   0DA8 E4            [12] 3292 	clr	a
   0DA9 F2            [24] 3293 	movx	@r0,a
   0DAA 08            [12] 3294 	inc	r0
   0DAB F2            [24] 3295 	movx	@r0,a
                           3296 ;	radio/tdm.c:745: lbt_rand = 0;
   0DAC 78r17         [12] 3297 	mov	r0,#_lbt_rand
   0DAE E4            [12] 3298 	clr	a
   0DAF F2            [24] 3299 	movx	@r0,a
   0DB0 08            [12] 3300 	inc	r0
   0DB1 F2            [24] 3301 	movx	@r0,a
   0DB2                    3302 00186$:
                           3303 ;	radio/tdm.c:749: radio_set_channel(fhop_receive_channel());
   0DB2 12r00r00      [24] 3304 	lcall	_fhop_receive_channel
   0DB5 12r00r00      [24] 3305 	lcall	_radio_set_channel
                           3306 ;	radio/tdm.c:752: radio_receiver_on();
   0DB8 12r00r00      [24] 3307 	lcall	_radio_receiver_on
                           3308 ;	radio/tdm.c:754: if (len != 0 && trailer.window != 0) {
   0DBB 78r33         [12] 3309 	mov	r0,#_tdm_serial_loop_len_2_208
   0DBD E2            [24] 3310 	movx	a,@r0
   0DBE 70 03         [24] 3311 	jnz	00398$
   0DC0 02r07rC5      [24] 3312 	ljmp	00192$
   0DC3                    3313 00398$:
   0DC3 78r1A         [12] 3314 	mov	r0,#_trailer
   0DC5 E2            [24] 3315 	movx	a,@r0
   0DC6 FE            [12] 3316 	mov	r6,a
   0DC7 08            [12] 3317 	inc	r0
   0DC8 E2            [24] 3318 	movx	a,@r0
   0DC9 54 1F         [12] 3319 	anl	a,#0x1F
   0DCB FF            [12] 3320 	mov	r7,a
   0DCC 4E            [12] 3321 	orl	a,r6
   0DCD 70 03         [24] 3322 	jnz	00399$
   0DCF 02r07rC5      [24] 3323 	ljmp	00192$
   0DD2                    3324 00399$:
                           3325 ;	radio/tdm.c:755: LED_ACTIVITY = LED_OFF;
   0DD2 D2 96         [12] 3326 	setb	_LED_RED
   0DD4 02r07rC5      [24] 3327 	ljmp	00192$
                           3328 ;------------------------------------------------------------
                           3329 ;Allocation info for local variables in function 'tdm_init'
                           3330 ;------------------------------------------------------------
                           3331 ;sloc0                     Allocated with name '_tdm_init_sloc0_1_0'
                           3332 ;------------------------------------------------------------
                           3333 ;	radio/tdm.c:873: tdm_init(void)
                           3334 ;	-----------------------------------------
                           3335 ;	 function tdm_init
                           3336 ;	-----------------------------------------
   0DD7                    3337 _tdm_init:
                           3338 ;	radio/tdm.c:876: __pdata uint8_t air_rate = radio_air_rate();
   0DD7 12r00r00      [24] 3339 	lcall	_radio_air_rate
   0DDA AF 82         [24] 3340 	mov	r7,dpl
                           3341 ;	radio/tdm.c:885: ticks_per_byte = (8+(8000000UL/(air_rate*1000UL)))/16;
   0DDC 90r00r00      [24] 3342 	mov	dptr,#__mullong_PARM_2
   0DDF EF            [12] 3343 	mov	a,r7
   0DE0 F0            [24] 3344 	movx	@dptr,a
   0DE1 E4            [12] 3345 	clr	a
   0DE2 A3            [24] 3346 	inc	dptr
   0DE3 F0            [24] 3347 	movx	@dptr,a
   0DE4 E4            [12] 3348 	clr	a
   0DE5 A3            [24] 3349 	inc	dptr
   0DE6 F0            [24] 3350 	movx	@dptr,a
   0DE7 E4            [12] 3351 	clr	a
   0DE8 A3            [24] 3352 	inc	dptr
   0DE9 F0            [24] 3353 	movx	@dptr,a
   0DEA 90 03 E8      [24] 3354 	mov	dptr,#0x03E8
   0DED E4            [12] 3355 	clr	a
   0DEE F5 F0         [12] 3356 	mov	b,a
   0DF0 12r00r00      [24] 3357 	lcall	__mullong
   0DF3 AC 82         [24] 3358 	mov	r4,dpl
   0DF5 AD 83         [24] 3359 	mov	r5,dph
   0DF7 AE F0         [24] 3360 	mov	r6,b
   0DF9 FF            [12] 3361 	mov	r7,a
   0DFA 90r00r00      [24] 3362 	mov	dptr,#__divulong_PARM_2
   0DFD EC            [12] 3363 	mov	a,r4
   0DFE F0            [24] 3364 	movx	@dptr,a
   0DFF ED            [12] 3365 	mov	a,r5
   0E00 A3            [24] 3366 	inc	dptr
   0E01 F0            [24] 3367 	movx	@dptr,a
   0E02 EE            [12] 3368 	mov	a,r6
   0E03 A3            [24] 3369 	inc	dptr
   0E04 F0            [24] 3370 	movx	@dptr,a
   0E05 EF            [12] 3371 	mov	a,r7
   0E06 A3            [24] 3372 	inc	dptr
   0E07 F0            [24] 3373 	movx	@dptr,a
   0E08 90 12 00      [24] 3374 	mov	dptr,#0x1200
   0E0B 75 F0 7A      [24] 3375 	mov	b,#0x7A
   0E0E E4            [12] 3376 	clr	a
   0E0F 12r00r00      [24] 3377 	lcall	__divulong
   0E12 AC 82         [24] 3378 	mov	r4,dpl
   0E14 AD 83         [24] 3379 	mov	r5,dph
   0E16 AE F0         [24] 3380 	mov	r6,b
   0E18 FF            [12] 3381 	mov	r7,a
   0E19 74 08         [12] 3382 	mov	a,#0x08
   0E1B 2C            [12] 3383 	add	a,r4
   0E1C FC            [12] 3384 	mov	r4,a
   0E1D E4            [12] 3385 	clr	a
   0E1E 3D            [12] 3386 	addc	a,r5
   0E1F FD            [12] 3387 	mov	r5,a
   0E20 E4            [12] 3388 	clr	a
   0E21 3E            [12] 3389 	addc	a,r6
   0E22 FE            [12] 3390 	mov	r6,a
   0E23 E4            [12] 3391 	clr	a
   0E24 3F            [12] 3392 	addc	a,r7
   0E25 FF            [12] 3393 	mov	r7,a
   0E26 ED            [12] 3394 	mov	a,r5
   0E27 C4            [12] 3395 	swap	a
   0E28 CC            [12] 3396 	xch	a,r4
   0E29 C4            [12] 3397 	swap	a
   0E2A 54 0F         [12] 3398 	anl	a,#0x0F
   0E2C 6C            [12] 3399 	xrl	a,r4
   0E2D CC            [12] 3400 	xch	a,r4
   0E2E 54 0F         [12] 3401 	anl	a,#0x0F
   0E30 CC            [12] 3402 	xch	a,r4
   0E31 6C            [12] 3403 	xrl	a,r4
   0E32 CC            [12] 3404 	xch	a,r4
   0E33 FD            [12] 3405 	mov	r5,a
   0E34 EE            [12] 3406 	mov	a,r6
   0E35 C4            [12] 3407 	swap	a
   0E36 54 F0         [12] 3408 	anl	a,#0xF0
   0E38 4D            [12] 3409 	orl	a,r5
   0E39 FD            [12] 3410 	mov	r5,a
   0E3A EF            [12] 3411 	mov	a,r7
   0E3B C4            [12] 3412 	swap	a
   0E3C CE            [12] 3413 	xch	a,r6
   0E3D C4            [12] 3414 	swap	a
   0E3E 54 0F         [12] 3415 	anl	a,#0x0F
   0E40 6E            [12] 3416 	xrl	a,r6
   0E41 CE            [12] 3417 	xch	a,r6
   0E42 54 0F         [12] 3418 	anl	a,#0x0F
   0E44 CE            [12] 3419 	xch	a,r6
   0E45 6E            [12] 3420 	xrl	a,r6
   0E46 CE            [12] 3421 	xch	a,r6
   0E47 78r0A         [12] 3422 	mov	r0,#_ticks_per_byte
   0E49 EC            [12] 3423 	mov	a,r4
   0E4A F2            [24] 3424 	movx	@r0,a
   0E4B 08            [12] 3425 	inc	r0
   0E4C ED            [12] 3426 	mov	a,r5
   0E4D F2            [24] 3427 	movx	@r0,a
                           3428 ;	radio/tdm.c:892: packet_latency = (8+(10/2)) * ticks_per_byte + 13;
   0E4E 90r00r00      [24] 3429 	mov	dptr,#__mulint_PARM_2
   0E51 EC            [12] 3430 	mov	a,r4
   0E52 F0            [24] 3431 	movx	@dptr,a
   0E53 ED            [12] 3432 	mov	a,r5
   0E54 A3            [24] 3433 	inc	dptr
   0E55 F0            [24] 3434 	movx	@dptr,a
   0E56 90 00 0D      [24] 3435 	mov	dptr,#0x000D
   0E59 C0 05         [24] 3436 	push	ar5
   0E5B C0 04         [24] 3437 	push	ar4
   0E5D 12r00r00      [24] 3438 	lcall	__mulint
   0E60 E5 82         [12] 3439 	mov	a,dpl
   0E62 85 83 F0      [24] 3440 	mov	b,dph
   0E65 D0 04         [24] 3441 	pop	ar4
   0E67 D0 05         [24] 3442 	pop	ar5
   0E69 24 0D         [12] 3443 	add	a,#0x0D
   0E6B FE            [12] 3444 	mov	r6,a
   0E6C E4            [12] 3445 	clr	a
   0E6D 35 F0         [12] 3446 	addc	a,b
   0E6F FF            [12] 3447 	mov	r7,a
   0E70 78r08         [12] 3448 	mov	r0,#_packet_latency
   0E72 EE            [12] 3449 	mov	a,r6
   0E73 F2            [24] 3450 	movx	@r0,a
   0E74 08            [12] 3451 	inc	r0
   0E75 EF            [12] 3452 	mov	a,r7
   0E76 F2            [24] 3453 	movx	@r0,a
                           3454 ;	radio/tdm.c:894: if (feature_golay) {
   0E77 30*00 2E      [24] 3455 	jnb	_feature_golay,00102$
                           3456 ;	radio/tdm.c:895: max_data_packet_length = (MAX_PACKET_LENGTH/2) - (6+sizeof(trailer));
   0E7A 78r05         [12] 3457 	mov	r0,#_max_data_packet_length
   0E7C 74 76         [12] 3458 	mov	a,#0x76
   0E7E F2            [24] 3459 	movx	@r0,a
                           3460 ;	radio/tdm.c:898: ticks_per_byte *= 2;
   0E7F ED            [12] 3461 	mov	a,r5
   0E80 CC            [12] 3462 	xch	a,r4
   0E81 25 E0         [12] 3463 	add	a,acc
   0E83 CC            [12] 3464 	xch	a,r4
   0E84 33            [12] 3465 	rlc	a
   0E85 FD            [12] 3466 	mov	r5,a
   0E86 78r0A         [12] 3467 	mov	r0,#_ticks_per_byte
   0E88 EC            [12] 3468 	mov	a,r4
   0E89 F2            [24] 3469 	movx	@r0,a
   0E8A 08            [12] 3470 	inc	r0
   0E8B ED            [12] 3471 	mov	a,r5
   0E8C F2            [24] 3472 	movx	@r0,a
                           3473 ;	radio/tdm.c:901: packet_latency += 4*ticks_per_byte;
   0E8D ED            [12] 3474 	mov	a,r5
   0E8E CC            [12] 3475 	xch	a,r4
   0E8F 25 E0         [12] 3476 	add	a,acc
   0E91 CC            [12] 3477 	xch	a,r4
   0E92 33            [12] 3478 	rlc	a
   0E93 CC            [12] 3479 	xch	a,r4
   0E94 25 E0         [12] 3480 	add	a,acc
   0E96 CC            [12] 3481 	xch	a,r4
   0E97 33            [12] 3482 	rlc	a
   0E98 FD            [12] 3483 	mov	r5,a
   0E99 EC            [12] 3484 	mov	a,r4
   0E9A 2E            [12] 3485 	add	a,r6
   0E9B FE            [12] 3486 	mov	r6,a
   0E9C ED            [12] 3487 	mov	a,r5
   0E9D 3F            [12] 3488 	addc	a,r7
   0E9E FF            [12] 3489 	mov	r7,a
   0E9F 78r08         [12] 3490 	mov	r0,#_packet_latency
   0EA1 EE            [12] 3491 	mov	a,r6
   0EA2 F2            [24] 3492 	movx	@r0,a
   0EA3 08            [12] 3493 	inc	r0
   0EA4 EF            [12] 3494 	mov	a,r7
   0EA5 F2            [24] 3495 	movx	@r0,a
   0EA6 80 05         [24] 3496 	sjmp	00103$
   0EA8                    3497 00102$:
                           3498 ;	radio/tdm.c:903: max_data_packet_length = MAX_PACKET_LENGTH - sizeof(trailer);
   0EA8 78r05         [12] 3499 	mov	r0,#_max_data_packet_length
   0EAA 74 FA         [12] 3500 	mov	a,#0xFA
   0EAC F2            [24] 3501 	movx	@r0,a
   0EAD                    3502 00103$:
                           3503 ;	radio/tdm.c:907: silence_period = 2*packet_latency;
   0EAD 78r08         [12] 3504 	mov	r0,#_packet_latency
   0EAF 79r06         [12] 3505 	mov	r1,#_silence_period
   0EB1 E2            [24] 3506 	movx	a,@r0
   0EB2 F3            [24] 3507 	movx	@r1,a
   0EB3 08            [12] 3508 	inc	r0
   0EB4 E2            [24] 3509 	movx	a,@r0
   0EB5 F5 F0         [12] 3510 	mov	b,a
   0EB7 E3            [24] 3511 	movx	a,@r1
   0EB8 25 E0         [12] 3512 	add	a,acc
   0EBA C5 F0         [12] 3513 	xch	a,b
   0EBC 33            [12] 3514 	rlc	a
   0EBD C5 F0         [12] 3515 	xch	a,b
   0EBF F3            [24] 3516 	movx	@r1,a
   0EC0 09            [12] 3517 	inc	r1
   0EC1 E5 F0         [12] 3518 	mov	a,b
   0EC3 F3            [24] 3519 	movx	@r1,a
                           3520 ;	radio/tdm.c:910: window_width = 3*(packet_latency+(max_data_packet_length*(uint32_t)ticks_per_byte));
   0EC4 78r0A         [12] 3521 	mov	r0,#_ticks_per_byte
   0EC6 90r00r00      [24] 3522 	mov	dptr,#__mullong_PARM_2
   0EC9 E2            [24] 3523 	movx	a,@r0
   0ECA F0            [24] 3524 	movx	@dptr,a
   0ECB 08            [12] 3525 	inc	r0
   0ECC E2            [24] 3526 	movx	a,@r0
   0ECD A3            [24] 3527 	inc	dptr
   0ECE F0            [24] 3528 	movx	@dptr,a
   0ECF E4            [12] 3529 	clr	a
   0ED0 A3            [24] 3530 	inc	dptr
   0ED1 F0            [24] 3531 	movx	@dptr,a
   0ED2 E4            [12] 3532 	clr	a
   0ED3 A3            [24] 3533 	inc	dptr
   0ED4 F0            [24] 3534 	movx	@dptr,a
   0ED5 78r05         [12] 3535 	mov	r0,#_max_data_packet_length
   0ED7 E2            [24] 3536 	movx	a,@r0
   0ED8 FC            [12] 3537 	mov	r4,a
   0ED9 7D 00         [12] 3538 	mov	r5,#0x00
   0EDB 7E 00         [12] 3539 	mov	r6,#0x00
   0EDD 7F 00         [12] 3540 	mov	r7,#0x00
   0EDF 8C 82         [24] 3541 	mov	dpl,r4
   0EE1 8D 83         [24] 3542 	mov	dph,r5
   0EE3 8E F0         [24] 3543 	mov	b,r6
   0EE5 EF            [12] 3544 	mov	a,r7
   0EE6 12r00r00      [24] 3545 	lcall	__mullong
   0EE9 85 82*19      [24] 3546 	mov	_tdm_init_sloc0_1_0,dpl
   0EEC 85 83*1A      [24] 3547 	mov	(_tdm_init_sloc0_1_0 + 1),dph
   0EEF 85 F0*1B      [24] 3548 	mov	(_tdm_init_sloc0_1_0 + 2),b
   0EF2 F5*1C         [12] 3549 	mov	(_tdm_init_sloc0_1_0 + 3),a
   0EF4 78r08         [12] 3550 	mov	r0,#_packet_latency
   0EF6 E2            [24] 3551 	movx	a,@r0
   0EF7 FA            [12] 3552 	mov	r2,a
   0EF8 08            [12] 3553 	inc	r0
   0EF9 E2            [24] 3554 	movx	a,@r0
   0EFA FB            [12] 3555 	mov	r3,a
   0EFB 7E 00         [12] 3556 	mov	r6,#0x00
   0EFD 7F 00         [12] 3557 	mov	r7,#0x00
   0EFF 90r00r00      [24] 3558 	mov	dptr,#__mullong_PARM_2
   0F02 E5*19         [12] 3559 	mov	a,_tdm_init_sloc0_1_0
   0F04 2A            [12] 3560 	add	a,r2
   0F05 F0            [24] 3561 	movx	@dptr,a
   0F06 E5*1A         [12] 3562 	mov	a,(_tdm_init_sloc0_1_0 + 1)
   0F08 3B            [12] 3563 	addc	a,r3
   0F09 A3            [24] 3564 	inc	dptr
   0F0A F0            [24] 3565 	movx	@dptr,a
   0F0B E5*1B         [12] 3566 	mov	a,(_tdm_init_sloc0_1_0 + 2)
   0F0D 3E            [12] 3567 	addc	a,r6
   0F0E A3            [24] 3568 	inc	dptr
   0F0F F0            [24] 3569 	movx	@dptr,a
   0F10 E5*1C         [12] 3570 	mov	a,(_tdm_init_sloc0_1_0 + 3)
   0F12 3F            [12] 3571 	addc	a,r7
   0F13 A3            [24] 3572 	inc	dptr
   0F14 F0            [24] 3573 	movx	@dptr,a
   0F15 90 00 03      [24] 3574 	mov	dptr,#(0x03&0x00ff)
   0F18 E4            [12] 3575 	clr	a
   0F19 F5 F0         [12] 3576 	mov	b,a
   0F1B 12r00r00      [24] 3577 	lcall	__mullong
   0F1E AC 82         [24] 3578 	mov	r4,dpl
   0F20 AD 83         [24] 3579 	mov	r5,dph
   0F22 AE F0         [24] 3580 	mov	r6,b
   0F24 FF            [12] 3581 	mov	r7,a
                           3582 ;	radio/tdm.c:913: if (lbt_rssi != 0) {
   0F25 78r12         [12] 3583 	mov	r0,#_lbt_rssi
   0F27 E2            [24] 3584 	movx	a,@r0
   0F28 60 35         [24] 3585 	jz	00105$
                           3586 ;	radio/tdm.c:915: lbt_min_time = LBT_MIN_TIME_USEC/16;
   0F2A 78r15         [12] 3587 	mov	r0,#_lbt_min_time
   0F2C 74 38         [12] 3588 	mov	a,#0x38
   0F2E F2            [24] 3589 	movx	@r0,a
   0F2F 08            [12] 3590 	inc	r0
   0F30 74 01         [12] 3591 	mov	a,#0x01
   0F32 F2            [24] 3592 	movx	@r0,a
                           3593 ;	radio/tdm.c:916: window_width = constrain(window_width, 3*lbt_min_time, window_width);
   0F33 78r00         [12] 3594 	mov	r0,#_constrain_PARM_2
   0F35 74 A8         [12] 3595 	mov	a,#0xA8
   0F37 F2            [24] 3596 	movx	@r0,a
   0F38 08            [12] 3597 	inc	r0
   0F39 74 03         [12] 3598 	mov	a,#0x03
   0F3B F2            [24] 3599 	movx	@r0,a
   0F3C 08            [12] 3600 	inc	r0
   0F3D E4            [12] 3601 	clr	a
   0F3E F2            [24] 3602 	movx	@r0,a
   0F3F 08            [12] 3603 	inc	r0
   0F40 F2            [24] 3604 	movx	@r0,a
   0F41 78r00         [12] 3605 	mov	r0,#_constrain_PARM_3
   0F43 EC            [12] 3606 	mov	a,r4
   0F44 F2            [24] 3607 	movx	@r0,a
   0F45 08            [12] 3608 	inc	r0
   0F46 ED            [12] 3609 	mov	a,r5
   0F47 F2            [24] 3610 	movx	@r0,a
   0F48 08            [12] 3611 	inc	r0
   0F49 EE            [12] 3612 	mov	a,r6
   0F4A F2            [24] 3613 	movx	@r0,a
   0F4B 08            [12] 3614 	inc	r0
   0F4C EF            [12] 3615 	mov	a,r7
   0F4D F2            [24] 3616 	movx	@r0,a
   0F4E 8C 82         [24] 3617 	mov	dpl,r4
   0F50 8D 83         [24] 3618 	mov	dph,r5
   0F52 8E F0         [24] 3619 	mov	b,r6
   0F54 EF            [12] 3620 	mov	a,r7
   0F55 12r00r00      [24] 3621 	lcall	_constrain
   0F58 AC 82         [24] 3622 	mov	r4,dpl
   0F5A AD 83         [24] 3623 	mov	r5,dph
   0F5C AE F0         [24] 3624 	mov	r6,b
   0F5E FF            [12] 3625 	mov	r7,a
   0F5F                    3626 00105$:
                           3627 ;	radio/tdm.c:921: if (window_width >= REGULATORY_MAX_WINDOW) {
   0F5F C3            [12] 3628 	clr	c
   0F60 EC            [12] 3629 	mov	a,r4
   0F61 94 A8         [12] 3630 	subb	a,#0xA8
   0F63 ED            [12] 3631 	mov	a,r5
   0F64 94 61         [12] 3632 	subb	a,#0x61
   0F66 EE            [12] 3633 	mov	a,r6
   0F67 94 00         [12] 3634 	subb	a,#0x00
   0F69 EF            [12] 3635 	mov	a,r7
   0F6A 94 00         [12] 3636 	subb	a,#0x00
   0F6C 40 08         [24] 3637 	jc	00108$
                           3638 ;	radio/tdm.c:922: window_width = REGULATORY_MAX_WINDOW;
   0F6E 7C A8         [12] 3639 	mov	r4,#0xA8
   0F70 7D 61         [12] 3640 	mov	r5,#0x61
   0F72 7E 00         [12] 3641 	mov	r6,#0x00
   0F74 7F 00         [12] 3642 	mov	r7,#0x00
                           3643 ;	radio/tdm.c:926: while (window_width > 0x1FFF) {
   0F76                    3644 00108$:
   0F76 ED            [12] 3645 	mov	a,r5
   0F77 54 E0         [12] 3646 	anl	a,#0xE0
   0F79 70 06         [24] 3647 	jnz	00136$
   0F7B EE            [12] 3648 	mov	a,r6
   0F7C 70 03         [24] 3649 	jnz	00136$
   0F7E EF            [12] 3650 	mov	a,r7
   0F7F 60 0A         [24] 3651 	jz	00110$
   0F81                    3652 00136$:
                           3653 ;	radio/tdm.c:927: window_width = 0x1FFF;
   0F81 7C FF         [12] 3654 	mov	r4,#0xFF
   0F83 7D 1F         [12] 3655 	mov	r5,#0x1F
   0F85 7E 00         [12] 3656 	mov	r6,#0x00
   0F87 7F 00         [12] 3657 	mov	r7,#0x00
   0F89 80 EB         [24] 3658 	sjmp	00108$
   0F8B                    3659 00110$:
                           3660 ;	radio/tdm.c:930: tx_window_width = window_width;
   0F8B 78r03         [12] 3661 	mov	r0,#_tx_window_width
   0F8D EC            [12] 3662 	mov	a,r4
   0F8E F2            [24] 3663 	movx	@r0,a
   0F8F 08            [12] 3664 	inc	r0
   0F90 ED            [12] 3665 	mov	a,r5
   0F91 F2            [24] 3666 	movx	@r0,a
                           3667 ;	radio/tdm.c:935: packet_latency += ((settings.preamble_length-10)/2) * ticks_per_byte;
   0F92 78r0B         [12] 3668 	mov	r0,#(_settings + 0x000b)
   0F94 E2            [24] 3669 	movx	a,@r0
   0F95 7E 00         [12] 3670 	mov	r6,#0x00
   0F97 24 F6         [12] 3671 	add	a,#0xF6
   0F99 FF            [12] 3672 	mov	r7,a
   0F9A EE            [12] 3673 	mov	a,r6
   0F9B 34 FF         [12] 3674 	addc	a,#0xFF
   0F9D FE            [12] 3675 	mov	r6,a
   0F9E 90r00r00      [24] 3676 	mov	dptr,#__divsint_PARM_2
   0FA1 74 02         [12] 3677 	mov	a,#0x02
   0FA3 F0            [24] 3678 	movx	@dptr,a
   0FA4 E4            [12] 3679 	clr	a
   0FA5 A3            [24] 3680 	inc	dptr
   0FA6 F0            [24] 3681 	movx	@dptr,a
   0FA7 8F 82         [24] 3682 	mov	dpl,r7
   0FA9 8E 83         [24] 3683 	mov	dph,r6
   0FAB C0 05         [24] 3684 	push	ar5
   0FAD C0 04         [24] 3685 	push	ar4
   0FAF 12r00r00      [24] 3686 	lcall	__divsint
   0FB2 AE 82         [24] 3687 	mov	r6,dpl
   0FB4 AF 83         [24] 3688 	mov	r7,dph
   0FB6 78r0A         [12] 3689 	mov	r0,#_ticks_per_byte
   0FB8 90r00r00      [24] 3690 	mov	dptr,#__mulint_PARM_2
   0FBB E2            [24] 3691 	movx	a,@r0
   0FBC F0            [24] 3692 	movx	@dptr,a
   0FBD 08            [12] 3693 	inc	r0
   0FBE E2            [24] 3694 	movx	a,@r0
   0FBF A3            [24] 3695 	inc	dptr
   0FC0 F0            [24] 3696 	movx	@dptr,a
   0FC1 8E 82         [24] 3697 	mov	dpl,r6
   0FC3 8F 83         [24] 3698 	mov	dph,r7
   0FC5 12r00r00      [24] 3699 	lcall	__mulint
   0FC8 AE 82         [24] 3700 	mov	r6,dpl
   0FCA AF 83         [24] 3701 	mov	r7,dph
   0FCC D0 04         [24] 3702 	pop	ar4
   0FCE D0 05         [24] 3703 	pop	ar5
   0FD0 78r08         [12] 3704 	mov	r0,#_packet_latency
   0FD2 E2            [24] 3705 	movx	a,@r0
   0FD3 2E            [12] 3706 	add	a,r6
   0FD4 F2            [24] 3707 	movx	@r0,a
   0FD5 08            [12] 3708 	inc	r0
   0FD6 E2            [24] 3709 	movx	a,@r0
   0FD7 3F            [12] 3710 	addc	a,r7
   0FD8 F2            [24] 3711 	movx	@r0,a
                           3712 ;	radio/tdm.c:939: i = (tx_window_width - packet_latency) / ticks_per_byte;
   0FD9 78r08         [12] 3713 	mov	r0,#_packet_latency
   0FDB D3            [12] 3714 	setb	c
   0FDC E2            [24] 3715 	movx	a,@r0
   0FDD 9C            [12] 3716 	subb	a,r4
   0FDE F4            [12] 3717 	cpl	a
   0FDF B3            [12] 3718 	cpl	c
   0FE0 FC            [12] 3719 	mov	r4,a
   0FE1 B3            [12] 3720 	cpl	c
   0FE2 08            [12] 3721 	inc	r0
   0FE3 E2            [24] 3722 	movx	a,@r0
   0FE4 9D            [12] 3723 	subb	a,r5
   0FE5 F4            [12] 3724 	cpl	a
   0FE6 FD            [12] 3725 	mov	r5,a
   0FE7 78r0A         [12] 3726 	mov	r0,#_ticks_per_byte
   0FE9 90r00r00      [24] 3727 	mov	dptr,#__divuint_PARM_2
   0FEC E2            [24] 3728 	movx	a,@r0
   0FED F0            [24] 3729 	movx	@dptr,a
   0FEE 08            [12] 3730 	inc	r0
   0FEF E2            [24] 3731 	movx	a,@r0
   0FF0 A3            [24] 3732 	inc	dptr
   0FF1 F0            [24] 3733 	movx	@dptr,a
   0FF2 8C 82         [24] 3734 	mov	dpl,r4
   0FF4 8D 83         [24] 3735 	mov	dph,r5
   0FF6 12r00r00      [24] 3736 	lcall	__divuint
   0FF9 AE 82         [24] 3737 	mov	r6,dpl
   0FFB AF 83         [24] 3738 	mov	r7,dph
                           3739 ;	radio/tdm.c:940: if (i > max_data_packet_length) {
   0FFD 78r05         [12] 3740 	mov	r0,#_max_data_packet_length
   0FFF E2            [24] 3741 	movx	a,@r0
   1000 FC            [12] 3742 	mov	r4,a
   1001 7D 00         [12] 3743 	mov	r5,#0x00
   1003 C3            [12] 3744 	clr	c
   1004 EC            [12] 3745 	mov	a,r4
   1005 9E            [12] 3746 	subb	a,r6
   1006 ED            [12] 3747 	mov	a,r5
   1007 9F            [12] 3748 	subb	a,r7
   1008 50 04         [24] 3749 	jnc	00112$
                           3750 ;	radio/tdm.c:941: i = max_data_packet_length;
   100A 8C 06         [24] 3751 	mov	ar6,r4
   100C 8D 07         [24] 3752 	mov	ar7,r5
   100E                    3753 00112$:
                           3754 ;	radio/tdm.c:943: packet_set_max_xmit(i);
   100E 8E 82         [24] 3755 	mov	dpl,r6
   1010 12r00r00      [24] 3756 	lcall	_packet_set_max_xmit
                           3757 ;	radio/tdm.c:946: TDM_SYNC_PIN = false;
   1013 C2 A6         [12] 3758 	clr	_TDM_SYNC_PIN
   1015 22            [24] 3759 	ret
                           3760 ;------------------------------------------------------------
                           3761 ;Allocation info for local variables in function 'tdm_report_timing'
                           3762 ;------------------------------------------------------------
                           3763 ;	radio/tdm.c:960: tdm_report_timing(void)
                           3764 ;	-----------------------------------------
                           3765 ;	 function tdm_report_timing
                           3766 ;	-----------------------------------------
   1016                    3767 _tdm_report_timing:
                           3768 ;	radio/tdm.c:962: printf("silence_period: %u\n", (unsigned)silence_period); delay_msec(1);
   1016 78r06         [12] 3769 	mov	r0,#_silence_period
   1018 E2            [24] 3770 	movx	a,@r0
   1019 C0 E0         [24] 3771 	push	acc
   101B 08            [12] 3772 	inc	r0
   101C E2            [24] 3773 	movx	a,@r0
   101D C0 E0         [24] 3774 	push	acc
   101F 74rE3         [12] 3775 	mov	a,#__str_9
   1021 C0 E0         [24] 3776 	push	acc
   1023 74s00         [12] 3777 	mov	a,#(__str_9 >> 8)
   1025 C0 E0         [24] 3778 	push	acc
   1027 74 80         [12] 3779 	mov	a,#0x80
   1029 C0 E0         [24] 3780 	push	acc
   102B 12r00r00      [24] 3781 	lcall	_printfl
   102E E5 81         [12] 3782 	mov	a,sp
   1030 24 FB         [12] 3783 	add	a,#0xfb
   1032 F5 81         [12] 3784 	mov	sp,a
   1034 90 00 01      [24] 3785 	mov	dptr,#0x0001
   1037 12r00r00      [24] 3786 	lcall	_delay_msec
                           3787 ;	radio/tdm.c:963: printf("tx_window_width: %u\n", (unsigned)tx_window_width); delay_msec(1);
   103A 78r03         [12] 3788 	mov	r0,#_tx_window_width
   103C E2            [24] 3789 	movx	a,@r0
   103D C0 E0         [24] 3790 	push	acc
   103F 08            [12] 3791 	inc	r0
   1040 E2            [24] 3792 	movx	a,@r0
   1041 C0 E0         [24] 3793 	push	acc
   1043 74rF7         [12] 3794 	mov	a,#__str_10
   1045 C0 E0         [24] 3795 	push	acc
   1047 74s00         [12] 3796 	mov	a,#(__str_10 >> 8)
   1049 C0 E0         [24] 3797 	push	acc
   104B 74 80         [12] 3798 	mov	a,#0x80
   104D C0 E0         [24] 3799 	push	acc
   104F 12r00r00      [24] 3800 	lcall	_printfl
   1052 E5 81         [12] 3801 	mov	a,sp
   1054 24 FB         [12] 3802 	add	a,#0xfb
   1056 F5 81         [12] 3803 	mov	sp,a
   1058 90 00 01      [24] 3804 	mov	dptr,#0x0001
   105B 12r00r00      [24] 3805 	lcall	_delay_msec
                           3806 ;	radio/tdm.c:964: printf("max_data_packet_length: %u\n", (unsigned)max_data_packet_length); delay_msec(1);
   105E 78r05         [12] 3807 	mov	r0,#_max_data_packet_length
   1060 E2            [24] 3808 	movx	a,@r0
   1061 FE            [12] 3809 	mov	r6,a
   1062 7F 00         [12] 3810 	mov	r7,#0x00
   1064 C0 06         [24] 3811 	push	ar6
   1066 C0 07         [24] 3812 	push	ar7
   1068 74r0C         [12] 3813 	mov	a,#__str_11
   106A C0 E0         [24] 3814 	push	acc
   106C 74s01         [12] 3815 	mov	a,#(__str_11 >> 8)
   106E C0 E0         [24] 3816 	push	acc
   1070 74 80         [12] 3817 	mov	a,#0x80
   1072 C0 E0         [24] 3818 	push	acc
   1074 12r00r00      [24] 3819 	lcall	_printfl
   1077 E5 81         [12] 3820 	mov	a,sp
   1079 24 FB         [12] 3821 	add	a,#0xfb
   107B F5 81         [12] 3822 	mov	sp,a
   107D 90 00 01      [24] 3823 	mov	dptr,#0x0001
   1080 02r00r00      [24] 3824 	ljmp	_delay_msec
                           3825 	.area CSEG    (CODE)
                           3826 	.area CONST   (CODE)
   0000                    3827 __str_0:
   0000 4C 2F 52 20 52 53  3828 	.ascii "L/R RSSI: %u/%u  L/R noise: %u/%u pkts: %u "
        53 49 3A 20 25 75
        2F 25 75 20 20 4C
        2F 52 20 6E 6F 69
        73 65 3A 20 25 75
        2F 25 75 20 70 6B
        74 73 3A 20 25 75
        20
   002B 00                 3829 	.db 0x00
   002C                    3830 __str_1:
   002C 20 74 78 65 3D 25  3831 	.ascii " txe=%u rxe=%u stx=%u srx=%u ecc=%u/%u temp=%d dco=%u"
        75 20 72 78 65 3D
        25 75 20 73 74 78
        3D 25 75 20 73 72
        78 3D 25 75 20 65
        63 63 3D 25 75 2F
        25 75 20 74 65 6D
        70 3D 25 64 20 64
        63 6F 3D 25 75
   0061 0A                 3832 	.db 0x0A
   0062 00                 3833 	.db 0x00
   0063                    3834 __str_2:
   0063 54 44 4D 3A 20 25  3835 	.ascii "TDM: %u/%u len=%u "
        75 2F 25 75 20 6C
        65 6E 3D 25 75 20
   0075 00                 3836 	.db 0x00
   0076                    3837 __str_3:
   0076 20 64 65 6C 74 61  3838 	.ascii " delta: %d"
        3A 20 25 64
   0080 0A                 3839 	.db 0x0A
   0081 00                 3840 	.db 0x00
   0082                    3841 __str_4:
   0082 54 44 4D 3A 20 63  3842 	.ascii "TDM: change timing %u/%u"
        68 61 6E 67 65 20
        74 69 6D 69 6E 67
        20 25 75 2F 25 75
   009A 0A                 3843 	.db 0x0A
   009B 00                 3844 	.db 0x00
   009C                    3845 __str_5:
   009C 54 44 4D 3A 20 73  3846 	.ascii "TDM: scanning"
        63 61 6E 6E 69 6E
        67
   00A9 0A                 3847 	.db 0x0A
   00AA 00                 3848 	.db 0x00
   00AB                    3849 __str_6:
   00AB 73 74 61 63 6B 20  3850 	.ascii "stack blown"
        62 6C 6F 77 6E
   00B6 0A                 3851 	.db 0x0A
   00B7 00                 3852 	.db 0x00
   00B8                    3853 __str_7:
   00B8 70 64 61 74 61 20  3854 	.ascii "pdata canary changed"
        63 61 6E 61 72 79
        20 63 68 61 6E 67
        65 64
   00CC 0A                 3855 	.db 0x0A
   00CD 00                 3856 	.db 0x00
   00CE                    3857 __str_8:
   00CE 6F 76 65 72 73 69  3858 	.ascii "oversized tdm packet"
        7A 65 64 20 74 64
        6D 20 70 61 63 6B
        65 74
   00E2 00                 3859 	.db 0x00
   00E3                    3860 __str_9:
   00E3 73 69 6C 65 6E 63  3861 	.ascii "silence_period: %u"
        65 5F 70 65 72 69
        6F 64 3A 20 25 75
   00F5 0A                 3862 	.db 0x0A
   00F6 00                 3863 	.db 0x00
   00F7                    3864 __str_10:
   00F7 74 78 5F 77 69 6E  3865 	.ascii "tx_window_width: %u"
        64 6F 77 5F 77 69
        64 74 68 3A 20 25
        75
   010A 0A                 3866 	.db 0x0A
   010B 00                 3867 	.db 0x00
   010C                    3868 __str_11:
   010C 6D 61 78 5F 64 61  3869 	.ascii "max_data_packet_length: %u"
        74 61 5F 70 61 63
        6B 65 74 5F 6C 65
        6E 67 74 68 3A 20
        25 75
   0126 0A                 3870 	.db 0x0A
   0127 00                 3871 	.db 0x00
                           3872 	.area XINIT   (CODE)
                           3873 	.area CABS    (ABS,CODE)
